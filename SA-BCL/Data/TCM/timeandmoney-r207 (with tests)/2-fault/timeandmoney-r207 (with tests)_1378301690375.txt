#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
com.domainlanguage.money.ProrationTest:testAllocate1()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver2()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver10()V PASSED
com.domainlanguage.money.ProrationTest:testProrateZeroTotal()V PASSED
com.domainlanguage.money.ProrationTest:testDistributeRemainder()V PASSED
com.domainlanguage.money.ProrationTest:testPartOfWhole()V PASSED
com.domainlanguage.money.ProrationTest:testSumMoney()V PASSED
com.domainlanguage.money.ProrationTest:testProrateTotalIndivisibleBy3()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOnlyOneShortOfEven()V PASSED
com.domainlanguage.time.CalendarDateTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarDateTest:testComparison()V PASSED
com.domainlanguage.time.CalendarDateTest:testStartAsTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testAsTimeInterval()V PASSED
com.domainlanguage.time.CalendarDateTest:testFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testDayOfWeek()V PASSED
com.domainlanguage.time.CalendarDateTest:testPreviousDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testConversionToJavaUtil()V PASSED
com.domainlanguage.time.CalendarDateTest:testToString()V PASSED
com.domainlanguage.time.CalendarDateTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarDateTest:testNextDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testMonth()V PASSED
com.domainlanguage.time.TimePointTest:testSerialization()V PASSED
com.domainlanguage.time.TimePointTest:testEquals()V PASSED
com.domainlanguage.time.TimePointTest:testCompare()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimePointTest:testNextDay()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithDefaultTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testNotIgnoringMinuteParameter()V PASSED
com.domainlanguage.time.TimePointTest:testPotentialProblemDueToOldUsageOf_Duration_toBaseUnitsUsage()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testStringFormat()V PASSED
com.domainlanguage.time.TimePointTest:testAsJavaUtilDate()V PASSED
com.domainlanguage.time.TimePointTest:testBackToMidnight()V PASSED
com.domainlanguage.time.TimePointTest:testFromString()V PASSED
com.domainlanguage.time.TimePointTest:testEqualsOverYearMonthDay()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfter()V PASSED
com.domainlanguage.time.TimePointTest:testIncrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testDecrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfterPeriod()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimePointTest:testAtWithTimeZone()V PASSED
com.domainlanguage.time.HourOfDayTest:test24IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test24GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test12GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12BadAmPm()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.HourOfDayTest:test24Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:test12Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.NominalTimeTest:testConvertNominalTimeToTimePoint()V PASSED
com.domainlanguage.time.NominalTimeTest:testCombineNominalTimes()V PASSED
com.domainlanguage.base.RatioTest:testBigDecimalRatio()V PASSED
com.domainlanguage.base.RatioTest:testLongRatio()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyNumerator()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyByRatio()V PASSED
com.domainlanguage.base.RatioTest:testEquals()V PASSED
com.domainlanguage.time.DateSpecificationTest:testFixedDate()V PASSED
com.domainlanguage.time.DateSpecificationTest:testNthWeekdayInMonth()V PASSED
com.domainlanguage.time.DateSpecificationTest:testSelectFirstFromInterval()V PASSED
com.domainlanguage.time.DateSpecificationTest:testIterateThroughInterval()V PASSED
com.domainlanguage.time.TimeUnitTest:testSerialization()V PASSED
com.domainlanguage.time.TimeUnitTest:testComparison()V PASSED
com.domainlanguage.time.TimeUnitTest:testToString()V PASSED
com.domainlanguage.time.TimeUnitTest:testConvertibleToMilliseconds()V PASSED
com.domainlanguage.time.TimeUnitTest:testJavaCalendarConstantForBaseType()V PASSED
com.domainlanguage.time.TimeUnitTest:testIsConvertableTo()V PASSED
com.domainlanguage.time.TimeUnitTest:testNextFinerUnit()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testInsertedOutOfOrder()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testOverlapping()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testIterate()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testGaps()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testExtent()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingScalingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRounding()V PASSED
com.domainlanguage.util.ImmutableIteratorTest:testRemove()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testElapsedBusinessDays()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testIsWeekend()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testIsHoliday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsBusinessDay()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testNearestBusinessDay()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testBusinessDaysIterator()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testPlusBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusNonBusinessDayZero()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testMinusNonBusinessDayZero()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekend()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDayReverseIterator()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testSerialization()V FAILED junit.framework.AssertionFailedError 138 
com.domainlanguage.time.TimeIntervalTest:testIntersection()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSubintervalIterator()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testLength()V PASSED
com.domainlanguage.time.TimeIntervalTest:testEverFrom()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testBeforeClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testAfterClosed()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testIncludesClosed()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testBeforeOpen()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testAfterOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesOpen()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testIncludesHalfOpen()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationFrom()V PASSED
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationUntil()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDefaultFromPoints()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testDefaultFromDuration()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.TimeIntervalTest:testEverUntil()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.intervals.IntervalMapTest:testLookup()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testRemove()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteOverlap()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMiddle()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMultiple()V PASSED
com.domainlanguage.time.TimeOfDayTest:testEquals()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetHour()V PASSED
com.domainlanguage.time.TimeOfDayTest:testHashCode()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnStartOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnMiddleOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnEndOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetMinute()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.SystemClockTest:testSystemClockTimeSource()V PASSED
com.domainlanguage.time.TimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.time.TimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.time.TimeRateTest:testEquals()V PASSED
com.domainlanguage.time.TimeRateTest:testRounding()V PASSED
com.domainlanguage.util.VerifyPersistentMappingTest:test()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testComplements()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEverFromToString()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEquals()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysAdd()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testLength()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testTranslationToTimeInterval()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSingleDateCalendarIntervalCompare()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testSimple()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testIllegalLessThanZero()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testGreaterThan()V PASSED
com.domainlanguage.intervals.IntervalTest:testAbstractCreation()V PASSED
com.domainlanguage.intervals.IntervalTest:testSerialization()V PASSED
com.domainlanguage.intervals.IntervalTest:testOpenInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersects()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersection()V PASSED
com.domainlanguage.intervals.IntervalTest:testGreaterOfLowerLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testLesserOfUpperLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testCoversInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEqual()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsSingleElement()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForEmptyIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testToString()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsBelow()V PASSED
com.domainlanguage.intervals.IntervalTest:testIncludes()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsEmpty()V PASSED
com.domainlanguage.intervals.IntervalTest:testGap()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjointAdjacentOpen()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapLeft()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapRight()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementAdjacentClosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosing()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedEndPoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForOnePointIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedOpen()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testNISTTimeSource()V PASSED
com.domainlanguage.time.DurationTest:testSerialization()V PASSED
com.domainlanguage.time.DurationTest:testAddMillisecondsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testAddMonthsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMonthsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testAddToCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testConversionToBaseUnits()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedString()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromTimePoint()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.DurationTest:testStartingFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testNormalizedUnit()V PASSED
com.domainlanguage.time.DurationTest:testEquals()V PASSED
com.domainlanguage.time.DurationTest:testToString()V PASSED
com.domainlanguage.time.DurationTest:testDivide()V PASSED
com.domainlanguage.time.DurationTest:testCompare()V PASSED
com.domainlanguage.time.DurationTest:testAdd()V PASSED
com.domainlanguage.time.DurationTest:testSubtract()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMillisecondsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedStringMonthBased()V PASSED
com.domainlanguage.timeutil.ClockTest:testNow()V PASSED
com.domainlanguage.timeutil.ClockTest:testToday()V PASSED
com.domainlanguage.timeutil.ClockTest:testNowDoesntBreak()V PASSED
com.domainlanguage.timeutil.ClockTest:testTodayWithoutTimeZone()V PASSED
com.domainlanguage.money.MoneyTest:testSerialization()V PASSED
com.domainlanguage.money.MoneyTest:testCreationFromDouble()V PASSED
com.domainlanguage.money.MoneyTest:testConstructor()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplyRounding()V PASSED
com.domainlanguage.money.MoneyTest:testMinimumIncrement()V PASSED
com.domainlanguage.money.MoneyTest:testDivisionByMoney()V PASSED
com.domainlanguage.money.MoneyTest:testCloseNumbersNotEqual()V PASSED
com.domainlanguage.money.MoneyTest:testEqualsNull()V PASSED
com.domainlanguage.money.MoneyTest:testPositiveNegative()V PASSED
com.domainlanguage.money.MoneyTest:testSubtraction()V PASSED
com.domainlanguage.money.MoneyTest:testApplyRatio()V PASSED
com.domainlanguage.money.MoneyTest:testIncremented()V PASSED
com.domainlanguage.money.MoneyTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTest:testYen()V PASSED
com.domainlanguage.money.MoneyTest:testDivide()V PASSED
com.domainlanguage.money.MoneyTest:testMultiply()V PASSED
com.domainlanguage.money.MoneyTest:testCompare()V PASSED
com.domainlanguage.money.MoneyTest:testHash()V PASSED
com.domainlanguage.money.MoneyTest:testNegation()V PASSED
com.domainlanguage.money.MoneyTest:testPrint()V PASSED
com.domainlanguage.money.MoneyTest:testRound()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplicationWithExplicitRounding()V PASSED
com.domainlanguage.money.MoneyTest:testAdditionOfDifferentCurrencies()V PASSED
com.domainlanguage.money.MoneyTest:testDifferentCurrencyNotEqual()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
com.domainlanguage.intervals.Interval:hasUpperLimit()Z
com.domainlanguage.time.TimePoint:TimePoint(J)V
com.domainlanguage.time.FixedDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:value(ILjava.lang.String;)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeInterval:everFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarMinute:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeUnit:descendingUnitsForDisplay()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.TimeOfDay:getHour()I
com.domainlanguage.time.BusinessCalendarTest:businessCalendar()Lcom.domainlanguage.time.BusinessCalendar;
com.domainlanguage.time.BusinessCalendar:plusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.tests.CannedResponseServer:getPort()I
com.domainlanguage.time.TimeInterval:closed(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarDate:through(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:hours(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalLimit:upper(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.time.TimePoint:compareTo(Ljava.lang.Object;)I | CONDITION | 4784 | if (x) -> if (!x)
com.domainlanguage.timeutil.SystemClock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.FloatingDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:leftComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:at(IIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:compareTo(Ljava.lang.Object;)I
com.domainlanguage.intervals.Interval:over(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:isSameDayAs(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Z
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.money.Money:dividedBy(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalLimit:getValue()Ljava.lang.Comparable;
com.domainlanguage.time.CalendarDate:previousDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:nextBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:businessDaysOnly(Ljava.util.Iterator;)Ljava.util.Iterator;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;)Ljava.math.BigDecimal;
com.domainlanguage.time.TimePoint:nextDay()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:toString()Ljava.lang.String;
com.domainlanguage.util.ClassGenerator:ClassGenerator(Lcom.domainlanguage.util.ClassFilter;)V
com.domainlanguage.time.TimeUnit:TimeUnit(Lcom.domainlanguage.time.TimeUnit.Type;Lcom.domainlanguage.time.TimeUnit.Type;I)V
com.domainlanguage.time.BusinessCalendar.1:nextBusinessDate()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.timeutil.Clock:setDefaultTimeZone(Ljava.util.TimeZone;)V
com.domainlanguage.time.CalendarDate:CalendarDate(III)V
com.domainlanguage.time.CalendarMinute:CalendarMinute(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)V
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:compareTo(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.time.Duration:seconds(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:isClosed()Z
com.domainlanguage.time.Duration:weeks(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.timeutil.NISTClient.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:from(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:dividedBy(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalSequence:extent()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.BusinessCalendar:minusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;II)Ljava.math.BigDecimal;
com.domainlanguage.time.CalendarMinute:asTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:hasSameCurrencyAs(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.HourOfDay:isAfter(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.MinuteOfHour:isAfter(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.intervals.Interval:Interval(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)V
com.domainlanguage.time.TimeInterval:start()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:emptyOfSameType()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:lengthInMonthsInt()I
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:toString()Ljava.lang.String;
com.domainlanguage.intervals.LinearIntervalMap:remove(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.intervals.LinearIntervalMap:containsKey(Ljava.lang.Comparable;)Z
com.domainlanguage.intervals.IntervalLimit:IntervalLimit(ZZLjava.lang.Comparable;)V
com.domainlanguage.time.TimeInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.BusinessCalendar.1:next()Ljava.lang.Object;
com.domainlanguage.money.Money:dollars(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:toString()Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:includesUpperLimit()Z
com.domainlanguage.time.TimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.ConcreteCalendarInterval:from(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.ConcreteCalendarInterval;
com.domainlanguage.tests.CannedResponseServer:getHostName()Ljava.lang.String;
com.domainlanguage.money.Money:applying(Lcom.domainlanguage.base.Ratio;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[J)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:atMidnight(IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.HourOfDay:value()I
com.domainlanguage.time.TimeUnit:descendingUnits()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.timeutil.Clock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.CalendarMinute:equals(Lcom.domainlanguage.time.CalendarMinute;)Z
com.domainlanguage.intervals.Interval:covers(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;JJ)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:minimumIncrement()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:atMidnightGMT(III)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:euros(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.DateSpecification:fixed(II)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.TimeUnit:javaCalendarConstantForBaseType()I
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Money:hashCode()I
com.domainlanguage.time.TimeRate:TimeRate(Ljava.lang.String;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.money.Money:assertHasSameCurrencyAs(Lcom.domainlanguage.money.Money;)V
com.domainlanguage.time.CalendarInterval:includesLowerLimit()Z
com.domainlanguage.time.TimePoint:at(IIIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:inBaseUnits()J
com.domainlanguage.time.BusinessCalendar:isWeekend(Lcom.domainlanguage.time.CalendarDate;)Z | OPERATOR | 1449 | == -> >
com.domainlanguage.intervals.Interval:isAbove(Ljava.lang.Comparable;)Z
com.domainlanguage.base.Ratio:decimalValue(II)Ljava.math.BigDecimal;
com.domainlanguage.time.FixedDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.timeutil.ClockTest.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.MinuteOfHour:value(I)Lcom.domainlanguage.time.MinuteOfHour;
com.domainlanguage.intervals.Interval:includesLowerLimit()Z
com.domainlanguage.intervals.LinearIntervalMap:LinearIntervalMap()V
com.domainlanguage.money.Money:isGreaterThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.TimePoint:backToMidnight(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.LinearIntervalMap:directPut(Ljava.util.List;Ljava.lang.Object;)V
com.domainlanguage.time.TimePoint:asJavaCalendar(Ljava.util.TimeZone;)Ljava.util.Calendar;
com.domainlanguage.time.TimePointTest:javaUtilDateDec20_2003()Ljava.util.Date;
com.domainlanguage.time.TimeOfDay:on(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.timeutil.Clock:today()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:asTimeInterval(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.BusinessCalendar:nextNumberOfBusinessDays(ILjava.util.Iterator;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:parseGMTFrom(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:convertedTo24hour(ILjava.lang.String;)I
com.domainlanguage.money.Money:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.MinuteOfHour:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:Interval(Lcom.domainlanguage.intervals.IntervalLimit;Lcom.domainlanguage.intervals.IntervalLimit;)V
com.domainlanguage.money.Money:Money(Ljava.math.BigDecimal;Ljava.util.Currency;)V
com.domainlanguage.time.CalendarInterval:lengthInDaysInt()I
com.domainlanguage.time.CalendarInterval:lengthInMonths()Lcom.domainlanguage.time.Duration;
com.domainlanguage.timeutil.NISTClient:timeSource(Ljava.lang.String;I)Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.money.Money:dividedBy(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.Money:negated()Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalSequence:IntervalSequence()V
com.domainlanguage.base.Ratio:Ratio(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)V
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.FloatingDateSpecification:FloatingDateSpecification(III)V
com.domainlanguage.intervals.Interval:isSingleElement()Z
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:daysHoursMinutesSecondsMilliseconds(IIIIJ)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeUnit:nextFinerUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.TimeUnit:toString(J)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:startingFrom(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.Interval:closed(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.BusinessCalendar.1:hasNext()Z
com.domainlanguage.base.Ratio:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.tests.SerializationTester:assertCanBeSerialized(Ljava.lang.Object;)V
com.domainlanguage.money.Money:getCurrency()Ljava.util.Currency;
com.domainlanguage.time.HourOfDay:convertTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.CalendarInterval:daysInReverseIterator()Ljava.util.Iterator;
com.domainlanguage.time.TimeInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.money.Money:per(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.MoneyTimeRate;
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:from(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:toString(Ljava.lang.String;Ljava.util.TimeZone;)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:month(II)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeUnit:isConvertibleToMilliseconds()Z
com.domainlanguage.money.Money:isZero()Z
com.domainlanguage.time.TimePoint:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:inclusive(IIIIII)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarDate:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:date(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Proration:distributeRemainderOver([Lcom.domainlanguage.money.Money;Lcom.domainlanguage.money.Money;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Proration:sum([Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:isBefore(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:plus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.Duration:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarDate:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.Duration:Duration(JLcom.domainlanguage.time.TimeUnit;)V
com.domainlanguage.time.CalendarDate:startAsTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:months(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:atGMT(IIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarMinute:dateHourAndMinute(IIIII)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.intervals.LinearIntervalMap:containsIntersectingKey(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.Duration:quarters(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:asJavaUtilDate()Ljava.util.Date;
com.domainlanguage.time.CalendarMinute:dateAndTimeOfDay(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.CalendarInterval.2:next()Ljava.lang.Object;
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeOfDay:asTimePointGiven(Lcom.domainlanguage.time.CalendarDate;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:everFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.timeutil.Clock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:preceding(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimeUnit:baseUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.money.Money:isPositive()Z
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.intervals.Interval:isBelow(Ljava.lang.Comparable;)Z
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:toNormalizedString([Lcom.domainlanguage.time.TimeUnit;)Ljava.lang.String;
com.domainlanguage.time.TimeInterval:end()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.AnnualDateSpecification.1:hasNext()Z
com.domainlanguage.timeutil.NISTClient:now(Ljava.lang.String;I)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeOfDay:hashCode()I
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarInterval:equals(Lcom.domainlanguage.time.CalendarInterval;)Z
com.domainlanguage.intervals.Interval:greaterOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.ConcreteCalendarInterval:ConcreteCalendarInterval(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)V
com.domainlanguage.time.CalendarInterval.2:hasNext()Z
com.domainlanguage.time.Duration:addAmountToTimePoint(JLcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:year(I)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.HourOfDay:HourOfDay(I)V
com.domainlanguage.money.Money:isNegative()Z
com.domainlanguage.money.Money:dividedBy(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.base.Ratio:of(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimePoint:from(J)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval.2:hasNext()Z
com.domainlanguage.time.TimeInterval:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:dividedBy(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.MoneyTimeRate:MoneyTimeRate(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.Duration:toNormalizedString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:toString(Ljava.lang.String;)Ljava.lang.String;
com.domainlanguage.time.TimePoint:until(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.HourOfDay:hashCode()I
com.domainlanguage.time.TimePoint:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.MinuteOfHour:hashCode()I
com.domainlanguage.time.CalendarDate:_from(Ljava.util.Calendar;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:plusMonths(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:isBefore(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.TimePoint:at12hr(IIIILjava.lang.String;IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:month()Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:toString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:from(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Proration:sum([Ljava.math.BigDecimal;)Ljava.math.BigDecimal;
com.domainlanguage.time.Duration:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:isAfter(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarInterval.1:hasNext()Z
com.domainlanguage.time.ConcreteCalendarInterval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.timeutil.Clock:setTimeSource(Lcom.domainlanguage.time.TimeSource;)V
com.domainlanguage.time.Duration:days(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:isConvertibleTo(Lcom.domainlanguage.time.Duration;)Z
com.domainlanguage.intervals.Interval:intersects(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.Duration:assertQuantityPositiveOrZero(J)V
com.domainlanguage.money.Money:euros(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:greaterOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.time.TimeUnit:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeUnit.Type:Type(Ljava.lang.String;)V
com.domainlanguage.time.TimeOfDay:hourAndMinute(II)Lcom.domainlanguage.time.TimeOfDay;
com.domainlanguage.time.AnnualDateSpecification:iterateOver(Lcom.domainlanguage.time.CalendarInterval;)Ljava.util.Iterator;
com.domainlanguage.time.TimeUnit:toString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_month()I
com.domainlanguage.timeutil.SystemClock.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time._HolidayDates:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.TimeOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:isLessThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.TimePoint:from(Ljava.util.Date;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeInterval:everPreceding(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Proration:defaultScaleForIntermediateCalculations(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.time.CalendarInterval:end()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Proration:dividedEvenlyIntoParts(Lcom.domainlanguage.money.Money;I)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:at(Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.intervals.Interval:Interval()V
com.domainlanguage.intervals.Interval:includesUpperLimit()Z
com.domainlanguage.intervals.LinearIntervalMap:intersectingKeys(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.CalendarInterval.3:next()Ljava.lang.Object;
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[Ljava.math.BigDecimal;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:nearestBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:dayOfWeek()I
com.domainlanguage.intervals.Interval:lesserOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.money.Money:minus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval.1:hasNext()Z
com.domainlanguage.intervals.Interval:hashCode()I
com.domainlanguage.intervals.Interval:rightComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.AnnualDateSpecification:firstOccurrenceIn(Lcom.domainlanguage.time.CalendarInterval;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:isHoliday(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimeInterval:intersect(Lcom.domainlanguage.time.TimeInterval;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimePoint:calendarDate(Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:of(JLcom.domainlanguage.time.TimeUnit;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:addAmountToCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.TimePoint:parseFrom(Ljava.lang.String;Ljava.lang.String;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:from(Ljava.util.Calendar;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;I)Ljava.math.BigDecimal;
com.domainlanguage.time.FloatingDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeOfDay:getMinute()I
com.domainlanguage.time.CalendarInterval.3:hasNext()Z
com.domainlanguage.intervals.LinearIntervalMap:findKeyIntervalContaining(Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:times(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:atGMT(IIIIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:compareTo(Lcom.domainlanguage.time.CalendarDate;)I
com.domainlanguage.intervals.Interval:complementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.money.Money:getAmount()Ljava.math.BigDecimal;
com.domainlanguage.time.TimeOfDay:TimeOfDay(II)V
com.domainlanguage.money.Proration:ratios([Ljava.math.BigDecimal;)[Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.HourOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.LinearIntervalMap:get(Ljava.lang.Comparable;)Ljava.lang.Object;
com.domainlanguage.time.BusinessCalendar:addHolidays(Ljava.util.Set;)V
com.domainlanguage.time.TimeOfDay:equals(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarInterval:everPreceding(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.HourOfDay:equals(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.base.Ratio:times(Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.intervals.Interval:isOpen()Z
com.domainlanguage.time.Duration:years(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarInterval:inclusive(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.MinuteOfHour:equals(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.intervals.Interval:isEmpty()Z
com.domainlanguage.base.Ratio:of(JJ)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.intervals.Interval:gap(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.MoneyTimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:toString(Ljava.util.Locale;)Ljava.lang.String;
com.domainlanguage.timeutil.SystemClock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.BusinessCalendar:isBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarDate:equals(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeRate:TimeRate(Ljava.math.BigDecimal;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.TimeInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.base.Ratio:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.MinuteOfHour:MinuteOfHour(I)V
com.domainlanguage.intervals.Interval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:lesserOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.intervals.Interval:includes(Ljava.lang.Comparable;)Z
com.domainlanguage.money.Money:equals(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.base.Ratio:equals(Lcom.domainlanguage.base.Ratio;)Z
com.domainlanguage.intervals.Interval:intersect(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.timeutil.Clock:defaultTimeZone()Ljava.util.TimeZone;
com.domainlanguage.time.Duration:subtractAmountFromCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.AnnualDateSpecification.1:next()Ljava.lang.Object;
com.domainlanguage.time.TimeRate:TimeRate(DLcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.IntervalSequence:iterator()Ljava.util.Iterator;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.IntervalLimit:isClosed()Z
com.domainlanguage.money.Money:incremented()Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalSequence:add(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.CalendarDate:nextDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:milliseconds(J)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:equals(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimeInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeUnit:isConvertibleTo(Lcom.domainlanguage.time.TimeUnit;)Z
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_day()I
com.domainlanguage.time.FixedDateSpecification:FixedDateSpecification(II)V
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarDate:asJavaCalendarUniversalZoneMidnight()Ljava.util.Calendar;
com.domainlanguage.time.Duration:toString()Ljava.lang.String;
com.domainlanguage.time.ConcreteCalendarInterval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.intervals.Interval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.BusinessCalendar:BusinessCalendar()V
com.domainlanguage.time.Duration:assertNotConvertible(Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.IntervalSequence:gaps()Lcom.domainlanguage.intervals.IntervalSequence;
com.domainlanguage.intervals.LinearIntervalMap:put(Lcom.domainlanguage.intervals.Interval;Ljava.lang.Object;)V
com.domainlanguage.intervals.IntervalSequence:isEmpty()Z
com.domainlanguage.timeutil.NISTClient:asTimePoint(Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:times(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.HourOfDay:value(I)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.Interval:open(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:start()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:times(I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_year()I
com.domainlanguage.time.TimeInterval:open(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:minutes(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:hashCode()I
com.domainlanguage.time.TimeUnit:getFactor()I
com.domainlanguage.time.BusinessCalendar:getElapsedBusinessDays(Lcom.domainlanguage.time.CalendarInterval;)I
com.domainlanguage.time.DateSpecification:nthOccuranceOfWeekdayInMonth(III)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.TimeOfDay:isAfter(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.MinuteOfHour:isBefore(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.money.MoneyTimeRate:equals(Lcom.domainlanguage.money.MoneyTimeRate;)Z
com.domainlanguage.time.BusinessCalendar:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.TimeOfDay:isBefore(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.intervals.IntervalLimit:lower(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:TimeInterval(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)V
com.domainlanguage.time.CalendarDate:plusDays(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:asJavaCalendar()Ljava.util.Calendar;
com.domainlanguage.time.TimeUnit.Type:equals(Lcom.domainlanguage.time.TimeUnit.Type;)Z
com.domainlanguage.util.ImmutableIterator:remove()V
com.domainlanguage.intervals.Interval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.MinuteOfHour:value()I
com.domainlanguage.time.Duration:normalizedUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarInterval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeRate:equals(Lcom.domainlanguage.time.TimeRate;)Z
com.domainlanguage.time.TimeRate:scale()I
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:hasLowerLimit()Z
com.domainlanguage.time.Duration:compareTo(Ljava.lang.Object;)I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
55 5 126 2 158 3 316 1 77 1 199 2 249 1 222 1 272 1 42 2 139 2 257 1 85 2 116 1 326 1 119 9 93 4 173 6 287 1 99 2 70 1 26 9 123 1 124 1 216 2 261 1 154 1 155 1 
55 5 126 2 158 3 316 1 199 2 77 1 249 1 222 1 272 1 42 2 139 2 257 1 85 2 116 1 326 1 119 9 93 4 173 6 287 1 99 2 70 1 26 9 123 1 124 1 216 2 261 1 154 1 155 1 
55 6 126 2 158 4 316 1 199 2 77 1 249 1 222 1 272 1 42 2 139 2 257 1 85 2 116 1 326 1 119 10 93 5 173 7 287 1 99 2 70 1 26 10 123 1 124 1 216 2 261 1 154 1 155 1 
55 4 126 2 158 2 316 1 199 2 77 1 249 1 222 1 272 1 42 2 139 2 257 1 85 1 116 1 119 7 93 3 173 4 287 1 99 2 70 1 26 7 123 1 124 1 216 2 261 1 154 1 155 1 
116 1 326 1 55 3 126 1 158 1 119 4 316 1 93 2 199 1 173 3 99 1 42 1 70 1 26 4 123 1 216 1 154 1 85 2 
116 1 55 1 126 1 119 2 316 1 249 1 272 1 42 1 99 1 70 1 26 2 301 1 216 1 62 1 139 1 84 1 
116 1 55 2 158 1 119 3 316 1 93 1 173 1 42 2 70 1 26 3 216 2 139 1 155 1 
55 5 126 1 158 3 316 1 199 1 251 1 42 2 139 1 85 2 116 1 326 1 119 9 49 1 93 4 173 7 99 1 70 1 26 9 124 1 123 1 216 2 261 1 154 1 155 1 
55 5 126 1 158 3 316 1 199 1 251 1 42 2 139 1 85 2 116 1 326 1 119 9 49 1 93 4 173 7 99 1 70 1 26 9 124 1 123 1 216 2 261 1 154 1 155 1 
221 1 138 1 307 1 
156 2 307 1 224 1 
164 1 78 2 1 2 246 2 275 2 247 1 95 2 200 2 
339 1 1 3 246 2 247 1 37 1 271 2 200 3 163 2 58 1 164 1 203 1 78 2 365 1 367 1 59 1 112 1 185 1 275 2 228 1 370 1 372 1 189 1 16 1 232 2 118 1 66 2 95 2 96 1 329 1 194 1 237 1 148 1 356 1 332 1 150 1 180 1 29 2 
170 1 164 1 78 1 1 1 246 1 275 1 146 1 95 1 200 1 207 1 
170 1 220 1 48 1 274 1 145 1 212 1 108 1 1 1 246 1 221 1 369 1 307 1 200 1 40 1 
170 1 78 1 220 2 48 1 212 1 108 1 1 1 246 1 275 1 221 1 369 1 95 1 307 1 200 1 40 2 
336 1 220 1 153 1 259 1 40 1 
336 1 220 2 368 1 221 1 307 1 153 1 40 2 30 1 
336 1 220 1 40 1 
170 1 220 1 35 1 246 1 1 1 146 1 95 1 200 1 40 1 164 1 78 1 275 1 153 1 207 1 
307 1 
336 1 220 2 368 1 221 1 307 1 153 1 328 1 40 2 
336 2 190 1 338 1 220 5 221 1 192 2 307 1 298 1 375 1 40 5 147 1 253 2 213 1 151 1 226 1 368 1 74 2 217 1 153 2 
247 1 138 1 
246 2 1 2 247 2 95 1 109 1 200 2 78 1 275 1 86 1 
17 1 160 1 68 1 
232 1 34 1 1 1 247 1 96 1 271 1 200 1 163 1 194 1 148 1 356 1 150 1 332 1 228 1 370 1 180 1 
282 2 246 5 1 5 247 1 95 4 200 5 78 1 274 1 166 1 275 4 215 1 114 1 86 1 115 1 
170 1 1 2 246 2 275 2 146 1 22 1 95 2 200 2 
232 1 282 1 246 1 1 2 96 1 95 1 271 1 200 2 68 1 194 1 163 1 148 1 356 1 166 1 332 1 150 1 275 1 228 1 370 1 180 1 
78 1 282 1 1 3 246 3 275 3 247 1 95 3 200 3 
170 1 1 1 246 1 275 1 146 1 95 1 200 1 
170 1 78 1 1 1 246 1 275 1 95 1 109 1 200 1 86 1 
339 1 106 1 220 1 1 4 246 3 108 1 247 1 270 1 271 1 200 4 40 1 163 1 58 1 164 1 203 1 78 2 365 1 367 1 166 1 59 1 112 1 275 3 228 1 369 1 370 1 86 1 189 1 170 1 16 1 232 1 118 1 48 1 66 2 282 1 212 1 96 1 95 3 194 1 148 1 356 1 332 1 150 1 180 1 29 1 
274 1 282 1 1 2 246 2 275 1 247 1 95 1 200 2 114 1 
170 1 220 1 48 1 282 2 212 1 246 3 1 3 108 1 95 3 270 1 307 1 200 3 40 1 25 1 78 1 166 1 275 3 369 1 86 1 
78 1 282 1 1 2 246 2 275 2 95 2 160 1 200 2 86 1 68 1 
232 1 1 1 247 1 96 1 271 1 200 1 163 1 194 1 148 1 356 1 150 1 332 1 228 1 370 1 180 1 
210 1 232 1 1 1 247 1 130 1 96 1 271 1 200 1 163 1 194 1 148 1 356 1 332 1 228 1 370 1 
325 1 17 1 16 1 339 2 118 1 66 2 160 1 98 1 235 1 68 1 202 1 58 1 203 1 365 1 367 1 12 1 103 1 379 1 29 2 
170 1 108 1 1 1 246 1 275 1 95 1 22 1 200 1 
347 1 196 1 
347 1 196 1 
3 1 140 1 
3 1 140 1 
3 1 140 1 
347 1 56 1 196 1 
347 1 56 1 196 1 
79 1 347 1 196 1 
288 1 347 2 293 1 3 1 196 2 140 1 
347 1 56 1 196 1 
347 1 214 1 196 1 
347 1 214 1 196 1 
347 1 214 1 196 1 
54 1 220 1 246 2 1 2 247 1 200 2 40 1 8 1 41 1 347 1 79 1 167 1 275 2 278 1 352 1 373 1 95 2 286 1 238 1 312 1 102 1 196 1 333 1 241 1 
291 1 293 1 220 2 171 2 307 1 6 1 286 2 40 2 252 1 41 3 110 1 299 1 347 2 238 2 167 1 82 1 102 2 312 2 196 2 
126 1 199 1 99 1 
126 1 301 1 99 1 
311 1 126 3 137 1 301 1 317 1 199 2 
311 1 126 2 295 1 301 1 317 1 199 1 
311 1 126 2 301 1 199 1 317 2 
156 3 336 1 182 1 338 3 315 1 220 5 0 1 2 2 221 1 162 2 298 1 224 1 40 5 253 1 226 2 368 1 350 1 88 1 352 1 283 2 192 1 98 1 307 2 100 1 195 1 333 1 74 1 334 1 241 1 379 1 153 4 265 1 
156 9 336 6 182 3 338 8 315 3 220 9 0 3 128 1 221 1 162 6 298 1 224 3 40 9 321 1 253 2 226 6 368 1 277 5 350 2 186 1 352 4 20 1 283 6 192 2 98 3 307 5 259 5 239 1 151 1 195 1 74 2 379 3 153 7 358 1 265 2 
156 4 182 1 338 3 220 3 315 1 0 1 221 1 2 1 162 2 224 2 40 3 253 1 226 2 350 1 88 1 352 1 283 2 192 1 98 1 307 3 151 1 334 1 74 1 379 1 153 2 265 1 
156 7 182 2 338 5 220 4 315 2 0 2 221 1 2 2 162 4 224 3 40 4 321 1 253 1 226 4 350 1 186 1 88 1 352 2 283 4 192 1 98 2 307 4 239 1 151 1 74 1 334 1 379 2 153 3 265 1 
138 1 370 1 236 1 
23 1 370 1 
240 1 
148 1 332 1 370 1 
370 1 89 1 
332 1 370 1 
148 1 332 1 80 1 370 3 132 1 236 2 
325 3 339 3 157 1 0 1 129 1 296 1 327 1 330 1 300 1 51 2 254 1 125 1 323 1 379 1 103 2 372 4 29 7 
325 3 339 3 157 1 0 1 129 1 296 1 327 1 330 1 300 1 51 2 254 1 125 1 323 1 379 1 103 2 372 4 29 7 
325 3 339 3 157 1 0 1 129 1 296 1 327 1 344 1 330 1 300 1 51 2 254 1 125 1 323 1 379 1 103 2 372 4 29 7 
268 1 313 1 182 3 314 3 339 15 157 1 315 3 127 1 0 4 129 1 296 2 342 1 58 1 300 2 365 1 348 1 254 5 323 1 302 1 372 16 16 1 325 10 231 1 118 1 66 2 191 4 327 2 98 3 330 1 51 3 125 2 379 4 103 5 29 31 
313 1 339 4 157 1 0 1 129 1 296 1 135 1 58 2 365 2 300 1 254 1 372 5 16 2 325 4 118 2 66 4 327 1 50 1 330 1 51 2 125 1 379 1 103 3 29 9 
55 1 183 1 126 2 316 1 199 1 271 1 42 1 163 1 366 1 204 1 301 1 137 1 205 1 139 1 14 1 116 1 15 1 232 1 119 2 96 1 285 1 173 1 99 1 309 1 70 1 356 1 26 2 216 1 377 1 53 1 
55 1 126 2 316 1 199 1 271 1 42 1 163 1 366 1 204 1 137 1 301 1 205 1 139 1 87 1 14 1 116 1 232 1 354 1 119 3 233 1 96 1 285 1 173 2 99 1 309 1 356 1 26 3 216 1 377 1 53 1 
116 1 55 1 232 1 126 2 119 2 354 1 316 1 199 1 96 1 271 1 285 1 173 2 99 1 309 1 163 1 356 1 204 1 366 1 26 2 137 1 301 1 205 1 139 1 53 1 87 1 
230 1 143 1 232 1 119 1 233 1 96 1 361 1 161 1 271 1 285 2 309 2 42 1 163 1 356 1 26 1 332 1 376 1 205 2 139 2 216 1 228 1 303 1 370 1 
183 1 126 2 199 1 271 1 42 1 163 1 366 1 204 1 301 1 137 1 205 1 139 1 14 1 232 1 354 1 119 1 96 1 285 1 99 1 309 1 70 1 356 1 26 1 216 1 377 1 53 1 
371 1 
243 1 156 2 336 6 338 2 340 1 246 1 1 1 108 1 161 1 250 1 298 1 200 1 163 2 9 1 253 1 350 1 170 1 172 2 212 1 306 2 307 2 120 1 69 2 355 4 356 1 357 1 74 1 266 2 267 1 32 1 220 5 221 1 362 1 38 2 271 2 364 1 224 2 40 5 136 1 274 1 368 3 226 2 228 2 369 1 370 1 230 1 232 2 48 1 145 1 192 1 193 2 96 1 97 2 332 1 290 1 
170 1 243 1 336 1 220 2 48 1 145 1 340 1 212 1 108 1 246 1 1 1 362 1 97 1 200 1 40 2 9 1 355 2 274 1 369 1 290 1 
170 1 243 1 336 1 220 3 48 1 145 1 340 1 212 1 108 1 246 1 1 1 221 1 362 1 307 1 200 1 328 1 40 3 9 1 355 3 274 1 368 1 369 1 290 1 266 1 
170 1 243 1 336 2 220 3 48 1 145 1 340 1 212 1 108 1 246 1 1 1 306 1 362 1 97 1 200 1 328 1 40 3 9 1 355 3 274 1 368 1 369 1 290 1 266 1 
243 1 336 2 220 3 35 1 340 1 246 2 1 2 108 1 221 1 362 1 200 2 40 3 9 1 164 1 78 1 274 1 275 1 368 1 369 1 207 1 258 1 170 2 48 1 145 1 212 1 146 1 95 1 306 1 307 1 97 1 328 1 355 3 290 1 266 1 
243 1 156 2 336 4 338 1 340 1 108 1 1 1 246 1 298 1 200 1 9 1 253 1 170 1 212 1 172 2 306 2 307 1 69 2 355 4 74 1 266 2 32 1 220 4 221 1 362 1 38 2 364 1 40 4 224 2 136 1 274 1 226 1 368 2 369 1 48 1 145 1 192 1 193 2 97 2 290 1 
243 1 336 4 32 1 338 1 220 4 340 1 1 1 246 1 108 1 221 1 362 1 38 2 364 1 298 1 200 1 224 2 40 4 9 1 253 1 274 1 10 1 368 2 226 1 369 1 113 1 170 1 48 1 145 1 172 2 212 1 192 1 306 2 193 2 307 1 97 2 175 1 69 2 355 4 74 1 290 1 266 2 
243 1 336 4 338 1 340 1 108 1 246 2 1 2 298 1 200 2 9 1 164 1 10 1 253 1 113 1 207 1 170 2 212 1 172 2 306 2 307 1 175 1 69 2 355 4 74 1 266 2 32 1 220 4 35 1 221 1 362 1 38 2 364 1 40 4 224 2 78 1 274 1 275 1 226 1 368 2 369 1 48 1 145 1 146 1 192 1 95 1 193 2 97 2 290 1 
243 1 156 2 336 4 292 1 338 1 340 1 108 1 246 2 1 2 298 1 200 2 9 1 164 1 253 1 256 2 113 1 207 1 170 2 212 1 306 2 307 1 69 2 355 4 74 1 266 2 32 1 220 4 35 1 221 1 362 1 38 2 40 4 78 1 274 1 275 1 226 1 368 2 369 1 141 1 279 2 48 1 145 1 146 1 192 1 95 1 97 2 52 1 290 1 
243 1 336 5 338 1 340 1 108 1 246 2 1 2 298 1 200 2 9 1 164 1 10 1 253 1 113 1 207 1 170 2 212 1 172 2 306 3 307 1 175 1 69 2 355 5 74 1 266 3 31 1 32 1 220 4 35 1 221 1 362 1 38 2 364 1 40 4 224 2 78 1 274 1 275 1 226 1 368 2 369 1 48 1 145 1 146 1 192 1 95 1 193 2 97 3 290 1 
243 1 31 1 336 5 32 1 338 1 220 4 340 1 1 1 246 1 108 1 221 1 362 1 38 2 364 1 298 1 200 1 224 2 40 4 9 1 253 1 274 1 10 1 368 2 226 1 369 1 113 1 170 1 48 1 145 1 172 2 212 1 192 1 193 2 306 3 307 1 97 3 175 1 69 2 355 5 74 1 290 1 266 3 
243 1 156 2 336 4 338 1 340 1 108 1 1 2 246 2 298 1 200 2 9 1 164 1 253 1 256 2 207 1 170 2 212 1 306 2 307 1 69 2 355 4 74 1 266 2 32 1 220 4 35 1 221 1 362 1 38 2 40 4 136 1 78 1 274 1 275 1 226 1 368 2 369 1 141 1 279 2 48 1 145 1 146 1 192 1 95 1 97 2 290 1 
339 3 157 1 0 1 129 1 296 1 247 2 160 1 58 1 203 1 300 1 365 1 367 1 138 1 12 1 372 3 16 1 325 2 17 1 118 1 66 2 68 1 330 1 51 1 103 2 379 1 29 6 
182 3 339 7 314 3 269 1 315 3 294 1 0 3 247 1 318 1 160 3 58 2 203 1 365 2 367 2 59 1 348 2 254 2 185 1 372 10 16 2 17 13 325 2 90 1 231 1 118 2 66 4 191 4 98 1 68 13 331 1 379 1 29 17 
339 1 34 1 1 2 246 1 247 1 160 1 271 1 200 2 163 1 58 1 203 1 365 1 367 1 166 1 59 1 275 1 185 1 228 1 370 1 372 1 16 1 90 1 232 1 118 1 282 1 66 2 96 1 95 1 67 1 194 1 148 1 356 1 332 1 150 1 27 1 262 1 180 1 29 2 
339 2 0 1 246 1 1 2 160 2 200 2 201 1 163 1 58 2 203 2 166 1 59 1 254 2 16 2 17 2 118 2 66 4 68 2 356 1 180 1 29 5 182 1 315 1 271 1 365 2 367 2 275 1 228 1 83 1 370 1 142 1 372 3 324 1 189 1 325 2 90 1 232 1 282 1 95 1 96 1 194 1 148 1 150 1 332 1 335 1 
339 1 1 1 246 1 341 1 131 1 271 7 161 1 200 1 163 8 58 2 203 2 365 2 367 2 59 1 44 1 275 1 185 1 228 2 12 1 229 1 370 3 372 1 230 1 15 1 16 2 232 8 118 2 282 1 66 4 353 1 354 1 95 1 96 2 329 2 310 1 356 2 332 2 178 1 29 2 
182 1 339 2 315 1 0 1 246 1 1 1 160 1 5 1 200 1 58 1 78 1 203 1 365 1 367 1 275 1 86 1 372 1 325 1 17 1 16 1 90 1 118 1 66 2 95 1 98 1 68 1 103 1 379 1 29 3 
325 1 17 1 16 1 182 1 118 1 66 2 0 1 159 1 160 1 68 1 58 1 203 1 365 1 367 1 254 1 12 1 29 2 372 2 
325 1 17 1 16 1 339 2 118 1 66 2 160 1 98 1 68 1 202 1 58 1 203 1 365 1 367 1 12 1 103 1 379 1 29 2 
182 1 339 2 315 1 0 1 160 2 58 1 203 1 365 1 367 1 254 1 12 1 372 2 16 1 17 2 325 2 118 1 66 2 98 1 68 2 379 1 103 1 29 4 
325 1 17 1 16 1 182 1 118 1 353 1 66 2 0 1 159 1 160 1 68 1 58 1 203 1 365 1 367 1 254 1 29 2 372 2 
325 1 17 1 16 1 339 2 118 1 353 1 66 2 160 1 98 1 68 1 202 1 58 1 203 1 365 1 367 1 103 1 379 1 29 2 
325 1 17 1 16 1 182 1 118 1 315 1 353 1 66 2 0 1 160 1 68 1 58 1 203 1 365 1 367 1 254 1 29 2 372 2 
325 1 17 1 16 1 182 1 118 1 315 1 66 2 0 1 160 1 68 1 58 1 203 1 365 1 367 1 254 1 372 2 29 2 
339 1 1 1 247 1 271 1 200 1 163 1 58 1 203 1 365 1 367 1 59 1 185 1 228 1 370 1 372 1 189 1 16 1 232 1 118 1 66 2 96 1 194 1 148 1 356 1 332 1 150 1 180 1 29 2 
339 1 1 1 247 1 130 1 271 1 200 1 163 1 58 1 203 1 365 1 367 1 59 1 185 1 228 1 370 1 372 1 210 1 16 1 232 1 118 1 66 2 96 1 194 1 148 1 356 1 332 1 177 1 29 2 
325 1 17 1 16 1 90 1 182 1 118 1 315 1 66 2 0 1 160 1 68 1 58 1 203 1 365 1 367 1 254 1 29 2 372 2 
182 1 315 1 0 1 1 1 160 1 271 1 200 1 163 1 58 1 203 1 365 1 367 1 254 1 370 1 372 2 189 1 324 1 325 1 17 1 15 1 16 1 232 1 118 1 66 2 96 1 68 1 194 1 148 1 356 1 150 1 332 1 180 1 29 2 
182 1 315 1 0 1 246 1 1 1 248 1 160 1 200 1 58 1 78 1 203 1 365 1 367 1 254 1 275 1 86 1 372 2 325 1 16 1 17 1 90 1 118 1 66 2 95 1 68 1 29 2 
182 3 339 10 314 1 315 3 0 3 343 1 135 1 58 2 365 2 348 1 254 3 255 1 349 1 280 2 372 9 64 1 16 2 325 6 65 1 231 1 118 2 66 4 191 2 98 3 289 1 263 2 103 3 379 3 104 1 29 19 
313 2 182 3 107 1 339 12 314 2 315 3 0 3 343 1 135 1 58 3 365 3 254 2 255 2 280 1 372 14 64 2 325 4 16 3 231 2 118 3 66 6 191 2 21 1 98 2 234 1 284 1 260 1 289 1 263 4 264 1 103 2 379 2 104 1 29 26 
339 21 107 1 157 1 0 5 296 1 343 1 58 3 300 1 348 1 254 4 255 2 168 1 349 1 64 1 16 3 118 3 66 6 21 1 260 1 263 4 264 1 29 41 313 1 182 4 314 3 315 4 129 1 135 1 365 3 280 1 372 20 325 8 231 3 191 4 98 4 284 1 234 1 330 1 51 1 289 1 379 5 103 4 104 1 
313 2 182 4 107 1 339 18 314 3 157 1 315 4 0 5 129 1 296 1 343 1 135 1 58 4 300 1 365 4 348 1 254 3 168 1 255 2 349 1 280 1 372 20 64 1 16 4 325 7 231 3 118 4 66 8 21 1 191 4 98 3 234 1 284 1 330 1 260 1 51 1 289 1 263 4 264 1 103 4 379 4 104 1 29 38 
313 1 182 7 107 1 339 25 314 4 157 1 315 7 294 2 0 8 129 1 296 1 343 1 135 1 58 2 300 1 365 2 348 2 254 7 255 1 280 1 372 27 64 1 16 2 325 14 231 2 118 2 66 4 21 1 191 4 98 7 234 1 284 1 330 1 260 1 51 1 289 1 263 4 264 1 103 7 379 8 104 1 29 52 
299 1 291 1 347 1 293 1 244 1 238 1 312 1 102 1 196 1 286 1 
79 1 8 1 
209 1 211 1 347 1 238 1 312 1 102 1 196 1 286 1 188 1 
359 1 56 1 
288 1 214 1 363 1 
291 1 293 1 220 1 171 1 307 1 6 1 40 1 286 1 41 2 110 1 299 1 347 1 238 1 167 1 82 1 102 1 312 1 196 1 
291 1 293 1 220 1 171 1 307 1 6 1 40 1 286 1 41 2 110 1 299 1 347 1 238 1 167 1 82 1 102 1 312 1 196 1 
291 1 293 1 220 1 171 1 307 1 6 1 40 1 286 1 41 2 110 1 299 1 347 1 238 1 167 1 82 1 102 1 312 1 196 1 
288 1 359 1 56 1 
288 1 359 1 56 1 
214 1 363 1 
288 1 214 1 363 1 
373 1 278 1 
54 1 220 1 1 2 246 2 247 1 200 2 40 1 8 1 41 1 110 1 347 1 79 1 275 2 278 1 352 1 171 1 373 1 95 2 174 1 286 1 238 1 312 1 102 1 196 1 333 1 153 1 241 1 
339 1 1 2 246 2 341 1 271 2 200 2 163 2 58 1 203 1 365 1 367 1 59 1 185 1 370 1 372 1 208 1 16 1 90 1 18 1 232 2 118 1 66 2 305 1 96 1 329 2 310 1 356 1 332 1 380 1 242 1 29 2 
15 1 232 2 126 2 354 1 33 1 199 1 96 1 271 2 99 1 309 1 163 2 356 1 204 1 137 1 301 1 322 1 276 1 377 1 53 1 
232 1 126 2 354 1 92 1 199 1 96 1 271 1 99 1 309 1 163 1 356 1 204 1 137 1 301 1 276 1 377 1 53 1 
230 1 232 1 96 1 271 1 161 1 309 1 163 1 356 1 332 1 322 1 73 1 376 1 228 1 370 1 
232 1 126 2 354 1 33 1 199 1 96 1 271 1 99 1 309 1 163 1 356 1 204 1 137 1 301 1 322 1 276 1 377 1 53 1 
36 1 
190 1 338 1 226 1 221 1 138 1 307 1 375 1 
156 1 336 1 338 1 220 1 221 1 364 1 298 1 224 1 40 1 253 1 226 1 368 1 172 1 192 1 193 1 307 2 74 1 
336 5 156 12 338 9 0 2 4 2 250 1 298 4 162 6 163 3 165 1 253 4 350 2 13 1 15 1 19 1 212 2 23 3 307 8 356 4 72 2 74 4 181 1 182 2 220 5 315 2 221 2 271 3 134 2 40 5 273 2 224 6 225 2 80 1 368 3 226 8 228 1 83 2 370 10 89 2 190 1 232 3 283 6 94 2 192 4 96 3 374 1 98 2 375 1 236 2 148 3 332 3 152 2 378 2 379 2 
336 1 156 6 182 2 338 8 314 1 220 1 315 2 0 2 221 2 250 1 162 5 298 2 40 1 224 3 253 2 45 1 368 1 226 5 350 1 231 1 283 5 94 2 191 1 192 2 21 1 307 5 98 2 234 1 284 1 260 1 72 1 264 1 74 2 218 1 379 2 
338 2 220 1 0 2 35 1 1 1 129 1 246 1 296 1 298 1 200 1 40 1 164 1 78 1 300 1 253 1 226 2 275 1 63 1 207 1 170 1 146 1 94 2 192 1 95 1 175 1 72 1 74 1 379 1 
190 1 338 1 192 1 221 1 307 1 298 1 375 1 253 1 226 1 74 1 
156 10 182 2 338 5 315 2 0 2 283 5 94 2 307 5 98 2 162 5 224 5 72 1 226 5 83 1 379 2 
336 1 220 1 368 1 221 1 307 1 40 1 
336 4 338 2 220 3 298 1 271 4 250 2 161 1 40 3 163 4 165 2 253 2 61 1 226 2 368 2 228 2 370 1 350 2 13 1 230 1 232 4 192 2 96 1 120 1 121 1 356 1 332 1 151 1 74 2 267 1 
339 1 1 3 246 2 247 1 271 1 200 3 163 1 164 1 58 1 78 2 203 1 365 1 367 1 59 1 112 1 275 2 228 1 370 1 189 1 16 1 232 1 118 1 66 2 95 2 96 1 194 1 148 1 356 1 150 1 332 1 180 1 29 1 
156 4 338 1 283 2 192 1 221 2 307 4 162 2 298 1 250 1 224 2 253 1 51 1 226 2 74 1 350 1 
312 1 102 1 57 1 
312 1 102 1 57 1 
299 1 117 1 373 1 312 1 102 1 
312 1 102 1 57 1 
360 1 312 1 102 1 
360 1 312 1 102 1 
360 1 312 1 102 1 
312 1 102 1 
347 1 196 1 
325 3 16 2 313 1 339 4 118 2 157 1 66 4 0 1 129 1 296 1 58 2 330 1 365 2 300 1 51 1 254 1 379 1 103 2 29 8 372 4 
325 2 339 3 157 1 0 1 129 1 296 1 330 1 300 1 51 1 138 1 103 2 379 1 372 3 29 6 
325 2 16 1 182 1 339 2 118 1 315 1 66 2 0 1 98 1 24 1 58 1 365 1 254 1 103 1 379 1 372 2 29 4 
325 2 182 1 231 1 339 4 314 1 315 1 0 1 191 2 98 1 348 1 254 1 103 1 379 1 29 7 372 3 
313 2 182 2 314 2 339 12 157 1 315 2 294 1 0 3 129 1 296 2 318 1 58 2 300 2 365 2 348 1 60 1 254 4 372 11 325 9 16 2 118 2 66 4 191 2 98 2 330 1 51 1 379 3 103 5 29 23 
339 1 191 1 29 1 
314 1 29 1 372 1 
16 1 325 3 182 1 339 3 118 1 315 1 66 2 0 1 98 1 24 1 58 1 365 1 254 1 83 1 379 1 103 2 29 6 372 3 
182 2 314 1 339 6 315 2 0 2 135 1 58 1 365 1 254 1 372 6 16 1 325 2 231 1 118 1 66 2 191 1 21 1 98 2 284 1 234 1 260 1 264 1 379 2 103 1 29 12 
325 2 339 3 0 1 129 1 296 1 300 1 254 1 379 1 103 1 372 3 29 6 
325 2 313 1 16 1 339 2 118 1 157 1 66 2 296 1 58 1 330 1 300 1 365 1 60 1 254 1 103 1 372 1 29 3 
16 1 325 5 339 5 118 1 66 2 0 2 129 1 296 2 135 1 58 1 365 1 300 2 254 2 63 1 103 3 379 2 372 5 29 10 
16 1 325 1 182 1 118 1 66 2 0 1 135 1 58 1 365 1 254 1 372 2 29 2 
325 2 16 1 182 1 339 2 118 1 315 1 66 2 0 1 98 1 135 1 58 1 365 1 254 1 103 1 379 1 372 2 29 4 
313 1 16 3 325 2 339 2 118 3 66 6 296 1 135 1 58 3 365 3 300 1 60 1 254 1 349 1 103 1 29 3 372 1 
268 1 313 2 182 3 339 18 314 3 157 1 315 3 127 1 0 5 129 2 296 3 135 1 58 5 300 3 365 5 60 1 348 1 254 5 302 1 349 1 372 16 16 5 325 12 231 1 118 5 66 10 191 4 98 3 24 1 330 1 51 1 379 5 103 7 29 34 
314 1 339 4 157 1 0 1 129 1 296 1 135 1 58 1 365 1 300 1 372 4 16 1 325 2 231 1 118 1 66 2 191 1 284 1 330 1 51 1 379 1 103 2 29 8 
182 1 339 5 314 1 157 1 315 1 0 2 129 1 296 1 135 1 58 2 300 1 365 2 348 1 254 1 372 6 16 2 325 3 231 1 118 2 66 4 191 2 284 1 24 1 330 1 51 1 379 1 103 2 29 11 
313 1 182 2 314 1 339 10 157 1 315 2 0 3 129 1 296 1 135 1 58 3 300 1 365 3 254 1 372 9 16 3 325 4 231 1 118 3 66 6 191 1 21 1 98 2 234 1 284 1 24 1 330 1 260 1 51 1 264 1 379 3 103 3 29 19 
313 1 182 2 314 1 339 7 157 1 315 2 0 3 129 1 296 1 135 1 58 3 300 1 365 3 254 2 372 10 16 3 325 5 231 1 118 3 66 6 191 1 21 1 98 1 284 1 234 1 24 1 330 1 260 1 51 1 264 1 379 2 103 3 29 17 
314 1 339 4 157 1 0 1 129 1 296 1 135 1 58 1 365 1 300 1 372 4 16 1 325 2 231 1 118 1 66 2 191 1 284 1 330 1 51 1 379 1 103 2 29 8 
182 2 314 1 339 6 315 2 0 2 135 1 58 1 365 1 254 1 372 6 16 1 325 2 231 1 118 1 66 2 191 1 21 1 98 2 284 1 234 1 260 1 264 1 379 2 103 1 29 12 
313 2 182 2 339 8 314 1 157 1 315 2 0 3 129 1 296 1 135 1 58 4 300 1 365 4 254 2 372 10 16 4 325 5 231 1 118 4 66 8 191 1 21 1 98 1 234 1 284 1 24 1 330 1 260 1 51 1 264 1 379 2 103 3 29 18 
313 2 182 3 339 7 314 1 315 3 0 3 135 1 58 4 365 4 254 3 349 1 372 9 16 4 325 6 231 1 118 4 66 8 191 1 21 1 98 2 234 1 284 1 260 1 264 1 379 2 103 3 29 16 
325 6 339 4 157 1 0 1 129 1 296 3 330 2 300 3 254 3 379 1 103 3 29 7 372 3 
313 2 182 2 339 8 314 1 157 1 315 2 0 3 129 1 296 1 135 1 58 4 300 1 365 4 254 1 349 1 372 10 16 4 325 4 231 1 118 4 66 8 191 1 21 1 98 1 234 1 284 1 330 1 260 1 51 1 264 1 379 2 103 3 29 18 
274 1 1 1 246 1 247 1 200 1 114 1 345 1 
75 1 246 1 1 1 247 1 200 1 345 1 122 1 274 1 11 1 47 1 114 1 187 1 
230 1 163 1 356 1 232 1 332 1 138 1 228 1 96 1 370 1 161 1 271 1 
232 1 282 1 246 1 1 2 247 1 95 1 96 1 271 1 200 2 194 1 163 1 148 1 356 1 332 1 275 1 228 1 370 1 180 1 
170 1 232 1 282 1 108 1 246 2 1 2 247 1 95 1 96 1 271 1 200 2 273 1 194 1 163 1 148 2 165 1 356 1 332 2 275 2 369 1 370 3 180 1 89 1 
1 2 246 2 108 1 297 1 247 1 130 1 271 2 200 2 273 1 163 2 165 1 275 2 369 1 370 3 89 1 170 1 232 2 282 1 96 1 95 1 194 1 148 2 356 1 332 2 
336 1 220 2 297 1 221 1 271 3 40 2 273 1 163 3 320 1 165 1 228 1 370 4 89 1 232 3 212 1 96 1 23 1 307 1 308 1 236 1 148 1 356 1 332 1 
336 1 232 3 220 2 212 1 297 1 221 1 23 1 96 1 307 1 271 3 273 1 40 2 236 1 163 3 148 1 165 1 356 1 332 1 228 1 370 4 378 1 89 1 
163 1 356 1 232 1 44 1 96 1 271 1 
15 1 232 7 184 1 354 1 341 1 96 2 131 1 271 6 133 1 329 1 163 7 148 1 356 3 80 1 332 2 44 1 206 1 228 2 178 1 229 1 370 3 
339 7 157 1 0 3 246 1 1 2 296 2 247 3 160 1 200 2 163 1 58 2 203 2 300 2 254 1 63 1 208 1 170 1 15 1 16 2 17 1 118 2 66 4 68 1 71 1 356 1 180 1 29 14 129 2 271 1 365 2 367 2 275 1 370 1 372 7 189 1 324 1 325 5 90 1 232 1 282 1 95 1 96 1 194 1 148 1 330 1 150 1 332 1 51 1 103 4 379 3 335 1 
336 2 338 1 220 3 221 1 4 1 271 1 298 2 40 3 134 1 163 1 253 2 226 1 368 1 228 1 370 2 13 1 190 1 232 1 212 1 192 2 23 1 307 1 375 1 236 1 152 1 74 2 153 1 378 1 
15 1 232 2 374 1 96 1 271 2 236 1 163 2 148 1 356 2 80 1 332 1 44 1 370 2 
230 1 15 1 232 4 297 1 96 1 271 4 161 1 163 4 356 1 332 1 228 1 370 1 169 1 
232 2 337 1 184 1 96 1 271 2 7 1 133 1 163 2 165 1 148 1 356 2 332 1 46 1 370 1 
163 1 356 1 232 1 126 1 204 1 301 1 228 1 96 1 271 1 99 1 
163 2 15 1 356 1 232 2 332 1 354 1 341 1 96 1 370 1 271 2 380 1 
230 1 15 1 232 5 341 1 96 2 161 1 271 4 163 5 165 1 356 2 332 2 228 1 229 1 370 3 178 1 169 1 
230 1 15 1 232 5 341 1 96 2 161 1 271 4 223 1 163 5 165 1 356 2 332 2 228 1 370 3 178 1 169 1 
232 1 282 1 246 1 1 2 247 1 130 1 95 1 96 1 271 1 200 2 194 1 163 1 148 1 356 1 332 1 275 1 228 1 370 1 
232 1 184 1 96 1 271 1 133 1 163 1 165 1 148 1 356 2 80 1 332 1 206 1 370 1 
176 1 101 1 81 1 227 1 247 1 
170 1 220 2 48 1 212 1 108 1 247 1 221 1 270 1 307 1 39 1 319 1 40 2 176 2 111 1 101 2 81 2 227 1 369 1 153 1 
176 1 18 1 81 1 1 1 246 1 227 1 305 1 200 1 242 1 
111 1 227 1 319 1 
116 1 55 1 316 1 138 1 
116 1 55 1 26 1 119 1 316 1 216 1 42 1 
119 1 139 1 285 1 
144 1 116 1 55 1 281 1 119 3 316 1 346 1 272 2 42 1 70 1 26 3 216 1 
116 1 55 1 26 2 119 2 316 1 216 1 173 1 85 1 42 1 
55 1 126 1 119 1 93 1 199 1 42 1 99 1 70 1 26 1 123 1 216 1 
70 1 55 1 26 1 119 1 316 1 216 1 42 1 
116 1 70 1 26 1 119 1 316 2 216 1 42 1 
55 1 119 2 316 1 42 2 70 1 149 1 26 2 216 2 179 1 197 1 
116 1 55 2 158 1 119 3 316 1 93 1 173 2 42 1 70 1 26 3 124 1 216 1 261 1 
116 1 55 1 126 2 119 2 76 1 316 1 199 1 173 1 42 1 99 1 70 1 26 2 301 1 137 1 216 1 
116 1 326 1 55 2 158 1 119 4 316 1 93 1 173 2 42 2 70 1 26 4 216 2 85 1 
116 1 70 1 55 1 26 1 119 1 316 1 216 1 42 1 
144 1 116 2 55 3 281 1 219 1 158 1 119 4 316 2 93 1 173 2 272 1 42 1 26 4 216 1 
116 1 55 1 119 2 49 1 316 1 173 1 42 1 70 1 26 2 216 1 28 1 198 1 
116 1 144 2 70 1 55 1 281 1 26 3 119 3 316 1 216 1 351 1 272 2 42 1 
55 2 43 2 245 1 105 1 
70 1 26 1 91 1 119 1 216 1 42 1 
116 1 70 1 55 1 26 2 124 1 119 2 316 1 216 1 173 1 42 1 
304 1 
116 1 70 1 55 1 26 1 119 1 316 1 216 1 42 1 
116 1 70 1 55 1 26 3 124 1 119 3 316 1 216 1 173 1 272 1 42 1 
55 1 219 1 158 1 93 1 
55 1 316 1 
