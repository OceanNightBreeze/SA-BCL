#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
com.domainlanguage.money.ProrationTest:testProrateTotalIndivisibleBy3()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) 200 
com.domainlanguage.money.ProrationTest:testProrateOnlyOneShortOfEven()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) 200 
com.domainlanguage.money.ProrationTest:testAllocate1()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) (117,219) (117,219) 
com.domainlanguage.money.ProrationTest:testProrateOver2()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) (117,219) (117,219) 
com.domainlanguage.money.ProrationTest:testProrateOver10()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) (117,219) (117,219) 
com.domainlanguage.money.ProrationTest:testProrateZeroTotal()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) (117,219) (117,219) 
com.domainlanguage.money.ProrationTest:testDistributeRemainder()V ERROR java.lang.IllegalArgumentException 262 (51,73,159,374) 89 
com.domainlanguage.money.ProrationTest:testPartOfWhole()V PASSED
com.domainlanguage.money.ProrationTest:testSumMoney()V ERROR java.lang.IllegalArgumentException 262 54 (13,152) 
com.domainlanguage.time.CalendarDateTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarDateTest:testComparison()V PASSED
com.domainlanguage.time.CalendarDateTest:testStartAsTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testAsTimeInterval()V PASSED
com.domainlanguage.time.CalendarDateTest:testFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testDayOfWeek()V PASSED
com.domainlanguage.time.CalendarDateTest:testPreviousDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testConversionToJavaUtil()V PASSED
com.domainlanguage.time.CalendarDateTest:testToString()V PASSED
com.domainlanguage.time.CalendarDateTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarDateTest:testNextDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testMonth()V PASSED
com.domainlanguage.time.TimePointTest:testPotentialProblemDueToOldUsageOf_Duration_toBaseUnitsUsage()V PASSED
com.domainlanguage.time.TimePointTest:testSerialization()V PASSED
com.domainlanguage.time.TimePointTest:testEquals()V PASSED
com.domainlanguage.time.TimePointTest:testCompare()V PASSED
com.domainlanguage.time.TimePointTest:testNextDay()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithDefaultTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testNotIgnoringMinuteParameter()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testStringFormat()V PASSED
com.domainlanguage.time.TimePointTest:testAsJavaUtilDate()V PASSED
com.domainlanguage.time.TimePointTest:testBackToMidnight()V PASSED
com.domainlanguage.time.TimePointTest:testFromString()V PASSED
com.domainlanguage.time.TimePointTest:testEqualsOverYearMonthDay()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfter()V PASSED
com.domainlanguage.time.TimePointTest:testIncrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testDecrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfterPeriod()V PASSED
com.domainlanguage.time.TimePointTest:testAtWithTimeZone()V PASSED
com.domainlanguage.time.HourOfDayTest:test24IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test24GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test12GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12BadAmPm()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:test24Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:test12Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.NominalTimeTest:testConvertNominalTimeToTimePoint()V PASSED
com.domainlanguage.time.NominalTimeTest:testCombineNominalTimes()V PASSED
com.domainlanguage.base.RatioTest:testBigDecimalRatio()V PASSED
com.domainlanguage.base.RatioTest:testLongRatio()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyNumerator()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyByRatio()V PASSED
com.domainlanguage.base.RatioTest:testEquals()V PASSED
com.domainlanguage.time.DateSpecificationTest:testFixedDate()V PASSED
com.domainlanguage.time.DateSpecificationTest:testNthWeekdayInMonth()V PASSED
com.domainlanguage.time.DateSpecificationTest:testSelectFirstFromInterval()V PASSED
com.domainlanguage.time.DateSpecificationTest:testIterateThroughInterval()V PASSED
com.domainlanguage.time.TimeUnitTest:testSerialization()V PASSED
com.domainlanguage.time.TimeUnitTest:testComparison()V PASSED
com.domainlanguage.time.TimeUnitTest:testToString()V PASSED
com.domainlanguage.time.TimeUnitTest:testConvertibleToMilliseconds()V PASSED
com.domainlanguage.time.TimeUnitTest:testJavaCalendarConstantForBaseType()V PASSED
com.domainlanguage.time.TimeUnitTest:testIsConvertableTo()V PASSED
com.domainlanguage.time.TimeUnitTest:testNextFinerUnit()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testInsertedOutOfOrder()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testOverlapping()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testIterate()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testGaps()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testExtent()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingScalingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRounding()V PASSED
com.domainlanguage.util.ImmutableIteratorTest:testRemove()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDayReverseIterator()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testElapsedBusinessDays()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsHoliday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNearestBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDaysIterator()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testMinusNonBusinessDayZero()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIntersection()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testLength()V PASSED
com.domainlanguage.time.TimeIntervalTest:testEverFrom()V PASSED
com.domainlanguage.time.TimeIntervalTest:testBeforeClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testAfterClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testBeforeOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testAfterOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesHalfOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationFrom()V PASSED
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationUntil()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDefaultFromPoints()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDefaultFromDuration()V PASSED
com.domainlanguage.time.TimeIntervalTest:testEverUntil()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testLookup()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testRemove()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteOverlap()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMiddle()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMultiple()V PASSED
com.domainlanguage.time.TimeOfDayTest:testEquals()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetHour()V PASSED
com.domainlanguage.time.TimeOfDayTest:testHashCode()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnStartOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnMiddleOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnEndOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetMinute()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.SystemClockTest:testSystemClockTimeSource()V PASSED
com.domainlanguage.time.TimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.time.TimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.time.TimeRateTest:testEquals()V PASSED
com.domainlanguage.time.TimeRateTest:testRounding()V PASSED
com.domainlanguage.util.VerifyPersistentMappingTest:test()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testTranslationToTimeInterval()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSingleDateCalendarIntervalCompare()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testComplements()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEverFromToString()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEquals()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysAdd()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testLength()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.MinuteOfHourTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testSimple()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testIllegalLessThanZero()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testGreaterThan()V PASSED
com.domainlanguage.intervals.IntervalTest:testAbstractCreation()V PASSED
com.domainlanguage.intervals.IntervalTest:testSerialization()V PASSED
com.domainlanguage.intervals.IntervalTest:testOpenInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersects()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersection()V PASSED
com.domainlanguage.intervals.IntervalTest:testGreaterOfLowerLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testLesserOfUpperLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testCoversInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEqual()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsSingleElement()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForEmptyIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testToString()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsBelow()V PASSED
com.domainlanguage.intervals.IntervalTest:testIncludes()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsEmpty()V PASSED
com.domainlanguage.intervals.IntervalTest:testGap()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjointAdjacentOpen()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapLeft()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapRight()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementAdjacentClosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosing()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedEndPoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForOnePointIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedOpen()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testNISTTimeSource()V PASSED
com.domainlanguage.time.DurationTest:testSerialization()V PASSED
com.domainlanguage.time.DurationTest:testAddMillisecondsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testAddMonthsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMonthsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testAddToCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testConversionToBaseUnits()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedString()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromTimePoint()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testNormalizedUnit()V PASSED
com.domainlanguage.time.DurationTest:testEquals()V PASSED
com.domainlanguage.time.DurationTest:testToString()V PASSED
com.domainlanguage.time.DurationTest:testDivide()V PASSED
com.domainlanguage.time.DurationTest:testCompare()V PASSED
com.domainlanguage.time.DurationTest:testAdd()V PASSED
com.domainlanguage.time.DurationTest:testSubtract()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMillisecondsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedStringMonthBased()V PASSED
com.domainlanguage.timeutil.ClockTest:testNow()V PASSED
com.domainlanguage.timeutil.ClockTest:testToday()V PASSED
com.domainlanguage.timeutil.ClockTest:testNowDoesntBreak()V PASSED
com.domainlanguage.timeutil.ClockTest:testTodayWithoutTimeZone()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplicationWithExplicitRounding()V PASSED
com.domainlanguage.money.MoneyTest:testAdditionOfDifferentCurrencies()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.money.MoneyTest:testDifferentCurrencyNotEqual()V PASSED
com.domainlanguage.money.MoneyTest:testSerialization()V PASSED
com.domainlanguage.money.MoneyTest:testCreationFromDouble()V PASSED
com.domainlanguage.money.MoneyTest:testConstructor()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplyRounding()V PASSED
com.domainlanguage.money.MoneyTest:testMinimumIncrement()V PASSED
com.domainlanguage.money.MoneyTest:testDivisionByMoney()V ERROR java.lang.IllegalArgumentException 262 (51,73,159,374) 
com.domainlanguage.money.MoneyTest:testCloseNumbersNotEqual()V PASSED
com.domainlanguage.money.MoneyTest:testEqualsNull()V PASSED
com.domainlanguage.money.MoneyTest:testPositiveNegative()V PASSED
com.domainlanguage.money.MoneyTest:testSubtraction()V ERROR java.lang.IllegalArgumentException 262 54 31 
com.domainlanguage.money.MoneyTest:testApplyRatio()V PASSED
com.domainlanguage.money.MoneyTest:testIncremented()V ERROR java.lang.IllegalArgumentException 262 54 101 
com.domainlanguage.money.MoneyTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTest:testYen()V ERROR java.lang.IllegalArgumentException 262 54 
com.domainlanguage.money.MoneyTest:testDivide()V PASSED
com.domainlanguage.money.MoneyTest:testMultiply()V PASSED
com.domainlanguage.money.MoneyTest:testCompare()V PASSED
com.domainlanguage.money.MoneyTest:testHash()V PASSED
com.domainlanguage.money.MoneyTest:testNegation()V PASSED
com.domainlanguage.money.MoneyTest:testPrint()V PASSED
com.domainlanguage.money.MoneyTest:testRound()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
com.domainlanguage.time.TimePoint:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:assertQuantityPositiveOrZero(J)V
com.domainlanguage.time.TimeInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.time.CalendarDate:date(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:nextNumberOfBusinessDays(ILjava.util.Iterator;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:at12hr(IIIILjava.lang.String;IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:isWeekend(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.TimeOfDay:getMinute()I
com.domainlanguage.time.TimeOfDay:asTimePointGiven(Lcom.domainlanguage.time.CalendarDate;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:times(I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:toString(Ljava.lang.String;)Ljava.lang.String;
com.domainlanguage.money.Proration:sum([Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:getCurrency()Ljava.util.Currency;
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.time.TimePoint:nextDay()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:everPreceding(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeInterval:everPreceding(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Money:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarInterval:inclusive(IIIIII)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.Duration:milliseconds(J)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:month()Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.base.Ratio:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.MoneyTimeRate:equals(Lcom.domainlanguage.money.MoneyTimeRate;)Z
com.domainlanguage.time.CalendarDate:from(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:euros(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:hashCode()I
com.domainlanguage.time.Duration:days(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.BusinessCalendar:minusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.base.Ratio:of(JJ)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.Money:minus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:minutes(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:leftComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:startingFrom(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.IntervalLimit:lower(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.money.Money:isPositive()Z
com.domainlanguage.time.CalendarDate:from(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:quarters(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:atMidnightGMT(III)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.CalendarDate:nextDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.FloatingDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:_from(Ljava.util.Calendar;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.DateSpecification:fixed(II)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.intervals.Interval:greaterOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time._HolidayDates:defaultHolidays()Ljava.util.Set;
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:compareTo(Ljava.lang.Object;)I
com.domainlanguage.timeutil.NISTClient:now(Ljava.lang.String;I)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:dividedBy(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.timeutil.NISTClient:asTimePoint(Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:isConvertibleTo(Lcom.domainlanguage.time.TimeUnit;)Z
com.domainlanguage.money.Money:plus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:isOpen()Z
com.domainlanguage.time.CalendarDate:compareTo(Lcom.domainlanguage.time.CalendarDate;)I
com.domainlanguage.intervals.LinearIntervalMap:containsIntersectingKey(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.CalendarInterval:lengthInDaysInt()I
com.domainlanguage.time.Duration:isConvertibleTo(Lcom.domainlanguage.time.Duration;)Z
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:start()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.LinearIntervalMap:findKeyIntervalContaining(Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_day()I
com.domainlanguage.money.Money:getAmount()Ljava.math.BigDecimal;
com.domainlanguage.intervals.Interval:Interval(Lcom.domainlanguage.intervals.IntervalLimit;Lcom.domainlanguage.intervals.IntervalLimit;)V
com.domainlanguage.time.TimeInterval:open(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.ConcreteCalendarInterval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.base.Ratio:times(Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.intervals.IntervalLimit:upper(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.intervals.IntervalSequence:gaps()Lcom.domainlanguage.intervals.IntervalSequence;
com.domainlanguage.money.Money:dividedBy(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:dollars(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarDate:through(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.HourOfDay:value(ILjava.lang.String;)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time.TimeUnit:descendingUnitsForDisplay()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.TimePoint:from(Ljava.util.Date;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:assertNotConvertible(Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.TimeInterval:intersect(Lcom.domainlanguage.time.TimeInterval;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.Interval:greaterOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.BusinessCalendarTest:businessCalendar()Lcom.domainlanguage.time.BusinessCalendar;
com.domainlanguage.time.Duration:compareTo(Ljava.lang.Object;)I
com.domainlanguage.intervals.Interval:isSingleElement()Z
com.domainlanguage.money.Money:isGreaterThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.money.Money:Money(Ljava.math.BigDecimal;Ljava.util.Currency;)V
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Proration:distributeRemainderOver([Lcom.domainlanguage.money.Money;Lcom.domainlanguage.money.Money;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:includesUpperLimit()Z
com.domainlanguage.time.TimePoint:convertedTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.Duration:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.BusinessCalendar:isBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarMinute:CalendarMinute(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)V
com.domainlanguage.base.Ratio:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeInterval:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.HourOfDay:hashCode()I
com.domainlanguage.time.HourOfDay:isBefore(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.money.Money:incremented()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarMinute:equals(Lcom.domainlanguage.time.CalendarMinute;)Z
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimePoint:asJavaUtilDate()Ljava.util.Date;
com.domainlanguage.time.TimePoint:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeOfDay:getHour()I
com.domainlanguage.time.CalendarMinute:dateAndTimeOfDay(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.money.Money:applying(Lcom.domainlanguage.base.Ratio;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeOfDay:isAfter(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.Duration:inBaseUnits()J
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.MinuteOfHour:MinuteOfHour(I)V
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:getElapsedBusinessDays(Lcom.domainlanguage.time.CalendarInterval;)I
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[Ljava.math.BigDecimal;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalLimit:getValue()Ljava.lang.Comparable;
com.domainlanguage.time.TimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.Duration:normalizedUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.Duration:years(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.CalendarInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:asJavaCalendar(Ljava.util.TimeZone;)Ljava.util.Calendar;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;I)Ljava.math.BigDecimal;
com.domainlanguage.time.CalendarDate:startAsTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:atMidnight(IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:isClosed()Z
com.domainlanguage.time.TimeUnit:javaCalendarConstantForBaseType()I
com.domainlanguage.time.MinuteOfHour:isBefore(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.timeutil.Clock:setTimeSource(Lcom.domainlanguage.time.TimeSource;)V
com.domainlanguage.util.ImmutableIterator:remove()V
com.domainlanguage.time.AnnualDateSpecification:firstOccurrenceIn(Lcom.domainlanguage.time.CalendarInterval;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:toNormalizedString([Lcom.domainlanguage.time.TimeUnit;)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:plusMonths(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:from(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeRate:equals(Lcom.domainlanguage.time.TimeRate;)Z
com.domainlanguage.tests.CannedResponseServer:getHostName()Ljava.lang.String;
com.domainlanguage.time.TimePoint:compareTo(Ljava.lang.Object;)I
com.domainlanguage.money.Proration:defaultScaleForIntermediateCalculations(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.intervals.Interval:isEmpty()Z
com.domainlanguage.time.BusinessCalendar:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.CalendarInterval:everFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeInterval:end()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.base.Ratio:of(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimePointTest:javaUtilDateDec20_2003()Ljava.util.Date;
com.domainlanguage.timeutil.Clock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.timeutil.Clock:setDefaultTimeZone(Ljava.util.TimeZone;)V
com.domainlanguage.money.Proration:sum([Ljava.math.BigDecimal;)Ljava.math.BigDecimal;
com.domainlanguage.time.TimeUnit:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.FloatingDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.BusinessCalendar:addHolidays(Ljava.util.Set;)V
com.domainlanguage.time.ConcreteCalendarInterval:from(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.ConcreteCalendarInterval;
com.domainlanguage.time.BusinessCalendar:businessDaysOnly(Ljava.util.Iterator;)Ljava.util.Iterator;
com.domainlanguage.time.TimePoint:toString(Ljava.lang.String;Ljava.util.TimeZone;)Ljava.lang.String;
com.domainlanguage.money.Money:dividedBy(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarDate:at(Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.CalendarDate:plusDays(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.LinearIntervalMap:directPut(Ljava.util.List;Ljava.lang.Object;)V
com.domainlanguage.time.TimeInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.time.MinuteOfHour:equals(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;)Ljava.math.BigDecimal;
com.domainlanguage.intervals.Interval:over(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:equals(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimeOfDay:hourAndMinute(II)Lcom.domainlanguage.time.TimeOfDay;
com.domainlanguage.intervals.Interval:rightComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:year(I)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.IntervalSequence:IntervalSequence()V
com.domainlanguage.time.TimeRate:TimeRate(Ljava.lang.String;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.LinearIntervalMap:intersectingKeys(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.timeutil.NISTClient.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:preceding(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimeRate:scale()I
com.domainlanguage.time.TimeUnit:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.BusinessCalendar:BusinessCalendar()V
com.domainlanguage.time.TimeInterval.1:hasNext()Z
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_year()I
com.domainlanguage.time.CalendarMinute:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:isNegative()Z
com.domainlanguage.time.Duration:toString()Ljava.lang.String;
com.domainlanguage.time.TimeInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.HourOfDay:isAfter(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.Duration:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:times(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.LinearIntervalMap:LinearIntervalMap()V
com.domainlanguage.time.HourOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarDate:toString()Ljava.lang.String;
com.domainlanguage.time.TimeUnit:nextFinerUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.intervals.IntervalLimit:IntervalLimit(ZZLjava.lang.Comparable;)V
com.domainlanguage.time.CalendarInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.FixedDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.MoneyTimeRate:MoneyTimeRate(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.timeutil.Clock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.timeutil.SystemClock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:lesserOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.money.Proration:dividedEvenlyIntoParts(Lcom.domainlanguage.money.Money;I)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:asJavaCalendarUniversalZoneMidnight()Ljava.util.Calendar;
com.domainlanguage.intervals.Interval:lesserOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.timeutil.Clock:today()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:isBelow(Ljava.lang.Comparable;)Z
com.domainlanguage.time.TimeUnit:toString(J)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:month(II)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimePoint:parseGMTFrom(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:CalendarDate(III)V
com.domainlanguage.time.TimePoint:from(Ljava.util.Calendar;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:Interval()V
com.domainlanguage.time.TimePoint:at(IIIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval.2:hasNext()Z
com.domainlanguage.time.CalendarDate:dayOfWeek()I
com.domainlanguage.money.Money:isZero()Z
com.domainlanguage.intervals.Interval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.FloatingDateSpecification:FloatingDateSpecification(III)V
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[J)[Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:toString()Ljava.lang.String;
com.domainlanguage.time.HourOfDay:convertTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.TimeOfDay:on(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.CalendarDate:asTimeInterval(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Money:hasSameCurrencyAs(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.intervals.Interval:hasUpperLimit()Z
com.domainlanguage.intervals.Interval:Interval(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)V
com.domainlanguage.time.HourOfDay:value()I
com.domainlanguage.intervals.IntervalSequence:extent()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:toString(Ljava.util.Locale;)Ljava.lang.String;
com.domainlanguage.intervals.Interval:isAbove(Ljava.lang.Comparable;)Z
com.domainlanguage.time.ConcreteCalendarInterval:ConcreteCalendarInterval(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)V
com.domainlanguage.intervals.Interval:hasLowerLimit()Z
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:subtractAmountFromCalendar(JLjava.util.Calendar;)V
com.domainlanguage.money.MoneyTimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:asJavaCalendar()Ljava.util.Calendar;
com.domainlanguage.time.CalendarInterval:includesUpperLimit()Z
com.domainlanguage.intervals.LinearIntervalMap:containsKey(Ljava.lang.Comparable;)Z
com.domainlanguage.time.TimeUnit:baseUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.TimePoint:until(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.money.Money:euros(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.timeutil.SystemClock.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.base.Ratio:decimalValue(II)Ljava.math.BigDecimal;
com.domainlanguage.time.TimePoint:calendarDate(Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeUnit:getFactor()I
com.domainlanguage.money.Proration:ratios([Ljava.math.BigDecimal;)[Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.MinuteOfHour:hashCode()I
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.Interval:intersect(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:covers(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.BusinessCalendar:isHoliday(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:hours(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:closed(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeInterval:everFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.BusinessCalendar.1:next()Ljava.lang.Object;
com.domainlanguage.money.Money:isLessThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.BusinessCalendar.1:hasNext()Z
com.domainlanguage.time.TimeOfDay:TimeOfDay(II)V
com.domainlanguage.money.Money:assertHasSameCurrencyAs(Lcom.domainlanguage.money.Money;)V | CONDITION | 9328 | if (x) -> if (!x)
com.domainlanguage.time.BusinessCalendar.1:nextBusinessDate()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:compareTo(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.time.Duration:toNormalizedString()Ljava.lang.String;
com.domainlanguage.time.HourOfDay:equals(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.Duration:months(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.MinuteOfHour:value(I)Lcom.domainlanguage.time.MinuteOfHour;
com.domainlanguage.time.DateSpecification:nthOccuranceOfWeekdayInMonth(III)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.TimeInterval:TimeInterval(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)V
com.domainlanguage.time.CalendarInterval:includesLowerLimit()Z
com.domainlanguage.time.CalendarInterval:lengthInMonths()Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:emptyOfSameType()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeInterval:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.timeutil.ClockTest.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:plusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.AnnualDateSpecification:iterateOver(Lcom.domainlanguage.time.CalendarInterval;)Ljava.util.Iterator;
com.domainlanguage.intervals.Interval:toString()Ljava.lang.String;
com.domainlanguage.money.Money:times(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:minimumIncrement()Lcom.domainlanguage.money.Money;
com.domainlanguage.base.Ratio:Ratio(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)V
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:value(I)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.money.Money:hashCode()I
com.domainlanguage.time.HourOfDay:HourOfDay(I)V
com.domainlanguage.intervals.Interval:complementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_month()I
com.domainlanguage.time.CalendarDate:isBefore(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.timeutil.Clock:defaultTimeZone()Ljava.util.TimeZone;
com.domainlanguage.time.TimeInterval:start()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.LinearIntervalMap:get(Ljava.lang.Comparable;)Ljava.lang.Object;
com.domainlanguage.time.AnnualDateSpecification.1:next()Ljava.lang.Object;
com.domainlanguage.intervals.IntervalSequence:isEmpty()Z
com.domainlanguage.time.TimePoint:parseFrom(Ljava.lang.String;Ljava.lang.String;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.LinearIntervalMap:remove(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.CalendarInterval.3:next()Ljava.lang.Object;
com.domainlanguage.time.TimePoint:atGMT(IIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:closed(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.Interval:hashCode()I
com.domainlanguage.time.TimeUnit.Type:Type(Ljava.lang.String;)V
com.domainlanguage.intervals.Interval:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.CalendarInterval:equals(Lcom.domainlanguage.time.CalendarInterval;)Z
com.domainlanguage.base.Ratio:equals(Lcom.domainlanguage.base.Ratio;)Z
com.domainlanguage.time.TimeOfDay:hashCode()I
com.domainlanguage.time.TimeUnit:toString()Ljava.lang.String;
com.domainlanguage.timeutil.NISTClient:timeSource(Ljava.lang.String;I)Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.CalendarDate:isAfter(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:dividedBy(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:inclusive(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeOfDay:isBefore(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.TimeRate:TimeRate(Ljava.math.BigDecimal;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.LinearIntervalMap:put(Lcom.domainlanguage.intervals.Interval;Ljava.lang.Object;)V
com.domainlanguage.tests.CannedResponseServer:getPort()I
com.domainlanguage.time.TimePoint:isSameDayAs(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Z
com.domainlanguage.time.CalendarDate:equals(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarInterval:lengthInMonthsInt()I | CONSTANT | 3762 | 12 -> 0
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;JJ)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval.2:next()Ljava.lang.Object;
com.domainlanguage.time.TimeUnit:descendingUnits()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.Interval:includesLowerLimit()Z
com.domainlanguage.time.CalendarInterval.1:hasNext()Z
com.domainlanguage.time.CalendarInterval.3:hasNext()Z
com.domainlanguage.intervals.IntervalSequence:add(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.CalendarDate:previousDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.MinuteOfHour:isAfter(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.CalendarInterval:end()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:from(J)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:atGMT(IIIIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.tests.SerializationTester:assertCanBeSerialized(Ljava.lang.Object;)V
com.domainlanguage.time.Duration:weeks(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:addAmountToCalendar(JLjava.util.Calendar;)V
com.domainlanguage.intervals.IntervalSequence:iterator()Ljava.util.Iterator;
com.domainlanguage.time.Duration:of(JLcom.domainlanguage.time.TimeUnit;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarMinute:asTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.MinuteOfHour:value()I
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;II)Ljava.math.BigDecimal;
com.domainlanguage.money.Money:per(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.MoneyTimeRate;
com.domainlanguage.money.Money:equals(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.Duration:Duration(JLcom.domainlanguage.time.TimeUnit;)V
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:daysInReverseIterator()Ljava.util.Iterator;
com.domainlanguage.time.Duration:seconds(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:negated()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.ConcreteCalendarInterval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.util.ClassGenerator:ClassGenerator(Lcom.domainlanguage.util.ClassFilter;)V
com.domainlanguage.timeutil.SystemClock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.TimeUnit:TimeUnit(Lcom.domainlanguage.time.TimeUnit.Type;Lcom.domainlanguage.time.TimeUnit.Type;I)V
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeUnit.Type:equals(Lcom.domainlanguage.time.TimeUnit.Type;)Z
com.domainlanguage.time.CalendarInterval.2:hasNext()Z
com.domainlanguage.intervals.Interval:gap(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.FixedDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.AnnualDateSpecification.1:hasNext()Z
com.domainlanguage.intervals.Interval:intersects(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.Interval:open(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:at(IIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:nearestBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.FixedDateSpecification:FixedDateSpecification(II)V
com.domainlanguage.time.TimeRate:TimeRate(DLcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.CalendarMinute:dateHourAndMinute(IIIII)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.MinuteOfHour:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:includes(Ljava.lang.Comparable;)Z
com.domainlanguage.time.TimePoint:TimePoint(J)V
com.domainlanguage.time.Duration:addAmountToTimePoint(JLcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:dividedBy(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:daysHoursMinutesSecondsMilliseconds(IIIIJ)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalLimit:isClosed()Z
com.domainlanguage.time.CalendarInterval.2:next()Ljava.lang.Object;
com.domainlanguage.time.TimePoint:backToMidnight(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:nextBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeUnit:isConvertibleToMilliseconds()Z
com.domainlanguage.time.TimeOfDay:equals(Lcom.domainlanguage.time.TimeOfDay;)Z

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
74 1 236 3 51 1 13 1 224 1 14 1 344 1 200 1 54 1 5 2 112 2 87 3 262 1 220 1 
74 1 236 3 51 1 13 1 224 1 14 1 344 1 200 1 54 1 5 2 112 2 87 3 262 1 220 1 
245 1 148 1 233 1 143 1 74 1 13 1 236 3 248 1 224 1 117 1 14 2 152 1 54 1 5 2 281 1 112 2 87 3 262 1 219 1 220 1 
245 1 148 1 233 1 143 1 74 1 13 1 236 3 248 1 224 1 117 1 14 2 152 1 54 1 5 2 281 1 112 2 87 3 262 1 219 1 220 1 
245 1 148 1 233 1 143 1 74 1 13 1 236 3 248 1 224 1 117 1 14 2 152 1 54 1 5 2 281 1 112 2 87 3 262 1 219 1 220 1 
245 1 148 1 233 1 143 1 74 1 13 1 236 3 248 1 224 1 117 1 14 2 152 1 54 1 5 2 281 1 112 2 87 3 262 1 219 1 220 1 
5 1 74 1 280 1 236 2 159 1 87 2 112 1 224 1 262 1 89 1 344 1 220 1 
245 1 342 1 233 1 30 1 143 1 74 1 61 1 236 2 224 1 14 1 19 1 5 1 319 1 281 1 112 1 87 2 
54 1 5 2 74 1 13 1 236 2 87 2 112 2 224 1 262 1 14 1 220 1 
316 1 332 1 75 1 
316 1 307 1 288 2 
127 2 372 2 366 1 211 2 330 2 79 2 213 2 126 1 
193 2 28 1 0 1 1 2 71 1 127 2 343 2 247 1 366 1 53 1 223 1 79 2 35 1 290 1 270 1 111 1 226 1 88 1 372 3 354 1 373 1 356 1 211 2 95 1 300 1 330 3 118 2 213 2 360 1 217 1 380 1 21 1 67 1 337 2 147 1 174 1 126 1 
127 1 372 1 158 1 105 1 12 1 211 1 330 1 79 1 213 1 126 1 
316 1 37 1 124 1 372 1 210 1 75 1 105 1 237 1 139 1 25 1 330 1 79 1 294 1 44 1 
127 1 372 1 210 2 75 1 105 1 237 1 211 1 79 1 330 1 213 1 44 1 316 1 124 1 139 1 25 2 
215 1 210 1 3 1 203 1 25 1 
316 1 210 2 75 1 3 1 327 1 203 1 25 2 161 1 
210 1 203 1 25 1 
127 1 372 1 210 1 3 1 105 1 12 1 211 1 79 1 330 1 213 1 158 1 191 1 25 1 126 1 
316 1 
316 1 41 1 210 2 75 1 3 1 203 1 25 2 161 1 
231 2 208 1 310 1 210 5 75 1 3 2 212 2 316 1 156 2 302 1 20 1 22 1 102 1 138 1 349 1 203 2 25 5 69 1 161 1 
28 1 0 1 1 1 343 1 297 1 372 2 373 1 247 1 356 1 53 1 211 1 95 1 79 1 330 2 213 1 318 1 380 1 331 1 111 1 337 1 
332 1 366 1 
127 1 372 2 149 1 366 2 211 1 79 2 330 2 213 1 39 1 
142 1 318 1 40 1 
28 1 0 1 1 1 343 1 372 1 247 1 373 1 366 1 356 1 53 1 95 1 330 1 16 1 380 1 111 1 337 1 
91 1 209 1 127 1 372 5 297 1 366 1 211 4 79 5 330 5 213 4 331 2 7 1 39 1 294 1 
372 2 158 1 105 1 211 2 330 2 79 2 364 1 213 2 
127 1 372 3 331 1 366 1 211 3 330 3 79 3 213 3 
372 1 158 1 105 1 211 1 330 1 79 1 213 1 
127 1 372 1 149 1 105 1 211 1 39 1 330 1 79 1 213 1 
193 2 0 1 28 1 1 1 71 1 127 2 343 1 246 1 247 1 366 1 105 1 53 1 223 1 79 3 35 1 290 1 270 1 111 1 139 1 226 1 88 1 39 1 372 4 297 1 373 1 210 1 356 1 237 1 211 3 95 1 378 1 330 4 118 1 213 3 44 1 124 1 217 1 380 1 331 1 67 1 337 1 25 1 174 1 126 1 
209 1 372 2 331 1 366 1 211 1 294 1 330 2 79 2 213 1 
127 1 297 1 372 3 246 1 210 1 105 1 237 1 211 3 315 1 79 3 330 3 44 1 213 3 316 1 124 1 331 2 139 1 25 1 39 1 
127 1 372 2 211 2 79 2 330 2 213 2 318 1 331 1 39 1 40 1 
28 1 0 1 1 1 343 1 372 1 247 1 373 1 366 1 53 1 356 1 95 1 330 1 380 1 111 1 337 1 
28 1 1 1 343 1 372 1 247 1 373 1 366 1 106 1 53 1 356 1 330 1 137 1 380 1 111 1 337 1 
193 2 71 1 35 1 270 1 225 1 318 2 226 1 40 2 206 1 230 1 232 1 142 2 298 1 323 1 274 1 376 1 15 1 118 4 98 1 360 2 217 2 243 1 67 1 174 1 
124 1 372 1 105 1 211 1 330 1 79 1 213 1 364 1 
285 1 283 1 
285 1 283 1 
221 1 77 1 
221 1 77 1 
221 1 77 1 
285 1 186 1 283 1 
285 1 227 1 283 1 
190 1 221 1 285 2 266 1 77 1 283 2 
285 1 186 1 283 1 
285 1 186 1 283 1 
285 1 100 1 283 1 
285 1 100 1 283 1 
285 1 100 1 283 1 
114 1 9 1 372 2 285 1 210 1 366 1 168 1 211 2 107 1 287 1 330 2 79 2 96 1 65 1 213 2 268 1 181 1 369 1 227 1 261 1 338 1 25 1 339 1 283 1 
103 1 114 2 222 1 285 2 164 1 210 2 266 1 168 2 96 3 316 1 108 2 268 2 182 1 369 1 261 2 25 2 160 1 381 1 283 2 
245 1 148 1 281 1 
245 1 30 1 281 1 
97 1 148 2 30 1 303 1 23 1 281 3 
97 1 70 1 148 1 30 1 303 1 281 2 
97 1 148 1 30 1 303 2 281 2 
307 1 310 1 3 4 75 1 133 1 195 2 287 1 288 3 367 1 316 2 156 1 225 1 181 1 203 1 349 3 161 1 206 1 230 1 232 1 57 2 231 1 371 1 210 5 212 1 63 1 65 1 359 1 45 1 170 1 25 5 69 2 49 2 
307 3 310 1 3 7 75 1 133 2 288 9 154 1 316 5 269 1 156 2 225 3 181 4 292 1 203 6 349 8 161 1 206 3 230 3 232 3 57 6 231 2 371 3 210 9 212 2 63 2 43 5 277 1 170 1 20 1 215 5 361 1 218 1 25 9 69 6 49 6 
307 2 75 1 3 2 133 1 195 1 288 4 367 1 316 3 156 1 225 1 181 1 349 3 206 1 230 1 232 1 231 1 57 2 371 1 210 3 212 1 63 1 45 1 20 1 25 3 69 2 49 2 
307 3 75 1 3 3 133 1 195 2 288 7 367 1 316 4 156 1 225 2 181 2 292 1 349 5 206 2 230 2 232 2 57 4 231 1 371 2 210 4 212 1 63 1 277 1 45 1 20 1 361 1 25 4 69 4 49 4 
332 1 356 1 153 1 
178 1 356 1 
305 1 
380 1 356 1 53 1 
129 1 356 1 
356 1 53 1 
321 1 192 1 380 1 356 3 53 1 153 2 
232 1 323 2 144 1 167 1 326 1 376 3 118 7 301 2 360 4 225 1 217 3 171 1 85 1 336 1 55 1 90 1 56 1 
232 1 323 2 144 1 167 1 326 1 376 3 118 7 301 2 360 4 225 1 217 3 171 1 85 1 336 1 55 1 90 1 56 1 
232 1 323 2 144 1 167 1 326 1 376 3 118 7 301 2 360 4 225 1 217 3 171 1 85 1 336 1 293 1 55 1 90 1 56 1 
193 2 104 1 71 1 72 1 35 1 199 3 82 4 225 4 202 1 251 1 85 1 226 1 55 1 56 2 90 5 206 3 230 3 232 4 371 3 144 2 323 5 167 1 326 2 376 10 358 1 118 31 301 3 122 1 360 16 217 15 171 2 362 1 336 1 67 1 
228 1 193 4 232 1 71 2 144 1 323 3 256 1 167 1 326 1 376 4 118 9 35 2 301 2 360 5 225 1 217 4 171 1 202 1 85 1 226 2 67 2 55 1 56 1 90 1 
245 1 148 1 1 1 177 1 308 1 342 1 343 1 309 1 30 1 312 1 74 1 247 1 224 1 344 1 196 1 5 1 111 1 87 2 112 1 115 1 255 1 236 2 62 1 14 1 19 1 66 1 281 2 23 1 337 1 340 1 
245 1 148 1 1 1 177 1 308 1 342 1 343 1 30 1 312 1 247 1 32 1 224 1 196 1 344 2 5 1 111 1 87 3 112 1 115 1 236 3 62 1 14 1 19 1 23 1 66 1 242 1 281 2 337 1 26 1 340 1 
245 1 1 1 308 1 148 1 342 1 343 1 30 1 312 1 247 1 32 1 224 1 196 1 344 2 111 1 87 2 115 1 236 2 14 1 19 1 66 1 281 2 23 1 337 1 26 1 340 1 
28 1 1 1 341 1 343 1 247 1 312 2 53 1 196 2 5 1 111 1 87 1 112 1 140 1 92 1 60 1 235 1 236 1 356 1 14 2 66 2 242 1 337 1 24 1 
245 1 148 1 1 1 177 1 308 1 343 1 309 1 30 1 312 1 74 1 247 1 32 1 196 1 5 1 111 1 87 1 112 1 115 1 236 1 62 1 14 1 66 1 281 2 23 1 337 1 340 1 
132 1 
105 1 155 1 156 1 4 1 157 1 203 5 349 1 294 1 161 2 8 3 254 3 210 4 212 1 357 2 258 2 124 1 25 4 263 2 69 1 27 5 307 2 310 1 75 1 179 1 79 1 316 1 83 1 37 1 139 1 231 1 93 3 372 1 145 1 237 1 94 1 276 1 377 2 330 1 44 1 379 1 47 1 146 1 
27 5 307 2 310 1 75 1 105 1 179 1 79 1 316 1 83 1 156 1 37 1 155 1 4 1 157 1 139 1 349 1 203 5 161 2 294 1 8 3 231 1 254 3 93 3 372 1 145 1 210 4 94 1 237 1 212 1 377 2 357 2 276 1 330 1 44 1 379 1 47 1 258 2 124 1 146 1 25 4 263 2 69 1 
27 4 310 1 75 1 105 1 179 1 288 2 79 1 316 1 83 1 37 1 156 1 155 1 345 1 157 1 139 1 203 4 349 1 161 2 294 1 8 2 231 1 254 2 93 2 296 2 372 1 145 1 210 4 325 2 237 1 212 1 330 1 44 1 47 1 258 2 124 1 260 1 25 4 263 2 69 1 
1 2 343 2 247 1 105 1 53 1 288 2 156 1 155 1 157 1 111 1 203 6 349 2 161 3 294 1 8 2 254 2 116 1 59 1 60 1 210 5 356 1 63 1 212 1 357 2 123 1 258 2 124 1 260 1 25 5 263 2 69 2 27 4 307 2 28 2 310 1 75 1 179 1 79 1 316 2 83 1 37 1 139 1 92 1 231 1 93 2 372 1 145 1 237 1 94 1 377 2 329 1 330 1 44 1 47 1 337 2 
41 1 27 2 372 1 145 1 210 3 105 1 237 1 179 1 79 1 330 1 44 1 83 1 155 1 37 1 47 1 124 1 139 1 203 2 25 3 161 1 294 1 8 1 
41 1 27 3 254 1 372 1 145 1 210 3 75 1 105 1 237 1 179 1 79 1 330 1 44 1 316 1 83 1 155 1 37 1 47 1 124 1 139 1 203 1 25 3 161 1 294 1 
27 3 75 1 105 1 179 1 79 1 83 1 316 1 37 1 155 1 139 1 203 2 161 1 294 1 8 1 41 1 254 1 93 1 372 1 145 1 210 3 237 1 330 1 44 1 47 1 124 1 25 3 
105 1 155 1 156 1 4 1 157 1 203 7 349 1 161 3 294 1 8 4 254 4 210 5 212 1 357 2 258 2 124 1 25 5 263 2 69 1 27 6 365 1 307 2 310 1 75 5 179 1 79 1 83 1 316 5 37 1 139 1 41 1 231 1 93 4 372 1 145 1 237 1 94 1 276 1 377 2 330 1 44 1 379 1 47 1 146 1 
105 1 288 2 155 1 156 1 157 1 349 1 203 4 294 1 161 2 8 2 254 2 210 4 212 1 357 2 258 2 124 1 260 1 25 4 263 2 69 1 27 4 307 2 310 1 75 1 179 1 79 1 83 1 316 2 37 1 139 1 231 1 93 2 372 1 145 1 94 1 237 1 377 2 330 1 44 1 47 1 
27 4 307 2 310 1 75 1 105 1 179 1 79 1 316 1 83 1 37 1 155 1 156 1 4 1 157 1 139 1 203 4 349 1 161 2 294 1 8 2 231 1 254 2 93 2 372 1 145 1 210 4 94 1 237 1 212 1 377 2 357 2 276 1 330 1 44 1 47 1 258 2 124 1 146 1 25 4 263 2 69 1 
27 4 307 2 310 1 75 1 105 1 179 1 79 1 316 1 83 1 37 1 155 1 156 1 4 1 157 1 139 1 203 4 349 1 161 2 294 1 8 2 231 1 254 2 93 2 372 1 145 1 210 4 94 1 237 1 212 1 377 2 357 2 276 1 330 1 44 1 47 1 258 2 124 1 146 1 25 4 263 2 69 1 
27 4 29 1 310 1 75 1 105 1 179 1 288 2 79 1 316 1 83 1 37 1 155 1 156 1 4 1 345 1 157 1 139 1 203 4 349 1 161 2 294 1 8 2 231 1 254 2 93 2 296 2 372 1 145 1 210 4 325 2 237 1 212 1 330 1 44 1 17 1 47 1 258 2 124 1 25 4 263 2 69 1 
193 2 71 1 366 2 35 1 270 1 318 1 225 1 226 1 85 1 55 1 40 1 56 1 232 1 142 1 144 1 298 1 323 2 167 1 376 2 118 6 301 1 360 3 217 3 332 1 67 1 174 1 
193 4 71 2 366 1 81 1 35 2 290 1 82 3 199 3 270 2 318 11 225 2 6 1 226 2 90 1 252 1 350 1 40 4 206 2 230 1 232 1 142 11 322 1 371 2 323 1 376 2 118 14 122 1 360 8 217 6 362 1 67 2 147 1 174 1 
0 1 28 1 193 2 1 1 71 1 343 1 247 1 366 1 53 1 180 1 79 1 35 1 290 1 270 1 111 1 226 1 185 1 40 1 350 1 163 1 372 2 297 1 373 1 356 1 211 1 95 1 330 2 213 1 118 2 16 1 360 1 380 1 331 1 217 1 337 1 67 1 147 1 174 1 
193 6 0 2 1 3 2 1 343 3 247 2 53 2 290 1 111 2 55 1 56 1 350 1 253 2 206 2 297 1 167 1 356 2 211 1 213 1 118 20 301 1 214 2 360 10 217 10 67 3 174 3 28 1 71 3 366 2 32 1 79 1 35 3 270 3 318 7 225 3 85 1 226 3 88 2 320 1 40 7 90 4 230 2 232 3 142 7 372 3 371 2 144 1 323 4 42 2 373 2 95 2 376 8 330 3 331 1 380 2 333 1 334 2 337 3 147 1 
28 2 193 4 1 8 71 2 343 8 247 2 32 1 53 2 249 1 80 1 79 1 35 2 290 1 346 1 270 2 111 2 226 2 92 1 255 1 372 1 298 1 187 1 60 1 356 3 211 1 375 1 330 1 240 1 213 1 118 2 360 1 331 1 217 1 21 2 337 7 67 2 68 1 147 1 174 2 
193 2 127 1 71 1 79 1 35 1 270 1 318 1 225 1 226 1 39 1 40 1 350 1 206 1 230 1 232 1 142 1 372 1 371 1 323 1 211 1 376 1 330 1 213 1 118 3 257 1 360 1 217 2 67 1 174 1 
193 2 71 1 142 1 298 1 376 1 118 2 35 1 98 1 270 1 360 2 318 1 225 1 226 1 67 1 90 1 40 1 174 1 206 1 
193 2 230 1 232 1 71 1 142 1 323 1 298 1 274 1 376 1 118 2 35 1 270 1 318 1 217 2 226 1 67 1 40 1 174 1 
193 2 71 1 35 1 270 1 225 1 318 2 226 1 40 2 90 1 206 1 230 1 232 1 142 2 371 1 298 1 323 1 376 2 118 4 360 2 217 2 67 1 174 1 
193 2 71 1 142 1 376 1 118 2 35 1 98 1 270 1 360 2 318 1 225 1 226 1 67 1 68 1 90 1 40 1 174 1 206 1 
193 2 230 1 232 1 71 1 142 1 323 1 274 1 376 1 118 2 35 1 270 1 318 1 217 2 226 1 67 1 68 1 40 1 174 1 
193 2 71 1 35 1 270 1 225 1 318 2 226 1 40 2 90 1 206 1 230 1 232 1 142 2 371 1 323 1 376 2 118 4 360 2 217 2 67 1 68 1 174 1 
193 2 71 1 35 1 270 1 225 1 318 2 226 1 40 2 90 1 206 1 230 1 232 1 142 2 371 1 323 1 376 2 118 4 360 2 217 2 67 1 174 1 
0 1 28 1 193 2 1 1 71 1 343 1 247 1 366 1 53 1 35 1 290 1 270 1 111 1 226 1 88 1 372 1 373 1 356 1 95 1 330 1 118 2 360 1 380 1 217 1 337 1 67 1 147 1 174 1 
176 1 28 1 193 2 1 1 71 1 343 1 247 1 366 1 53 1 106 1 35 1 290 1 270 1 137 1 111 1 226 1 372 1 373 1 356 1 330 1 118 2 360 1 380 1 217 1 337 1 67 1 147 1 174 1 
193 2 71 1 35 1 270 1 225 1 318 2 226 1 350 1 40 2 90 1 206 1 230 1 232 1 142 2 371 1 323 1 376 2 118 4 360 2 217 2 67 1 174 1 
0 1 193 2 1 1 71 1 343 1 247 1 53 1 35 1 270 1 318 2 225 1 111 1 226 1 88 1 90 1 40 2 206 1 230 1 232 1 142 2 255 1 372 1 371 1 323 1 373 1 356 1 376 2 95 1 330 1 118 4 360 2 217 2 380 1 334 1 337 1 67 1 174 1 
193 2 127 1 71 1 79 1 35 1 270 1 225 1 318 1 226 1 39 1 90 1 350 1 40 1 206 1 230 1 232 1 142 1 372 1 371 1 211 1 376 1 330 1 213 1 118 3 18 1 360 2 217 1 67 1 174 1 
193 4 71 2 313 1 35 2 82 2 199 1 225 3 291 1 226 2 90 3 206 3 295 1 230 3 232 3 371 3 323 3 256 1 299 2 376 6 64 2 239 1 118 19 189 1 122 1 360 9 217 10 362 1 67 2 363 1 173 1 
193 6 71 3 286 1 313 1 33 1 35 3 82 2 199 2 225 3 291 1 202 2 226 3 204 1 90 2 206 3 162 1 295 2 230 2 232 2 371 3 323 2 256 1 299 4 376 4 64 1 169 1 118 26 46 1 189 1 360 14 217 12 362 2 67 3 173 2 
193 6 286 1 199 3 291 1 202 1 204 1 55 1 56 1 206 4 295 1 162 1 58 1 256 1 299 4 167 1 169 1 64 1 118 41 301 1 122 1 360 20 217 21 362 3 67 3 363 1 173 2 71 3 313 1 33 1 35 3 82 4 225 5 226 3 85 1 90 4 230 4 232 5 371 4 323 4 144 1 376 8 189 1 46 1 
193 8 71 4 286 1 313 1 33 1 35 4 82 4 199 3 225 5 291 1 202 2 85 1 204 1 226 4 55 1 56 1 90 3 206 4 162 1 295 1 230 3 58 1 232 4 371 4 144 1 323 4 256 1 167 1 299 4 376 7 64 1 169 1 118 38 301 1 46 1 189 1 122 1 360 20 217 18 362 3 67 4 363 1 173 2 
193 4 71 2 286 1 313 1 33 1 35 2 82 4 199 4 225 8 291 1 202 1 85 1 204 1 226 2 55 1 56 1 90 7 206 7 162 1 295 1 230 7 232 8 322 2 371 7 144 1 323 7 256 1 167 1 299 4 376 14 64 1 169 1 118 52 301 1 46 1 189 1 122 2 360 27 217 25 362 2 67 2 173 1 
114 1 268 1 285 1 164 1 266 1 261 1 168 1 113 1 381 1 283 1 
227 1 107 1 
114 1 268 1 99 1 250 1 285 1 304 1 261 1 168 1 283 1 
186 1 110 1 
190 1 100 1 311 1 
103 1 114 1 222 1 285 1 164 1 210 1 266 1 168 1 96 2 316 1 108 1 268 1 182 1 369 1 261 1 25 1 381 1 283 1 
103 1 114 1 222 1 285 1 164 1 210 1 266 1 168 1 96 2 316 1 108 1 268 1 182 1 369 1 261 1 25 1 381 1 283 1 
103 1 114 1 222 1 285 1 164 1 210 1 266 1 168 1 96 2 316 1 108 1 268 1 182 1 369 1 261 1 25 1 381 1 283 1 
190 1 186 1 110 1 
190 1 186 1 110 1 
100 1 311 1 
190 1 100 1 311 1 
9 1 339 1 
222 1 285 1 366 1 3 1 107 1 287 1 79 2 108 1 268 1 181 1 227 1 114 1 372 2 9 1 10 1 210 1 168 1 211 2 330 2 96 1 65 1 213 2 261 1 25 1 338 1 339 1 283 1 
193 2 1 2 71 1 343 2 247 1 53 1 249 1 80 1 79 2 198 1 35 1 290 1 270 1 84 1 111 1 226 1 350 1 353 1 372 2 356 1 330 2 118 2 360 1 241 1 217 1 21 2 244 1 67 1 337 2 147 1 174 1 
245 1 148 1 1 2 177 1 308 1 343 2 30 1 255 1 247 1 312 1 165 1 32 1 368 1 125 1 23 1 281 2 111 1 337 2 340 1 
245 1 148 1 1 1 177 1 308 1 343 1 30 1 312 1 247 1 32 1 172 1 125 1 23 1 281 2 111 1 337 1 340 1 
28 1 1 1 92 1 343 1 247 1 312 1 60 1 356 1 53 1 119 1 368 1 111 1 337 1 140 1 
245 1 148 1 1 1 177 1 308 1 343 1 30 1 247 1 312 1 165 1 32 1 368 1 125 1 23 1 281 2 111 1 337 1 340 1 
352 1 
193 2 28 1 0 1 1 1 71 1 127 2 343 1 247 1 366 1 223 1 53 1 79 2 35 1 290 1 270 1 111 1 226 1 88 1 372 3 373 1 356 1 211 2 95 1 330 3 118 1 213 2 217 1 380 1 67 1 337 1 126 1 174 1 
307 2 57 2 231 1 310 1 75 2 212 1 63 1 288 4 329 1 316 4 301 1 156 1 349 1 69 2 49 2 
316 1 302 1 332 1 75 1 102 1 349 1 69 1 
307 1 310 1 75 1 288 1 316 2 156 1 349 1 203 1 161 1 231 1 210 1 94 1 212 1 357 1 377 1 25 1 69 1 
1 3 343 3 247 4 53 3 194 1 288 12 153 2 156 4 111 3 349 9 203 5 161 3 253 2 206 2 57 6 255 1 210 5 355 2 356 10 63 2 212 4 120 1 302 1 25 5 69 8 28 1 307 6 178 3 129 2 310 4 75 2 76 1 134 2 267 1 34 2 316 8 136 1 225 2 271 2 321 1 230 2 231 4 232 2 371 2 324 2 238 2 329 1 44 2 380 3 102 1 335 2 337 3 282 2 49 6 
307 3 128 1 286 1 310 2 75 2 33 1 288 6 82 1 316 5 199 1 156 2 225 2 203 1 349 8 204 1 271 2 161 1 206 2 351 1 230 2 57 5 231 2 232 2 371 2 210 1 63 1 238 1 212 2 169 1 329 1 46 1 362 1 25 1 69 5 49 5 
127 1 310 1 105 1 79 1 156 1 225 2 158 1 85 1 349 2 271 2 56 1 231 1 232 1 372 1 144 1 210 1 12 1 211 1 238 1 212 1 330 1 213 1 278 1 146 1 191 1 25 1 69 2 126 1 
231 1 310 1 75 1 212 1 316 1 156 1 302 1 102 1 349 1 69 1 
307 5 230 2 57 5 232 2 371 2 238 1 288 10 316 5 225 2 349 5 271 2 69 5 253 1 206 2 49 5 
316 1 210 1 75 1 203 1 25 1 161 1 
28 2 1 4 343 4 310 1 247 3 76 1 53 2 78 1 267 2 317 1 135 1 156 2 184 1 111 2 349 2 203 4 161 2 272 1 207 1 231 2 92 1 59 1 210 3 60 1 356 2 212 2 63 2 329 2 123 1 20 1 380 1 337 4 25 3 69 2 
114 1 268 1 328 1 
114 1 268 1 164 1 370 1 339 1 
114 1 268 1 328 1 
114 1 268 1 328 1 
114 1 268 1 130 1 
114 1 268 1 130 1 
114 1 268 1 130 1 
114 1 268 1 
285 1 283 1 
193 4 232 1 71 2 323 2 144 1 167 1 376 3 118 8 35 2 301 1 360 4 225 1 217 4 202 1 85 1 226 2 67 2 55 1 90 1 56 1 
232 1 144 1 323 2 167 1 376 2 118 6 301 1 360 3 225 1 217 3 332 1 85 1 55 1 56 1 
230 1 193 2 232 1 71 1 371 1 323 1 166 1 376 2 35 1 118 4 360 2 225 1 217 2 226 1 67 1 90 1 206 1 
230 1 232 1 371 1 323 1 376 2 118 7 82 2 199 1 122 1 360 3 225 1 217 4 362 1 90 1 206 1 
193 4 71 2 35 2 199 2 82 2 225 3 202 2 85 1 226 2 55 1 56 2 90 4 252 1 206 2 230 2 232 3 273 1 371 2 322 1 144 2 323 5 167 1 376 9 118 23 301 1 122 1 360 11 217 12 67 2 
82 1 217 1 118 1 
199 1 360 1 118 1 
193 2 230 1 232 1 71 1 371 1 323 2 166 1 376 3 35 1 118 6 360 3 225 1 217 3 67 1 226 1 90 1 253 1 206 1 
230 2 193 2 232 2 71 1 371 2 286 1 323 1 256 1 33 1 376 2 169 1 35 1 118 12 82 1 199 1 46 1 360 6 225 2 217 6 362 1 204 1 226 1 67 1 90 1 206 2 
232 1 144 1 323 1 376 2 118 6 360 3 225 1 217 3 85 1 56 1 90 1 
193 2 273 1 71 1 323 1 144 1 167 1 376 2 118 3 35 1 360 1 217 2 202 1 226 1 67 1 55 1 90 1 56 1 
193 2 232 2 71 1 144 2 323 3 256 1 376 5 35 1 118 10 278 1 360 5 225 2 217 5 67 1 226 1 85 1 56 2 90 2 
193 2 71 1 256 1 376 1 35 1 118 2 360 2 225 1 226 1 67 1 90 1 206 1 
230 1 193 2 232 1 71 1 371 1 323 1 256 1 376 2 35 1 118 4 360 2 225 1 217 2 226 1 67 1 90 1 206 1 
193 6 273 1 71 3 144 1 323 1 256 1 376 2 118 3 35 3 360 1 217 2 202 1 226 3 67 3 363 1 56 1 90 1 
193 10 104 1 71 5 35 5 82 4 199 3 225 5 202 2 251 1 85 2 226 5 55 1 56 3 90 5 206 3 230 3 273 1 232 5 371 3 144 3 323 7 256 1 167 1 166 1 376 12 358 1 118 34 301 1 122 1 360 16 217 18 362 1 67 5 363 1 
193 2 232 1 71 1 286 1 323 2 144 1 256 1 167 1 376 2 35 1 118 8 82 1 199 1 301 1 360 4 225 1 217 4 362 1 85 1 226 1 67 1 55 1 56 1 
193 4 71 2 286 1 35 2 82 2 199 1 225 2 85 1 226 2 55 1 56 1 90 1 206 1 232 1 371 1 323 2 144 1 256 1 167 1 166 1 376 3 118 11 301 1 122 1 360 6 217 5 362 1 67 2 
193 6 71 3 286 1 33 1 35 3 199 1 82 1 225 3 202 1 85 1 226 3 204 1 55 1 56 1 90 1 206 2 230 2 232 3 371 2 144 1 323 3 256 1 167 1 166 1 376 4 169 1 118 19 301 1 46 1 360 9 217 10 362 1 67 3 
193 6 71 3 286 1 33 1 35 3 199 1 82 1 225 3 202 1 85 1 226 3 204 1 55 1 56 1 90 2 206 2 230 1 232 2 371 2 144 1 323 3 256 1 167 1 166 1 376 5 169 1 118 17 301 1 46 1 360 10 217 7 362 1 67 3 
193 2 232 1 71 1 286 1 323 2 144 1 256 1 167 1 376 2 35 1 118 8 82 1 199 1 301 1 360 4 225 1 217 4 362 1 85 1 226 1 67 1 55 1 56 1 
230 2 193 2 232 2 71 1 371 2 286 1 323 1 256 1 33 1 376 2 169 1 35 1 118 12 82 1 199 1 46 1 360 6 225 2 217 6 362 1 204 1 226 1 67 1 90 1 206 2 
193 8 71 4 286 1 33 1 35 4 82 1 199 1 225 3 202 2 85 1 226 4 204 1 55 1 56 1 90 2 206 2 230 1 232 2 371 2 144 1 323 3 256 1 167 1 166 1 376 5 169 1 118 18 301 1 46 1 360 10 217 8 362 1 67 4 
193 8 71 4 286 1 33 1 35 4 82 1 199 1 225 3 202 2 226 4 204 1 90 3 206 3 230 2 232 2 371 3 323 3 256 1 376 6 169 1 118 16 46 1 360 9 217 7 362 1 67 4 363 1 
232 1 144 3 323 3 167 2 376 6 118 7 360 3 225 1 217 4 85 1 55 1 56 3 90 3 
193 8 71 4 286 1 33 1 35 4 82 1 199 1 225 3 202 2 85 1 226 4 204 1 55 1 56 1 90 1 206 2 230 1 232 2 371 2 144 1 323 3 256 1 167 1 376 4 169 1 118 18 301 1 46 1 360 10 217 8 362 1 67 4 363 1 
209 1 372 1 366 1 52 1 330 1 79 1 294 1 
175 1 50 1 209 1 372 1 366 1 314 1 52 1 79 1 330 1 141 1 306 1 294 1 
28 1 92 1 1 1 343 1 247 1 60 1 332 1 111 1 356 1 53 1 337 1 
28 1 1 1 343 1 372 2 373 1 247 1 366 1 356 1 53 1 211 1 95 1 79 1 330 2 213 1 380 1 331 1 111 1 337 1 
1 1 343 1 129 1 372 2 373 1 247 1 366 1 105 1 237 1 356 3 53 2 211 2 95 1 79 2 330 2 213 1 267 1 124 1 380 2 331 1 335 1 111 1 337 1 
1 2 343 2 129 1 372 2 373 1 247 1 366 1 105 1 237 1 356 3 53 2 211 2 79 2 330 2 213 1 267 1 121 1 124 1 137 1 380 2 331 1 335 1 111 1 337 2 
28 1 1 3 178 1 343 3 129 1 234 1 247 1 210 2 75 1 53 1 356 4 44 1 267 1 153 1 316 1 121 1 380 1 201 1 335 1 111 1 337 3 203 1 25 2 
28 1 1 3 178 1 343 3 129 1 247 1 210 2 75 1 53 1 356 4 44 1 267 1 153 1 316 1 121 1 380 1 335 1 111 1 337 3 203 1 25 2 282 1 
1 1 343 1 346 1 247 1 111 1 337 1 
207 1 321 1 28 2 1 7 343 7 255 1 265 1 187 1 247 3 32 1 53 2 356 3 375 1 80 1 240 1 135 1 346 1 380 1 21 1 111 2 337 6 
0 1 193 4 1 1 343 1 247 1 53 1 111 1 55 1 350 1 56 1 255 1 167 1 356 1 211 1 213 1 118 6 301 1 360 3 217 3 67 2 174 2 71 2 366 2 79 1 35 2 270 2 225 1 318 1 226 2 85 1 88 1 40 1 232 1 142 1 372 2 42 1 144 1 323 2 373 1 95 1 376 2 330 2 241 1 331 1 380 1 334 1 337 1 
28 1 1 1 178 1 343 1 310 2 75 1 3 1 76 1 134 1 34 1 153 1 316 1 156 2 349 1 203 2 161 1 231 2 210 3 355 1 356 2 212 2 44 1 302 1 102 1 337 1 25 3 69 1 282 1 
321 1 1 2 343 2 255 1 247 2 53 1 356 2 153 1 120 1 346 1 380 1 111 1 337 2 
28 1 1 4 92 1 343 4 255 1 247 1 60 1 53 1 356 1 121 1 38 1 111 1 337 4 
207 1 1 2 343 2 247 2 53 1 356 1 78 1 267 1 135 1 380 1 333 1 184 1 111 1 337 2 
245 1 28 1 308 1 1 1 343 1 30 1 247 1 281 1 111 1 337 1 
1 2 343 2 255 1 247 1 32 1 53 1 356 1 80 1 84 1 111 1 337 2 
28 1 92 1 1 5 343 5 255 1 60 1 187 1 247 2 53 2 356 3 80 1 267 1 240 1 38 1 111 2 337 4 
28 1 92 1 1 5 343 5 255 1 60 1 247 2 53 2 356 3 80 1 267 1 240 1 38 1 348 1 111 2 337 4 
28 1 1 1 343 1 372 2 373 1 247 1 366 1 356 1 53 1 211 1 79 1 330 2 213 1 137 1 380 1 331 1 111 1 337 1 
207 1 321 1 1 1 343 1 265 1 247 2 53 1 356 1 267 1 135 1 380 1 111 1 337 1 
366 1 131 1 150 1 275 1 197 1 
246 1 210 2 366 1 75 1 131 1 3 1 105 1 150 2 237 1 275 2 151 1 289 1 197 2 44 1 316 1 124 1 139 1 25 2 205 1 
353 1 372 1 131 1 150 1 197 1 79 1 330 1 198 1 244 1 
131 1 205 1 289 1 
19 1 342 1 233 1 5 1 347 1 74 1 236 3 87 3 112 1 224 1 344 1 
54 1 236 1 87 1 224 1 262 1 344 1 
342 1 224 1 
19 1 342 1 332 1 224 1 
19 1 342 1 5 1 236 1 87 1 112 1 224 1 
66 1 87 1 14 1 
19 1 48 1 342 1 233 2 279 1 5 1 74 1 236 3 188 1 87 3 112 1 224 1 
19 1 342 1 5 1 280 1 236 2 87 2 112 1 224 1 344 1 
5 1 74 1 236 1 159 1 87 1 112 1 224 1 262 1 220 1 
342 1 5 1 74 1 236 1 87 1 112 1 224 1 
19 1 342 2 5 1 74 1 236 1 87 1 112 1 
342 1 74 1 236 2 224 1 36 1 5 2 216 1 183 1 112 2 87 2 
54 1 5 1 31 1 347 1 74 1 236 2 87 2 112 1 224 1 262 1 344 1 220 1 
245 1 148 1 342 1 30 1 74 1 236 2 224 1 344 1 19 1 109 1 5 1 281 2 23 1 112 1 87 2 
54 1 5 1 74 1 280 1 101 1 236 2 87 2 112 1 224 1 262 1 344 1 220 1 
19 1 342 1 5 1 74 1 236 1 87 1 112 1 224 1 
54 1 5 1 236 2 112 1 87 2 224 1 262 1 344 1 220 2 
342 1 73 1 74 1 236 2 374 1 51 1 224 1 344 1 19 1 5 1 112 1 87 2 
233 2 342 1 74 1 236 3 11 1 224 1 48 2 19 1 279 1 5 1 112 1 87 3 
259 1 86 1 224 2 264 2 
284 1 5 1 74 1 236 1 87 1 112 1 
19 1 342 1 5 1 347 1 74 1 236 2 87 2 112 1 224 1 344 1 
229 1 
19 1 342 1 5 1 74 1 236 1 87 1 112 1 224 1 
