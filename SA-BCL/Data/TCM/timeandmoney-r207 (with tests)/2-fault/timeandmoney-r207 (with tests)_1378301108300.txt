#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
com.domainlanguage.money.ProrationTest:testAllocate1()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testProrateOver2()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testProrateOver10()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testProrateZeroTotal()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testDistributeRemainder()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testPartOfWhole()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testSumMoney()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testProrateTotalIndivisibleBy3()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.ProrationTest:testProrateOnlyOneShortOfEven()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.time.CalendarDateTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarDateTest:testComparison()V PASSED
com.domainlanguage.time.CalendarDateTest:testStartAsTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testAsTimeInterval()V PASSED
com.domainlanguage.time.CalendarDateTest:testFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testDayOfWeek()V PASSED
com.domainlanguage.time.CalendarDateTest:testPreviousDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testConversionToJavaUtil()V PASSED
com.domainlanguage.time.CalendarDateTest:testToString()V PASSED
com.domainlanguage.time.CalendarDateTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarDateTest:testNextDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testMonth()V PASSED
com.domainlanguage.time.TimePointTest:testSerialization()V PASSED
com.domainlanguage.time.TimePointTest:testEquals()V PASSED
com.domainlanguage.time.TimePointTest:testCompare()V PASSED
com.domainlanguage.time.TimePointTest:testNextDay()V PASSED
com.domainlanguage.time.TimePointTest:testPotentialProblemDueToOldUsageOf_Duration_toBaseUnitsUsage()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testStringFormat()V PASSED
com.domainlanguage.time.TimePointTest:testAsJavaUtilDate()V PASSED
com.domainlanguage.time.TimePointTest:testBackToMidnight()V PASSED
com.domainlanguage.time.TimePointTest:testFromString()V PASSED
com.domainlanguage.time.TimePointTest:testEqualsOverYearMonthDay()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfter()V PASSED
com.domainlanguage.time.TimePointTest:testIncrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testDecrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfterPeriod()V PASSED
com.domainlanguage.time.TimePointTest:testAtWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithDefaultTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testNotIgnoringMinuteParameter()V PASSED
com.domainlanguage.time.HourOfDayTest:test24IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test24GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test12GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12BadAmPm()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:test24Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:test12Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.NominalTimeTest:testCombineNominalTimes()V PASSED
com.domainlanguage.time.NominalTimeTest:testConvertNominalTimeToTimePoint()V PASSED
com.domainlanguage.base.RatioTest:testBigDecimalRatio()V PASSED
com.domainlanguage.base.RatioTest:testLongRatio()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyNumerator()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyByRatio()V PASSED
com.domainlanguage.base.RatioTest:testEquals()V PASSED
com.domainlanguage.time.DateSpecificationTest:testFixedDate()V PASSED
com.domainlanguage.time.DateSpecificationTest:testNthWeekdayInMonth()V PASSED
com.domainlanguage.time.DateSpecificationTest:testSelectFirstFromInterval()V PASSED
com.domainlanguage.time.DateSpecificationTest:testIterateThroughInterval()V PASSED
com.domainlanguage.time.TimeUnitTest:testSerialization()V PASSED
com.domainlanguage.time.TimeUnitTest:testComparison()V PASSED
com.domainlanguage.time.TimeUnitTest:testToString()V PASSED
com.domainlanguage.time.TimeUnitTest:testIsConvertableTo()V PASSED
com.domainlanguage.time.TimeUnitTest:testNextFinerUnit()V PASSED
com.domainlanguage.time.TimeUnitTest:testConvertibleToMilliseconds()V PASSED
com.domainlanguage.time.TimeUnitTest:testJavaCalendarConstantForBaseType()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testInsertedOutOfOrder()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testOverlapping()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testIterate()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testGaps()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testExtent()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testSimpleRate()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.money.MoneyTimeRateTest:testRoundingRate()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) (64,76) 
com.domainlanguage.money.MoneyTimeRateTest:testRoundingScalingRate()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (64,76) 
com.domainlanguage.money.MoneyTimeRateTest:testEquals()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) (64,76) 
com.domainlanguage.money.MoneyTimeRateTest:testRounding()V ERROR java.lang.IllegalArgumentException (100,183,205,231) (100,183,205,231) (100,183,205,231) 178 
com.domainlanguage.util.ImmutableIteratorTest:testRemove()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testElapsedBusinessDays()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsHoliday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNearestBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDaysIterator()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testMinusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDayReverseIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIntersection()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testLength()V PASSED
com.domainlanguage.time.TimeIntervalTest:testEverFrom()V PASSED
com.domainlanguage.time.TimeIntervalTest:testBeforeClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testAfterClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesClosed()V PASSED
com.domainlanguage.time.TimeIntervalTest:testBeforeOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testAfterOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testIncludesHalfOpen()V PASSED
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationFrom()V PASSED
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationUntil()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDefaultFromPoints()V PASSED
com.domainlanguage.time.TimeIntervalTest:testDefaultFromDuration()V PASSED
com.domainlanguage.time.TimeIntervalTest:testEverUntil()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testLookup()V ERROR java.lang.NullPointerException 273 22 84 
com.domainlanguage.intervals.IntervalMapTest:testRemove()V ERROR java.lang.NullPointerException 273 22 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteOverlap()V ERROR java.lang.NullPointerException 273 22 84 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMiddle()V ERROR java.lang.NullPointerException 273 22 84 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMultiple()V ERROR java.lang.NullPointerException 273 22 84 
com.domainlanguage.time.TimeOfDayTest:testEquals()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetHour()V PASSED
com.domainlanguage.time.TimeOfDayTest:testHashCode()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnStartOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnMiddleOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnEndOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetMinute()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAsTimePoint()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithEarlierTimeOfDay()V PASSED
com.domainlanguage.timeutil.SystemClockTest:testSystemClockTimeSource()V PASSED
com.domainlanguage.time.TimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.time.TimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.time.TimeRateTest:testEquals()V PASSED
com.domainlanguage.time.TimeRateTest:testRounding()V PASSED
com.domainlanguage.util.VerifyPersistentMappingTest:test()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testComplements()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEverFromToString()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEquals()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysAdd()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testLength()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testTranslationToTimeInterval()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSingleDateCalendarIntervalCompare()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testSimple()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testIllegalLessThanZero()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testGreaterThan()V PASSED
com.domainlanguage.intervals.IntervalTest:testAbstractCreation()V PASSED
com.domainlanguage.intervals.IntervalTest:testSerialization()V PASSED
com.domainlanguage.intervals.IntervalTest:testOpenInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersects()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersection()V PASSED
com.domainlanguage.intervals.IntervalTest:testGreaterOfLowerLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testLesserOfUpperLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testCoversInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEqual()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsSingleElement()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForEmptyIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testToString()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsBelow()V PASSED
com.domainlanguage.intervals.IntervalTest:testIncludes()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsEmpty()V PASSED
com.domainlanguage.intervals.IntervalTest:testGap()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjointAdjacentOpen()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapLeft()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapRight()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementAdjacentClosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosing()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedEndPoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForOnePointIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedOpen()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testNISTTimeSource()V PASSED
com.domainlanguage.time.DurationTest:testSerialization()V PASSED
com.domainlanguage.time.DurationTest:testAddMillisecondsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testAddMonthsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMonthsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testAddToCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testConversionToBaseUnits()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedString()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromTimePoint()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testNormalizedUnit()V PASSED
com.domainlanguage.time.DurationTest:testEquals()V PASSED
com.domainlanguage.time.DurationTest:testToString()V PASSED
com.domainlanguage.time.DurationTest:testDivide()V PASSED
com.domainlanguage.time.DurationTest:testCompare()V PASSED
com.domainlanguage.time.DurationTest:testAdd()V PASSED
com.domainlanguage.time.DurationTest:testSubtract()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMillisecondsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedStringMonthBased()V PASSED
com.domainlanguage.timeutil.ClockTest:testNow()V PASSED
com.domainlanguage.timeutil.ClockTest:testToday()V PASSED
com.domainlanguage.timeutil.ClockTest:testNowDoesntBreak()V PASSED
com.domainlanguage.timeutil.ClockTest:testTodayWithoutTimeZone()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
com.domainlanguage.time.TimePoint:calendarDate(Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeInterval:start()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:isConvertibleToMilliseconds()Z
com.domainlanguage.time.HourOfDay:isAfter(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.CalendarDate:hashCode()I
com.domainlanguage.time.Duration:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.BusinessCalendar:isHoliday(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.time.TimeInterval:TimeInterval(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)V
com.domainlanguage.intervals.Interval:isSingleElement()Z
com.domainlanguage.base.Ratio:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:CalendarDate(III)V
com.domainlanguage.time.TimeInterval:preceding(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.LinearIntervalMap:LinearIntervalMap()V
com.domainlanguage.time.AnnualDateSpecification:firstOccurrenceIn(Lcom.domainlanguage.time.CalendarInterval;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:minutes(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.FixedDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeUnit:toString()Ljava.lang.String;
com.domainlanguage.intervals.LinearIntervalMap:remove(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.CalendarInterval.3:next()Ljava.lang.Object;
com.domainlanguage.time.TimePoint:at(IIIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:includesUpperLimit()Z
com.domainlanguage.time.MinuteOfHour:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:hashCode()I
com.domainlanguage.time.Duration:dividedBy(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.intervals.Interval:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.CalendarInterval.3:hasNext()Z
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.time.TimeUnit.Type:Type(Ljava.lang.String;)V
com.domainlanguage.util.ClassGenerator:ClassGenerator(Lcom.domainlanguage.util.ClassFilter;)V
com.domainlanguage.time.BusinessCalendar:plusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.time.BusinessCalendar:nearestBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimeUnit:TimeUnit(Lcom.domainlanguage.time.TimeUnit.Type;Lcom.domainlanguage.time.TimeUnit.Type;I)V
com.domainlanguage.time.TimeUnit:isConvertibleTo(Lcom.domainlanguage.time.TimeUnit;)Z
com.domainlanguage.time.TimePoint:atGMT(IIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;I)Ljava.math.BigDecimal;
com.domainlanguage.time.MinuteOfHour:hashCode()I
com.domainlanguage.time.DateSpecification:fixed(II)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.CalendarMinute:equals(Lcom.domainlanguage.time.CalendarMinute;)Z
com.domainlanguage.time.CalendarDate:isBefore(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:over(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.time.CalendarDate:month()Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarDate:nextDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:quarters(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.DateSpecification:nthOccuranceOfWeekdayInMonth(III)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.CalendarInterval:end()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.IntervalSequence:iterator()Ljava.util.Iterator;
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:month(II)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeOfDay:getHour()I
com.domainlanguage.time.Duration:Duration(JLcom.domainlanguage.time.TimeUnit;)V
com.domainlanguage.time.TimeInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.intervals.IntervalSequence:add(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.TimeInterval:intersect(Lcom.domainlanguage.time.TimeInterval;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarDate:startAsTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:asJavaCalendar(Ljava.util.TimeZone;)Ljava.util.Calendar;
com.domainlanguage.money.Money:euros(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.ConcreteCalendarInterval:from(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.ConcreteCalendarInterval;
com.domainlanguage.timeutil.Clock:today()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time._HolidayDates:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarInterval:lengthInMonths()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.BusinessCalendar.1:nextBusinessDate()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:nextNumberOfBusinessDays(ILjava.util.Iterator;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:euros(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:parseFrom(Ljava.lang.String;Ljava.lang.String;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.IntervalSequence:gaps()Lcom.domainlanguage.intervals.IntervalSequence;
com.domainlanguage.intervals.Interval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.Duration:addAmountToCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.CalendarInterval.2:hasNext()Z
com.domainlanguage.time.Duration:weeks(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.LinearIntervalMap:put(Lcom.domainlanguage.intervals.Interval;Ljava.lang.Object;)V
com.domainlanguage.time.TimePoint:parseGMTFrom(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:asTimeInterval(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarMinute:equals(Ljava.lang.Object;)Z
com.domainlanguage.timeutil.ClockTest.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:isOpen()Z
com.domainlanguage.time.BusinessCalendar:nextBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:nextDay()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:daysHoursMinutesSecondsMilliseconds(IIIIJ)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:includesLowerLimit()Z
com.domainlanguage.time.CalendarDate:through(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimePoint:at(IIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:year(I)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.BusinessCalendar:BusinessCalendar()V
com.domainlanguage.time.CalendarInterval:includesUpperLimit()Z
com.domainlanguage.time.FloatingDateSpecification:FloatingDateSpecification(III)V
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:daysInReverseIterator()Ljava.util.Iterator;
com.domainlanguage.time.CalendarDate:isAfter(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.HourOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.BusinessCalendar:isWeekend(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:greaterOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.intervals.Interval:complementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.CalendarInterval:inclusive(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.Duration:hours(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeUnit:getFactor()I
com.domainlanguage.time.CalendarInterval:lengthInMonthsInt()I
com.domainlanguage.money.Money:Money(Ljava.math.BigDecimal;Ljava.util.Currency;)V | CONDITION | 1159 | if (x) -> if (!x)
com.domainlanguage.time.TimePoint:from(J)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:open(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.Duration:toNormalizedString([Lcom.domainlanguage.time.TimeUnit;)Ljava.lang.String;
com.domainlanguage.time.CalendarDate:previousDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarMinute:CalendarMinute(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)V
com.domainlanguage.time.TimePoint:atMidnightGMT(III)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:scale()I
com.domainlanguage.time.TimeUnit:baseUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarDate:from(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_year()I
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.intervals.Interval:covers(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.util.ImmutableIterator:remove()V
com.domainlanguage.time.TimeOfDay:isBefore(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarMinute:dateHourAndMinute(IIIII)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.TimeUnit:javaCalendarConstantForBaseType()I
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_month()I
com.domainlanguage.time.TimePoint:isSameDayAs(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Z
com.domainlanguage.time.TimeInterval.2:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarDate:at(Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.intervals.IntervalLimit:lower(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.time.TimeInterval:everFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:isConvertibleTo(Lcom.domainlanguage.time.Duration;)Z
com.domainlanguage.time.AnnualDateSpecification:iterateOver(Lcom.domainlanguage.time.CalendarInterval;)Ljava.util.Iterator;
com.domainlanguage.time.TimeOfDay:asTimePointGiven(Lcom.domainlanguage.time.CalendarDate;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarDate:from(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendarTest:businessCalendar()Lcom.domainlanguage.time.BusinessCalendar;
com.domainlanguage.time.CalendarDate:toString(Ljava.lang.String;)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:start()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.MinuteOfHour:isBefore(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.CalendarInterval:startingFrom(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.FixedDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar:isBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:toString()Ljava.lang.String;
com.domainlanguage.time.TimeUnit:descendingUnits()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.Duration:assertNotConvertible(Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_day()I
com.domainlanguage.time.TimePoint:atGMT(IIIIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:compareTo(Lcom.domainlanguage.time.CalendarDate;)I
com.domainlanguage.time.TimeInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.intervals.Interval:Interval()V
com.domainlanguage.time.AnnualDateSpecification.1:next()Ljava.lang.Object;
com.domainlanguage.time.TimeUnit:descendingUnitsForDisplay()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarDate:from(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:normalizedUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarInterval:inclusive(IIIIII)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.Interval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimePoint:backToMidnight(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.base.Ratio:Ratio(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)V
com.domainlanguage.time.HourOfDay:HourOfDay(I)V
com.domainlanguage.time.CalendarDate:date(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:equals(Lcom.domainlanguage.time.CalendarInterval;)Z
com.domainlanguage.time.BusinessCalendar:getElapsedBusinessDays(Lcom.domainlanguage.time.CalendarInterval;)I
com.domainlanguage.time.TimeInterval:everPreceding(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.AnnualDateSpecification.1:hasNext()Z
com.domainlanguage.timeutil.Clock:setDefaultTimeZone(Ljava.util.TimeZone;)V
com.domainlanguage.time.FloatingDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.TimeRate:equals(Lcom.domainlanguage.time.TimeRate;)Z
com.domainlanguage.time.CalendarDate:plusDays(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:isBefore(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.TimeUnit:nextFinerUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.intervals.Interval:closed(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:isBelow(Ljava.lang.Comparable;)Z
com.domainlanguage.intervals.Interval:equals(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.money.Money:dollars(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:everFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarMinute:dateAndTimeOfDay(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.TimePoint:until(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.IntervalLimit:isClosed()Z
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval.2:hasNext()Z
com.domainlanguage.intervals.Interval:hasLowerLimit()Z
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.IntervalSequence:IntervalSequence()V
com.domainlanguage.timeutil.Clock:setTimeSource(Lcom.domainlanguage.time.TimeSource;)V
com.domainlanguage.timeutil.Clock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.BusinessCalendar:businessDaysOnly(Ljava.util.Iterator;)Ljava.util.Iterator;
com.domainlanguage.intervals.Interval:rightComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.HourOfDay:value(ILjava.lang.String;)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time.Duration:of(JLcom.domainlanguage.time.TimeUnit;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:toNormalizedString()Ljava.lang.String;
com.domainlanguage.timeutil.Clock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.CalendarDate:dayOfWeek()I
com.domainlanguage.time.HourOfDay:value()I
com.domainlanguage.intervals.Interval:gap(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.IntervalLimit:getValue()Ljava.lang.Comparable;
com.domainlanguage.time.TimePoint:asJavaUtilDate()Ljava.util.Date;
com.domainlanguage.time.TimePoint:asJavaCalendar()Ljava.util.Calendar;
com.domainlanguage.timeutil.SystemClock.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.timeutil.SystemClock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.base.Ratio:of(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarDate:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:intersect(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeOfDay:hashCode()I
com.domainlanguage.time.CalendarDate:equals(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:Interval(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)V
com.domainlanguage.time.TimeUnit:toString(J)Ljava.lang.String;
com.domainlanguage.time.BusinessCalendar.1:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarInterval.1:hasNext()Z
com.domainlanguage.intervals.Interval:isEmpty()Z
com.domainlanguage.intervals.IntervalLimit:IntervalLimit(ZZLjava.lang.Comparable;)V
com.domainlanguage.time.CalendarMinute:asTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;)Ljava.math.BigDecimal;
com.domainlanguage.base.Ratio:times(Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimeInterval.1:hasNext()Z
com.domainlanguage.time.HourOfDay:convertTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.BusinessCalendar:addHolidays(Ljava.util.Set;)V
com.domainlanguage.timeutil.NISTClient:timeSource(Ljava.lang.String;I)Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.TimePoint:toString(Ljava.lang.String;Ljava.util.TimeZone;)Ljava.lang.String;
com.domainlanguage.time.TimeOfDay:isAfter(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.TimePoint:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.Duration:years(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:TimePoint(J)V
com.domainlanguage.base.Ratio:equals(Lcom.domainlanguage.base.Ratio;)Z
com.domainlanguage.time.TimePointTest:javaUtilDateDec20_2003()Ljava.util.Date;
com.domainlanguage.time.TimeInterval:closed(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.MinuteOfHour:MinuteOfHour(I)V
com.domainlanguage.time.TimeUnit.Type:equals(Lcom.domainlanguage.time.TimeUnit.Type;)Z
com.domainlanguage.tests.CannedResponseServer:getHostName()Ljava.lang.String;
com.domainlanguage.time.HourOfDay:equals(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.timeutil.NISTClient:now(Ljava.lang.String;I)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:TimeRate(Ljava.lang.String;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.TimePoint:at12hr(IIIILjava.lang.String;IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:TimeRate(DLcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.TimePoint:from(Ljava.util.Calendar;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.CalendarInterval:lengthInDaysInt()I
com.domainlanguage.timeutil.SystemClock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.BusinessCalendar:minusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.base.Ratio:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeOfDay:hourAndMinute(II)Lcom.domainlanguage.time.TimeOfDay;
com.domainlanguage.time.ConcreteCalendarInterval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.timeutil.NISTClient:asTimePoint(Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.IntervalLimit:upper(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.time.Duration:assertQuantityPositiveOrZero(J)V
com.domainlanguage.time.TimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimePoint:from(Ljava.util.Date;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:plusMonths(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.timeutil.Clock:defaultTimeZone()Ljava.util.TimeZone;
com.domainlanguage.intervals.Interval:hasUpperLimit()Z
com.domainlanguage.time.MinuteOfHour:equals(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.Duration:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:Interval(Lcom.domainlanguage.intervals.IntervalLimit;Lcom.domainlanguage.intervals.IntervalLimit;)V
com.domainlanguage.intervals.Interval:toString()Ljava.lang.String;
com.domainlanguage.time.Duration:compareTo(Ljava.lang.Object;)I
com.domainlanguage.intervals.Interval:lesserOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.CalendarInterval:includesLowerLimit()Z
com.domainlanguage.time.TimePoint:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.Duration:days(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.ConcreteCalendarInterval:ConcreteCalendarInterval(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)V
com.domainlanguage.intervals.LinearIntervalMap:intersectingKeys(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List; | ASSIGN | 2274 | = null
com.domainlanguage.time.Duration:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalSequence:isEmpty()Z
com.domainlanguage.time.MinuteOfHour:value()I
com.domainlanguage.time.MinuteOfHour:value(I)Lcom.domainlanguage.time.MinuteOfHour;
com.domainlanguage.time.Duration:addAmountToTimePoint(JLcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.Duration:inBaseUnits()J
com.domainlanguage.time.TimeOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.MinuteOfHour:isAfter(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.timeutil.NISTClient.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.HourOfDay:value(I)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time.Duration:subtractAmountFromCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.TimePoint:convertedTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.BusinessCalendar.1:hasNext()Z
com.domainlanguage.time.TimePoint:atMidnight(IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:greaterOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.intervals.Interval:intersects(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:hashCode()I
com.domainlanguage.time.TimeInterval:end()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.ConcreteCalendarInterval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.FixedDateSpecification:FixedDateSpecification(II)V
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;II)Ljava.math.BigDecimal;
com.domainlanguage.time.TimeInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.BusinessCalendar:defaultHolidays()Ljava.util.Set;
com.domainlanguage.intervals.Interval:lesserOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.TimeOfDay:getMinute()I
com.domainlanguage.time.TimeRate:TimeRate(Ljava.math.BigDecimal;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.IntervalSequence:extent()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.intervals.Interval:isAbove(Ljava.lang.Comparable;)Z
com.domainlanguage.time.CalendarDate:toString()Ljava.lang.String;
com.domainlanguage.time.Duration:milliseconds(J)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeOfDay:TimeOfDay(II)V
com.domainlanguage.time.CalendarDate:asJavaCalendarUniversalZoneMidnight()Ljava.util.Calendar;
com.domainlanguage.base.Ratio:decimalValue(II)Ljava.math.BigDecimal;
com.domainlanguage.time.Duration:months(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.tests.CannedResponseServer:getPort()I
com.domainlanguage.time.CalendarInterval.2:next()Ljava.lang.Object;
com.domainlanguage.intervals.Interval:leftComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeInterval:open(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:seconds(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:includes(Ljava.lang.Comparable;)Z
com.domainlanguage.base.Ratio:of(JJ)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.intervals.Interval:emptyOfSameType()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:everPreceding(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeOfDay:on(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.FloatingDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.tests.SerializationTester:assertCanBeSerialized(Ljava.lang.Object;)V
com.domainlanguage.time.TimeOfDay:equals(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarDate:_from(Ljava.util.Calendar;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:isClosed()Z

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
178 1 111 1 231 1 183 1 100 1 
207 1 326 1 210 1 
46 2 210 1 102 1 
24 2 259 2 229 1 232 2 112 2 62 1 289 2 245 2 
246 1 1 1 2 1 138 1 295 1 255 1 9 1 256 2 211 1 55 1 216 2 259 2 109 1 58 2 265 1 112 3 62 1 186 1 308 1 24 2 271 1 229 1 75 1 232 3 79 1 193 2 238 1 278 1 280 1 32 1 133 1 86 1 38 1 39 1 200 2 289 2 245 2 
24 1 227 1 259 1 141 1 232 1 112 1 62 1 289 1 201 1 245 1 
157 1 202 1 139 1 120 1 207 1 232 1 210 1 77 1 14 1 259 1 112 1 63 1 328 1 201 1 
157 1 24 1 202 1 120 2 207 1 232 1 210 1 14 2 259 1 112 1 63 1 289 1 328 1 245 1 201 1 
14 1 310 1 197 1 120 1 164 1 
14 2 310 1 172 1 120 2 207 1 210 1 164 1 115 1 
14 1 310 1 120 1 
24 1 227 1 120 1 141 1 232 1 164 1 14 1 259 1 62 1 112 1 289 1 201 1 307 1 245 1 
210 1 
14 2 310 1 172 1 120 2 207 1 210 1 164 1 50 1 
67 1 159 1 310 2 252 1 272 2 120 5 207 1 297 1 49 1 210 1 165 1 164 2 14 5 56 1 107 1 172 1 260 1 154 2 65 2 
229 1 326 1 
117 1 24 1 229 2 232 2 234 1 259 2 112 2 289 1 245 1 
226 1 270 1 123 1 
91 1 2 1 271 1 229 1 75 1 232 1 256 1 193 1 55 1 238 1 278 1 280 1 109 1 58 1 112 1 39 1 
40 1 24 1 2 1 271 1 75 1 232 2 256 1 193 1 123 1 55 1 238 1 278 1 280 1 109 1 259 1 151 1 58 1 39 1 112 2 245 1 
24 3 259 3 151 1 229 1 232 3 112 3 289 1 245 3 
24 1 227 1 259 1 232 1 112 1 201 1 245 1 
24 1 117 1 259 1 232 1 112 1 234 1 289 1 201 1 245 1 
40 1 1 1 0 1 202 1 2 1 138 1 255 1 9 1 256 1 211 1 55 1 14 1 216 2 109 1 259 3 151 1 58 1 265 1 112 4 62 1 63 1 157 1 186 1 117 1 24 3 161 1 271 1 229 1 120 1 75 1 232 4 79 1 193 1 238 1 278 1 280 1 133 1 86 1 39 1 200 1 289 2 328 1 245 3 201 1 
24 1 259 2 85 1 151 1 229 1 232 2 112 2 77 1 245 1 
40 1 157 1 117 1 24 3 0 1 202 1 120 1 232 3 210 1 14 1 130 1 259 3 151 2 112 3 63 1 289 1 328 1 201 1 245 3 
226 1 117 1 24 2 232 2 123 1 259 2 151 1 112 2 289 1 245 2 
2 1 271 1 229 1 75 1 232 1 256 1 193 1 55 1 278 1 238 1 280 1 109 1 58 1 112 1 39 1 
2 1 69 1 271 1 229 1 254 1 232 1 256 1 193 1 278 1 238 1 280 1 109 1 58 1 112 1 39 1 
246 2 93 1 176 1 255 1 9 1 211 1 216 2 262 1 182 1 265 1 306 1 185 1 186 1 226 2 270 2 79 2 235 1 123 2 31 1 279 1 196 1 35 1 133 1 200 4 
24 1 259 1 95 1 232 1 112 1 63 1 201 1 245 1 
40 1 24 4 117 1 229 1 232 5 77 1 259 5 85 1 151 2 112 5 287 1 243 1 289 1 245 4 
24 2 227 1 259 2 95 1 232 2 112 2 201 1 245 2 
163 1 285 1 
163 1 285 1 
222 1 192 1 
222 1 192 1 
222 1 192 1 
3 1 163 1 285 1 
198 1 163 1 285 1 
240 1 163 2 285 2 222 1 192 1 103 1 
3 1 163 1 285 1 
3 1 163 1 285 1 
173 1 163 1 285 1 
173 1 163 1 285 1 
173 1 163 1 285 1 
309 2 45 1 251 2 120 2 163 2 210 1 277 2 237 2 14 2 127 1 240 1 180 2 323 1 132 1 263 1 87 1 285 2 327 1 116 3 
251 1 14 1 57 1 259 2 217 1 150 1 112 2 303 1 116 1 24 2 309 1 229 1 120 1 163 1 232 2 122 1 276 1 277 1 237 1 127 1 129 1 198 1 285 1 245 2 
311 1 162 1 206 1 
320 1 311 1 162 1 
250 1 320 1 162 3 206 2 233 1 11 1 
250 1 320 1 162 2 206 1 219 1 233 1 
250 1 320 1 162 2 206 1 233 2 
44 1 176 1 46 3 252 3 297 2 207 1 96 1 298 1 142 1 210 2 102 1 145 2 14 5 107 1 150 1 17 1 152 2 262 1 19 1 154 1 306 1 65 1 185 1 310 1 272 1 120 5 164 4 121 2 122 1 129 1 319 1 172 1 
176 3 46 9 252 8 297 6 207 1 96 1 142 2 99 1 210 5 102 3 52 1 14 9 107 1 17 2 152 6 262 3 154 2 155 1 306 3 65 2 185 3 159 1 310 6 272 2 120 9 164 7 121 6 122 4 168 1 319 3 170 1 172 1 197 5 324 5 136 1 
44 1 176 1 46 4 252 3 207 1 297 2 298 1 142 1 210 3 102 2 145 1 14 3 17 1 152 2 262 1 154 1 306 1 65 1 185 1 159 1 272 1 120 3 164 2 122 1 121 2 319 1 
44 1 176 2 46 7 252 5 207 1 297 4 298 1 142 1 210 4 102 3 145 2 14 4 17 1 152 4 262 2 154 1 155 1 306 2 65 1 185 2 159 1 272 1 120 4 164 3 121 4 122 2 168 1 319 2 136 1 
238 1 326 1 290 1 
238 1 41 1 
21 1 
238 1 39 1 
238 3 2 1 174 1 148 1 39 1 290 2 
238 1 2 1 39 1 
238 1 128 1 
246 4 25 1 187 1 93 2 160 1 29 2 79 3 10 1 54 1 177 1 215 1 262 1 182 3 60 1 200 7 185 1 89 1 
246 4 25 1 187 1 93 2 160 1 29 2 79 3 10 1 54 1 177 1 215 1 262 1 182 3 60 1 200 7 185 1 89 1 
246 4 25 1 187 1 93 2 160 1 29 2 79 3 10 1 275 1 54 1 177 1 215 1 262 1 182 3 60 1 200 7 185 1 89 1 
246 16 176 3 93 5 255 1 10 1 258 1 211 1 54 1 177 1 215 2 216 2 262 4 182 10 60 2 265 1 20 1 306 3 185 4 268 3 187 2 25 5 160 1 29 3 78 1 79 15 319 3 83 1 133 1 37 1 199 1 200 31 291 4 89 2 292 1 
246 5 175 1 93 3 255 2 10 1 211 2 177 1 216 4 215 1 262 1 182 4 60 1 265 2 20 1 305 1 185 1 187 1 25 1 160 1 29 2 79 4 133 2 200 9 89 1 
178 1 111 1 231 1 183 1 100 1 
111 1 231 1 183 1 76 1 100 1 
111 1 205 1 231 1 64 1 
111 1 231 1 183 1 76 1 100 1 
178 1 111 1 231 1 183 1 100 1 
125 1 
247 1 4 4 5 1 6 2 252 2 8 1 97 1 256 2 102 2 104 2 14 5 107 1 109 1 259 1 112 1 271 2 190 1 272 1 120 5 193 2 280 1 39 1 288 1 135 1 201 1 202 1 46 2 139 1 140 1 207 1 297 2 142 1 210 2 146 2 213 2 53 1 58 2 301 1 63 1 154 1 65 1 223 1 157 1 68 1 72 2 310 6 232 1 315 2 77 1 166 1 81 2 236 1 238 1 172 3 328 1 
202 1 4 2 139 1 140 1 97 1 50 1 104 1 14 3 259 1 301 1 112 1 63 1 223 1 157 1 68 1 310 2 120 3 232 1 77 1 172 1 328 1 201 1 
202 1 4 3 139 1 6 1 140 1 207 1 97 1 210 1 50 1 14 3 259 1 301 1 112 1 63 1 223 1 157 1 68 1 310 1 120 3 232 1 77 1 172 1 328 1 201 1 
202 1 4 3 139 1 6 1 140 1 207 1 97 1 210 1 50 1 146 1 104 1 14 3 259 1 301 1 112 1 63 1 223 1 157 1 68 1 310 2 120 3 232 1 77 1 172 1 328 1 201 1 
90 1 4 6 6 4 252 1 8 1 97 1 102 2 104 4 14 5 179 1 107 1 259 1 112 1 272 1 190 1 120 5 34 1 36 1 201 1 202 1 139 1 140 1 207 5 297 1 210 5 50 1 146 4 213 2 301 1 63 1 154 1 65 1 223 1 157 1 68 1 310 7 72 2 73 1 232 1 77 1 315 2 81 2 172 3 328 1 
4 4 6 2 252 1 8 1 97 1 102 2 104 2 14 4 107 1 259 1 112 1 272 1 190 1 120 4 288 1 201 1 202 1 139 1 46 2 140 1 297 1 207 1 210 2 146 2 213 2 301 1 63 1 154 1 65 1 223 1 157 1 68 1 72 2 310 4 232 1 77 1 315 2 81 2 172 2 328 1 
202 1 4 4 6 2 139 1 252 1 140 1 207 1 297 1 8 1 210 1 97 1 146 2 102 2 104 2 213 2 14 4 179 1 107 1 259 1 301 1 112 1 63 1 154 1 65 1 223 1 157 1 68 1 310 4 72 2 190 1 73 1 272 1 120 4 232 1 315 2 77 1 81 2 172 2 34 1 328 1 201 1 
202 1 4 4 6 2 139 1 252 1 140 1 207 1 297 1 8 1 210 1 97 1 146 2 102 2 104 2 213 2 14 4 179 1 107 1 259 1 301 1 112 1 63 1 154 1 65 1 223 1 157 1 68 1 310 4 72 2 190 1 73 1 272 1 120 4 232 1 315 2 77 1 81 2 172 2 34 1 328 1 201 1 
202 1 4 4 249 1 6 2 46 2 139 1 252 1 140 1 207 1 297 1 210 1 97 1 101 1 146 2 104 2 213 2 14 4 107 1 259 1 301 1 112 1 63 1 154 1 65 1 23 2 223 1 157 1 68 1 310 4 72 2 190 1 73 1 272 1 120 4 232 1 77 1 30 2 172 2 322 1 328 1 201 1 
202 1 90 1 4 5 139 1 6 3 252 1 140 1 207 1 297 1 8 1 210 1 97 1 102 2 146 3 104 3 213 2 14 4 179 1 107 1 259 1 301 1 112 1 63 1 154 1 65 1 223 1 157 1 68 1 72 2 310 5 190 1 73 1 272 1 120 4 232 1 315 2 77 1 81 2 172 2 34 1 328 1 201 1 
202 1 90 1 4 5 139 1 6 3 252 1 140 1 207 1 297 1 8 1 210 1 97 1 102 2 146 3 104 3 213 2 14 4 179 1 107 1 259 1 301 1 112 1 63 1 154 1 65 1 223 1 157 1 68 1 72 2 310 5 190 1 73 1 272 1 120 4 232 1 315 2 77 1 81 2 172 2 34 1 328 1 201 1 
4 4 6 2 252 1 97 1 101 1 104 2 14 4 107 1 259 1 112 1 23 2 272 1 190 1 120 4 30 2 288 1 201 1 202 1 139 1 46 2 140 1 297 1 207 1 210 1 146 2 213 2 301 1 63 1 154 1 65 1 223 1 157 1 68 1 72 2 310 4 232 1 77 1 172 2 328 1 
246 3 93 2 255 1 9 1 10 1 211 1 177 1 215 1 216 2 182 2 262 1 265 1 185 1 226 1 186 1 270 1 160 1 229 2 29 1 79 3 235 1 123 1 133 1 326 1 200 6 89 1 
1 1 246 8 93 1 176 2 295 1 208 1 255 2 9 2 211 2 13 1 216 4 182 2 262 2 61 1 265 2 306 1 185 1 186 1 268 3 226 4 25 1 270 11 229 1 79 6 123 11 319 2 83 1 283 1 133 2 325 1 200 14 291 3 292 1 
40 1 91 1 1 1 246 1 2 1 295 1 255 1 9 1 256 1 211 1 55 1 216 2 109 1 300 1 259 1 151 1 58 1 59 1 112 2 265 1 221 1 226 1 186 1 24 1 271 1 229 1 75 1 232 2 79 1 193 1 238 1 278 1 280 1 283 1 133 1 39 1 200 2 245 1 
1 1 246 10 2 2 93 4 176 2 255 3 9 3 10 1 256 3 177 1 259 1 109 2 18 1 262 3 182 8 265 3 112 3 184 2 185 3 24 1 186 3 25 4 270 7 271 1 29 1 193 3 123 7 124 2 278 2 280 2 131 1 283 1 133 3 39 2 200 20 40 1 138 2 295 1 211 3 55 2 215 1 216 6 151 1 153 1 58 3 220 2 306 2 225 2 226 7 160 1 229 2 75 2 232 3 79 10 238 2 319 2 82 1 89 1 245 1 
246 1 1 1 92 1 5 1 295 1 255 2 9 2 256 8 211 2 12 1 216 4 108 1 259 1 109 2 149 1 151 1 18 1 58 8 112 1 265 2 24 1 186 2 308 2 271 2 119 1 274 1 232 1 79 1 235 1 193 7 317 1 318 1 238 3 280 2 133 2 39 2 200 2 135 1 245 1 
246 1 93 1 176 1 255 1 9 1 211 1 216 2 259 1 182 1 262 1 265 1 112 1 306 1 185 1 226 1 24 1 117 1 186 1 270 1 232 1 79 2 123 1 319 1 283 1 133 1 134 1 289 1 200 3 245 1 
226 1 186 1 246 2 25 1 270 1 176 1 255 1 9 1 235 1 211 1 123 1 279 1 216 2 182 1 262 1 133 1 265 1 200 2 
226 1 186 1 93 1 270 1 255 1 9 1 79 2 235 1 211 1 123 1 216 2 196 1 182 1 133 1 265 1 200 2 306 1 185 1 
246 2 176 1 93 1 255 1 9 1 211 1 216 2 262 1 182 2 265 1 306 1 185 1 186 1 226 2 25 1 270 2 79 2 235 1 123 2 319 1 133 1 200 4 
226 1 186 1 246 2 25 1 270 1 176 1 255 1 9 1 211 1 123 1 317 1 279 1 216 2 182 1 262 1 133 1 265 1 200 2 
226 1 186 1 93 1 270 1 255 1 9 1 79 2 211 1 123 1 317 1 216 2 196 1 182 1 133 1 265 1 200 2 306 1 185 1 
246 2 176 1 93 1 255 1 9 1 211 1 216 2 262 1 182 2 265 1 306 1 185 1 186 1 226 2 25 1 270 2 79 2 317 1 123 2 319 1 133 1 200 4 
246 2 176 1 93 1 255 1 9 1 211 1 216 2 262 1 182 2 265 1 306 1 185 1 186 1 226 2 25 1 270 2 79 2 123 2 319 1 133 1 200 4 
246 1 1 1 2 1 138 1 295 1 255 1 9 1 256 1 211 1 55 1 216 2 109 1 58 1 112 1 265 1 186 1 271 1 229 1 75 1 232 1 79 1 193 1 278 1 238 1 280 1 133 1 39 1 200 2 
246 1 1 1 2 1 295 1 254 1 255 1 9 1 256 1 211 1 15 1 216 2 109 1 58 1 112 1 265 1 186 1 69 1 271 1 229 1 232 1 79 1 193 1 278 1 238 1 280 1 133 1 39 1 200 2 
246 2 176 1 93 1 255 1 9 1 211 1 216 2 262 1 182 2 265 1 306 1 185 1 186 1 226 2 25 1 270 2 79 2 123 2 319 1 283 1 133 1 200 4 
246 2 2 1 93 1 176 1 138 1 255 1 9 1 256 1 211 1 55 1 216 2 109 1 108 1 182 2 262 1 58 1 112 1 265 1 306 1 185 1 226 2 225 1 186 1 25 1 270 2 75 1 232 1 79 2 193 1 123 2 278 1 238 1 319 1 280 1 133 1 39 1 200 4 
246 2 176 1 255 1 9 1 211 1 216 2 259 1 182 1 262 1 265 1 112 1 306 1 185 1 24 1 117 1 186 1 226 1 25 1 270 1 232 1 79 1 123 1 167 1 319 1 283 1 133 1 289 1 200 3 245 1 
246 1 175 1 27 1 273 1 255 1 79 1 211 1 216 2 16 1 84 1 133 1 265 1 22 1 200 2 
246 1 175 1 27 1 273 2 255 1 79 1 211 1 216 2 16 1 84 1 133 1 265 1 22 2 200 2 
246 1 175 1 27 1 273 1 255 1 79 1 211 1 216 2 16 1 84 1 133 1 265 1 22 1 200 2 
246 1 175 1 27 1 273 1 255 1 79 1 211 1 216 2 16 1 84 1 133 1 265 1 22 1 200 2 
246 1 175 1 27 1 273 1 255 1 79 1 211 1 216 2 16 1 84 1 133 1 265 1 22 1 200 2 
237 1 309 1 281 1 240 1 251 1 263 1 163 1 285 1 327 1 277 1 
57 1 198 1 
237 1 309 1 43 1 294 1 251 1 209 1 163 1 285 1 277 1 
309 1 45 1 251 1 120 1 163 1 210 1 277 1 127 1 14 1 237 1 240 1 180 1 323 1 263 1 87 1 285 1 327 1 116 2 
309 1 45 1 251 1 120 1 163 1 210 1 277 1 127 1 14 1 237 1 240 1 180 1 323 1 263 1 87 1 285 1 327 1 116 2 
309 1 45 1 251 1 120 1 163 1 210 1 277 1 127 1 14 1 237 1 240 1 180 1 323 1 263 1 87 1 285 1 327 1 116 2 
3 1 228 1 103 1 
3 1 228 1 103 1 
126 1 173 1 
126 1 173 1 103 1 
303 1 276 1 
137 1 251 1 14 1 57 1 180 1 217 1 259 2 150 1 112 2 303 1 116 1 24 2 309 1 229 1 120 1 232 2 163 1 164 1 122 1 276 1 277 1 237 1 129 1 323 1 198 1 285 1 245 2 
3 1 228 1 
126 1 173 1 103 1 
246 1 1 1 203 1 248 1 295 1 204 1 255 1 9 1 256 2 211 1 12 1 216 2 109 1 259 2 149 1 181 1 58 2 112 2 265 1 267 1 186 1 308 2 232 2 79 1 193 2 238 1 280 1 283 1 133 1 39 1 200 2 
42 1 118 1 311 1 162 2 206 1 28 1 256 2 193 2 11 1 299 1 280 1 109 1 108 1 320 1 218 1 18 1 58 2 304 1 244 1 
42 1 118 1 311 1 162 2 206 1 28 1 256 1 193 1 11 1 299 1 280 1 109 1 320 1 18 1 58 1 304 1 242 1 
5 1 271 1 256 1 257 1 193 1 238 1 280 1 109 1 171 1 58 1 39 1 304 1 244 1 135 1 
42 1 118 1 311 1 162 2 206 1 28 1 256 1 193 1 11 1 299 1 280 1 109 1 320 1 218 1 18 1 58 1 304 1 244 1 
33 1 
67 1 252 1 207 1 297 1 326 1 210 1 165 1 
46 1 252 1 297 1 207 1 8 1 210 2 102 1 14 1 107 1 154 1 65 1 310 1 272 1 120 1 315 1 81 1 172 1 
2 3 176 2 94 1 252 9 7 1 98 2 256 3 102 6 14 5 107 4 108 1 109 4 262 2 185 2 269 2 271 1 272 4 120 5 121 6 193 3 124 2 128 2 280 3 39 3 290 2 41 3 46 12 296 2 48 1 207 2 297 8 142 2 144 2 210 8 53 1 214 2 148 1 152 6 58 3 154 4 65 4 306 2 67 1 158 1 70 2 310 5 312 1 313 2 165 1 80 2 238 10 319 2 172 3 328 2 
176 2 46 6 252 8 297 5 207 2 142 1 98 1 210 5 102 3 53 1 105 1 14 1 106 1 107 2 152 5 262 2 302 1 154 2 65 2 306 2 185 2 269 2 268 1 310 1 191 1 74 1 272 2 120 1 121 5 316 1 319 2 172 1 291 1 329 1 292 1 
252 2 141 1 297 2 98 1 10 1 14 1 179 1 215 1 107 1 259 1 262 2 112 1 62 1 154 1 266 1 65 1 185 1 307 1 269 2 24 1 227 1 272 1 120 1 232 1 289 1 201 1 89 1 245 1 
67 1 272 1 252 1 297 1 207 1 165 1 210 1 107 1 154 1 65 1 
269 2 176 2 46 10 252 5 297 5 98 1 210 5 121 5 102 5 124 1 319 2 152 5 262 2 306 2 185 2 
14 1 310 1 172 1 120 1 207 1 210 1 
247 1 5 1 94 1 252 2 297 2 142 2 256 4 53 2 14 3 107 1 109 1 110 1 58 4 154 2 65 2 71 1 159 1 271 2 310 4 272 2 312 2 120 3 193 4 236 1 238 1 280 1 172 2 39 1 135 1 
1 1 2 1 138 1 255 1 9 1 256 1 211 1 55 1 216 2 259 2 109 1 58 1 265 1 112 3 62 1 24 2 186 1 271 1 229 1 75 1 232 3 79 1 193 1 278 1 238 1 280 1 133 1 86 1 39 1 200 1 289 2 245 2 
46 4 272 1 252 1 297 2 207 2 29 1 142 1 210 4 121 2 102 2 53 1 107 1 152 2 154 1 65 1 
237 1 282 1 277 1 
237 1 26 1 263 1 276 1 277 1 
237 1 282 1 277 1 
237 1 282 1 277 1 
237 1 143 1 277 1 
237 1 143 1 277 1 
237 1 143 1 277 1 
237 1 277 1 
163 1 285 1 
246 4 25 1 93 2 160 1 255 2 29 1 10 1 79 4 211 2 177 1 216 4 215 1 262 1 182 3 133 2 265 2 20 1 200 8 185 1 89 1 
246 3 93 2 160 1 29 1 79 3 10 1 177 1 215 1 182 2 262 1 326 1 200 6 89 1 185 1 
246 2 25 1 93 1 176 1 47 1 255 1 79 2 211 1 319 1 216 2 182 2 262 1 133 1 265 1 200 4 306 1 185 1 
268 1 246 3 25 1 93 1 176 1 79 4 319 1 83 1 262 1 182 2 200 7 306 1 291 2 185 1 292 1 
246 11 176 2 93 5 208 1 255 2 10 1 211 2 177 1 215 2 216 4 182 9 262 3 20 2 265 2 306 2 185 3 268 2 25 4 160 1 29 1 79 12 319 2 83 1 321 1 133 2 325 1 200 23 291 2 89 2 
79 1 200 1 291 1 
246 1 268 1 200 1 
246 3 25 1 176 1 93 2 47 1 255 1 79 3 211 1 124 1 319 1 216 2 262 1 182 3 133 1 265 1 200 6 306 1 185 1 
246 6 175 1 176 2 93 1 255 1 211 1 105 1 106 1 216 2 262 2 182 2 265 1 302 1 306 2 185 2 268 1 25 1 191 1 79 6 316 1 319 2 133 1 200 12 291 1 292 1 
246 3 25 1 93 1 10 1 79 3 215 1 262 1 182 2 200 6 185 1 89 1 
246 1 25 1 93 1 160 1 255 1 79 2 211 1 177 1 215 1 216 2 321 1 182 2 133 1 20 1 265 1 200 3 89 1 
246 5 175 1 25 2 93 3 255 1 79 5 10 1 211 1 216 2 215 2 182 5 262 2 133 1 265 1 200 10 266 1 89 2 185 2 
246 2 175 1 25 1 176 1 255 1 211 1 216 2 262 1 182 1 133 1 265 1 200 2 
246 2 175 1 25 1 93 1 176 1 255 1 79 2 211 1 319 1 216 2 182 2 262 1 133 1 265 1 200 4 306 1 185 1 
246 1 175 1 25 1 93 1 255 3 79 2 211 3 216 6 215 1 321 1 182 2 133 3 20 1 113 1 265 3 200 3 89 1 
246 16 175 1 176 3 93 7 47 1 255 5 10 2 258 1 211 5 177 1 215 3 216 10 262 5 182 12 20 2 113 1 265 5 306 3 185 5 268 3 25 5 160 1 29 1 79 18 319 3 83 1 321 1 37 1 133 5 199 1 200 34 291 4 89 3 292 1 
246 4 175 1 93 2 255 1 10 1 211 1 177 1 106 1 216 2 215 1 262 1 182 2 265 1 185 1 268 1 160 1 29 1 79 4 133 1 200 8 291 1 292 1 89 1 
246 6 175 1 93 2 176 1 47 1 255 2 10 1 211 2 177 1 215 1 106 1 216 4 262 2 182 3 265 2 185 1 268 1 25 1 160 1 29 1 79 5 319 1 83 1 133 2 200 11 291 2 89 1 292 1 
246 9 175 1 176 2 93 3 47 1 255 3 10 1 211 3 105 1 177 1 215 1 106 1 216 6 262 3 182 4 265 3 302 1 20 1 306 2 185 3 268 1 25 1 160 1 191 1 29 1 79 10 316 1 319 2 133 3 200 19 291 1 89 1 292 1 
246 10 175 1 176 2 93 3 47 1 255 3 10 1 211 3 105 1 177 1 215 1 106 1 216 6 262 3 182 5 20 1 265 3 302 1 306 1 185 2 268 1 25 2 160 1 191 1 29 1 79 7 316 1 319 2 133 3 200 17 291 1 89 1 292 1 
246 4 175 1 93 2 255 1 10 1 211 1 177 1 106 1 216 2 215 1 262 1 182 2 265 1 185 1 268 1 160 1 29 1 79 4 133 1 200 8 291 1 292 1 89 1 
246 6 175 1 176 2 93 1 255 1 211 1 105 1 106 1 216 2 262 2 182 2 265 1 302 1 306 2 185 2 268 1 25 1 191 1 79 6 316 1 319 2 133 1 200 12 291 1 292 1 
246 10 175 1 176 2 93 3 47 1 255 4 10 1 211 4 105 1 177 1 215 1 106 1 216 8 262 3 182 5 265 4 302 1 20 2 306 1 185 2 268 1 25 2 160 1 191 1 29 1 79 8 316 1 319 2 133 4 200 18 291 1 89 1 292 1 
246 9 175 1 176 3 93 3 255 4 211 4 105 1 106 1 216 8 262 3 182 6 265 4 113 1 302 1 20 2 306 2 185 2 268 1 25 3 191 1 79 7 316 1 319 3 133 4 200 16 291 1 292 1 
246 3 25 3 93 3 160 1 79 4 10 1 177 2 215 3 182 6 262 1 200 7 185 1 89 3 
246 10 175 1 176 2 93 3 255 4 10 1 211 4 105 1 177 1 215 1 106 1 216 8 262 3 182 4 265 4 113 1 302 1 20 2 306 1 185 2 268 1 25 1 160 1 191 1 29 1 79 8 316 1 319 2 133 4 200 18 291 1 89 1 292 1 
259 1 85 1 229 1 253 1 232 1 112 1 77 1 
224 1 229 1 253 1 314 1 232 1 77 1 239 1 259 1 241 1 85 1 284 1 112 1 
238 1 280 1 109 1 5 1 271 1 58 1 39 1 326 1 256 1 135 1 193 1 
24 1 2 1 271 1 229 1 232 2 256 1 193 1 55 1 238 1 278 1 280 1 109 1 259 1 151 1 58 1 39 1 112 2 245 1 
202 1 2 2 256 1 55 1 259 2 109 1 151 1 58 1 112 2 63 1 24 1 229 1 312 1 232 2 80 1 193 1 278 1 238 3 128 1 280 1 39 2 245 2 201 1 
202 1 2 2 256 2 259 2 109 1 151 1 58 2 112 2 63 1 24 1 69 1 229 1 312 1 230 1 232 2 80 1 193 2 278 1 238 3 128 1 280 1 39 2 245 2 201 1 
293 1 41 1 2 1 271 1 310 1 120 2 312 1 207 1 230 1 210 1 80 1 256 3 193 3 14 2 128 1 238 4 280 1 109 1 58 3 39 1 286 1 328 1 290 1 
41 1 2 1 271 1 310 1 296 1 120 2 312 1 207 1 230 1 210 1 80 1 256 3 193 3 14 2 128 1 238 4 280 1 109 1 58 3 39 1 328 1 290 1 
318 1 280 1 109 1 58 1 256 1 193 1 
308 1 2 1 92 1 271 2 119 1 274 1 256 7 193 6 212 1 194 1 318 1 238 3 280 2 108 1 148 1 109 3 149 1 18 1 58 7 39 2 114 1 
246 3 2 1 93 2 255 2 9 2 256 1 10 1 177 1 108 1 259 1 109 1 181 1 182 2 262 1 265 2 112 2 185 1 24 1 186 2 270 1 29 1 193 1 123 1 278 1 280 1 283 1 133 2 39 1 200 6 138 1 211 2 55 1 216 4 215 1 151 1 58 1 220 1 226 1 225 1 160 1 229 2 75 1 232 2 79 3 238 1 245 1 89 1 
41 1 94 1 252 1 296 1 207 1 297 1 210 1 144 1 256 1 14 3 107 2 58 1 154 2 65 2 67 1 271 1 70 1 310 2 272 2 120 3 313 1 165 1 164 1 193 1 238 2 172 1 328 1 290 1 
158 1 2 1 256 2 193 2 318 1 238 2 280 1 108 1 148 1 109 2 58 2 39 1 290 1 
5 1 271 1 230 1 256 4 193 4 51 1 238 1 280 1 109 1 108 1 58 4 39 1 135 1 
2 1 312 1 256 2 193 2 212 1 147 1 238 1 280 1 82 1 109 2 58 2 39 1 114 1 156 1 
280 1 109 1 320 1 271 1 311 1 162 1 58 1 28 1 256 1 193 1 
238 1 280 1 109 1 108 1 149 1 18 1 58 2 39 1 256 2 193 2 267 1 
5 1 271 1 312 1 119 1 274 1 256 5 193 4 51 1 238 3 280 2 108 1 109 2 149 1 58 5 39 2 135 1 
5 1 271 1 312 1 119 1 256 5 193 4 51 1 238 3 280 2 108 1 109 2 149 1 58 5 264 1 39 2 135 1 
24 1 2 1 69 1 271 1 229 1 232 2 256 1 193 1 238 1 278 1 280 1 109 1 259 1 151 1 58 1 39 1 112 2 245 1 
2 1 312 1 256 1 193 1 212 1 194 1 238 1 280 1 148 1 109 2 58 1 39 1 114 1 
188 1 189 1 229 1 88 1 195 1 
157 1 202 1 0 1 188 1 189 2 229 1 120 2 207 1 210 1 164 1 195 2 169 1 14 2 261 1 63 1 88 2 328 1 66 1 201 1 
203 1 188 1 248 1 259 1 189 1 204 1 232 1 112 1 195 1 
188 1 261 1 66 1 
