#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
com.domainlanguage.money.ProrationTest:testAllocate1()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver2()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver10()V PASSED
com.domainlanguage.money.ProrationTest:testProrateZeroTotal()V PASSED
com.domainlanguage.money.ProrationTest:testDistributeRemainder()V PASSED
com.domainlanguage.money.ProrationTest:testPartOfWhole()V PASSED
com.domainlanguage.money.ProrationTest:testSumMoney()V PASSED
com.domainlanguage.money.ProrationTest:testProrateTotalIndivisibleBy3()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOnlyOneShortOfEven()V PASSED
com.domainlanguage.time.CalendarDateTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarDateTest:testComparison()V PASSED
com.domainlanguage.time.CalendarDateTest:testStartAsTimePoint()V ERROR java.lang.NullPointerException 50 23 259 
com.domainlanguage.time.CalendarDateTest:testAsTimeInterval()V ERROR java.lang.NullPointerException 50 23 259 250 
com.domainlanguage.time.CalendarDateTest:testFormattedString()V ERROR java.lang.NullPointerException 50 23 259 (99,292) 
com.domainlanguage.time.CalendarDateTest:testFromFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromTimePoint()V ERROR java.lang.NullPointerException 50 23 
com.domainlanguage.time.CalendarDateTest:testDayOfWeek()V PASSED
com.domainlanguage.time.CalendarDateTest:testPreviousDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testConversionToJavaUtil()V PASSED
com.domainlanguage.time.CalendarDateTest:testToString()V ERROR java.lang.NullPointerException 50 23 259 (99,292) (99,292) 
com.domainlanguage.time.CalendarDateTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarDateTest:testNextDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testMonth()V PASSED
com.domainlanguage.time.HourOfDayTest:test24IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test24GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test12GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12BadAmPm()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterAfterEarlier()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:test12Simple()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:test24Simple()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:testEarlierAfterLater()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:testEqualAfterEqual()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:testLaterBeforeEarlier()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:testEarlierBeforeLater()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.HourOfDayTest:testEqualBeforeEqual()V ERROR java.lang.IllegalArgumentException (35,177) 
com.domainlanguage.time.NominalTimeTest:testCombineNominalTimes()V ERROR java.lang.IllegalArgumentException (35,177) 234 
com.domainlanguage.time.NominalTimeTest:testConvertNominalTimeToTimePoint()V ERROR java.lang.IllegalArgumentException (35,177) 234 190 
com.domainlanguage.base.RatioTest:testBigDecimalRatio()V PASSED
com.domainlanguage.base.RatioTest:testLongRatio()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyNumerator()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyByRatio()V PASSED
com.domainlanguage.base.RatioTest:testEquals()V PASSED
com.domainlanguage.time.DateSpecificationTest:testFixedDate()V PASSED
com.domainlanguage.time.DateSpecificationTest:testNthWeekdayInMonth()V PASSED
com.domainlanguage.time.DateSpecificationTest:testSelectFirstFromInterval()V PASSED
com.domainlanguage.time.DateSpecificationTest:testIterateThroughInterval()V PASSED
com.domainlanguage.time.TimeUnitTest:testSerialization()V PASSED
com.domainlanguage.time.TimeUnitTest:testComparison()V PASSED
com.domainlanguage.time.TimeUnitTest:testToString()V PASSED
com.domainlanguage.time.TimeUnitTest:testIsConvertableTo()V PASSED
com.domainlanguage.time.TimeUnitTest:testNextFinerUnit()V PASSED
com.domainlanguage.time.TimeUnitTest:testConvertibleToMilliseconds()V PASSED
com.domainlanguage.time.TimeUnitTest:testJavaCalendarConstantForBaseType()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testInsertedOutOfOrder()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testOverlapping()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testIterate()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testGaps()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testExtent()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingScalingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRounding()V PASSED
com.domainlanguage.util.ImmutableIteratorTest:testRemove()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testElapsedBusinessDays()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsHoliday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNearestBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDaysIterator()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testMinusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDayReverseIterator()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteOverlap()V ERROR java.lang.NullPointerException 245 121 112 68 63 107 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMiddle()V ERROR java.lang.NullPointerException 245 121 112 68 63 107 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMultiple()V ERROR java.lang.NullPointerException 245 121 112 68 63 107 
com.domainlanguage.intervals.IntervalMapTest:testLookup()V PASSED
com.domainlanguage.intervals.IntervalMapTest:testRemove()V ERROR java.lang.NullPointerException 245 121 112 68 63 
com.domainlanguage.timeutil.SystemClockTest:testSystemClockTimeSource()V PASSED
com.domainlanguage.time.TimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.time.TimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.time.TimeRateTest:testEquals()V PASSED
com.domainlanguage.time.TimeRateTest:testRounding()V PASSED
com.domainlanguage.util.VerifyPersistentMappingTest:test()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testComplements()V ERROR java.lang.NullPointerException 122 112 68 
com.domainlanguage.time.CalendarIntervalTest:testEverFromToString()V ERROR java.lang.NullPointerException 50 23 259 (99,292) (99,292) 70 
com.domainlanguage.time.CalendarIntervalTest:testEquals()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysAdd()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testLength()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testTranslationToTimeInterval()V ERROR java.lang.NullPointerException 50 23 259 250 
com.domainlanguage.time.CalendarIntervalTest:testSingleDateCalendarIntervalCompare()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testSimple()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testIllegalLessThanZero()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testGreaterThan()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjoint()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjointAdjacentOpen()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapLeft()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapRight()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementAdjacentClosed()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosing()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosed()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedEndPoint()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testEqualsForOnePointIntervals()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedOpen()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testAbstractCreation()V PASSED
com.domainlanguage.intervals.IntervalTest:testSerialization()V PASSED
com.domainlanguage.intervals.IntervalTest:testOpenInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersects()V PASSED
com.domainlanguage.intervals.IntervalTest:testIntersection()V PASSED
com.domainlanguage.intervals.IntervalTest:testGreaterOfLowerLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testLesserOfUpperLimits()V PASSED
com.domainlanguage.intervals.IntervalTest:testCoversInterval()V PASSED
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEqual()V ERROR java.lang.NullPointerException 245 121 112 68 
com.domainlanguage.intervals.IntervalTest:testIsSingleElement()V PASSED
com.domainlanguage.intervals.IntervalTest:testEqualsForEmptyIntervals()V PASSED
com.domainlanguage.intervals.IntervalTest:testToString()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsBelow()V PASSED
com.domainlanguage.intervals.IntervalTest:testIncludes()V PASSED
com.domainlanguage.intervals.IntervalTest:testIsEmpty()V PASSED
com.domainlanguage.intervals.IntervalTest:testGap()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testNISTTimeSource()V PASSED
com.domainlanguage.time.DurationTest:testSerialization()V PASSED
com.domainlanguage.time.DurationTest:testAddMillisecondsToPoint()V ERROR java.lang.NullPointerException 50 15 
com.domainlanguage.time.DurationTest:testAddMonthsToPoint()V ERROR java.lang.NullPointerException 50 15 
com.domainlanguage.time.DurationTest:testSubtractMonthsFromPoint()V ERROR java.lang.NullPointerException 50 15 
com.domainlanguage.time.DurationTest:testSubtractFromCalendarDate()V ERROR java.lang.NullPointerException 50 23 259 (99,292) (99,292) 
com.domainlanguage.time.DurationTest:testAddToCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testConversionToBaseUnits()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedString()V FAILED junit.framework.ComparisonFailure 
com.domainlanguage.time.DurationTest:testStartingFromTimePoint()V ERROR java.lang.NullPointerException 50 15 
com.domainlanguage.time.DurationTest:testStartingFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testNormalizedUnit()V PASSED
com.domainlanguage.time.DurationTest:testEquals()V PASSED
com.domainlanguage.time.DurationTest:testToString()V FAILED junit.framework.ComparisonFailure 
com.domainlanguage.time.DurationTest:testDivide()V PASSED
com.domainlanguage.time.DurationTest:testCompare()V PASSED
com.domainlanguage.time.DurationTest:testAdd()V PASSED
com.domainlanguage.time.DurationTest:testSubtract()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMillisecondsFromPoint()V ERROR java.lang.NullPointerException 50 15 
com.domainlanguage.time.DurationTest:testToNormalizedStringMonthBased()V FAILED junit.framework.ComparisonFailure 
com.domainlanguage.money.MoneyTest:testSerialization()V PASSED
com.domainlanguage.money.MoneyTest:testCreationFromDouble()V PASSED
com.domainlanguage.money.MoneyTest:testConstructor()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplyRounding()V PASSED
com.domainlanguage.money.MoneyTest:testMinimumIncrement()V PASSED
com.domainlanguage.money.MoneyTest:testDivisionByMoney()V PASSED
com.domainlanguage.money.MoneyTest:testCloseNumbersNotEqual()V PASSED
com.domainlanguage.money.MoneyTest:testEqualsNull()V PASSED
com.domainlanguage.money.MoneyTest:testPositiveNegative()V PASSED
com.domainlanguage.money.MoneyTest:testSubtraction()V PASSED
com.domainlanguage.money.MoneyTest:testApplyRatio()V PASSED
com.domainlanguage.money.MoneyTest:testIncremented()V PASSED
com.domainlanguage.money.MoneyTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTest:testYen()V PASSED
com.domainlanguage.money.MoneyTest:testDivide()V PASSED
com.domainlanguage.money.MoneyTest:testMultiply()V PASSED
com.domainlanguage.money.MoneyTest:testCompare()V PASSED
com.domainlanguage.money.MoneyTest:testHash()V PASSED
com.domainlanguage.money.MoneyTest:testNegation()V PASSED
com.domainlanguage.money.MoneyTest:testPrint()V PASSED
com.domainlanguage.money.MoneyTest:testRound()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplicationWithExplicitRounding()V PASSED
com.domainlanguage.money.MoneyTest:testAdditionOfDifferentCurrencies()V PASSED
com.domainlanguage.money.MoneyTest:testDifferentCurrencyNotEqual()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
com.domainlanguage.time.FixedDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.money.Money:compareTo(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.money.Money:euros(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:assertNotConvertible(Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.money.Money:dollars(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:compareTo(Ljava.lang.Object;)I
com.domainlanguage.money.Money:Money(Ljava.math.BigDecimal;Ljava.util.Currency;)V
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_month()I
com.domainlanguage.time.CalendarDate:date(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.MinuteOfHour:MinuteOfHour(I)V
com.domainlanguage.base.Ratio:times(Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeUnit:baseUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.money.Money:equals(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.intervals.Interval:intersect(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:atGMT(IIIIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:from(J)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:end()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:BusinessCalendar()V
com.domainlanguage.money.Money:minimumIncrement()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:toNormalizedString([Lcom.domainlanguage.time.TimeUnit;)Ljava.lang.String; | CONDITION | 7146 | if (x) -> if (!x)
com.domainlanguage.time.CalendarInterval:lengthInDaysInt()I
com.domainlanguage.money.Money:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimePoint:atMidnight(IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate; | CONDITION | 3451 | if (x) -> if (!x)
com.domainlanguage.time.MinuteOfHour:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.IntervalLimit:IntervalLimit(ZZLjava.lang.Comparable;)V
com.domainlanguage.time.CalendarDate:compareTo(Ljava.lang.Object;)I
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalLimit:lower(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.base.Ratio:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.MinuteOfHour:isBefore(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.ConcreteCalendarInterval:ConcreteCalendarInterval(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)V
com.domainlanguage.time.HourOfDay:value(ILjava.lang.String;)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time.Duration:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:incremented()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeRate:TimeRate(DLcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.Interval:Interval()V
com.domainlanguage.intervals.Interval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.Duration:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Money:assertHasSameCurrencyAs(Lcom.domainlanguage.money.Money;)V
com.domainlanguage.time.TimeUnit:isConvertibleTo(Lcom.domainlanguage.time.TimeUnit;)Z
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.Duration:years(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:from(Ljava.util.Date;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:nextNumberOfBusinessDays(ILjava.util.Iterator;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:quarters(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:at(IIIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint; | ASSIGN | 2101 | = null
com.domainlanguage.intervals.Interval:isSingleElement()Z
com.domainlanguage.base.Ratio:equals(Lcom.domainlanguage.base.Ratio;)Z
com.domainlanguage.time.BusinessCalendar:nearestBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.TimeUnit:isConvertibleToMilliseconds()Z
com.domainlanguage.tests.CannedResponseServer:getHostName()Ljava.lang.String;
com.domainlanguage.time.BusinessCalendar:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.BusinessCalendar:nextBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:previousDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.money.Proration:ratios([Ljava.math.BigDecimal;)[Lcom.domainlanguage.base.Ratio;
com.domainlanguage.timeutil.SystemClock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.LinearIntervalMap:remove(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.time.Duration:toString()Ljava.lang.String;
com.domainlanguage.intervals.Interval:includesLowerLimit()Z
com.domainlanguage.intervals.Interval:lesserOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable; | CONDITION | 7071 | if (x) -> if (!x)
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_year()I
com.domainlanguage.intervals.Interval:complementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.intervals.Interval:hasUpperLimit()Z
com.domainlanguage.intervals.Interval:toString()Ljava.lang.String;
com.domainlanguage.timeutil.SystemClock.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.DateSpecification:nthOccuranceOfWeekdayInMonth(III)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.base.Ratio:equals(Ljava.lang.Object;)Z
com.domainlanguage.timeutil.SystemClock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.BusinessCalendar.1:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarInterval:daysInReverseIterator()Ljava.util.Iterator;
com.domainlanguage.base.Ratio:of(JJ)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeInterval:start()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:Interval(Lcom.domainlanguage.intervals.IntervalLimit;Lcom.domainlanguage.intervals.IntervalLimit;)V
com.domainlanguage.timeutil.NISTClient.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.FloatingDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:inBaseUnits()J
com.domainlanguage.time.CalendarInterval:month(II)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.Interval:isOpen()Z
com.domainlanguage.time.CalendarInterval.1:hasNext()Z
com.domainlanguage.money.Proration:dividedEvenlyIntoParts(Lcom.domainlanguage.money.Money;I)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:emptyOfSameType()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarInterval:start()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:Interval(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)V
com.domainlanguage.time.BusinessCalendar:minusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:lengthInMonths()Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[Ljava.math.BigDecimal;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.IntervalSequence:IntervalSequence()V
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.CalendarDate:CalendarDate(III)V
com.domainlanguage.money.Money:isNegative()Z
com.domainlanguage.intervals.Interval:closed(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:toString()Ljava.lang.String;
com.domainlanguage.time.Duration:milliseconds(J)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:compareTo(Ljava.lang.Object;)I
com.domainlanguage.money.Money:times(I)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.MoneyTimeRate:equals(Lcom.domainlanguage.money.MoneyTimeRate;)Z
com.domainlanguage.time.BusinessCalendar:isWeekend(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_day()I
com.domainlanguage.time.HourOfDay:HourOfDay(I)V | OPERATOR | 1188 | < -> !=
com.domainlanguage.intervals.LinearIntervalMap:put(Lcom.domainlanguage.intervals.Interval;Ljava.lang.Object;)V
com.domainlanguage.time.Duration:assertQuantityPositiveOrZero(J)V
com.domainlanguage.time.Duration:isConvertibleTo(Lcom.domainlanguage.time.Duration;)Z
com.domainlanguage.time.TimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarDate:month()Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.Interval:rightComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeRate:scale()I
com.domainlanguage.time.TimeUnit.Type:equals(Lcom.domainlanguage.time.TimeUnit.Type;)Z
com.domainlanguage.time.Duration:hours(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalSequence:extent()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeUnit:getFactor()I
com.domainlanguage.time.TimePoint:parseGMTFrom(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:intersects(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.MinuteOfHour:value(I)Lcom.domainlanguage.time.MinuteOfHour;
com.domainlanguage.intervals.Interval:includes(Ljava.lang.Comparable;)Z
com.domainlanguage.intervals.Interval:greaterOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable; | CONDITION | 7926 | if (x) -> if (!x)
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;JJ)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeUnit:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarInterval:includesLowerLimit()Z
com.domainlanguage.money.Money:times(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.DateSpecification:fixed(II)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.intervals.IntervalLimit:getValue()Ljava.lang.Comparable;
com.domainlanguage.time.Duration:weeks(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:parseFrom(Ljava.lang.String;Ljava.lang.String;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Proration:defaultScaleForIntermediateCalculations(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.time.FloatingDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:hashCode()I
com.domainlanguage.money.Money:dividedBy(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:startingFrom(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;)Ljava.math.BigDecimal;
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.TimeUnit:nextFinerUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:over(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:isZero()Z
com.domainlanguage.intervals.Interval:includesUpperLimit()Z
com.domainlanguage.time.MinuteOfHour:value()I
com.domainlanguage.money.Money:getCurrency()Ljava.util.Currency;
com.domainlanguage.intervals.Interval:greaterOfLowerIncludedInUnion(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.money.Money:minus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:toString(Ljava.util.Locale;)Ljava.lang.String;
com.domainlanguage.intervals.IntervalSequence:isEmpty()Z
com.domainlanguage.intervals.Interval:isAbove(Ljava.lang.Comparable;)Z
com.domainlanguage.time.BusinessCalendar:isBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time._HolidayDates:defaultHolidays()Ljava.util.Set;
com.domainlanguage.time.Duration:of(JLcom.domainlanguage.time.TimeUnit;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:through(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarInterval:inclusive(IIIIII)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeRate:TimeRate(Ljava.math.BigDecimal;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.ConcreteCalendarInterval:from(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.ConcreteCalendarInterval;
com.domainlanguage.money.Money:euros(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;II)Ljava.math.BigDecimal;
com.domainlanguage.intervals.LinearIntervalMap:get(Ljava.lang.Comparable;)Ljava.lang.Object;
com.domainlanguage.time.Duration:dividedBy(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalSequence:add(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.money.Money:negated()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:nextDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.IntervalLimit:upper(ZLjava.lang.Comparable;)Lcom.domainlanguage.intervals.IntervalLimit;
com.domainlanguage.intervals.Interval:open(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:equals(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.TimeUnit:descendingUnits()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarInterval:includesUpperLimit()Z
com.domainlanguage.intervals.IntervalSequence:gaps()Lcom.domainlanguage.intervals.IntervalSequence;
com.domainlanguage.money.MoneyTimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:dividedBy(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarDate:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.util.ClassGenerator:ClassGenerator(Lcom.domainlanguage.util.ClassFilter;)V
com.domainlanguage.time.HourOfDay:value(I)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.intervals.Interval:gap(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:hasSameCurrencyAs(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.AnnualDateSpecification.1:next()Ljava.lang.Object;
com.domainlanguage.time.FloatingDateSpecification:FloatingDateSpecification(III)V
com.domainlanguage.time.CalendarDate:plusDays(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.AnnualDateSpecification:iterateOver(Lcom.domainlanguage.time.CalendarInterval;)Ljava.util.Iterator;
com.domainlanguage.time.TimeInterval:TimeInterval(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)V
com.domainlanguage.util.ImmutableIterator:remove()V
com.domainlanguage.time.CalendarInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.intervals.LinearIntervalMap:findKeyIntervalContaining(Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.Duration:minutes(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.IntervalLimit:isClosed()Z
com.domainlanguage.time.CalendarMinute:dateHourAndMinute(IIIII)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.CalendarDate:dayOfWeek()I
com.domainlanguage.money.Money:hashCode()I
com.domainlanguage.time.Duration:addAmountToCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.Duration:days(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.Duration:Duration(JLcom.domainlanguage.time.TimeUnit;)V
com.domainlanguage.money.MoneyTimeRate:MoneyTimeRate(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.Interval:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:lesserOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.TimePoint:until(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.tests.CannedResponseServer:getPort()I
com.domainlanguage.time.TimeRate:equals(Lcom.domainlanguage.time.TimeRate;)Z
com.domainlanguage.time.BusinessCalendarTest:businessCalendar()Lcom.domainlanguage.time.BusinessCalendar;
com.domainlanguage.money.Proration:sum([Ljava.math.BigDecimal;)Ljava.math.BigDecimal;
com.domainlanguage.time.BusinessCalendar:plusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate; | STATEMENT | 2635 | stmt -> ;
com.domainlanguage.time.TimeUnit:TimeUnit(Lcom.domainlanguage.time.TimeUnit.Type;Lcom.domainlanguage.time.TimeUnit.Type;I)V
com.domainlanguage.base.Ratio:Ratio(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)V
com.domainlanguage.time.AnnualDateSpecification:firstOccurrenceIn(Lcom.domainlanguage.time.CalendarInterval;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:lesserOfUpperIncludedInIntersection(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.CalendarInterval.2:hasNext()Z
com.domainlanguage.time.MinuteOfHour:isAfter(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.FixedDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeUnit:javaCalendarConstantForBaseType()I
com.domainlanguage.time.Duration:seconds(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeUnit:descendingUnitsForDisplay()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.CalendarDate:isBefore(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.BusinessCalendar.1:hasNext()Z
com.domainlanguage.money.Money:dividedBy(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:businessDaysOnly(Ljava.util.Iterator;)Ljava.util.Iterator;
com.domainlanguage.money.Money:getAmount()Ljava.math.BigDecimal;
com.domainlanguage.intervals.Interval:covers(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.AnnualDateSpecification.1:hasNext()Z
com.domainlanguage.time.MinuteOfHour:equals(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.money.Money:per(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.MoneyTimeRate;
com.domainlanguage.intervals.LinearIntervalMap:intersectingKeys(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.money.Money:isLessThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.TimePoint:asJavaCalendar()Ljava.util.Calendar;
com.domainlanguage.base.Ratio:decimalValue(II)Ljava.math.BigDecimal;
com.domainlanguage.time.TimeOfDay:TimeOfDay(II)V
com.domainlanguage.intervals.Interval:isEmpty()Z
com.domainlanguage.money.Money:dividedBy(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeOfDay:hourAndMinute(II)Lcom.domainlanguage.time.TimeOfDay;
com.domainlanguage.intervals.Interval:leftComplementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.timeutil.NISTClient:now(Ljava.lang.String;I)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit.Type:Type(Ljava.lang.String;)V
com.domainlanguage.time.CalendarInterval.2:next()Ljava.lang.Object;
com.domainlanguage.money.Proration:sum([Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:toString()Ljava.lang.String;
com.domainlanguage.time.HourOfDay:convertTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.TimeUnit:toString(J)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:end()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.LinearIntervalMap:containsKey(Ljava.lang.Comparable;)Z
com.domainlanguage.intervals.Interval:isBelow(Ljava.lang.Comparable;)Z
com.domainlanguage.time.Duration:normalizedUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.money.Money:applying(Lcom.domainlanguage.base.Ratio;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval.3:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarInterval:everFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarDate:asTimeInterval(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.LinearIntervalMap:LinearIntervalMap()V
com.domainlanguage.time.TimePoint:asJavaCalendar(Ljava.util.TimeZone;)Ljava.util.Calendar;
com.domainlanguage.time.TimePoint:asJavaUtilDate()Ljava.util.Date;
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[J)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.ConcreteCalendarInterval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.TimeRate:TimeRate(Ljava.lang.String;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.money.Money:times(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:isHoliday(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.CalendarDate:startAsTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.LinearIntervalMap:containsIntersectingKey(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.time.CalendarInterval:equals(Lcom.domainlanguage.time.CalendarInterval;)Z
com.domainlanguage.money.Proration:distributeRemainderOver([Lcom.domainlanguage.money.Money;Lcom.domainlanguage.money.Money;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:year(I)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.IntervalSequence:iterator()Ljava.util.Iterator;
com.domainlanguage.money.Money:plus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:getElapsedBusinessDays(Lcom.domainlanguage.time.CalendarInterval;)I
com.domainlanguage.time.ConcreteCalendarInterval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.CalendarDate:plusMonths(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:asJavaCalendarUniversalZoneMidnight()Ljava.util.Calendar;
com.domainlanguage.time.CalendarInterval.3:hasNext()Z
com.domainlanguage.intervals.Interval:greaterOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.timeutil.NISTClient:timeSource(Ljava.lang.String;I)Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.CalendarDate:from(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:hashCode()I
com.domainlanguage.time.TimePoint:equals(Ljava.lang.Object;)Z
com.domainlanguage.base.Ratio:of(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.BusinessCalendar:addHolidays(Ljava.util.Set;)V
com.domainlanguage.time.CalendarDate:_from(Ljava.util.Calendar;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.Duration:equals(Ljava.lang.Object;)Z
com.domainlanguage.tests.SerializationTester:assertCanBeSerialized(Ljava.lang.Object;)V
com.domainlanguage.intervals.Interval:hasLowerLimit()Z
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeUnit:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;I)Ljava.math.BigDecimal;
com.domainlanguage.time.TimeUnit:toString()Ljava.lang.String;
com.domainlanguage.time.FixedDateSpecification:FixedDateSpecification(II)V
com.domainlanguage.time.CalendarDate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarInterval:lengthInMonthsInt()I
com.domainlanguage.time.TimeInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:compareTo(Lcom.domainlanguage.time.CalendarDate;)I
com.domainlanguage.time.CalendarDate:toString(Ljava.lang.String;)Ljava.lang.String;
com.domainlanguage.time.Duration:toNormalizedString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:from(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.BusinessCalendar.1:nextBusinessDate()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:isGreaterThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.TimePoint:TimePoint(J)V
com.domainlanguage.time.CalendarInterval:everPreceding(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarInterval:inclusive(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarDate:from(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:equals(Lcom.domainlanguage.intervals.Interval;)Z | CONDITION | 9614 | if (x) -> if (!x)
com.domainlanguage.time.CalendarInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.money.Money:isPositive()Z
com.domainlanguage.timeutil.NISTClient:asTimePoint(Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:isAfter(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:months(I)Lcom.domainlanguage.time.Duration;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
272 9 42 4 44 6 229 2 5 1 7 9 277 2 239 1 13 1 164 1 131 1 19 2 22 1 93 1 254 1 173 1 139 2 175 2 205 1 29 1 61 1 179 5 208 2 37 1 144 2 262 1 265 3 146 1 
272 9 42 4 44 6 229 2 5 1 7 9 277 2 239 1 13 1 164 1 131 1 19 2 22 1 93 1 254 1 173 1 139 2 175 2 205 1 29 1 61 1 179 5 208 2 37 1 144 2 262 1 265 3 146 1 
272 10 42 5 44 7 229 2 5 1 7 10 277 2 239 1 13 1 164 1 131 1 19 2 22 1 93 1 254 1 173 1 139 2 175 2 205 1 29 1 61 1 179 6 208 2 37 1 144 2 262 1 265 4 146 1 
272 7 42 3 44 4 229 2 5 1 7 7 277 2 239 1 13 1 164 1 131 1 19 1 22 1 93 1 254 1 173 1 139 2 175 2 205 1 29 1 61 1 179 4 208 2 144 2 262 1 265 2 146 1 
19 2 22 1 272 4 42 2 44 3 229 1 5 1 173 1 139 1 7 4 175 1 277 1 179 3 208 1 37 1 262 1 13 1 265 1 
22 1 272 2 229 1 5 1 139 1 7 2 233 1 175 1 77 1 29 1 179 1 208 1 144 1 123 1 13 1 131 1 
22 1 272 3 42 1 44 1 5 1 139 2 7 3 175 2 179 2 239 1 144 1 13 1 265 1 
19 2 22 1 272 9 42 4 44 7 229 1 5 1 173 1 232 1 139 2 7 9 175 2 277 1 179 5 208 1 239 1 37 1 144 1 262 1 86 1 13 1 146 1 265 3 164 1 
19 2 22 1 272 9 42 4 44 7 229 1 5 1 173 1 232 1 139 2 7 9 175 2 277 1 179 5 208 1 239 1 37 1 144 1 262 1 86 1 13 1 146 1 265 3 164 1 
281 1 288 1 168 1 
217 2 305 1 168 1 
23 1 259 1 50 1 
23 1 259 1 50 1 250 1 
23 1 292 1 259 1 50 1 
228 1 274 1 252 1 253 1 96 1 294 1 47 1 297 1 279 1 300 1 16 1 288 1 130 1 168 1 
23 1 50 1 
9 1 96 1 294 1 269 1 191 1 
9 1 182 1 96 2 294 2 288 1 269 1 168 1 59 1 
96 1 294 1 269 1 
23 1 292 1 259 1 9 1 50 1 96 1 294 1 99 1 
168 1 
9 1 182 1 96 2 294 2 288 1 269 1 165 1 168 1 
96 5 255 1 294 5 155 1 157 2 9 2 83 1 34 2 299 1 182 1 261 1 87 1 267 1 111 1 288 1 268 1 269 2 168 1 39 2 
177 1 106 1 
177 1 106 1 
241 1 35 1 
241 1 35 1 
241 1 35 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 
177 1 106 1 230 1 234 1 
177 1 106 1 230 1 96 1 294 1 234 1 190 1 
208 1 229 1 277 1 
208 1 229 1 77 1 
31 1 208 3 73 1 52 1 77 1 277 2 
208 2 73 1 11 1 52 1 77 1 277 1 
208 2 73 1 52 2 77 1 277 1 
0 1 8 1 157 1 121 1 9 4 282 1 245 1 287 1 127 1 288 1 168 2 89 1 291 2 96 5 294 5 255 3 28 2 105 1 209 1 213 2 34 1 299 1 182 1 263 1 217 3 67 1 305 1 267 2 69 1 269 1 149 1 39 1 
72 1 155 1 191 5 157 2 121 3 81 1 9 7 282 3 245 3 288 1 132 5 168 5 89 2 291 6 96 9 294 9 255 8 28 6 209 2 180 1 34 2 299 1 181 1 182 1 263 1 217 9 183 1 67 4 305 3 267 6 69 3 269 6 223 1 149 3 39 2 
155 1 157 1 121 1 9 2 282 1 245 1 287 1 127 1 288 1 168 3 89 1 291 2 96 3 294 3 255 3 28 2 209 1 213 1 34 1 217 4 67 1 305 2 69 1 267 2 149 1 39 1 
155 1 157 1 121 2 9 3 282 2 245 2 287 1 127 1 288 1 168 4 89 1 291 4 96 4 294 4 255 5 28 4 209 1 180 1 213 2 34 1 217 7 183 1 67 2 305 3 69 2 267 4 223 1 149 2 39 1 
114 1 207 1 281 1 124 1 237 1 
114 1 284 1 
286 1 
114 1 43 1 
114 3 169 1 43 1 55 1 138 1 124 2 
114 1 43 1 55 1 
114 1 214 1 
45 3 94 1 231 1 6 1 189 2 60 3 142 1 163 1 282 1 65 1 84 1 301 1 51 1 264 1 198 1 69 1 128 6 
45 3 94 1 231 1 6 1 189 2 60 3 142 1 163 1 282 1 65 1 84 1 301 1 51 1 264 1 198 1 69 1 128 6 
45 3 94 1 231 1 6 1 189 2 60 3 142 1 163 1 282 1 65 1 84 1 301 1 51 1 264 1 198 1 69 1 128 6 148 1 
40 1 271 4 45 15 231 2 119 1 6 2 189 9 79 1 121 3 163 2 282 4 84 2 245 3 51 1 198 1 128 30 166 1 200 3 90 1 137 1 171 1 95 1 94 2 27 2 30 1 60 15 178 1 142 5 65 4 301 1 264 1 145 1 69 4 149 3 
40 1 116 1 45 4 231 1 6 1 189 3 79 2 163 1 282 1 84 1 51 1 198 1 128 8 166 2 90 2 94 1 27 4 98 1 30 2 60 4 142 1 65 2 301 1 69 1 
115 1 117 1 152 2 272 2 44 1 229 1 153 1 5 1 7 2 156 1 77 1 277 1 159 1 161 1 82 1 196 2 283 1 197 1 13 1 199 1 22 1 139 1 100 1 175 1 31 1 179 1 208 2 108 2 144 1 221 1 113 1 
117 1 152 1 272 3 2 1 44 2 229 1 153 1 7 3 156 1 188 1 77 1 158 1 277 1 159 1 161 1 82 1 196 1 197 1 13 1 199 1 22 1 139 1 175 1 31 1 179 1 208 2 108 1 144 1 221 1 113 1 
117 1 152 1 272 2 2 1 44 2 229 1 7 2 156 1 188 1 77 1 277 1 159 1 161 1 82 1 196 1 197 1 13 1 199 1 22 1 31 1 179 1 208 2 108 1 144 1 221 1 
114 1 225 1 117 1 43 1 272 1 152 1 172 1 203 1 139 1 7 1 156 2 175 1 158 1 103 1 82 1 280 1 194 1 108 1 109 1 196 1 144 2 197 2 221 2 
117 1 152 1 272 1 229 1 153 1 5 1 7 1 156 1 188 1 77 1 277 1 159 1 161 1 82 1 196 1 283 1 197 1 199 1 139 1 175 1 31 1 208 2 108 1 144 1 221 1 113 1 
185 1 
150 2 151 1 152 2 228 1 75 2 157 1 238 2 162 1 82 1 243 1 16 1 168 2 89 1 18 1 21 1 96 5 252 1 253 1 255 2 258 2 104 2 108 2 109 1 34 1 182 3 267 2 266 1 269 6 39 1 186 1 114 1 117 1 43 1 274 1 47 1 275 4 278 1 279 1 280 1 194 2 196 2 288 1 130 1 57 1 294 5 295 2 204 1 297 1 211 2 299 1 300 1 218 1 217 2 305 2 220 1 
151 1 228 1 274 1 253 1 252 1 96 3 57 1 294 3 47 1 204 1 275 2 297 1 104 1 278 1 279 1 300 1 182 1 16 1 165 1 269 2 130 1 18 1 
151 1 228 1 274 1 47 1 275 3 278 1 279 1 16 1 130 1 288 1 165 1 168 1 18 1 57 1 96 3 252 1 253 1 294 3 204 1 297 1 258 1 300 1 182 1 269 1 
150 1 151 1 228 1 274 1 47 1 275 3 278 1 279 1 16 1 165 1 130 1 288 1 168 1 18 1 57 1 96 3 252 1 253 1 294 3 204 1 297 1 258 1 104 1 300 1 182 1 269 2 
150 4 151 1 228 1 75 2 157 1 238 2 16 1 249 1 165 1 168 5 18 1 253 1 252 1 96 5 255 1 258 4 104 4 34 1 182 3 267 1 269 7 39 1 186 1 274 1 47 1 275 6 48 1 278 1 279 1 53 1 130 1 288 5 57 1 294 5 295 2 204 1 297 1 58 1 206 1 211 2 300 1 299 1 220 1 305 2 
150 2 151 1 228 1 75 2 157 1 238 2 16 1 168 2 18 1 253 1 252 1 96 4 255 1 258 2 104 2 34 1 182 2 267 1 269 4 186 1 39 1 274 1 47 1 275 4 278 1 279 1 130 1 288 1 57 1 294 4 295 2 204 1 297 1 211 2 299 1 300 1 217 2 218 1 220 1 305 2 
150 2 151 1 228 1 75 2 274 1 47 1 48 1 275 4 157 1 238 2 278 1 279 1 16 1 249 1 288 1 130 1 168 1 18 1 57 1 96 4 252 1 253 1 255 1 294 4 295 2 204 1 297 1 258 2 104 2 206 1 211 2 34 1 300 1 299 1 182 2 305 2 220 1 267 1 269 4 186 1 39 1 
150 2 151 1 228 1 75 2 274 1 47 1 48 1 275 4 157 1 238 2 278 1 279 1 16 1 249 1 288 1 130 1 168 1 18 1 57 1 96 4 252 1 253 1 255 1 294 4 295 2 204 1 297 1 258 2 104 2 206 1 211 2 34 1 300 1 299 1 182 2 305 2 220 1 267 1 269 4 186 1 39 1 
150 2 270 2 151 1 228 1 75 2 274 1 76 1 47 1 48 1 275 4 157 1 278 1 279 1 16 1 248 2 288 1 130 1 168 1 18 1 91 1 57 1 96 4 252 1 253 1 255 1 294 4 295 2 204 1 297 1 258 2 104 2 298 1 34 1 300 1 299 1 182 2 217 2 220 1 267 1 269 4 39 1 
150 3 151 1 228 1 75 2 274 1 47 1 48 1 275 5 157 1 238 2 278 1 279 1 16 1 249 1 288 1 130 1 168 1 18 1 57 1 96 4 252 1 253 1 255 1 294 4 295 2 204 1 297 1 58 1 258 3 104 3 206 1 211 2 34 1 299 1 300 1 182 2 305 2 220 1 267 1 269 5 186 1 39 1 
150 3 151 1 228 1 75 2 274 1 47 1 48 1 275 5 157 1 238 2 278 1 279 1 16 1 249 1 288 1 130 1 168 1 18 1 57 1 96 4 252 1 253 1 255 1 294 4 295 2 204 1 297 1 58 1 258 3 104 3 206 1 211 2 34 1 299 1 300 1 182 2 305 2 220 1 267 1 269 5 186 1 39 1 
150 2 151 1 228 1 75 2 76 1 157 1 16 1 248 2 168 1 18 1 253 1 252 1 96 4 255 1 258 2 104 2 34 1 182 2 267 1 269 4 39 1 270 2 274 1 47 1 275 4 278 1 279 1 130 1 288 1 57 1 294 4 295 2 204 1 297 1 299 1 300 1 217 2 218 1 220 1 
226 2 271 4 45 14 119 3 187 1 235 1 189 4 79 2 121 4 160 1 122 1 282 3 245 4 128 29 167 1 166 2 133 3 200 3 90 2 251 1 95 1 27 4 98 1 30 2 60 15 107 1 63 1 142 2 260 1 65 2 66 1 68 1 69 4 112 1 149 3 
226 2 271 4 45 14 119 3 187 1 235 1 189 5 79 2 121 4 160 1 122 1 282 3 245 4 128 29 167 1 166 2 133 3 200 3 90 2 251 1 95 1 27 4 98 1 30 2 60 15 107 1 63 1 142 2 260 1 65 3 66 1 68 1 69 4 112 1 149 3 
226 1 271 4 45 20 231 1 119 2 235 1 189 10 79 1 121 6 122 1 282 6 84 1 245 6 51 1 198 1 128 41 166 1 133 2 200 4 90 1 251 1 95 2 27 2 98 1 30 1 60 21 107 1 63 1 142 5 210 2 65 5 301 1 66 1 68 1 69 7 112 1 149 5 
226 1 271 2 45 10 119 1 187 2 189 6 79 2 121 3 160 1 282 3 244 1 245 3 128 19 167 1 166 2 133 2 200 1 90 2 251 1 95 1 27 4 98 1 30 2 60 9 107 1 63 1 142 3 65 3 69 3 149 3 
226 2 271 2 45 7 119 2 235 1 189 1 79 1 121 2 122 1 282 1 245 2 128 16 166 1 133 2 200 2 90 1 251 1 27 2 98 1 30 1 60 9 107 1 63 2 65 1 66 1 68 1 69 2 112 1 149 1 
114 1 71 1 117 1 43 1 152 2 3 1 4 1 74 1 45 1 47 2 78 1 79 1 82 1 196 2 16 2 128 2 166 1 90 1 17 1 290 1 24 1 201 1 27 2 297 2 100 2 101 1 30 1 60 1 108 2 62 1 184 1 
136 1 115 1 117 1 152 2 229 1 188 1 156 1 77 1 277 1 159 1 31 1 208 2 82 1 161 1 108 2 196 2 285 1 38 1 113 1 
117 1 152 1 229 1 256 1 188 1 156 1 77 1 277 1 159 1 31 1 208 2 161 1 82 1 108 1 196 1 285 1 113 1 
114 1 117 1 43 1 152 1 203 1 156 1 82 1 280 1 194 1 108 1 109 1 196 1 110 1 38 1 
136 1 117 1 152 1 229 1 188 1 156 1 77 1 277 1 159 1 31 1 208 2 161 1 82 1 108 1 196 1 285 1 38 1 113 1 
176 1 
281 1 261 1 255 1 87 1 267 1 288 1 168 1 
157 1 238 1 288 1 168 2 96 1 255 1 294 1 211 1 34 1 299 1 182 1 217 1 305 1 267 1 269 1 186 1 39 1 
152 3 154 1 157 4 82 3 243 1 85 2 245 2 246 1 87 1 89 2 168 8 169 1 170 2 96 5 255 9 174 2 28 6 108 3 33 2 34 4 182 3 261 1 267 8 269 5 39 4 114 10 115 1 117 4 43 3 121 2 279 2 193 2 194 1 195 2 196 3 282 2 284 3 124 2 125 2 288 2 135 2 291 6 54 1 55 3 294 5 214 2 299 4 302 1 217 12 305 6 69 2 222 2 307 1 149 2 
271 1 119 1 235 1 157 1 121 1 122 1 282 1 245 1 125 1 168 3 200 1 291 4 255 4 28 4 34 1 299 1 66 1 217 6 68 1 305 3 267 3 69 1 112 1 39 1 149 1 
23 1 292 1 96 1 231 1 255 2 294 1 99 1 157 1 259 1 50 1 282 1 34 1 299 1 84 1 51 1 125 2 267 1 69 1 249 1 70 1 39 1 
255 1 157 1 34 1 299 1 261 1 87 1 267 1 288 1 168 1 39 1 
291 5 170 1 255 5 121 2 28 5 282 2 245 2 125 2 217 10 69 2 267 5 305 5 222 1 168 5 149 2 
182 1 96 1 294 1 288 1 269 1 168 1 
114 1 117 1 43 1 152 4 154 1 155 1 157 2 82 1 162 1 280 1 194 2 196 4 243 2 89 2 289 1 21 1 92 1 96 3 255 2 294 3 108 4 109 1 34 2 299 1 182 2 267 2 269 4 307 2 39 2 
23 1 259 1 50 1 250 1 
291 2 6 1 255 1 157 1 28 2 34 1 299 1 243 1 217 4 305 2 267 2 288 2 89 1 168 4 39 1 
212 1 10 1 120 1 
143 1 10 1 26 1 120 1 224 1 
212 1 10 1 120 1 
212 1 10 1 120 1 
32 1 10 1 120 1 
32 1 10 1 120 1 
32 1 10 1 120 1 
10 1 120 1 
177 1 106 1 
271 1 45 4 231 1 119 1 189 1 79 1 282 1 84 1 51 1 198 1 128 7 166 1 200 1 90 1 27 2 98 1 30 1 60 3 65 1 301 1 69 1 68 1 
271 2 45 5 231 1 119 1 189 2 79 2 121 1 282 1 84 1 245 1 51 1 198 1 128 10 166 2 200 1 90 2 95 1 98 1 27 4 140 1 30 2 60 5 142 1 65 1 301 1 68 1 69 2 
271 1 45 4 119 1 235 1 98 1 27 2 189 1 79 1 121 2 30 1 60 6 122 1 65 1 282 1 245 2 66 1 69 2 68 1 128 10 166 1 112 1 200 1 149 1 90 1 
271 1 45 4 119 1 235 1 98 1 27 2 79 1 121 2 30 1 60 6 122 1 282 1 245 2 66 1 69 2 68 1 128 10 166 1 112 1 200 1 149 1 90 1 
271 1 45 4 231 1 119 1 189 1 79 1 282 1 84 1 51 1 198 1 128 7 166 1 200 1 90 1 27 2 98 1 30 1 60 3 65 1 301 1 69 1 68 1 
271 1 45 4 119 1 235 1 98 1 27 2 79 1 121 2 30 1 60 6 122 1 282 1 245 2 66 1 69 2 68 1 128 10 166 1 112 1 200 1 149 1 90 1 
271 1 45 4 119 1 235 1 98 1 27 4 189 1 79 2 140 1 121 2 30 2 60 6 122 1 65 1 282 1 245 2 66 1 69 2 68 1 128 10 166 2 112 1 200 1 149 1 90 2 
40 1 271 1 45 5 119 1 235 1 189 2 79 3 121 2 122 1 282 1 245 2 128 11 166 3 167 1 200 1 90 3 98 1 27 6 30 3 60 6 65 2 66 1 68 1 69 2 112 1 149 1 
45 5 231 4 6 1 189 9 60 5 142 4 282 2 65 5 84 4 301 1 51 2 198 1 128 10 69 2 70 1 
40 1 271 1 45 5 119 1 235 1 189 2 79 3 121 2 122 1 282 1 245 2 128 11 166 3 167 1 200 1 90 3 98 1 27 6 30 3 60 6 65 2 66 1 68 1 69 2 112 1 149 1 
40 1 45 4 231 1 27 4 189 2 79 2 30 2 60 3 142 1 282 1 65 1 84 1 301 1 51 1 198 1 69 1 128 7 166 2 90 2 
45 3 231 1 189 1 60 2 281 1 65 1 282 1 84 1 301 1 51 1 198 1 69 1 128 5 
45 2 27 2 189 2 140 1 79 1 30 1 121 1 60 2 142 1 65 1 282 1 245 1 69 1 128 4 166 1 149 1 90 1 
271 2 45 4 95 1 119 1 189 2 121 1 60 3 142 1 65 1 282 1 245 1 128 7 69 1 200 1 149 1 
40 2 271 2 45 12 231 2 189 8 79 2 121 2 282 3 84 2 245 2 51 1 14 1 198 1 88 1 128 22 166 2 200 2 90 2 95 1 27 4 30 2 60 10 142 4 210 1 65 4 301 1 69 3 149 2 
271 1 45 1 128 1 
60 1 128 1 200 1 
45 3 27 2 189 3 79 1 140 1 30 1 121 1 60 3 142 1 282 1 65 2 245 1 128 6 69 1 166 1 222 1 90 1 149 1 
271 1 45 4 119 1 235 1 98 1 27 2 189 1 79 1 121 2 30 1 60 6 122 1 65 1 282 1 245 2 66 1 69 2 68 1 128 10 166 1 112 1 200 1 149 1 90 1 
45 3 231 1 189 2 60 3 142 1 282 1 65 1 84 1 51 1 69 1 128 6 
40 1 45 2 231 1 27 2 189 2 79 1 30 1 60 1 142 1 65 1 84 1 301 1 88 1 198 1 128 3 166 1 90 1 
45 5 231 2 27 2 98 1 189 5 79 1 30 1 60 5 142 2 65 3 282 2 84 2 51 1 128 10 69 2 166 1 70 1 90 1 
98 1 27 2 189 1 79 1 30 1 60 2 142 1 245 1 69 1 128 2 166 1 90 1 
45 2 98 1 27 2 189 2 79 1 30 1 121 1 60 2 142 1 65 1 282 1 245 1 69 1 128 4 166 1 149 1 90 1 
40 1 45 2 231 1 98 1 27 6 189 2 79 3 30 3 60 1 142 1 65 1 84 1 88 1 128 3 167 1 166 3 90 3 
40 2 271 4 45 18 231 3 119 1 189 11 79 5 121 3 282 5 84 3 245 3 51 2 198 1 88 1 128 33 167 1 166 5 200 3 90 5 137 1 95 1 27 10 98 1 140 1 30 5 60 15 178 1 142 5 65 6 301 1 145 1 69 5 149 3 
118 1 47 1 304 1 16 1 297 1 276 1 130 1 
273 1 118 1 202 1 56 1 47 1 297 1 276 1 236 1 80 1 304 1 16 1 130 1 
114 1 82 1 280 1 117 1 281 1 108 1 194 1 43 1 109 1 152 1 196 1 
50 1 15 1 
50 1 15 1 
50 1 15 1 
114 1 23 1 292 1 152 1 25 1 96 1 294 1 99 1 259 1 108 1 50 1 196 1 284 1 288 1 168 1 307 1 
114 4 117 1 43 1 152 3 55 1 46 1 96 2 294 2 279 1 193 1 82 1 194 1 108 3 33 1 214 1 196 3 284 1 124 1 288 1 269 1 168 1 307 1 
82 1 117 1 108 1 152 1 196 1 215 1 
114 1 20 1 169 1 293 1 117 2 152 1 43 1 55 1 82 1 194 1 108 1 242 1 196 1 
50 1 15 1 
114 2 152 1 154 1 157 2 279 1 194 1 9 1 196 1 195 1 284 1 124 1 87 1 288 1 168 1 135 1 96 3 255 1 294 3 174 1 108 1 33 1 34 2 299 2 182 1 261 1 267 1 269 2 39 2 
114 2 115 1 169 1 117 2 152 2 43 1 55 1 82 1 108 2 196 2 124 1 215 1 246 1 
114 1 115 1 117 1 152 4 43 1 46 1 49 1 280 1 82 1 194 1 108 4 109 1 196 4 
114 1 20 1 117 2 152 1 43 1 55 1 82 1 108 1 64 1 242 1 196 1 216 1 129 1 
208 1 82 1 161 1 117 1 108 1 194 1 152 1 196 1 229 1 77 1 
114 1 115 1 117 1 152 2 43 1 4 1 188 1 101 1 82 1 108 2 196 2 
114 3 115 1 117 2 152 4 43 2 4 1 49 1 280 1 82 2 194 1 108 5 109 1 196 5 36 1 12 1 307 1 
114 3 115 1 117 2 152 4 41 1 43 2 4 1 49 1 280 1 82 2 194 1 108 5 109 1 196 5 12 1 307 1 
50 1 15 1 
114 1 20 1 169 1 293 1 117 2 152 1 43 1 55 1 82 1 108 1 242 1 196 1 307 1 
179 1 22 1 281 1 13 1 
179 1 22 1 272 1 13 1 7 1 139 1 175 1 
144 1 7 1 221 1 
22 1 272 3 5 1 139 1 7 3 175 1 257 1 29 2 179 1 126 1 13 1 306 1 
19 1 179 1 22 1 272 2 44 1 13 1 7 2 139 1 175 1 
179 1 208 1 42 1 272 1 229 1 5 1 173 1 7 1 139 1 175 1 277 1 
179 1 272 1 5 1 13 1 7 1 139 1 175 1 
22 1 272 1 5 1 13 2 7 1 139 1 175 1 
272 2 5 1 139 2 7 2 97 1 175 2 179 1 141 1 303 1 13 1 
22 1 272 3 42 1 44 2 5 1 139 1 7 3 175 1 179 2 13 1 146 1 265 1 164 1 
22 1 272 2 44 1 229 1 5 1 139 1 7 2 77 1 175 1 277 1 31 1 179 1 208 2 13 1 247 1 
19 1 22 1 272 4 42 1 44 2 5 1 139 2 7 4 175 2 179 2 37 1 13 1 265 1 
179 1 22 1 272 1 5 1 13 1 7 1 139 1 175 1 
22 2 272 4 42 1 44 2 7 4 139 1 175 1 257 1 29 1 179 3 240 1 13 2 265 1 306 1 
22 1 272 2 44 1 5 1 232 1 139 1 7 2 175 1 179 1 13 1 219 1 134 1 
22 1 272 3 5 1 139 1 7 3 175 1 257 1 102 1 29 2 179 1 13 1 306 2 
179 2 227 1 1 2 296 1 
192 1 272 1 5 1 7 1 139 1 175 1 
179 1 22 1 272 2 44 1 5 1 13 1 7 2 139 1 164 1 175 1 
147 1 
179 1 22 1 272 1 5 1 13 1 7 1 139 1 175 1 
22 1 272 3 44 1 5 1 139 1 7 3 175 1 29 1 179 1 13 1 164 1 
179 1 240 1 42 1 265 1 
179 1 13 1 
