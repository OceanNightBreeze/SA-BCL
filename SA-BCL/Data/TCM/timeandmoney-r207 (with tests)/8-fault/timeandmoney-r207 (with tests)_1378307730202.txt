#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
com.domainlanguage.money.ProrationTest:testAllocate1()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver2()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOver10()V PASSED
com.domainlanguage.money.ProrationTest:testProrateZeroTotal()V PASSED
com.domainlanguage.money.ProrationTest:testDistributeRemainder()V PASSED
com.domainlanguage.money.ProrationTest:testPartOfWhole()V PASSED
com.domainlanguage.money.ProrationTest:testSumMoney()V PASSED
com.domainlanguage.money.ProrationTest:testProrateTotalIndivisibleBy3()V PASSED
com.domainlanguage.money.ProrationTest:testProrateOnlyOneShortOfEven()V PASSED
com.domainlanguage.time.CalendarDateTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarDateTest:testComparison()V PASSED
com.domainlanguage.time.CalendarDateTest:testStartAsTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testAsTimeInterval()V ERROR java.lang.NullPointerException 91 297 
com.domainlanguage.time.CalendarDateTest:testFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromFormattedString()V PASSED
com.domainlanguage.time.CalendarDateTest:testFromTimePoint()V PASSED
com.domainlanguage.time.CalendarDateTest:testDayOfWeek()V PASSED
com.domainlanguage.time.CalendarDateTest:testPreviousDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testConversionToJavaUtil()V PASSED
com.domainlanguage.time.CalendarDateTest:testToString()V PASSED
com.domainlanguage.time.CalendarDateTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarDateTest:testNextDay()V PASSED
com.domainlanguage.time.CalendarDateTest:testMonth()V PASSED
com.domainlanguage.time.TimePointTest:testSerialization()V PASSED
com.domainlanguage.time.TimePointTest:testEquals()V PASSED
com.domainlanguage.time.TimePointTest:testCompare()V PASSED
com.domainlanguage.time.TimePointTest:testNextDay()V PASSED
com.domainlanguage.time.TimePointTest:testPotentialProblemDueToOldUsageOf_Duration_toBaseUnitsUsage()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testStringFormat()V PASSED
com.domainlanguage.time.TimePointTest:testAsJavaUtilDate()V PASSED
com.domainlanguage.time.TimePointTest:testBackToMidnight()V ERROR java.lang.NullPointerException 91 297 101 
com.domainlanguage.time.TimePointTest:testFromString()V PASSED
com.domainlanguage.time.TimePointTest:testEqualsOverYearMonthDay()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfter()V PASSED
com.domainlanguage.time.TimePointTest:testIncrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testDecrementDuration()V PASSED
com.domainlanguage.time.TimePointTest:testBeforeAfterPeriod()V ERROR java.lang.NullPointerException 91 186 301 167 (55,341) 
com.domainlanguage.time.TimePointTest:testAtWithTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testCreationWithDefaultTimeZone()V PASSED
com.domainlanguage.time.TimePointTest:testNotIgnoringMinuteParameter()V PASSED
com.domainlanguage.time.HourOfDayTest:test24IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test24GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12IllegalLessThanZero()V PASSED
com.domainlanguage.time.HourOfDayTest:test12GreaterThan()V PASSED
com.domainlanguage.time.HourOfDayTest:test12BadAmPm()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.HourOfDayTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:test12Simple()V ERROR java.lang.IllegalArgumentException 233 (45,184,318) 
com.domainlanguage.time.HourOfDayTest:test24Simple()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.HourOfDayTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.HourOfDayTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.HourOfDayTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.NominalTimeTest:testCombineNominalTimes()V PASSED
com.domainlanguage.time.NominalTimeTest:testConvertNominalTimeToTimePoint()V PASSED
com.domainlanguage.base.RatioTest:testBigDecimalRatio()V PASSED
com.domainlanguage.base.RatioTest:testLongRatio()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyNumerator()V PASSED
com.domainlanguage.base.RatioTest:testMultiplyByRatio()V PASSED
com.domainlanguage.base.RatioTest:testEquals()V PASSED
com.domainlanguage.time.DateSpecificationTest:testFixedDate()V PASSED
com.domainlanguage.time.DateSpecificationTest:testNthWeekdayInMonth()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.DateSpecificationTest:testSelectFirstFromInterval()V PASSED
com.domainlanguage.time.DateSpecificationTest:testIterateThroughInterval()V PASSED
com.domainlanguage.time.TimeUnitTest:testSerialization()V PASSED
com.domainlanguage.time.TimeUnitTest:testComparison()V PASSED
com.domainlanguage.time.TimeUnitTest:testToString()V PASSED
com.domainlanguage.time.TimeUnitTest:testIsConvertableTo()V PASSED
com.domainlanguage.time.TimeUnitTest:testNextFinerUnit()V PASSED
com.domainlanguage.time.TimeUnitTest:testConvertibleToMilliseconds()V PASSED
com.domainlanguage.time.TimeUnitTest:testJavaCalendarConstantForBaseType()V PASSED
com.domainlanguage.intervals.IntervalSequenceTest:testInsertedOutOfOrder()V ERROR java.lang.NullPointerException 155 11 204 
com.domainlanguage.intervals.IntervalSequenceTest:testOverlapping()V ERROR java.lang.NullPointerException 155 11 204 
com.domainlanguage.intervals.IntervalSequenceTest:testIterate()V ERROR java.lang.NullPointerException 155 11 204 
com.domainlanguage.intervals.IntervalSequenceTest:testGaps()V ERROR java.lang.NullPointerException 155 11 204 
com.domainlanguage.intervals.IntervalSequenceTest:testExtent()V ERROR java.lang.NullPointerException 155 11 204 
com.domainlanguage.money.MoneyTimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRoundingScalingRate()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTimeRateTest:testRounding()V PASSED
com.domainlanguage.util.ImmutableIteratorTest:testRemove()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testElapsedBusinessDays()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsHoliday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testIsBusinessDay()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNearestBusinessDay()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.BusinessCalendarTest:testBusinessDaysIterator()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testPlusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testMinusNonBusinessDayZero()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekend()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testNextBusinessDayOverWeekday()V PASSED
com.domainlanguage.time.BusinessCalendarTest:testBusinessDayReverseIterator()V PASSED
com.domainlanguage.time.TimeIntervalTest:testSerialization()V FAILED junit.framework.AssertionFailedError 113 
com.domainlanguage.time.TimeIntervalTest:testIntersection()V ERROR java.lang.NullPointerException 91 151 271 322 
com.domainlanguage.time.TimeIntervalTest:testDaysIterator()V ERROR java.lang.NullPointerException 91 297 255 
com.domainlanguage.time.TimeIntervalTest:testSubintervalIterator()V ERROR java.lang.NullPointerException 91 297 50 
com.domainlanguage.time.TimeIntervalTest:testLength()V ERROR java.lang.NullPointerException 155 144 52 
com.domainlanguage.time.TimeIntervalTest:testEverFrom()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testBeforeClosed()V ERROR java.lang.NullPointerException 155 135 141 284 
com.domainlanguage.time.TimeIntervalTest:testAfterClosed()V ERROR java.lang.NullPointerException 91 186 301 167 
com.domainlanguage.time.TimeIntervalTest:testIncludesClosed()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testBeforeOpen()V ERROR java.lang.NullPointerException 155 135 141 284 
com.domainlanguage.time.TimeIntervalTest:testAfterOpen()V ERROR java.lang.NullPointerException 91 186 301 167 
com.domainlanguage.time.TimeIntervalTest:testIncludesOpen()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testIncludesHalfOpen()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationFrom()V ERROR java.lang.NullPointerException 91 297 
com.domainlanguage.time.TimeIntervalTest:testCreateWithDurationUntil()V ERROR java.lang.NullPointerException 91 297 
com.domainlanguage.time.TimeIntervalTest:testDefaultFromPoints()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testDefaultFromDuration()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.time.TimeIntervalTest:testEverUntil()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.intervals.IntervalMapTest:testLookup()V ERROR java.lang.NullPointerException 91 290 288 
com.domainlanguage.intervals.IntervalMapTest:testRemove()V ERROR java.lang.NullPointerException 91 290 288 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteOverlap()V ERROR java.lang.NullPointerException 91 290 288 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMiddle()V ERROR java.lang.NullPointerException 91 290 288 
com.domainlanguage.intervals.IntervalMapTest:testConstructionOverwriteMultiple()V ERROR java.lang.NullPointerException 91 290 288 
com.domainlanguage.time.TimeOfDayTest:testEquals()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetHour()V PASSED
com.domainlanguage.time.TimeOfDayTest:testHashCode()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnStartOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnMiddleOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testOnEndOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithLaterTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithSameTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testGetMinute()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAsTimePoint()V PASSED
com.domainlanguage.time.TimeOfDayTest:testAfterWithEarlierTimeOfDay()V PASSED
com.domainlanguage.time.TimeOfDayTest:testBeforeWithEarlierTimeOfDay()V PASSED
com.domainlanguage.timeutil.SystemClockTest:testSystemClockTimeSource()V ERROR java.lang.NullPointerException 155 144 52 
com.domainlanguage.time.TimeRateTest:testSimpleRate()V PASSED
com.domainlanguage.time.TimeRateTest:testRoundingRate()V PASSED
com.domainlanguage.time.TimeRateTest:testEquals()V PASSED
com.domainlanguage.time.TimeRateTest:testRounding()V PASSED
com.domainlanguage.util.VerifyPersistentMappingTest:test()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSerialization()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testSubintervalIterator()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testComplements()V ERROR java.lang.NullPointerException 235 263 221 
com.domainlanguage.time.CalendarIntervalTest:testEverFromToString()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testEquals()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testIncludes()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testDaysAdd()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testLength()V PASSED
com.domainlanguage.time.CalendarIntervalTest:testTranslationToTimeInterval()V ERROR java.lang.NullPointerException 91 297 
com.domainlanguage.time.CalendarIntervalTest:testSingleDateCalendarIntervalCompare()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterAfterEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testSimple()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierAfterLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualAfterEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testLaterBeforeEarlier()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEarlierBeforeLater()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testEqualBeforeEqual()V PASSED
com.domainlanguage.time.MinuteOfHourTest:testIllegalLessThanZero()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.MinuteOfHourTest:testGreaterThan()V PASSED
com.domainlanguage.intervals.IntervalTest:testAbstractCreation()V ERROR java.lang.NullPointerException 182 17 226 (12,88) (12,88) 
com.domainlanguage.intervals.IntervalTest:testSerialization()V FAILED junit.framework.AssertionFailedError 113 
com.domainlanguage.intervals.IntervalTest:testOpenInterval()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.intervals.IntervalTest:testIntersects()V ERROR java.lang.NullPointerException 91 151 263 
com.domainlanguage.intervals.IntervalTest:testIntersection()V ERROR java.lang.NullPointerException 91 151 271 
com.domainlanguage.intervals.IntervalTest:testGreaterOfLowerLimits()V ERROR java.lang.NullPointerException 91 151 
com.domainlanguage.intervals.IntervalTest:testLesserOfUpperLimits()V ERROR java.lang.NullPointerException 155 235 
com.domainlanguage.intervals.IntervalTest:testCoversInterval()V ERROR java.lang.NullPointerException 91 108 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEqual()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testIsSingleElement()V ERROR java.lang.NullPointerException 155 135 269 
com.domainlanguage.intervals.IntervalTest:testEqualsForEmptyIntervals()V ERROR java.lang.NullPointerException 91 345 
com.domainlanguage.intervals.IntervalTest:testToString()V ERROR java.lang.NullPointerException 182 17 226 303 
com.domainlanguage.intervals.IntervalTest:testIsBelow()V ERROR java.lang.NullPointerException 155 135 141 
com.domainlanguage.intervals.IntervalTest:testIncludes()V ERROR java.lang.NullPointerException 155 135 141 29 
com.domainlanguage.intervals.IntervalTest:testIsEmpty()V ERROR java.lang.NullPointerException 182 17 226 
com.domainlanguage.intervals.IntervalTest:testGap()V ERROR java.lang.NullPointerException 91 151 263 247 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjoint()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementDisjointAdjacentOpen()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapLeft()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementOverlapRight()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementAdjacentClosed()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosing()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosed()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedEndPoint()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.intervals.IntervalTest:testEqualsForOnePointIntervals()V ERROR java.lang.NullPointerException 182 17 226 (12,88) (12,88) 
com.domainlanguage.intervals.IntervalTest:testRelativeComplementEnclosedOpen()V ERROR java.lang.NullPointerException 91 151 263 221 
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testAsTimePoint()V PASSED
com.domainlanguage.timeutil.NISTServerTimeSourceTest:testNISTTimeSource()V PASSED
com.domainlanguage.time.DurationTest:testSerialization()V PASSED
com.domainlanguage.time.DurationTest:testAddMillisecondsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testAddMonthsToPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMonthsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testSubtractFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testAddToCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testConversionToBaseUnits()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedString()V PASSED
com.domainlanguage.time.DurationTest:testStartingFromTimePoint()V ERROR java.lang.NullPointerException 182 17 226 (12,88) (12,88) 
com.domainlanguage.time.DurationTest:testStartingFromCalendarDate()V PASSED
com.domainlanguage.time.DurationTest:testNormalizedUnit()V PASSED
com.domainlanguage.time.DurationTest:testEquals()V PASSED
com.domainlanguage.time.DurationTest:testToString()V PASSED
com.domainlanguage.time.DurationTest:testDivide()V PASSED
com.domainlanguage.time.DurationTest:testCompare()V FAILED junit.framework.AssertionFailedError 
com.domainlanguage.time.DurationTest:testAdd()V PASSED
com.domainlanguage.time.DurationTest:testSubtract()V PASSED
com.domainlanguage.time.DurationTest:testSubtractMillisecondsFromPoint()V PASSED
com.domainlanguage.time.DurationTest:testToNormalizedStringMonthBased()V PASSED
com.domainlanguage.timeutil.ClockTest:testNowDoesntBreak()V PASSED
com.domainlanguage.timeutil.ClockTest:testTodayWithoutTimeZone()V PASSED
com.domainlanguage.timeutil.ClockTest:testNow()V PASSED
com.domainlanguage.timeutil.ClockTest:testToday()V PASSED
com.domainlanguage.money.MoneyTest:testSerialization()V PASSED
com.domainlanguage.money.MoneyTest:testCreationFromDouble()V PASSED
com.domainlanguage.money.MoneyTest:testConstructor()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplyRounding()V PASSED
com.domainlanguage.money.MoneyTest:testMinimumIncrement()V PASSED
com.domainlanguage.money.MoneyTest:testDivisionByMoney()V PASSED
com.domainlanguage.money.MoneyTest:testCloseNumbersNotEqual()V PASSED
com.domainlanguage.money.MoneyTest:testEqualsNull()V PASSED
com.domainlanguage.money.MoneyTest:testPositiveNegative()V PASSED
com.domainlanguage.money.MoneyTest:testSubtraction()V PASSED
com.domainlanguage.money.MoneyTest:testApplyRatio()V PASSED
com.domainlanguage.money.MoneyTest:testIncremented()V PASSED
com.domainlanguage.money.MoneyTest:testEquals()V PASSED
com.domainlanguage.money.MoneyTest:testYen()V PASSED
com.domainlanguage.money.MoneyTest:testDivide()V PASSED
com.domainlanguage.money.MoneyTest:testMultiply()V PASSED
com.domainlanguage.money.MoneyTest:testCompare()V PASSED
com.domainlanguage.money.MoneyTest:testHash()V PASSED
com.domainlanguage.money.MoneyTest:testNegation()V PASSED
com.domainlanguage.money.MoneyTest:testPrint()V PASSED
com.domainlanguage.money.MoneyTest:testRound()V PASSED
com.domainlanguage.money.MoneyTest:testMultiplicationWithExplicitRounding()V PASSED
com.domainlanguage.money.MoneyTest:testAdditionOfDifferentCurrencies()V PASSED
com.domainlanguage.money.MoneyTest:testDifferentCurrencyNotEqual()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
com.domainlanguage.time.CalendarInterval:lengthInMonthsInt()I
com.domainlanguage.money.Money:per(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.MoneyTimeRate;
com.domainlanguage.time.TimeOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeRate:TimeRate(Ljava.lang.String;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.money.Money:minimumIncrement()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePointTest:javaUtilDateDec20_2003()Ljava.util.Date;
com.domainlanguage.money.MoneyTimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:Interval(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)V | STATEMENT | 1947 | stmt -> ;
com.domainlanguage.time.TimeUnit:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.Duration:years(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.MinuteOfHour:equals(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.intervals.Interval:compareTo(Ljava.lang.Object;)I
com.domainlanguage.intervals.Interval:equals(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:isAfter(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.Duration:daysHoursMinutesSecondsMilliseconds(IIIIJ)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:isOpen()Z
com.domainlanguage.time.BusinessCalendar.1:nextBusinessDate()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;)Ljava.math.BigDecimal;
com.domainlanguage.timeutil.NISTClient:asTimePoint(Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:assertHasSameCurrencyAs(Lcom.domainlanguage.money.Money;)V
com.domainlanguage.time.FixedDateSpecification:FixedDateSpecification(II)V
com.domainlanguage.timeutil.Clock:defaultTimeZone()Ljava.util.TimeZone;
com.domainlanguage.timeutil.NISTClient:now(Ljava.lang.String;I)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.ConcreteCalendarInterval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimePoint:asJavaCalendar()Ljava.util.Calendar;
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:includes(Ljava.lang.Comparable;)Z
com.domainlanguage.time.CalendarDate:hashCode()I
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.HourOfDay:HourOfDay(I)V
com.domainlanguage.base.Ratio:of(JJ)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimePoint:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimePoint:until(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.intervals.IntervalSequence:IntervalSequence()V
com.domainlanguage.time.TimeOfDay:equals(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarInterval:lengthInMonths()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarInterval.3:hasNext()Z
com.domainlanguage.money.Money:equals(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.money.Money:times(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:everFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.timeutil.NISTClient.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:isConvertibleTo(Lcom.domainlanguage.time.Duration;)Z
com.domainlanguage.time.HourOfDay:value(ILjava.lang.String;)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.money.Proration:defaultScaleForIntermediateCalculations(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.time.FloatingDateSpecification:FloatingDateSpecification(III)V
com.domainlanguage.time.TimeUnit:baseUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.BusinessCalendar:minusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.base.Ratio:times(Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.util.ImmutableIterator:remove()V
com.domainlanguage.time.Duration:months(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.TimePoint:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:dividedBy(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeUnit.Type:Type(Ljava.lang.String;)V
com.domainlanguage.time.BusinessCalendar:plusBusinessDays(Lcom.domainlanguage.time.CalendarDate;I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:includesUpperLimit()Z
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.MinuteOfHour:equals(Ljava.lang.Object;)Z
com.domainlanguage.tests.CannedResponseServer:getHostName()Ljava.lang.String;
com.domainlanguage.money.Money:minus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:nearestBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate; | CONDITION | 1101 | if (x) -> if (!x)
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[Ljava.math.BigDecimal;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:from(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeUnit:toString(J)Ljava.lang.String;
com.domainlanguage.timeutil.SystemClock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.time.CalendarInterval:inclusive(IIIIII)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimePoint:asJavaCalendar(Ljava.util.TimeZone;)Ljava.util.Calendar;
com.domainlanguage.timeutil.SystemClock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:compareTo(Lcom.domainlanguage.money.Money;)I
com.domainlanguage.intervals.IntervalSequence:isEmpty()Z
com.domainlanguage.time.Duration:subtractAmountFromCalendar(JLjava.util.Calendar;)V
com.domainlanguage.time.CalendarInterval:end()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Proration:sum([Ljava.math.BigDecimal;)Ljava.math.BigDecimal;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.CalendarInterval.1:next()Ljava.lang.Object;
com.domainlanguage.time.FixedDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeUnit:javaCalendarConstantForBaseType()I
com.domainlanguage.money.Money:times(DI)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:at(IIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:compareTo(Lcom.domainlanguage.time.CalendarDate;)I
com.domainlanguage.time.TimePoint:parseFrom(Ljava.lang.String;Ljava.lang.String;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:quarters(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.BusinessCalendar:getElapsedBusinessDays(Lcom.domainlanguage.time.CalendarInterval;)I
com.domainlanguage.time.Duration:assertNotConvertible(Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.intervals.Interval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_month()I
com.domainlanguage.time.CalendarInterval:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;I)Ljava.math.BigDecimal;
com.domainlanguage.time.TimeOfDay:asTimePointGiven(Lcom.domainlanguage.time.CalendarDate;Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.TimeUnit.Type:equals(Lcom.domainlanguage.time.TimeUnit.Type;)Z
com.domainlanguage.time.TimePoint:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.money.MoneyTimeRate:MoneyTimeRate(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.BusinessCalendar:nextBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimePoint:backToMidnight(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:assertQuantityPositiveOrZero(J)V
com.domainlanguage.money.Money:dollars(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:inBaseUnits()J
com.domainlanguage.time.TimePoint:atGMT(IIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeRate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.Duration:minutes(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:covers(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.intervals.Interval:newOfSameType(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.money.Money:plus(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.base.Ratio:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.Duration:days(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.tests.SerializationTester:assertCanBeSerialized(Ljava.lang.Object;)V
com.domainlanguage.time.CalendarInterval.2:hasNext()Z
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;JJ)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:incremented()Lcom.domainlanguage.money.Money;
com.domainlanguage.time.Duration:toNormalizedString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:equals(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.money.Proration:ratios([Ljava.math.BigDecimal;)[Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.TimeUnit:nextFinerUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.TimeInterval:TimeInterval(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)V
com.domainlanguage.time.TimePoint:nextDay()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:Money(Ljava.math.BigDecimal;Ljava.util.Currency;)V
com.domainlanguage.time.TimeInterval:everPreceding(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimePoint:asJavaUtilDate()Ljava.util.Date;
com.domainlanguage.time.CalendarInterval:daysInReverseIterator()Ljava.util.Iterator;
com.domainlanguage.time.CalendarInterval:year(I)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.Duration:of(JLcom.domainlanguage.time.TimeUnit;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.BusinessCalendar.1:hasNext()Z
com.domainlanguage.time.CalendarMinute:CalendarMinute(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)V
com.domainlanguage.money.MoneyTimeRate:equals(Lcom.domainlanguage.money.MoneyTimeRate;)Z
com.domainlanguage.time.Duration:hours(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.intervals.Interval:hasUpperLimit()Z
com.domainlanguage.time.Duration:toNormalizedString([Lcom.domainlanguage.time.TimeUnit;)Ljava.lang.String;
com.domainlanguage.time.TimeUnit:isConvertibleToMilliseconds()Z
com.domainlanguage.time.MinuteOfHour:isAfter(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.time.TimePoint:atMidnight(IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:from(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:isBelow(Ljava.lang.Comparable;)Z
com.domainlanguage.time.TimePoint:from(J)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeOfDay:hourAndMinute(II)Lcom.domainlanguage.time.TimeOfDay;
com.domainlanguage.time.TimeInterval:end()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:applying(Lcom.domainlanguage.base.Ratio;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.base.Ratio:decimalValue(II)Ljava.math.BigDecimal;
com.domainlanguage.tests.CannedResponseServer:getPort()I
com.domainlanguage.money.Money:euros(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeRate:TimeRate(DLcom.domainlanguage.time.Duration;)V
com.domainlanguage.time.BusinessCalendar.1:next()Ljava.lang.Object;
com.domainlanguage.intervals.Interval:greaterOfLowerLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable;
com.domainlanguage.time.TimePoint:at(IIIIIIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimePoint:from(Ljava.util.Date;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Proration:sum([Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:upperLimit()Ljava.lang.Comparable;
com.domainlanguage.time.Duration:weeks(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarDate:asJavaCalendarUniversalZoneMidnight()Ljava.util.Calendar;
com.domainlanguage.money.Money:isZero()Z
com.domainlanguage.time.Duration:startingFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimeUnit:equals(Ljava.lang.Object;)Z
com.domainlanguage.money.Money:isLessThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.TimeInterval:preceding(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.BusinessCalendar:isWeekend(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.HourOfDay:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeInterval:open(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.TimeOfDay:getMinute()I
com.domainlanguage.time.TimeInterval:isAfter(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.TimePoint:convertedTo24hour(ILjava.lang.String;)I
com.domainlanguage.time.CalendarDate:_from(Ljava.util.Calendar;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeRate:equals(Lcom.domainlanguage.time.TimeRate;)Z
com.domainlanguage.time.TimeUnit:isConvertibleTo(Lcom.domainlanguage.time.TimeUnit;)Z
com.domainlanguage.money.Money:dividedBy(D)Lcom.domainlanguage.money.Money;
com.domainlanguage.timeutil.Clock:setTimeSource(Lcom.domainlanguage.time.TimeSource;)V
com.domainlanguage.time.TimeUnit:getFactor()I
com.domainlanguage.money.Proration:partOfWhole(Lcom.domainlanguage.money.Money;Lcom.domainlanguage.base.Ratio;)Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:toString()Ljava.lang.String;
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_day()I
com.domainlanguage.time.FloatingDateSpecification:ofYear(I)Lcom.domainlanguage.time.CalendarDate; | OPERATOR | 914 | * -> >>
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.TimePoint;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarInterval:inclusive(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.ConcreteCalendarInterval:ConcreteCalendarInterval(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)V
com.domainlanguage.intervals.Interval:includesLowerLimit()Z
com.domainlanguage.money.Proration:proratedOver(Lcom.domainlanguage.money.Money;[J)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.HourOfDay:value(I)Lcom.domainlanguage.time.HourOfDay;
com.domainlanguage.time._HolidayDates:defaultHolidays()Ljava.util.Set;
com.domainlanguage.intervals.Interval:hasLowerLimit()Z
com.domainlanguage.time.AnnualDateSpecification.1:next()Ljava.lang.Object;
com.domainlanguage.time.BusinessCalendar:nextNumberOfBusinessDays(ILjava.util.Iterator;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:from(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval.1:hasNext()Z
com.domainlanguage.time.TimePoint:at12hr(IIIILjava.lang.String;IIILjava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:getCurrency()Ljava.util.Currency;
com.domainlanguage.time.CalendarMinute:equals(Lcom.domainlanguage.time.CalendarMinute;)Z
com.domainlanguage.time.TimeUnit:descendingUnitsForDisplay()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.timeutil.Clock:setDefaultTimeZone(Ljava.util.TimeZone;)V
com.domainlanguage.time.HourOfDay:isAfter(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.BusinessCalendar:addHolidays(Ljava.util.Set;)V
com.domainlanguage.time.TimePoint:parseGMTFrom(Ljava.lang.String;Ljava.lang.String;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:getAmount()Ljava.math.BigDecimal;
com.domainlanguage.time.TimeOfDay:getHour()I
com.domainlanguage.time.CalendarInterval:includesLowerLimit()Z
com.domainlanguage.time.TimeOfDay:TimeOfDay(II)V
com.domainlanguage.time.Duration:toString()Ljava.lang.String;
com.domainlanguage.intervals.IntervalSequence:add(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.timeutil.Clock:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.MinuteOfHour:hashCode()I
com.domainlanguage.time.CalendarDate:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:open(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.base.Ratio:of(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarInterval:start()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarDate:dayOfWeek()I
com.domainlanguage.timeutil.Clock:today()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:isPositive()Z
com.domainlanguage.time.TimeInterval:closed(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.AnnualDateSpecification:iterateOver(Lcom.domainlanguage.time.CalendarInterval;)Ljava.util.Iterator;
com.domainlanguage.time.Duration:minus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:euros(Ljava.math.BigDecimal;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:CalendarDate(III)V
com.domainlanguage.time.Duration:addAmountToCalendar(JLjava.util.Calendar;)V
com.domainlanguage.intervals.Interval:complementRelativeTo(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.CalendarDate:toString(Ljava.lang.String;)Ljava.lang.String;
com.domainlanguage.time.TimeRate:over(Lcom.domainlanguage.time.Duration;II)Ljava.math.BigDecimal;
com.domainlanguage.util.ClassGenerator:ClassGenerator(Lcom.domainlanguage.util.ClassFilter;)V
com.domainlanguage.intervals.LinearIntervalMap:LinearIntervalMap()V
com.domainlanguage.intervals.Interval:isEmpty()Z
com.domainlanguage.time.Duration:addAmountToTimePoint(JLcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval.2:next()Ljava.lang.Object;
com.domainlanguage.base.Ratio:times(Ljava.math.BigDecimal;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.money.Money:isGreaterThan(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.time.Duration:subtractedFrom(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.FixedDateSpecification:isSatisfiedBy(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.HourOfDay:convertTo24hour(ILjava.lang.String;)I | CONDITION | 627 | if (x) -> if (!x)
com.domainlanguage.time.TimePoint:isSameDayAs(Lcom.domainlanguage.time.TimePoint;Ljava.util.TimeZone;)Z
com.domainlanguage.intervals.Interval:lesserOfUpperLimits(Lcom.domainlanguage.intervals.Interval;)Ljava.lang.Comparable; | STATEMENT | 7622 | stmt -> ;
com.domainlanguage.time.DateSpecification:fixed(II)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.MinuteOfHour:value()I
com.domainlanguage.time.Duration:compareTo(Ljava.lang.Object;)I | OPERATOR | 4869 | - -> +
com.domainlanguage.time.TimeOfDay:on(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.money.MoneyTimeRate:over(Lcom.domainlanguage.time.Duration;II)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarMinute:dateHourAndMinute(IIIII)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.money.Proration:distributeRemainderOver([Lcom.domainlanguage.money.Money;Lcom.domainlanguage.money.Money;)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarDate:startAsTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:through(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.BusinessCalendar:businessDaysOnly(Ljava.util.Iterator;)Ljava.util.Iterator;
com.domainlanguage.time.Duration:equals(Ljava.lang.Object;)Z
com.domainlanguage.intervals.Interval:gap(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.timeutil.NISTClient:timeSource(Ljava.lang.String;I)Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.money.Money:isNegative()Z
com.domainlanguage.time.TimePoint:TimePoint(J)V
com.domainlanguage.time.Duration:milliseconds(J)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.TimeOfDay:hashCode()I
com.domainlanguage.time.HourOfDay:equals(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.CalendarDate:previousDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.TimeInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.money.Money:hasSameCurrencyAs(Lcom.domainlanguage.money.Money;)Z
com.domainlanguage.timeutil.ClockTest.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.BusinessCalendar:BusinessCalendar()V
com.domainlanguage.time.Duration:dividedBy(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.BusinessCalendarTest:businessCalendar()Lcom.domainlanguage.time.BusinessCalendar;
com.domainlanguage.time.TimePoint:toString(Ljava.lang.String;Ljava.util.TimeZone;)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:startingFrom(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.intervals.Interval:intersects(Lcom.domainlanguage.intervals.Interval;)Z
com.domainlanguage.timeutil.Clock:timeSource()Lcom.domainlanguage.time.TimeSource;
com.domainlanguage.money.Money:negated()Lcom.domainlanguage.money.Money;
com.domainlanguage.money.Money:times(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimeInterval:over(Lcom.domainlanguage.time.TimePoint;Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.Duration:addedTo(Lcom.domainlanguage.time.TimePoint;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.intervals.Interval:isSingleElement()Z
com.domainlanguage.intervals.LinearIntervalMap:remove(Lcom.domainlanguage.intervals.Interval;)V
com.domainlanguage.intervals.Interval:intersect(Lcom.domainlanguage.intervals.Interval;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.MinuteOfHour:isBefore(Lcom.domainlanguage.time.MinuteOfHour;)Z
com.domainlanguage.base.Ratio:Ratio(Ljava.math.BigDecimal;Ljava.math.BigDecimal;)V
com.domainlanguage.time.TimeOfDay:isAfter(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.time.CalendarDate:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeOfDay:isBefore(Lcom.domainlanguage.time.TimeOfDay;)Z
com.domainlanguage.intervals.Interval:closed(Ljava.lang.Comparable;Ljava.lang.Comparable;)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.CalendarDate:plusDays(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.money.Money:valueOf(Ljava.math.BigDecimal;Ljava.util.Currency;)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.BusinessCalendar:isHoliday(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.money.Money:dividedBy(Lcom.domainlanguage.money.Money;)Lcom.domainlanguage.base.Ratio;
com.domainlanguage.time.CalendarDate:date(III)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarMinute:equals(Ljava.lang.Object;)Z
com.domainlanguage.time.TimeInterval:isBefore(Lcom.domainlanguage.time.TimePoint;)Z
com.domainlanguage.time.BusinessCalendar:isBusinessDay(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.time.TimeUnit:TimeUnit(Lcom.domainlanguage.time.TimeUnit.Type;Lcom.domainlanguage.time.TimeUnit.Type;I)V
com.domainlanguage.time.CalendarDate:breachEncapsulationOf_year()I
com.domainlanguage.intervals.LinearIntervalMap:put(Lcom.domainlanguage.intervals.Interval;Ljava.lang.Object;)V
com.domainlanguage.time.CalendarDate:nextDay()Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.intervals.Interval:hashCode()I
com.domainlanguage.intervals.LinearIntervalMap:intersectingKeys(Lcom.domainlanguage.intervals.Interval;)Ljava.util.List;
com.domainlanguage.time.TimePoint:calendarDate(Ljava.util.TimeZone;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.base.Ratio:equals(Lcom.domainlanguage.base.Ratio;)Z
com.domainlanguage.time.TimeRate:scale()I
com.domainlanguage.money.Money:times(I)Lcom.domainlanguage.money.Money;
com.domainlanguage.intervals.Interval:over(Ljava.lang.Comparable;ZLjava.lang.Comparable;Z)Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimeInterval:start()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.money.Money:hashCode()I
com.domainlanguage.time.CalendarDate:asTimeInterval(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.BusinessCalendar:defaultHolidays()Ljava.util.Set;
com.domainlanguage.intervals.Interval:isAbove(Ljava.lang.Comparable;)Z
com.domainlanguage.time.ConcreteCalendarInterval:lowerLimit()Ljava.lang.Comparable;
com.domainlanguage.intervals.Interval:toString()Ljava.lang.String;
com.domainlanguage.money.Money:toString(Ljava.util.Locale;)Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:month(II)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeUnit:descendingUnits()[Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.Duration:Duration(JLcom.domainlanguage.time.TimeUnit;)V
com.domainlanguage.time.MinuteOfHour:value(I)Lcom.domainlanguage.time.MinuteOfHour;
com.domainlanguage.time.TimePoint:from(Ljava.util.Calendar;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarInterval:daysIterator()Ljava.util.Iterator;
com.domainlanguage.time.CalendarDate:isBefore(Lcom.domainlanguage.time.CalendarDate;)Z
com.domainlanguage.intervals.Interval:Interval()V
com.domainlanguage.timeutil.SystemClock.1:now()Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.MinuteOfHour:MinuteOfHour(I)V | OPERATOR | 478 | || -> &&
com.domainlanguage.time.DateSpecification:nthOccuranceOfWeekdayInMonth(III)Lcom.domainlanguage.time.DateSpecification;
com.domainlanguage.time.CalendarMinute:asTimePoint(Ljava.util.TimeZone;)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:plusMonths(I)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.HourOfDay:value()I
com.domainlanguage.time.CalendarInterval.3:next()Ljava.lang.Object;
com.domainlanguage.time.CalendarInterval:everPreceding(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.CalendarMinute:dateAndTimeOfDay(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.time.TimeInterval:intersect(Lcom.domainlanguage.time.TimeInterval;)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.AnnualDateSpecification.1:hasNext()Z
com.domainlanguage.time.HourOfDay:hashCode()I
com.domainlanguage.time.CalendarInterval:length()Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.Duration:normalizedUnit()Lcom.domainlanguage.time.TimeUnit;
com.domainlanguage.time.Duration:seconds(I)Lcom.domainlanguage.time.Duration;
com.domainlanguage.time.CalendarInterval:subintervalIterator(Lcom.domainlanguage.time.Duration;)Ljava.util.Iterator;
com.domainlanguage.time.CalendarDate:toString()Ljava.lang.String;
com.domainlanguage.time.CalendarInterval:lengthInDaysInt()I
com.domainlanguage.money.Money:valueOf(DLjava.util.Currency;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:atMidnightGMT(III)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.CalendarDate:compareTo(Ljava.lang.Object;)I
com.domainlanguage.time.TimeRate:TimeRate(Ljava.math.BigDecimal;Lcom.domainlanguage.time.Duration;)V
com.domainlanguage.money.Money:dividedBy(Ljava.math.BigDecimal;I)Lcom.domainlanguage.money.Money;
com.domainlanguage.time.CalendarInterval:everFrom(Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.ConcreteCalendarInterval:from(Lcom.domainlanguage.time.CalendarDate;Lcom.domainlanguage.time.CalendarDate;)Lcom.domainlanguage.time.ConcreteCalendarInterval;
com.domainlanguage.time.HourOfDay:isBefore(Lcom.domainlanguage.time.HourOfDay;)Z
com.domainlanguage.time.AnnualDateSpecification:firstOccurrenceIn(Lcom.domainlanguage.time.CalendarInterval;)Lcom.domainlanguage.time.CalendarDate;
com.domainlanguage.time.CalendarInterval:equals(Lcom.domainlanguage.time.CalendarInterval;)Z
com.domainlanguage.time.TimePoint:isBefore(Lcom.domainlanguage.time.TimeInterval;)Z
com.domainlanguage.time.CalendarDate:month()Lcom.domainlanguage.time.CalendarInterval;
com.domainlanguage.time.TimeInterval:startingFrom(Lcom.domainlanguage.time.TimePoint;ZLcom.domainlanguage.time.Duration;Z)Lcom.domainlanguage.time.TimeInterval;
com.domainlanguage.time.CalendarDate:at(Lcom.domainlanguage.time.TimeOfDay;)Lcom.domainlanguage.time.CalendarMinute;
com.domainlanguage.intervals.Interval:emptyOfSameType()Lcom.domainlanguage.intervals.Interval;
com.domainlanguage.time.TimePoint:atGMT(IIIIIII)Lcom.domainlanguage.time.TimePoint;
com.domainlanguage.time.TimeUnit:toString()Ljava.lang.String;
com.domainlanguage.money.Proration:dividedEvenlyIntoParts(Lcom.domainlanguage.money.Money;I)[Lcom.domainlanguage.money.Money;
com.domainlanguage.time.TimePoint:plus(Lcom.domainlanguage.time.Duration;)Lcom.domainlanguage.time.TimePoint;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
146 2 273 2 21 4 46 1 256 5 124 9 28 2 279 6 331 2 4 2 281 1 77 1 31 9 103 1 209 2 242 1 110 3 192 2 79 1 266 1 265 1 116 1 64 1 154 1 66 1 183 1 40 1 119 1 
146 2 273 2 21 4 46 1 256 5 124 9 28 2 279 6 331 2 4 2 281 1 77 1 31 9 103 1 209 2 242 1 110 3 192 2 79 1 266 1 265 1 116 1 64 1 154 1 66 1 183 1 40 1 119 1 
146 2 273 2 21 5 46 1 256 6 124 10 28 2 279 7 331 2 4 2 281 1 77 1 31 10 103 1 209 2 242 1 110 4 192 2 79 1 266 1 265 1 116 1 64 1 154 1 66 1 183 1 40 1 119 1 
146 2 273 2 21 3 46 1 256 4 124 7 28 2 279 4 331 2 4 1 281 1 77 1 31 7 103 1 209 2 242 1 110 2 192 2 79 1 266 1 265 1 64 1 154 1 66 1 183 1 40 1 119 1 
146 1 273 1 21 2 110 1 79 1 256 3 116 1 28 1 124 4 279 3 331 1 4 2 281 1 40 1 31 4 103 1 209 1 242 1 
146 1 273 1 175 1 46 1 192 1 79 1 256 1 266 1 115 1 28 1 124 2 331 1 40 1 31 2 103 1 33 1 
21 1 110 1 192 1 79 1 256 2 28 2 124 3 279 1 331 2 154 1 40 1 31 3 103 1 
146 1 273 1 21 4 110 3 192 1 79 1 256 5 265 1 116 1 64 1 28 2 124 9 279 7 331 2 4 2 281 1 154 1 40 1 31 9 103 1 335 1 209 1 242 1 348 1 
146 1 273 1 21 4 110 3 192 1 79 1 256 5 265 1 116 1 64 1 28 2 124 9 279 7 331 2 4 2 281 1 154 1 40 1 31 9 103 1 335 1 209 1 242 1 348 1 
118 1 275 1 113 1 
15 1 118 1 311 2 
34 1 243 1 152 2 250 2 142 2 139 2 153 2 309 2 
121 1 307 2 91 1 309 2 97 1 102 2 58 1 130 2 104 1 171 1 297 1 7 1 243 1 174 1 137 1 152 2 139 2 299 1 286 1 153 2 112 1 179 1 343 1 268 1 250 3 251 1 142 3 227 1 349 1 
261 1 243 1 152 1 250 1 142 1 139 1 153 1 309 1 222 1 126 1 
71 1 86 1 275 1 153 1 140 1 27 1 219 1 126 1 189 1 250 1 67 1 142 1 118 1 169 1 
71 1 152 1 139 1 275 1 153 1 140 2 309 1 27 1 219 2 126 1 250 1 67 1 142 1 118 1 169 1 
282 1 157 1 140 1 219 1 211 1 
282 1 157 1 118 1 254 1 275 1 140 2 278 1 219 2 
157 1 140 1 219 1 
282 1 243 1 152 1 139 1 140 1 153 1 309 1 219 1 222 1 126 1 329 1 261 1 250 1 142 1 
118 1 
282 1 157 1 118 1 275 1 140 2 278 1 219 2 289 1 
70 1 282 2 317 1 275 1 140 5 25 1 93 1 180 1 342 1 278 1 219 5 181 2 157 2 118 1 312 2 302 1 337 2 305 1 340 1 
34 1 113 1 
34 2 152 1 139 1 153 2 309 1 5 1 332 1 250 2 142 2 
55 1 96 1 98 1 
34 1 174 1 137 1 122 1 307 1 112 1 97 1 268 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 349 1 
174 1 137 1 152 1 307 1 153 1 112 1 309 1 97 1 268 1 55 1 250 2 102 1 227 1 142 2 346 1 104 1 130 1 171 1 105 1 349 1 
34 1 152 3 250 3 142 3 139 1 346 1 153 3 309 3 
261 1 152 1 250 1 142 1 153 1 309 1 126 1 
5 1 332 1 152 1 250 1 142 1 139 1 153 1 309 1 126 1 
71 1 121 1 307 1 91 1 309 3 27 1 292 1 97 1 126 1 332 1 101 1 102 1 169 1 104 1 130 1 171 1 105 1 297 1 7 1 174 1 243 1 137 1 152 3 139 2 299 1 153 3 140 1 112 1 179 1 343 1 219 1 268 1 67 1 250 4 227 1 142 4 346 1 349 1 
86 1 34 1 152 1 250 2 142 2 346 1 153 2 309 1 198 1 
71 1 234 1 152 3 139 1 140 1 153 3 309 3 27 1 219 1 292 1 126 1 332 1 250 3 67 1 142 3 118 1 346 2 169 1 105 1 
152 2 139 1 153 2 309 2 98 1 332 1 55 1 250 2 142 2 346 1 
34 1 174 1 137 1 307 1 112 1 268 1 97 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 349 1 
34 1 174 1 137 1 307 1 112 1 97 1 56 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 231 1 
167 1 7 1 121 1 214 1 301 1 341 1 179 1 91 1 186 1 
71 1 152 1 250 1 142 1 153 1 309 1 84 1 126 1 
86 1 34 1 152 4 139 1 153 5 309 4 332 1 250 5 168 1 142 5 346 2 191 1 105 1 198 1 
261 1 152 2 250 2 142 2 153 2 309 2 84 1 126 1 
184 1 32 1 
184 1 32 1 
233 1 45 1 
233 1 45 1 
233 1 45 1 184 1 32 1 
196 1 184 1 32 1 
233 1 45 1 184 1 32 1 
184 1 32 1 318 1 
196 1 184 1 32 1 
196 1 184 1 32 1 
184 1 32 1 338 1 
184 1 32 1 338 1 
184 1 32 1 338 1 
283 1 253 1 193 1 140 2 10 1 202 2 308 2 344 1 219 2 37 1 321 2 118 1 184 2 143 2 132 3 239 1 32 2 241 1 314 2 
200 1 166 1 202 1 92 1 309 2 308 1 237 1 132 1 32 1 241 1 314 1 34 1 316 1 152 2 177 1 140 1 153 2 287 1 219 1 318 1 250 2 142 2 184 1 143 1 
146 1 273 1 209 1 
146 1 273 1 33 1 
293 1 273 3 111 1 229 1 209 2 33 1 
293 1 273 2 111 1 209 1 51 1 33 1 
293 2 273 2 111 1 209 1 33 1 
22 1 275 1 25 2 92 1 236 1 278 1 29 1 128 1 311 3 333 2 312 1 210 1 135 1 337 1 339 1 282 4 177 1 140 5 141 1 180 1 81 2 287 1 181 1 219 5 15 1 157 1 118 2 301 1 186 1 85 2 302 3 232 1 
47 1 275 1 309 1 126 1 329 1 261 1 211 1 282 2 315 1 243 1 152 1 178 1 139 1 140 2 153 1 219 2 222 1 157 1 250 1 142 1 118 1 
70 1 22 1 275 1 25 2 236 1 29 1 333 2 311 4 312 1 210 1 135 1 337 1 339 1 282 2 140 3 141 1 81 1 287 1 181 1 219 3 15 2 118 3 301 1 186 1 302 3 85 2 
70 1 22 1 275 1 187 1 25 4 236 1 29 2 311 7 333 4 312 1 210 1 135 2 337 1 339 1 282 3 215 1 140 4 141 2 81 2 287 2 181 1 219 4 15 3 118 4 301 2 323 1 186 2 85 4 302 5 
113 1 160 1 97 1 
8 1 97 1 
347 1 
171 1 97 1 
137 1 306 1 171 1 160 2 97 3 120 1 
137 1 171 1 97 1 
82 1 97 1 
155 1 11 1 204 1 36 1 
155 1 11 1 204 1 36 1 
155 1 11 1 204 1 74 1 36 1 
155 1 11 1 204 1 36 1 
155 1 11 1 204 1 36 1 
146 1 199 1 273 2 307 1 256 1 259 1 279 1 124 2 28 1 331 1 99 1 294 1 102 1 78 1 31 2 103 1 334 1 130 1 104 1 209 1 240 1 134 1 33 1 174 1 61 1 192 1 79 1 223 1 40 1 229 1 
146 1 199 1 273 2 307 1 256 1 148 1 259 1 124 3 28 1 279 2 331 1 99 1 294 1 102 1 31 3 334 1 130 1 104 1 209 1 240 1 107 1 33 1 174 1 61 1 192 1 79 1 218 1 223 1 40 1 229 1 
146 1 273 2 174 1 199 1 192 1 79 1 307 1 256 1 218 1 259 1 223 1 279 2 124 2 99 1 102 1 40 1 31 2 229 1 104 1 130 1 334 1 209 1 240 1 107 1 33 1 
199 2 1 1 307 1 148 1 124 1 28 1 97 1 331 1 99 2 102 1 31 1 170 1 130 1 334 2 104 1 6 1 171 1 133 1 174 1 192 2 246 1 112 1 44 1 
146 1 199 1 273 2 307 1 259 1 124 1 28 1 331 1 99 1 294 1 102 1 78 1 31 1 103 1 334 1 130 1 104 1 209 1 240 1 107 1 33 1 174 1 61 1 192 1 223 1 229 1 
53 1 
86 1 307 2 89 1 275 1 278 3 97 1 280 2 189 1 102 2 311 2 310 1 312 1 104 1 150 2 245 1 285 2 246 1 112 2 153 1 114 2 15 2 157 6 250 1 67 1 118 2 197 1 18 2 163 2 71 1 325 1 25 2 258 1 27 1 260 1 126 1 330 1 76 1 30 4 169 1 130 2 131 1 171 1 210 1 337 1 174 1 140 5 180 1 219 5 181 1 300 1 142 1 228 2 44 1 185 1 302 2 
71 1 163 1 86 1 258 1 27 1 260 1 278 1 126 1 189 1 30 2 169 1 153 1 140 3 300 1 219 3 157 2 67 1 250 1 142 1 197 1 185 1 289 1 
71 1 86 1 275 1 258 1 27 1 260 1 278 1 126 1 280 1 189 1 30 3 169 1 153 1 140 3 300 1 219 3 157 1 67 1 250 1 142 1 118 1 197 1 185 1 289 1 
71 1 163 1 86 1 275 1 258 1 27 1 278 1 260 1 126 1 280 1 189 1 30 3 169 1 285 1 153 1 140 3 300 1 219 3 157 2 67 1 250 1 142 1 118 1 197 1 185 1 289 1 
71 1 163 1 86 1 275 1 309 1 258 1 27 1 260 1 278 1 126 2 329 1 261 1 189 1 30 2 169 1 243 1 152 1 285 1 139 1 153 2 140 3 222 1 300 1 219 3 157 2 250 2 67 1 65 1 142 2 118 1 197 1 185 1 289 1 
86 1 275 1 278 2 280 2 189 1 310 1 311 2 312 1 150 2 245 1 285 2 153 1 114 2 15 2 157 4 67 1 250 1 118 2 197 1 18 2 71 1 163 2 25 1 258 1 27 1 260 1 126 1 30 4 169 1 131 1 337 1 140 4 180 1 219 4 181 1 300 1 142 1 228 2 185 1 302 1 
163 2 71 1 86 1 275 1 25 1 258 1 27 1 278 2 260 1 188 1 126 1 280 2 189 1 30 4 310 1 169 1 312 1 59 1 336 1 150 2 337 1 245 1 285 2 153 1 140 4 180 1 114 2 300 1 219 4 181 1 15 2 157 4 67 1 250 1 142 1 118 1 228 2 197 1 185 1 18 2 302 1 
163 2 71 1 86 1 275 1 25 1 258 1 27 1 278 2 260 1 188 1 126 1 280 2 189 1 30 4 310 1 169 1 312 1 59 1 336 1 150 2 337 1 245 1 285 2 153 1 140 4 180 1 114 2 300 1 219 4 181 1 15 2 157 4 67 1 250 1 142 1 118 1 228 2 197 1 185 1 18 2 302 1 
163 2 71 1 86 1 49 1 275 1 25 1 258 1 27 1 278 2 260 1 188 1 126 1 280 2 127 1 189 1 30 4 311 2 169 1 312 1 150 2 337 1 245 1 285 2 153 1 140 4 180 1 300 1 219 4 181 1 319 2 320 1 157 4 67 1 250 1 39 2 142 1 118 1 197 1 185 1 18 2 302 1 
71 1 163 3 86 1 275 1 25 1 258 1 27 1 278 2 260 1 188 1 126 1 280 3 189 1 30 5 100 1 310 1 169 1 312 1 59 1 336 1 150 2 337 1 245 1 285 3 153 1 140 4 180 1 114 2 181 1 300 1 219 4 15 2 157 5 67 1 250 1 142 1 118 1 228 2 197 1 185 1 18 2 302 1 
71 1 163 3 86 1 275 1 25 1 258 1 27 1 278 2 260 1 188 1 126 1 280 3 189 1 30 5 100 1 310 1 169 1 312 1 59 1 336 1 150 2 337 1 245 1 285 3 153 1 140 4 180 1 114 2 181 1 300 1 219 4 15 2 157 5 67 1 250 1 142 1 118 1 228 2 197 1 185 1 18 2 302 1 
86 1 275 1 278 2 280 2 189 1 311 2 312 1 150 2 245 1 285 2 153 1 319 2 157 4 67 1 250 1 118 1 197 1 18 2 71 1 163 2 25 1 258 1 27 1 260 1 126 1 127 1 30 4 169 1 131 1 337 1 140 4 180 1 219 4 181 1 300 1 142 1 39 2 185 1 302 1 
7 1 121 1 182 1 226 1 88 1 214 1 113 1 17 1 179 1 12 1 
7 1 121 1 271 1 322 1 179 1 91 1 267 1 151 1 
121 1 7 1 152 1 255 1 153 1 179 1 91 1 267 1 309 1 250 1 142 1 346 1 105 1 297 1 
121 1 7 1 152 1 307 1 153 1 112 1 50 1 179 1 91 1 267 1 309 1 102 1 250 1 142 1 346 1 130 1 105 1 297 1 
155 1 7 1 121 1 102 1 165 1 307 1 112 1 130 1 179 1 144 1 52 1 
121 1 7 1 152 1 139 1 153 1 141 1 179 1 267 1 309 1 29 1 155 1 332 1 250 1 142 1 42 1 135 1 
155 1 7 1 121 1 284 1 214 1 141 1 179 1 135 1 
167 1 7 1 121 1 214 1 301 1 179 1 91 1 186 1 
29 1 155 1 7 1 121 1 214 1 141 1 179 1 135 1 
155 1 7 1 121 1 284 1 165 1 141 1 179 1 135 1 
167 1 7 1 121 1 165 1 301 1 179 1 91 1 186 1 
29 1 155 1 7 1 121 1 165 1 141 1 179 1 135 1 
29 1 155 1 7 1 121 1 141 1 179 1 135 1 
7 1 121 1 174 1 137 1 307 1 112 1 179 1 91 1 343 1 97 1 268 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 297 1 349 1 
162 1 7 1 121 1 174 1 137 1 307 1 112 1 179 1 91 1 97 1 56 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 231 1 297 1 
29 1 155 1 7 1 121 1 141 1 179 1 267 1 135 1 
7 1 121 1 174 1 137 1 307 1 141 1 179 1 26 1 343 1 97 1 268 1 29 1 155 1 250 1 102 1 142 1 227 1 130 1 104 1 171 1 135 1 134 1 349 1 
121 1 7 1 152 1 139 1 153 1 141 1 179 1 267 1 309 1 125 1 29 1 155 1 332 1 250 1 142 1 135 1 
288 1 7 1 225 1 270 1 290 1 91 1 291 1 277 1 
288 1 7 1 225 1 270 1 290 1 91 1 291 1 277 1 
288 1 7 1 225 1 270 1 290 1 91 1 291 1 277 1 
288 1 7 1 225 1 270 1 290 1 91 1 291 1 277 1 
288 1 7 1 225 1 270 1 290 1 91 1 291 1 277 1 
37 1 253 1 2 1 10 1 184 1 202 1 143 1 308 1 32 1 314 1 
200 1 318 1 
324 1 184 1 202 1 143 1 308 1 32 1 206 1 252 1 314 1 
283 1 253 1 193 1 140 1 10 1 202 1 308 1 219 1 37 1 321 1 118 1 184 1 143 1 132 2 239 1 32 1 241 1 314 1 
283 1 253 1 193 1 140 1 10 1 202 1 308 1 219 1 37 1 321 1 118 1 184 1 143 1 132 2 239 1 32 1 241 1 314 1 
283 1 253 1 193 1 140 1 10 1 202 1 308 1 219 1 37 1 321 1 118 1 184 1 143 1 132 2 239 1 32 1 241 1 314 1 
164 1 196 1 274 1 
164 1 196 1 274 1 
276 1 338 1 
164 1 276 1 338 1 
166 1 237 1 
200 1 166 1 202 1 92 1 308 1 309 2 95 1 237 1 239 1 132 1 32 1 314 1 282 1 34 1 316 1 152 2 177 1 140 1 153 2 287 1 219 1 318 1 321 1 250 2 142 2 184 1 143 1 
196 1 274 1 
164 1 276 1 338 1 
72 1 121 1 7 1 153 2 179 1 267 1 35 1 52 1 155 1 250 2 142 2 144 1 313 1 69 1 
146 1 273 2 174 1 307 2 94 1 259 1 223 1 149 1 294 1 102 2 229 1 104 1 130 2 334 1 209 1 134 1 19 1 107 1 33 1 
146 1 273 2 174 1 307 1 3 1 94 1 259 1 223 1 294 1 102 1 229 1 130 1 334 1 104 1 209 1 107 1 33 1 
174 1 246 1 307 1 112 1 97 1 149 1 102 1 170 1 104 1 130 1 334 1 171 1 106 1 44 1 
146 1 273 2 174 1 307 1 94 1 259 1 223 1 149 1 294 1 102 1 229 1 130 1 334 1 104 1 209 1 19 1 107 1 33 1 
224 1 
118 1 275 1 113 1 25 1 93 1 302 1 340 1 
275 1 25 1 278 1 310 1 311 1 312 1 337 1 140 1 180 1 114 1 181 1 219 1 15 1 157 1 118 2 228 1 302 1 
306 1 307 3 275 2 93 1 278 3 97 10 54 1 102 3 190 2 311 12 104 3 312 4 60 2 8 3 108 2 244 1 112 1 15 6 157 5 118 8 160 2 201 2 326 1 123 2 25 8 328 1 207 2 29 2 76 1 129 2 333 6 169 2 130 3 171 3 262 2 210 2 134 1 135 2 337 4 340 1 174 4 137 3 80 1 140 5 141 2 180 4 181 4 219 5 220 2 82 2 301 2 302 9 85 6 186 2 
235 1 25 1 180 1 181 1 221 1 15 1 118 1 333 1 311 2 312 1 302 1 85 1 337 1 151 1 263 1 
201 2 25 2 309 1 126 1 329 1 261 1 312 1 336 1 135 2 60 1 337 1 243 1 152 1 139 1 140 1 153 1 180 1 181 1 219 1 222 1 269 1 226 1 250 1 142 1 17 1 303 1 186 1 302 2 
275 1 25 1 93 1 180 1 181 1 118 1 312 1 302 1 337 1 340 1 
108 1 201 2 141 2 25 5 29 2 15 5 333 5 311 10 118 5 301 2 85 5 186 2 302 5 135 2 60 1 
157 1 118 1 275 1 140 1 219 1 278 1 
70 1 0 1 325 1 307 4 25 2 278 2 97 1 330 1 54 2 76 2 102 4 104 1 312 2 130 4 171 1 210 2 337 2 174 1 244 1 246 1 112 2 140 3 180 1 181 2 219 3 38 1 157 4 44 1 302 2 
7 1 121 1 174 1 243 1 137 1 152 2 299 1 139 2 307 1 153 2 112 1 179 1 91 1 309 2 343 1 97 1 268 1 250 3 102 1 227 1 142 3 104 1 130 1 171 1 297 1 349 1 
275 2 25 2 11 1 180 1 181 1 76 1 15 2 333 2 311 4 118 4 312 1 85 2 210 1 302 1 337 1 
138 1 308 1 314 1 
62 1 10 1 308 1 237 1 314 1 
138 1 308 1 314 1 
138 1 308 1 314 1 
272 1 308 1 314 1 
272 1 308 1 314 1 
272 1 308 1 314 1 
308 1 314 1 
184 1 32 1 
7 2 182 1 226 1 109 1 88 1 17 1 12 1 
182 1 226 1 88 1 113 1 17 1 12 1 
29 1 155 1 7 1 141 1 296 1 135 1 
91 1 151 1 263 1 
271 1 91 1 151 1 
91 1 151 1 
155 1 235 1 
108 1 91 1 
7 1 91 1 277 1 221 1 151 1 263 1 
155 1 269 1 135 1 
345 1 91 1 
182 1 226 1 17 1 303 1 
155 1 7 1 141 1 277 1 135 1 
29 1 155 1 7 1 141 1 277 1 135 1 
7 1 182 1 226 1 17 1 277 1 
7 3 208 1 247 1 91 1 296 1 277 1 151 1 263 1 
7 1 91 1 277 1 221 1 151 1 263 1 
7 2 91 1 296 1 277 1 221 1 151 1 263 1 
7 1 91 1 277 1 221 1 151 1 263 1 
7 1 91 1 277 1 221 1 151 1 263 1 
7 1 91 1 277 1 221 1 151 1 263 1 
7 1 91 1 277 1 221 1 151 1 263 1 
7 2 91 1 296 1 277 1 221 1 151 1 263 1 
7 2 208 1 91 1 277 1 221 1 151 1 263 1 
182 1 226 1 88 1 17 1 12 1 
7 2 208 1 91 1 277 1 221 1 151 1 263 1 
86 1 34 1 250 1 142 1 153 1 198 1 20 1 
86 1 34 1 147 1 24 1 153 1 63 1 248 1 250 1 142 1 43 1 198 1 20 1 
174 1 102 1 246 1 307 1 113 1 112 1 104 1 130 1 171 1 44 1 97 1 
34 1 174 1 137 1 152 1 307 1 153 1 112 1 309 1 97 1 268 1 250 2 102 1 227 1 142 2 346 1 130 1 104 1 171 1 
71 1 307 1 309 2 27 1 97 3 126 1 54 1 102 1 104 1 130 1 171 2 34 1 174 1 152 1 137 2 153 2 220 1 82 1 268 1 250 2 142 2 227 1 346 1 
71 1 307 2 309 2 27 1 97 3 126 1 54 1 102 2 104 1 130 2 171 2 34 1 174 1 152 1 137 2 9 1 153 2 220 1 82 1 250 2 142 2 227 1 346 1 231 1 
174 1 8 1 137 1 9 1 307 3 112 1 275 1 140 2 217 1 82 1 220 1 219 2 97 4 75 1 54 1 157 1 102 3 118 1 169 1 130 3 104 1 171 1 160 1 
174 1 8 1 137 1 9 1 307 3 112 1 275 1 140 2 123 1 82 1 220 1 219 2 97 4 54 1 157 1 102 3 118 1 169 1 130 3 104 1 171 1 160 1 
174 1 102 1 307 1 104 1 130 1 327 1 
174 3 137 1 48 1 306 1 307 7 90 1 112 2 327 1 97 3 14 1 117 1 102 7 251 1 16 1 130 6 104 2 171 2 68 1 134 1 107 1 136 1 
121 2 88 1 307 1 26 1 309 1 97 1 102 1 130 1 104 1 171 1 134 1 7 2 174 1 152 1 137 1 153 1 179 2 267 1 35 1 343 1 12 1 268 1 182 1 226 1 250 2 142 2 227 1 346 1 17 1 159 1 349 1 
307 1 275 1 25 1 123 1 93 1 278 1 207 1 97 2 102 1 129 1 169 1 130 1 312 2 262 1 337 2 340 1 282 1 8 1 244 1 112 1 140 3 180 2 181 2 219 3 157 2 118 1 302 1 160 1 
174 2 137 1 306 1 307 2 326 1 327 1 97 2 102 2 130 2 104 1 171 1 160 1 134 1 
87 1 174 1 9 1 246 1 307 4 112 1 97 1 102 4 130 4 104 1 171 1 44 1 134 1 
54 1 174 2 156 1 137 1 102 2 307 2 104 1 130 2 171 1 203 1 68 1 136 1 97 1 194 1 
146 1 273 1 174 1 102 1 307 1 112 1 104 1 130 1 259 1 33 1 
174 1 307 2 90 1 97 1 238 1 102 2 130 2 104 1 171 1 134 1 107 1 
87 1 174 2 246 1 48 1 307 5 90 1 112 1 97 3 54 1 14 1 102 5 130 4 104 2 171 2 44 1 134 1 
87 1 174 2 246 1 48 1 307 5 90 1 112 1 216 1 97 3 54 1 102 5 130 4 104 2 171 2 44 1 134 1 
34 1 174 1 137 1 152 1 307 1 153 1 112 1 309 1 97 1 250 2 102 1 227 1 142 2 346 1 130 1 104 1 171 1 231 1 
117 1 54 1 174 2 137 1 102 1 306 1 307 1 104 1 130 1 171 1 68 1 136 1 97 1 
72 1 264 1 250 1 142 1 153 1 313 1 205 1 69 1 173 1 
212 1 23 1 173 1 
34 1 264 1 257 1 205 1 173 1 
71 1 212 1 282 1 34 1 264 2 23 1 275 1 140 2 257 2 27 1 219 2 205 2 292 1 126 1 195 1 67 1 118 1 169 1 173 1 
79 1 40 1 256 1 113 1 
79 1 40 1 256 1 31 1 124 1 28 1 331 1 
199 1 192 1 124 1 
79 1 256 1 266 2 28 1 124 3 331 1 13 1 40 1 31 3 41 1 83 1 103 1 
4 1 79 1 40 1 256 1 31 2 279 1 124 2 28 1 331 1 
146 1 21 1 273 1 256 1 28 1 124 1 331 1 281 1 31 1 103 1 209 1 
40 1 256 1 31 1 103 1 124 1 28 1 331 1 
79 1 40 2 31 1 103 1 124 1 28 1 331 1 
213 1 256 1 28 2 124 2 331 2 249 1 158 1 40 1 31 2 103 1 
21 1 110 1 79 1 256 2 265 1 28 1 124 3 64 1 279 2 331 1 40 1 31 3 103 1 
146 1 273 2 79 1 256 1 28 1 124 2 279 1 331 1 40 1 31 2 103 1 229 1 209 1 145 1 33 1 
21 1 110 1 79 1 256 2 116 1 28 2 124 4 279 2 331 2 4 1 40 1 31 4 103 1 
79 1 40 1 256 1 31 1 103 1 124 1 28 1 331 1 
21 1 176 1 110 1 79 2 256 3 266 1 279 2 124 4 28 1 331 1 13 1 40 2 41 1 31 4 
79 1 256 1 28 1 124 2 279 1 331 1 57 1 40 1 31 2 103 1 335 1 172 1 
79 1 256 1 266 2 28 1 124 3 331 1 13 2 295 1 40 1 41 1 31 3 103 1 
256 2 73 2 230 1 161 1 
298 1 31 1 103 1 124 1 28 1 331 1 
79 1 40 1 256 1 31 2 103 1 265 1 279 1 124 2 28 1 331 1 
304 1 
79 1 40 1 256 1 31 1 103 1 124 1 28 1 331 1 
79 1 256 1 266 1 265 1 279 1 28 1 124 3 331 1 40 1 31 3 103 1 
21 1 176 1 110 1 256 1 
40 1 256 1 
