#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 709 612 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.ClassCastException 599 528 283 10 (511,832) 699 (436,732) (511,832) 189 (436,732) 797 497 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.ClassCastException 599 528 283 10 (511,832) 699 (436,732) (511,832) 189 (436,732) 797 497 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.ClassCastException 599 528 283 10 (511,832) 699 (436,732) (511,832) 189 (436,732) 797 497 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.ClassCastException 599 528 283 10 (511,832) 699 (436,732) (511,832) 189 (436,732) 797 497 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 182 881 63 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 723 106 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V FAILED junit.framework.AssertionFailedError 715 190 
daikon.test.VarInfoNameTest:testSubscript()V FAILED junit.framework.AssertionFailedError 715 190 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 867 41 190 
daikon.test.VarInfoNameTest:testJML()V FAILED junit.framework.AssertionFailedError 715 190 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:setEqual([I[I)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:noDups([I)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.MathMDE:gcd([I)I
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.VarInfoName.Elements:getUpperBound()Ldaikon.VarInfoName;
daikon.VarInfoName.QuantHelper:quant_increment(Ldaikon.VarInfoName;ILdaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
jtb.JavaParser:jj_ntk()I
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.Elements:getLowerBound()Ldaikon.VarInfoName;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.VarInfoName.NodeFinder:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.test.InvariantFormatTester:execute()Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.PptSlice2:arity()I
daikon.Quant:lte(II)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.Quant:subsetOf([I[I)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.MathMDE:gcd(II)I
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.Intern:numIntArrays()I
daikon.VarInfoName.NodeFinder:inPre()Z
jtb.JavaParser:jj_scan_token(I)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Invariant:justified()Z
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.NodeFinder:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.ValueTuple:isMissingNonsensical(I)Z
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.inv.ValueSet:ValueSet(I)V
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:eltwiseLTE([I)Z
daikon.Quant:isReverse([I[I)Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.ProglangType:dimensions()I
daikon.VarInfoName.NodeFinder:NodeFinder(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
jtb.JavaParser:jj_2_16(I)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:applyDecrement()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:fn_compose([I[I)[I
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.ProglangType:baseIsIntegral()Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.VarInfoName:repr()Ljava.lang.String;
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase; | ASSIGN | 12386 | = null
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.Debug:logOn()Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | RETURN | 1469 | return null
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.diff.RootNode:RootNode()V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.Quant:eltsLT([II)Z
daikon.Quant:pairwiseGTE([I[I)Z
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:memberOf(D[F)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String; | CONDITION | 44690 | if (x) -> if (!x)
daikon.VarInfoName.Add:name_impl()Ljava.lang.String;
utilMDE.WeakHasherMap:size()I
daikon.Quant:subsetOf([D[D)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.ArraysMDE:min([I)I
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.VarInfoName.Prestate:esc_name_impl()Ljava.lang.String;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
jtb.JavaCharStream:BeginToken()C
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsGTE([II)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:pairwiseEqual([I[I)Z
daikon.Quant:memberOf(F[F)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.MathMDE:sign(I)I
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.PptName:isEnterPoint()Z
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.PptSlice1:arity()I
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.Quant:subsetOf([S[S)Z
daikon.VarInfoName.QuantHelper:quant_element_conditions(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quant:eltsLteIndex([I)Z
daikon.VarInfoName:hashCode()I
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.Subscript:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:prob_is_ge(DD)D
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
utilMDE.MathMDE:negate(I)I
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:concat([I[I)[I
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.Quant:gt(II)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:lexLT([I[I)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quant_execution_condition(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
utilMDE.ArraysMDE:sum([[D)D
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
jtb.JavaCharStream:getBeginColumn()I
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:eltwiseGT([I)Z
daikon.ProglangType:isArray()Z
jtb.JavaCharStream:FillBuff()V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.VarInfoName.QuantHelper:quant_var_initial_state(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarInfoName:isLiteralConstant()Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:prob_and(DD)D
daikon.Quant:eltsGtIndex([I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.PptSlice0:arity()I
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.ElementsFinder:inPre()Z
utilMDE.Intern:intern([I)[I
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:indexOf([II)I
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.ProglangType:baseIsScalar()Z
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.Intern:intern([J)[J
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:sum([D)D
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.Invariants:Invariants()V
daikon.Quant:subsetOf([F[D)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.ArraysMDE:max([I)I
daikon.inv.Invariant:logOn()Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
utilMDE.WeakHasherMap:processQueue()V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:memberOf(F[D)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:hasNext()Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.Quant:slice([III)[I
daikon.inv.Invariant:prob_or(DD)D
daikon.VarInfoName.Replacer:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.NodeFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.Quant:subsetOf([J[J)Z
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.Quant:lexEqual([I[I)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
jtb.JavaCharStream:getBeginLine()I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.Quant:memberOf(J[J)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.Intern:internSubsequence([JII)[J
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.Assert:assertTrue(Z)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:subarray([III)[I
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant:isWorthPrinting()Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice1:num_samples()I
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.Quant:setDiff([I[I)[I
daikon.VarInfoName.Add:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.Quant:concat([I[I)[I
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lexNotEqual([I[I)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:indexOf([I[I)I
utilMDE.LimitedSizeIntSet:size()I
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.PptSlice0:initInvariantsSeen()V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:lexGT([I[I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.Quant:eq(JJ)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.Quant:sameLength([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Quant:eltsGT([II)Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.Quant:subsetOf([D[F)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.Subscript:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter; | CONDITION | 5537 | if (x) -> if (!x)
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.VarInfoName.Slice:getLowerBound()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.test.VarInfoNameDriver.QuantifySimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.MathMDE:missing_numbers([I)[I
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.ProglangType:isIntegral()Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:memberOf(I[I)Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.VarInfoName.Slice:getUpperBound()Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.ArraysMDE:min_max([I)[I
daikon.Ppt:Ppt()V
daikon.ValueTuple:size()I
jtb.Token:newToken(I)Ljtb.Token;
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eq(FF)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:sum([I)I
jtb.JavaCharStream:getEndColumn()I
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quant:eltsEqual([II)Z | OPERATOR | 161601 | < -> >
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Quant:lexGTE([I[I)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.ArraysMDE:sorted([I)Z
daikon.Quant:subsetOf([B[I)Z
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.MathMDE:modulus([I)[I
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.Quant:eq(II)Z
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eq(DD)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.diff.InvMap:InvMap()V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParser:jj_3_16()Z
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.ValueTuple:isMissing(I)Z
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.VarInfoName.Add:amount()Ljava.lang.String;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.OrderedPairIterator:setnext2()V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V | CONDITION | 372 | if (x) -> if (!x)
daikon.Quant:eltwiseLT([I)Z | CONSTANT | 175803 | 0 -> 1
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.VarInfoName:inPrestateContext(Ldaikon.VarInfoName;)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.ProglangType:isPseudoArray()Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:isScalar()Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
jtb.JavaCharStream:ReadByte()C
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
jtb.JavaCharStream:backup(I)V
daikon.diff.Node:Node()V
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;)[Ljava.lang.String; | RETURN | 119133 | return null
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([F[F)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.Quant:eltsLTE([II)Z
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:indexOf([DD)I
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.Intern:internSubsequence([III)[I
daikon.Quant:eltsGteIndex([I)Z
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd(JJ)J
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.Options.OptionInfo:argument_required()Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:memberOf(S[S)Z
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.MathMDE:pow(II)I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
utilMDE.Intern:intern([D)[D
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:lt(II)Z
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:intersection([I[I)[I
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
jtb.JavaCharStream:getEndLine()I
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:union([I[I)[I
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoAux:hashCode()I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String; | RETURN | 17948 | return null
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.VarInfo:new_ppt()V
daikon.Quant:gte(II)Z
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.Quant:ne(II)Z
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.MathMDE:gcd_differences([I)I
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
utilMDE.FuzzyFloat:set_rel_diff(D)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.VarInfoName.Replacer:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:esc_name()Ljava.lang.String; | RETURN | 7456 | return null
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.MathMDE:pow_fast(II)I
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.inv.Invariant:getConfidence()D
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptName:isCombinedExitPoint()Z
jtb.JavaCharStream:readChar()C
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
663 2 277 2 73 2 505 2 568 4 325 2 308 2 48 2 229 2 
598 2 444 2 51 2 96 6 571 2 700 6 856 2 515 2 796 2 70 2 851 6 
513 2 73 2 134 2 77 6 556 4 111 2 505 2 27 6 17 2 525 6 397 2 541 4 912 6 
72 26 368 4 73 6 374 10 75 2 314 12 534 10 434 10 435 10 502 2 380 16 407 6 505 6 537 16 764 29 590 10 770 2 544 8 684 2 205 4 387 2 476 8 388 8 359 2 156 16 395 6 602 4 562 8 18 2 526 4 
719 6 519 4 
671 2 
846 2 567 2 498 4 48 2 505 4 609 2 318 2 681 2 861 2 385 2 616 2 230 2 617 2 387 2 187 2 804 2 122 2 335 2 452 2 73 4 19 2 135 2 398 4 632 4 28 2 641 2 645 2 769 4 895 2 413 2 355 2 357 2 478 2 722 2 416 2 555 2 157 2 907 2 724 2 660 2 262 2 161 2 309 2 423 2 
72 48 73 4 0 4 310 2 374 16 534 16 314 22 434 16 435 16 675 2 139 6 243 4 107 6 853 2 380 32 407 4 505 4 638 6 537 32 764 56 682 4 350 6 590 6 862 2 593 4 800 4 544 6 91 6 231 6 253 4 651 8 359 2 690 2 870 2 156 32 395 4 602 2 562 18 454 4 
385 2 38 2 521 2 
895 2 477 10 255 2 607 2 654 22 482 2 95 2 821 2 333 2 99 2 239 2 877 2 337 2 767 2 
72 4 494 2 495 2 533 2 374 2 195 2 534 2 314 2 434 2 435 2 223 2 380 2 537 2 764 6 247 2 590 4 156 2 213 2 395 2 602 2 562 2 101 2 697 2 
72 12 205 2 386 2 91 6 374 4 314 4 534 4 434 4 435 4 107 6 243 4 156 8 380 8 573 2 537 8 764 16 593 4 
846 4 240 2 667 2 427 4 820 4 632 4 313 2 462 4 25 2 793 2 440 2 610 2 795 2 271 4 707 4 538 2 248 14 409 10 894 2 385 8 615 2 576 4 254 2 521 6 447 4 872 2 873 4 600 2 124 2 155 4 38 2 874 4 97 10 578 4 559 2 811 62 309 2 662 2 216 2 730 2 
193 2 194 2 473 2 428 2 649 2 772 2 373 2 671 2 778 2 524 2 
665 2 218 2 666 3 104 4 433 2 220 1 791 2 792 2 108 3 109 3 110 2 570 2 677 1 439 24 680 2 227 2 8 8 117 2 798 6 321 2 229 2 685 2 686 2 689 2 13 16 233 2 328 3 123 2 806 2 125 2 807 1 692 2 334 8 810 2 336 2 457 2 818 2 819 3 703 2 461 3 706 2 463 2 822 1 343 16 245 2 346 2 145 2 467 3 148 2 147 8 827 2 31 2 471 1 829 2 830 2 717 2 358 2 480 2 834 2 597 2 37 1 836 2 726 2 484 2 727 2 160 2 162 2 366 2 492 2 842 1 42 2 164 2 847 2 167 32 848 2 266 2 849 2 606 1 169 4 171 6 50 2 739 1 382 4 381 2 741 2 854 3 504 2 855 2 53 2 505 32 173 3 506 1 510 4 56 2 181 2 514 3 274 2 865 2 619 1 390 2 389 2 64 2 520 3 620 16 391 2 621 2 522 2 871 2 622 2 754 2 623 2 67 2 626 1 875 2 629 1 758 3 757 2 73 34 633 6 288 2 287 2 401 6 196 2 290 12 763 32 404 16 291 1 83 2 643 1 766 24 542 2 412 2 88 2 207 2 545 2 208 2 898 2 547 5 773 2 299 4 775 1 777 2 94 4 903 4 905 2 560 2 420 4 
73 2 311 2 
378 2 73 4 453 2 
449 2 
565 4 217 6 103 2 425 6 372 2 670 2 429 2 312 2 737 28 674 6 172 2 115 4 178 2 744 6 860 6 612 2 614 2 802 2 693 2 694 2 628 6 236 6 812 6 878 4 338 2 760 2 340 6 285 2 635 6 636 2 80 4 405 2 465 4 637 8 891 2 344 2 642 6 709 2 644 2 146 2 410 6 768 6 411 2 353 28 352 2 354 6 714 4 90 2 648 4 549 2 479 6 35 2 481 2 658 2 158 2 39 2 212 2 910 28 839 2 561 2 163 4 
257 1 584 2 900 2 673 2 
370 2 673 2 
385 2 624 2 808 2 460 2 673 2 526 2 119 2 
624 2 7 2 673 2 
71 2 624 2 673 2 
584 2 138 2 843 2 
624 2 673 2 
655 2 
595 2 673 2 
584 2 249 2 843 2 
584 2 356 2 837 2 
786 2 322 2 584 2 
584 2 68 2 554 2 
584 2 203 2 803 2 
293 2 843 2 
316 2 673 2 
710 2 
322 2 137 2 
342 2 68 2 
419 2 803 2 
159 2 843 2 
771 2 803 2 
379 2 68 2 
322 2 298 2 
755 2 837 2 
584 2 466 2 249 2 843 2 
564 2 584 2 466 2 249 2 843 2 
584 2 279 2 843 2 
584 2 826 2 843 2 
206 2 831 2 656 2 443 2 
759 2 787 2 219 2 654 6 275 2 676 4 224 2 780 2 577 2 639 2 661 2 442 2 215 2 589 2 250 2 456 4 493 2 421 2 
584 2 683 2 
385 2 548 2 460 2 315 2 
385 2 548 2 460 2 315 2 119 2 828 2 
385 2 624 2 460 2 673 2 539 2 526 2 
478 2 9 2 
385 2 460 2 448 2 526 2 
68 2 587 2 
242 2 803 2 
837 2 202 2 
322 2 761 2 
322 2 326 2 803 2 
322 2 364 2 803 2 
575 2 322 2 803 2 
657 2 322 2 803 2 
604 2 400 2 430 6 460 2 375 6 385 2 445 2 304 2 
496 2 843 2 
389 2 
104 4 792 2 791 2 570 2 110 2 225 2 8 2 798 2 229 2 689 2 233 2 123 2 125 2 807 2 818 2 703 2 144 2 245 2 592 2 31 2 829 2 150 4 717 2 480 2 597 2 836 2 259 2 726 4 727 6 492 2 842 2 164 2 42 2 167 6 850 2 171 4 50 2 382 2 504 2 505 26 857 2 270 2 174 2 510 2 274 2 516 2 390 2 64 2 620 6 621 2 871 2 625 2 875 2 73 26 633 6 287 2 401 2 196 2 888 4 290 8 763 4 408 2 773 2 299 4 652 2 415 2 93 2 94 4 777 2 903 2 302 2 557 2 560 2 420 4 
104 4 792 2 791 2 570 2 110 2 225 2 226 2 8 2 798 2 229 2 689 2 233 2 123 2 330 2 125 2 807 2 580 2 818 2 703 2 463 2 144 2 245 2 31 2 829 2 150 4 717 2 480 2 597 2 836 2 259 2 726 4 727 6 492 2 842 2 164 2 42 2 167 6 850 2 171 6 50 2 382 2 504 2 505 26 857 2 270 2 174 2 510 2 181 2 274 2 865 2 516 2 390 2 64 2 620 6 621 2 871 2 625 2 875 2 73 26 633 6 287 2 401 2 196 2 888 4 290 8 763 4 773 2 299 4 652 2 415 2 94 4 777 2 903 2 302 2 557 2 560 2 420 4 
52 2 
191 2 177 2 
444 2 594 2 700 2 284 2 515 2 497 2 688 2 436 2 142 2 96 2 199 4 679 2 572 2 797 2 712 2 86 2 745 4 527 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 6 852 2 794 2 571 2 505 6 679 2 572 2 511 2 57 4 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 6 688 2 390 2 64 2 233 2 753 2 189 2 66 4 527 2 73 12 700 6 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 598 2 96 4 260 2 261 2 909 2 485 2 840 2 100 2 491 4 492 2 420 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 6 852 2 794 2 571 2 505 6 679 2 572 2 796 2 511 2 57 4 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 6 688 2 390 2 64 2 233 2 753 2 189 2 66 4 527 2 73 12 700 4 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 96 6 260 2 261 2 909 2 485 2 840 2 100 2 491 4 492 2 420 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 6 852 2 794 2 571 2 856 2 505 6 679 2 572 2 511 2 57 8 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 6 688 2 390 2 64 2 233 2 753 2 189 2 66 4 527 2 73 12 700 6 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 96 6 260 2 261 2 909 2 485 2 840 2 100 2 491 4 492 2 420 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 8 852 2 794 2 571 2 856 2 505 6 679 2 572 2 796 2 511 2 57 8 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 10 688 2 390 2 64 2 233 2 753 2 189 2 66 8 527 2 73 12 700 6 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 96 8 260 2 261 2 909 2 485 2 840 2 100 2 420 2 491 4 492 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 6 852 2 794 2 571 2 856 2 505 6 679 2 572 2 511 2 57 8 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 10 688 2 390 2 64 2 233 2 753 2 189 2 66 8 527 2 73 12 700 6 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 96 6 260 2 261 2 909 2 485 2 840 2 100 2 491 4 492 2 420 2 
424 4 1 7 566 2 104 4 669 1 311 2 431 2 672 2 432 2 436 2 792 2 110 2 794 2 225 2 571 4 678 2 679 2 572 2 796 4 8 2 797 2 798 2 10 2 229 2 444 4 323 6 324 2 232 2 688 2 689 2 233 2 123 2 449 2 691 7 127 2 128 1 814 2 699 2 700 4 133 1 818 2 702 1 586 2 703 2 142 2 244 1 463 2 144 2 823 8 245 2 345 2 708 4 711 2 712 2 31 2 594 2 829 2 832 2 717 2 152 2 480 2 599 2 361 2 601 2 836 2 260 2 261 2 485 2 727 6 840 2 491 4 492 2 731 2 732 2 844 1 167 8 264 2 497 2 171 6 851 12 852 2 378 2 50 2 382 2 504 2 505 20 269 2 270 2 508 2 510 2 511 2 57 2 611 2 745 4 274 2 515 4 865 2 390 2 64 2 620 6 868 2 869 1 871 2 753 2 189 2 875 2 528 2 527 2 631 2 280 2 73 34 283 2 284 2 531 2 633 6 286 1 401 2 287 2 289 2 196 6 78 2 889 2 888 4 290 4 763 2 199 4 892 2 82 2 893 2 86 4 89 2 646 2 899 2 299 4 652 2 901 1 94 4 903 2 96 8 303 6 100 2 420 4 
424 4 566 2 104 4 311 2 431 2 672 2 432 2 436 2 792 2 110 2 794 2 225 2 571 4 678 2 679 2 572 2 8 2 797 2 798 2 10 2 229 2 444 4 323 6 324 2 232 2 688 2 689 2 233 2 123 2 449 2 127 2 814 2 699 2 700 8 818 2 586 2 703 2 142 2 463 2 144 2 823 8 245 2 345 2 708 4 711 2 712 2 31 2 594 2 829 2 832 2 717 2 152 2 480 2 599 2 361 2 601 2 836 2 260 2 261 2 485 2 727 6 840 2 491 4 492 2 731 2 732 2 167 8 264 2 497 2 171 6 851 12 852 2 378 2 50 2 382 4 504 2 856 4 505 20 269 2 270 2 508 2 510 4 511 2 57 6 611 2 745 4 274 2 515 4 865 2 390 2 64 2 620 6 868 2 871 2 753 2 189 2 875 2 528 2 527 2 631 2 280 2 73 34 283 2 284 2 531 2 633 6 401 2 287 2 289 2 196 6 78 2 889 2 888 4 290 6 763 2 199 4 892 2 82 2 893 2 86 4 89 2 646 2 899 2 299 4 652 2 94 4 903 4 96 8 303 6 100 2 420 4 
424 4 566 2 104 4 311 2 431 2 672 2 432 2 436 2 792 2 110 2 794 2 225 2 571 4 678 2 679 2 572 2 8 2 797 2 798 2 10 2 229 2 444 4 323 6 324 2 232 2 687 4 688 2 689 2 233 2 123 2 449 2 127 2 814 2 699 2 700 8 818 2 586 2 703 2 142 2 463 2 144 2 823 8 345 2 245 2 708 4 711 2 712 2 31 2 829 2 594 2 832 2 717 2 152 2 480 2 599 2 361 2 601 2 836 2 260 2 261 2 485 2 727 6 840 2 491 4 492 2 731 2 732 2 167 8 264 2 497 2 171 6 851 12 852 2 378 2 50 2 382 4 504 2 856 4 505 20 269 2 270 2 508 2 510 4 511 2 57 6 611 2 745 4 274 2 515 4 865 2 390 2 64 2 620 6 868 2 871 2 753 2 189 2 66 4 875 2 528 2 527 2 631 2 280 2 73 34 283 2 284 2 531 2 633 6 401 2 287 2 289 2 196 6 78 2 889 2 888 4 290 6 763 2 199 4 892 2 82 2 893 2 86 4 89 2 646 2 899 2 299 4 652 2 94 4 903 4 96 8 303 6 100 2 420 4 
424 2 566 2 104 4 311 2 672 2 432 2 436 2 792 2 110 2 794 2 571 4 225 2 678 2 679 2 317 2 572 2 796 2 8 2 797 2 798 4 10 2 229 2 444 4 323 6 324 2 232 2 687 4 688 2 689 2 233 2 123 2 449 2 127 2 814 2 699 2 700 10 818 2 586 2 703 2 142 2 463 2 144 2 823 8 345 2 245 2 708 4 711 2 712 2 31 2 829 2 594 2 832 2 717 2 152 2 480 2 599 2 598 2 361 2 601 2 836 2 260 2 261 2 485 2 727 8 840 2 491 4 492 2 731 2 732 2 733 2 167 12 264 2 734 2 497 2 171 6 851 16 852 2 378 2 50 2 382 4 504 2 856 4 505 18 269 2 270 2 508 2 510 4 511 2 57 6 611 2 745 4 274 2 515 4 865 2 390 2 64 2 620 8 868 2 871 2 753 2 189 2 66 4 875 2 528 2 527 2 631 2 280 2 73 32 283 2 284 2 531 2 633 6 401 4 287 2 289 2 196 4 78 2 889 2 888 6 290 6 763 4 199 4 892 2 82 2 893 2 86 4 896 2 89 2 646 2 899 2 299 4 652 2 552 2 94 4 903 4 96 10 303 6 100 2 420 4 563 2 
73 4 264 2 700 6 284 2 586 2 432 2 851 4 78 2 852 2 142 2 794 2 571 2 199 2 856 2 823 2 572 2 345 2 57 6 712 2 745 2 444 4 594 2 323 2 515 4 687 4 688 2 96 6 66 4 260 2 261 2 485 2 840 2 100 2 491 2 527 2 
424 2 104 4 431 2 672 2 432 2 792 2 794 2 571 2 225 2 572 2 798 3 229 2 444 4 323 2 687 2 689 2 688 2 233 2 123 2 700 6 818 2 586 2 703 2 142 2 463 2 823 2 345 2 245 2 712 2 31 2 829 2 594 2 251 2 717 2 358 2 480 2 836 2 260 2 261 2 485 2 727 6 840 2 491 2 492 2 167 8 264 2 171 6 851 4 852 2 50 2 504 2 856 2 505 24 270 2 743 2 57 6 745 2 863 3 274 2 515 4 865 2 390 2 389 2 64 2 620 6 871 2 875 2 396 2 527 2 73 28 284 2 399 2 633 6 287 2 401 3 196 4 78 2 888 4 763 3 199 2 204 2 88 2 208 2 299 4 652 2 94 4 96 6 100 2 420 4 
732 2 264 2 497 2 672 2 432 2 436 2 851 6 852 2 794 2 571 2 856 2 505 6 679 2 572 2 511 2 57 8 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 10 688 2 390 2 64 2 233 2 753 2 189 2 66 8 527 2 73 12 700 6 284 2 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 96 6 260 2 261 2 909 2 485 2 840 2 100 2 491 4 492 2 420 2 
732 2 264 2 497 2 672 2 432 2 436 2 851 8 852 2 4 2 794 2 571 2 505 6 856 2 679 2 572 2 507 2 511 2 57 8 797 2 745 4 512 2 59 2 444 4 274 2 515 4 323 4 687 10 390 2 688 2 64 2 233 2 753 2 189 2 66 8 527 2 73 12 700 8 284 2 704 4 586 2 703 2 633 4 287 2 289 2 78 2 142 2 199 4 823 4 345 2 712 2 86 4 594 2 94 2 598 2 96 6 260 2 485 2 840 2 100 2 420 2 491 4 492 2 
345 2 238 2 840 2 
345 2 238 2 840 2 
424 2 104 4 105 2 790 2 436 2 792 2 110 4 438 2 225 2 571 4 112 2 796 4 797 2 229 2 444 4 323 4 687 6 689 2 688 4 233 2 123 2 579 4 238 2 582 2 699 2 700 12 818 2 703 2 586 2 142 2 463 2 823 4 245 2 345 4 708 2 347 2 349 2 31 2 829 2 717 2 480 2 598 4 836 2 725 2 259 4 260 2 727 2 840 6 728 2 492 2 491 2 731 2 732 2 167 2 171 6 851 16 50 2 382 4 504 2 505 16 856 4 270 6 510 4 384 2 57 6 745 2 512 2 274 2 515 4 185 2 865 2 618 2 390 2 64 2 620 2 750 4 871 2 753 2 189 2 192 2 66 4 73 24 284 2 633 6 287 2 289 4 196 4 290 4 763 2 199 2 536 2 765 2 82 2 86 4 899 2 299 4 652 2 209 2 211 2 94 4 903 4 96 12 659 2 420 4 
73 4 424 2 151 2 899 2 390 2 790 2 211 2 196 2 392 2 191 2 483 2 112 2 505 2 679 2 384 2 228 2 272 2 
104 4 105 2 790 2 436 2 792 2 110 4 438 2 225 2 571 4 796 4 797 2 229 2 444 4 323 4 687 6 689 2 688 4 233 2 123 2 579 4 238 2 582 2 699 2 700 12 818 2 703 2 586 2 142 2 26 2 463 2 823 4 245 2 345 4 246 2 708 2 347 2 349 2 31 2 829 2 717 2 480 2 721 2 598 4 836 2 725 2 259 4 260 2 727 2 486 2 840 6 728 2 491 2 492 2 731 2 732 2 167 2 171 6 851 16 50 2 382 4 504 2 505 16 856 4 270 6 510 4 384 2 57 6 745 2 512 2 59 2 274 2 515 4 865 2 390 2 64 2 620 2 750 4 871 2 753 4 189 2 192 2 66 4 630 2 73 24 284 2 633 6 287 2 289 4 196 2 290 4 763 4 199 2 536 2 82 2 86 4 899 2 299 4 652 2 209 4 211 2 94 4 903 4 96 12 420 4 
424 2 104 4 105 2 3 2 790 2 436 2 792 2 110 4 438 2 225 2 571 4 112 2 796 4 797 2 229 2 444 4 323 4 446 2 687 6 689 2 688 4 233 2 123 2 579 4 238 2 582 2 699 2 700 12 818 2 703 2 586 2 142 2 463 2 823 4 245 2 345 4 708 2 347 2 349 2 31 2 829 2 717 2 480 2 598 4 836 2 725 2 259 4 260 2 727 2 840 6 728 2 492 2 491 2 731 2 732 2 167 2 171 6 851 16 50 2 382 4 504 2 505 16 856 4 270 6 510 4 384 2 57 6 745 2 512 2 59 2 274 2 515 4 865 2 390 2 64 2 620 2 750 4 871 2 753 4 189 2 192 2 66 4 73 24 284 2 633 6 287 2 289 4 196 4 290 4 763 2 199 2 536 2 82 2 86 4 899 2 299 4 652 2 209 2 211 2 94 4 903 4 96 12 906 2 781 2 214 2 420 4 
167 8 566 2 104 2 426 2 500 2 171 2 792 2 504 2 505 18 270 2 798 2 118 2 320 2 229 2 182 2 61 2 274 2 324 2 232 2 63 2 689 2 390 2 186 2 64 2 620 6 233 2 868 2 751 2 123 2 14 2 875 2 15 2 529 2 880 2 815 2 881 2 73 24 818 2 703 2 633 6 401 2 287 2 196 2 888 4 763 2 535 2 200 2 81 2 201 2 711 2 31 2 469 2 829 2 414 4 296 2 646 2 299 2 652 2 480 2 833 2 94 4 362 2 835 1 836 2 305 1 727 6 490 2 492 2 420 4 
73 2 369 2 167 2 282 2 816 2 817 2 401 3 888 2 763 3 377 2 144 6 505 2 640 2 798 3 273 2 294 3 746 2 11 2 866 2 620 2 65 4 418 2 875 2 487 1 727 2 
73 2 369 2 167 2 282 2 816 2 817 2 401 2 888 2 763 2 377 2 144 6 505 2 640 2 798 2 273 2 294 2 746 2 11 2 866 2 620 2 65 4 418 2 875 2 727 2 
73 2 369 2 167 2 282 2 816 2 817 2 401 2 888 2 763 2 377 2 144 6 505 2 640 2 798 2 273 2 294 2 746 2 11 2 866 2 620 2 65 4 418 2 875 2 727 2 
167 2 374 2 434 2 46 6 435 2 380 2 505 4 268 4 574 2 180 2 746 2 747 3 875 2 237 2 756 2 72 4 73 10 281 2 132 3 885 2 241 2 534 2 401 3 402 2 403 4 140 4 763 3 404 2 407 2 343 2 537 2 764 6 85 3 544 4 596 2 718 2 774 2 156 2 782 4 784 4 
167 2 374 2 314 2 434 2 46 6 435 2 380 2 505 4 268 4 574 2 180 2 746 2 747 2 875 2 237 2 756 2 72 4 73 10 281 2 132 2 885 2 241 2 534 2 401 2 402 2 403 4 140 4 763 2 404 2 407 2 343 2 537 2 764 4 85 2 544 4 596 2 718 2 359 2 774 2 156 2 782 4 784 4 562 2 
167 2 374 2 314 2 434 2 46 6 435 2 380 2 505 4 268 4 574 2 180 2 746 2 747 2 875 2 237 2 756 2 72 4 73 10 281 2 132 2 885 2 241 2 534 2 401 2 402 2 403 4 140 4 763 2 404 2 407 2 343 2 537 2 764 4 85 2 544 4 596 2 718 2 359 2 774 2 156 2 782 4 784 4 562 2 
167 2 374 2 314 2 434 2 46 6 435 2 380 2 505 4 268 4 574 2 180 2 746 2 747 2 875 2 237 2 756 2 72 4 73 10 281 2 132 2 885 2 241 2 534 2 401 2 402 2 403 4 140 4 763 2 404 2 407 2 343 2 537 2 764 4 85 2 544 4 596 2 718 2 359 2 774 2 156 2 782 4 784 4 562 2 
167 2 374 2 314 4 434 2 46 6 435 2 380 2 505 4 268 4 574 2 180 2 746 2 747 2 875 2 237 2 756 2 72 4 73 10 281 2 132 2 885 2 241 2 534 2 401 2 402 2 403 4 140 4 763 2 404 2 407 2 343 2 537 2 764 4 85 2 544 4 596 2 718 2 359 4 774 2 156 2 782 4 784 4 562 4 
143 2 845 2 585 2 278 2 45 2 776 2 
475 2 458 2 174 2 735 2 45 2 21 2 376 2 
785 1 897 2 73 10 274 2 32 1 12 2 136 2 749 1 634 2 106 2 121 2 22 2 738 2 723 2 197 2 505 8 824 2 795 1 695 2 489 2 894 1 
72 12 664 2 73 6 168 2 374 6 499 2 534 6 314 4 76 2 434 6 435 6 139 4 107 4 243 2 380 6 505 6 407 2 537 6 764 15 544 4 253 2 651 2 550 2 359 4 722 2 156 6 907 2 235 2 876 2 562 4 
613 2 73 1 62 2 883 2 339 2 701 2 153 1 653 7 329 2 140 2 501 4 523 2 779 2 505 1 268 2 784 2 488 2 319 2 
613 4 62 2 883 2 339 4 701 2 653 6 329 2 140 2 501 4 523 4 779 2 268 2 784 2 319 2 488 2 
613 8 73 1 62 6 883 2 339 8 701 2 153 1 653 10 329 2 140 2 501 4 523 8 779 2 505 1 268 2 784 2 319 8 488 2 
613 2 883 2 339 2 701 2 653 2 329 2 140 2 501 2 523 2 779 2 268 2 784 2 488 2 
102 4 2 4 104 36 788 2 789 14 569 4 792 6 437 2 5 4 6 4 113 2 114 8 116 16 689 2 327 2 805 2 126 4 332 4 234 4 809 4 450 8 16 2 129 4 130 10 696 4 581 2 698 6 459 4 23 4 141 4 24 4 588 4 463 26 464 2 348 4 468 2 713 1 149 4 715 2 472 4 716 4 33 4 154 10 720 4 34 4 480 6 36 4 360 4 258 10 838 4 363 4 365 24 367 4 41 2 165 32 605 4 265 4 371 4 171 102 170 4 267 8 49 4 503 4 740 8 742 2 505 70 54 4 55 2 179 2 383 8 58 16 60 6 748 24 865 28 518 4 867 2 188 2 276 2 190 2 393 4 394 6 627 4 69 16 879 24 73 78 882 4 884 10 886 2 74 4 887 30 890 11 198 2 87 4 543 2 297 10 546 10 647 6 650 16 299 44 551 2 92 8 553 10 902 4 417 2 904 2 783 4 558 4 306 8 911 4 422 8 
2 2 104 14 668 2 569 4 171 40 170 4 437 2 792 2 740 6 742 2 505 26 859 2 55 2 179 2 60 2 748 8 865 12 689 2 517 2 867 2 120 2 190 2 394 2 696 4 698 4 73 28 74 4 532 2 887 6 459 2 762 10 24 4 463 12 890 2 198 2 470 2 715 2 474 2 472 4 252 2 546 6 297 2 650 14 299 14 154 6 720 2 551 2 480 2 36 2 417 2 258 6 908 2 783 2 558 2 363 2 603 2 841 2 911 4 41 2 
102 4 2 2 104 26 668 1 788 2 789 12 569 4 792 8 437 2 5 4 6 4 689 4 327 2 126 4 332 4 809 4 696 4 455 4 698 6 459 4 23 4 141 4 588 4 24 2 463 14 464 2 348 4 149 4 472 4 252 2 716 4 33 4 720 4 154 8 480 8 34 4 360 4 36 2 258 8 363 2 838 4 365 8 841 2 367 4 41 2 265 4 44 4 171 62 170 4 267 4 49 4 608 2 503 4 740 3 742 2 505 56 859 1 55 2 383 8 60 8 748 28 865 14 518 4 867 2 752 2 188 2 190 2 393 4 394 4 69 4 879 8 73 64 532 2 74 4 887 22 762 2 890 8 198 2 406 4 87 4 543 2 546 8 297 8 650 4 299 30 92 4 551 2 902 4 783 4 558 4 911 4 
104 20 569 2 437 2 792 2 221 4 222 2 441 2 799 2 689 2 801 2 331 2 451 2 813 2 696 2 130 2 698 6 131 2 581 2 583 2 341 2 20 2 459 2 705 2 463 6 825 2 29 2 30 2 591 2 351 2 472 2 474 2 715 2 154 4 720 2 480 2 256 2 258 4 363 2 263 2 729 2 41 2 43 6 166 4 736 2 170 2 171 48 47 4 742 2 858 2 505 44 55 2 509 2 175 2 176 2 179 2 60 2 748 6 183 2 184 2 864 2 865 6 867 2 190 2 394 2 530 2 73 46 884 2 886 2 74 2 79 2 890 2 292 2 84 2 540 2 295 2 546 4 297 2 650 36 299 20 551 2 300 2 301 2 210 4 553 2 417 2 98 2 908 2 783 2 558 2 307 2 911 2 
40 2 
