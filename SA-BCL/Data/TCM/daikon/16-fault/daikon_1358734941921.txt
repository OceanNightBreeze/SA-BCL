#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError (234,737) 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V ERROR java.lang.NullPointerException 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NullPointerException 6 594 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NullPointerException 6 594 
daikon.test.diff.DiffTester:testConditionalPptsFalse()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testConditionalPptsTrue()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testPpts1Empty()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testPpts1Ppts1()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testPpts1Ppts2()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testPpts1Ppts3()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException (607,671) 635 200 (607,671) 405 82 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NullPointerException (607,671) 497 200 (607,671) 405 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException (607,671) 127 200 (607,671) 405 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException (607,671) 666 200 (607,671) 405 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 382 646 515 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR utilMDE.Assert$AssertionException (41,96) (41,96) (21,30,44,102,141,191,446,478,528,573) 175 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 522 160 353 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 522 160 353 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 522 160 353 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 522 160 353 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_0()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_1()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_2()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_3()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_checkRep_4()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_checkRep_5()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_6()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_7()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_8()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_9()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_10()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_11()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_12()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_13()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_orderStatistic_14()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_orderStatistic_15()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_size_16()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_size_17()V PASSED
daikon.test.split.SplitterFactoryTest:testmisc_Fib_main_18()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isEmpty_19()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isEmpty_20()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isFull_21()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isFull_22()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_getFront_23()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_getFront_24()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_25()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_26()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_27()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_28()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_29()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_30()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_31()V PASSED
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_32()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__33()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__34()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__35()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__36()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__37()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__38()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__39()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__40()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__41()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__42()V PASSED
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__43()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.Quant:memberOf(F[D)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z | STATEMENT | 22083 | stmt -> ;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z | ASSIGN | 37734 | = null
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:isArray()Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.Quant:concat([I[I)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.Quant:lexLTE([I[I)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:max([I)I
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.Quant:eltsGtIndex([I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.ProglangType:dimensions()I
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Quant:eq(JJ)Z
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.Assert:assertTrue(Z)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:esc_name()Ljava.lang.String;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:backup(I)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.SimpleLog:SimpleLog(Z)V
jtb.Token:newToken(I)Ljtb.Token;
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String; | ASSIGN | 16305 | = null
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:memberOf(I[I)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.Quant:eq(II)Z
utilMDE.OrderedPairIterator:setnext2()V
daikon.VarInfo:relate_var()V
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.FuzzyFloat:gt(DD)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.Invariant:logOn()Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.Quant:subsetOf([D[D)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
utilMDE.MathMDE:mod_positive(JJ)J
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.Quant:union([I[I)[I
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
utilMDE.Intern:intern([D)[D
daikon.Quant:eltwiseLTE([I)Z
daikon.simplify.LemmaStack:noticeInt(J)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.MathMDE:sign(I)I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:eltsLT([II)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.ArraysMDE:sum([[D)D
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.ArraysMDE:indexOf([ZZ)I
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:subsetOf([F[D)Z
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 2678 | return null
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.UtilMDE:equalFiles(Ljava.lang.String;Ljava.lang.String;Z)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.OrderedPairIterator:hasNext()Z
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.Quant:memberOf(F[F)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.Quant:eltwiseEqual([I)Z
daikon.Quant:intersection([I[I)[I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.ValueTuple:tuplemodHasModified(I)Z
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:lexEqual([I[I)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.PptName:isCombinedExitPoint()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.MathMDE:pow(II)I
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.Quant:eltsEqual([II)Z
daikon.ModBitTracker:num_sets()I
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.inv.Invariant:prob_or(DD)D
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.Invariant:prob_and(DD)D
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V | CONDITION | 534 | if (x) -> if (!x)
daikon.Quant:pairwiseEqual([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I | CONSTANT | 21933 | 99 -> 1
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
jtb.JavaParser:jj_3_16()Z
daikon.ValueTuple:isMissing(I)Z
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.FuzzyFloat:gte(DD)Z
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:lexGT([I[I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:baseIsFloat()Z
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.Quant:lexLT([I[I)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:gcd_differences([I)I
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
jtb.syntaxtree.NodeToken:trimSpecials()V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
jtb.JavaParser:generateParseException()Ljtb.ParseException;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
jtb.JavaParser:jj_2_16(I)Z
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:subsetOf([B[I)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.Quant:eq(DD)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.Quant:noDups([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.ProglangType:isIntegral()Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:subsetOf([F[F)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.ProglangType:isFloat()Z
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.VarInfo:jml_name()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
jtb.JavaParser:jj_ntk()I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:gcd(II)I
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String; | CONDITION | 29684 | if (x) -> if (!x)
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.UtilMDE:equalFiles(Ljava.lang.String;Ljava.lang.String;)Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.VarInfo:new_ppt()V
jtb.JavaCharStream:BeginToken()C
daikon.Quant:subsetOf([I[I)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.ModBitTracker:ModBitTracker(I)V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:memberOf(J[J)Z
daikon.Quant:eltsGteIndex([I)Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltsNotEqual([II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.Quant:setEqual([I[I)Z
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.diff.RootNode:RootNode()V
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.FormatTestCase:passes()Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.ArraysMDE:min([I)I
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltwiseGTE([I)Z
daikon.Quant:sameLength([I[I)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eltsLTE([II)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:element_range([I)I
jtb.JavaCharStream:getEndColumn()I
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.VarInfoName.Simple:java_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant:getConfidence()D
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.Intern:intern([I)[I
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
jtb.JavaCharStream:FillBuff()V
daikon.Quant:setDiff([I[I)[I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
jtb.JavaCharStream:ReadByte()C
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.PptName:isEnterPoint()Z
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptSlice0:arity()I
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:isPseudoArray()Z
daikon.test.split.SplitterFactoryTest:assertEqualFiles(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.inv.ValueSet:ValueSet(I)V
daikon.VarInfoName:ioaFormatVar(Ljava.lang.String;)Ljava.lang.String;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Quant:eltwiseGT([I)Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.Intern:numIntArrays()I
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.Intern:intern([J)[J
daikon.VarInfoName:ioa_name()Ljava.lang.String;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.Quant:gt(II)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.Invariants:Invariants()V
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaCharStream:getBeginLine()I
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eq(FF)Z
daikon.inv.Invariant:justified()Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Debug:logOn()Z
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Simple:dbc_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:isReverse([I[I)Z
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.ModBitTracker:split(I)I
daikon.test.InvariantFormatTester:execute()Z
daikon.diff.InvMap:InvMap()V
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.FormatTestCase.SingleOutputTestCase:getDiffString()Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.MathMDE:gcd(JJ)J
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:memberOf(S[S)Z
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.ValueTuple:size()I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.Quant:eltsGTE([II)Z | OPERATOR | 163389 | == -> !=
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String; | RETURN | 282442 | return null
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.ProglangType:baseIsScalar()Z
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.VarInfoName:name()Ljava.lang.String;
daikon.diff.Node:Node()V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
jtb.JavaCharStream:getEndLine()I
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:eltsLteIndex([I)Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoName:java_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.Quant:gte(II)Z
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.Ppt:Ppt()V
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.FormatTestCase:getDiffString()Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:concat([I[I)[I
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
jtb.JavaCharStream:readChar()C
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.Quant:subsetOf([D[F)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:sum([I)I
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.ProglangType:isScalar()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.ModBitTracker:num_vars()I
daikon.Quant:ne(II)Z
utilMDE.WeakHasherMap:size()I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.PptSlice2:arity()I
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 2268 | = null
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:pairwiseGTE([I[I)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lt(II)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.VarInfoName.Simple:ioa_name_impl()Ljava.lang.String;
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:eltsGT([II)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.Quant:lte(II)Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.test.split.SplitterFactoryTest:assertEqualFiles(Ljava.lang.String;)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V | ASSIGN | 440 | = null
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.Quant:slice([III)[I
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
utilMDE.UtilMDE:lineNumberFileReader(Ljava.io.File;)Ljava.io.LineNumberReader;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:size()I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:memberOf(D[F)Z
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice1:arity()I
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:hashCode()I
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
utilMDE.MathMDE:gcd([I)I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.simplify.SimpUtil:formatInteger(J)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.VarInfoName:dbc_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.ModBitTracker:num_samples()I
daikon.ProglangType:baseIsIntegral()Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
utilMDE.MathMDE:negate(I)I
utilMDE.UtilMDE:lineNumberFileReader(Ljava.lang.String;)Ljava.io.LineNumberReader;
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
jtb.JavaParser:jj_scan_token(I)Z
jtb.JavaCharStream:getBeginColumn()I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltwiseLT([I)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.Quant:subsetOf([S[S)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
725 2 692 4 233 2 41 2 431 2 163 2 689 2 620 2 96 2 
36 2 76 2 75 2 150 2 114 2 71 6 380 6 274 6 371 2 318 2 642 2 
113 2 315 6 179 2 664 6 735 2 101 4 492 6 257 4 41 2 295 2 203 6 96 2 110 2 
641 28 446 6 676 10 240 4 267 8 618 2 619 16 194 4 665 4 286 10 478 6 525 8 623 16 92 12 322 2 684 8 96 6 33 2 125 2 327 2 326 2 552 10 374 8 15 10 208 10 670 26 743 2 41 6 381 4 185 16 
744 4 95 6 
26 2 
610 2 387 2 616 2 193 2 700 2 562 4 424 2 622 2 344 2 624 4 392 2 96 4 431 2 154 2 306 2 215 2 636 2 23 2 62 2 677 2 67 2 27 2 726 2 322 2 592 2 73 2 648 2 122 2 74 2 124 2 598 2 34 2 273 2 688 2 737 2 332 4 41 4 131 2 234 2 609 2 134 2 386 2 693 4 237 2 
443 6 641 53 141 4 676 16 446 4 267 18 191 4 618 2 505 6 619 32 665 2 286 16 478 4 525 6 30 2 623 32 92 22 526 6 683 4 528 4 96 4 625 2 573 4 552 6 668 2 15 16 208 16 275 6 670 48 102 4 538 6 742 6 540 2 41 4 21 8 57 2 185 32 746 2 44 4 
634 2 234 2 722 2 
140 2 338 2 365 22 403 2 79 2 355 2 100 10 241 2 737 2 678 2 480 2 544 2 391 2 473 2 
641 6 676 2 446 2 267 2 619 2 665 2 621 2 286 2 623 2 92 2 727 2 202 2 627 2 430 2 552 4 15 2 208 2 670 4 519 2 606 2 398 2 472 2 185 2 
443 6 573 4 141 4 641 16 676 4 15 4 208 4 194 2 619 8 670 12 538 6 286 4 623 8 92 4 157 2 486 2 185 8 
654 2 613 2 431 2 45 2 192 2 65 2 209 2 722 2 268 2 714 2 331 6 3 6 634 2 234 4 730 2 542 2 323 2 109 2 
26 2 166 2 28 2 31 2 51 2 535 2 85 2 399 2 184 2 108 2 
558 2 559 3 189 2 388 2 196 3 565 2 389 2 198 16 288 4 289 2 91 24 6 2 569 2 292 2 483 2 294 2 9 16 298 1 96 34 571 5 572 3 205 1 488 4 206 2 12 2 98 3 303 16 672 2 106 2 397 2 581 2 494 2 495 6 308 1 584 6 22 32 310 2 675 6 312 2 501 3 316 2 25 2 319 2 507 2 406 4 679 1 29 2 680 2 509 2 223 2 512 8 408 2 594 2 513 2 681 2 596 1 685 2 126 2 600 2 414 2 38 2 689 2 415 2 129 2 691 2 231 2 419 2 41 32 608 2 422 3 137 2 694 2 236 3 142 2 698 2 339 2 614 1 341 2 340 1 244 2 246 2 147 2 248 4 701 1 426 3 345 2 704 2 706 2 251 2 707 4 50 2 352 2 626 2 709 2 710 2 534 1 711 2 54 8 356 12 357 2 435 2 55 2 632 1 255 2 358 2 155 3 717 2 56 1 541 4 60 2 543 24 638 3 362 2 161 2 61 8 366 1 266 2 547 16 721 32 548 2 369 2 165 3 550 12 167 6 170 1 68 1 171 2 647 2 370 2 728 2 72 2 460 2 177 2 652 4 77 1 375 2 733 3 467 2 276 4 181 2 378 2 736 1 655 1 279 2 658 2 385 2 281 2 89 2 186 2 
599 2 96 2 
466 2 226 2 96 4 
219 2 
238 4 188 2 521 2 523 4 611 4 144 2 190 4 342 12 564 6 425 12 566 10 702 2 47 12 287 12 48 2 290 4 390 6 527 2 530 16 204 2 52 12 489 2 629 2 17 4 713 8 304 4 576 10 254 2 579 8 256 2 360 2 438 6 439 8 585 2 440 6 499 4 402 10 500 12 640 2 24 2 222 18 450 2 591 40 119 2 407 40 453 40 649 6 595 12 272 2 517 2 329 4 78 4 553 2 377 10 690 6 738 4 739 12 555 12 603 2 417 12 418 2 132 12 334 10 133 2 335 2 282 2 235 2 283 8 336 2 
396 2 70 2 697 1 317 2 
70 2 242 2 
70 2 234 2 447 2 225 2 240 2 63 2 159 2 
70 2 367 2 63 2 
70 2 63 2 343 2 
396 2 605 2 511 2 
70 2 63 2 
213 2 605 2 
70 2 359 2 
396 2 605 2 230 2 
396 2 580 2 7 2 
396 2 156 2 484 2 
396 2 651 2 354 2 
633 2 396 2 628 2 
605 2 158 2 
70 2 49 2 
741 2 580 2 
484 2 103 2 
651 2 470 2 
633 2 395 2 
605 2 732 2 
633 2 348 2 
651 2 35 2 
484 2 563 2 
580 2 705 2 
396 2 605 2 230 2 187 2 
396 2 605 2 458 2 230 2 187 2 
396 2 605 2 228 2 
396 2 605 2 448 2 
574 2 568 2 42 2 216 2 
234 2 447 2 13 2 588 2 
234 2 447 2 225 2 13 2 99 2 588 2 
451 2 70 2 234 2 447 2 240 2 63 2 
609 2 301 2 
234 2 447 2 240 2 682 2 
651 2 643 2 
532 2 
580 2 121 2 
484 2 400 2 
633 2 264 2 484 2 
633 2 484 2 20 2 
633 2 253 2 484 2 
633 2 280 2 484 2 
545 6 447 2 404 6 245 2 173 2 457 2 234 2 420 2 
605 2 299 2 
695 2 0 2 365 6 503 2 153 2 524 2 39 2 347 2 593 2 307 2 120 4 745 2 259 2 176 2 135 2 94 2 293 2 297 4 
396 2 81 2 
38 2 
614 2 339 2 699 2 341 2 561 2 248 4 565 2 567 2 389 2 345 2 6 2 482 2 292 1 483 2 707 4 96 18 488 4 357 2 303 6 672 2 106 2 673 4 581 2 495 2 718 2 541 4 584 6 22 2 310 2 675 5 266 2 721 6 25 2 645 2 167 2 507 2 647 2 370 2 728 2 594 2 72 2 681 1 460 2 600 6 467 2 689 2 655 2 330 2 41 18 281 2 557 2 186 2 
614 2 339 2 699 2 341 2 561 2 248 4 565 2 567 2 345 2 389 2 6 2 482 2 292 2 483 2 707 4 96 18 488 4 357 2 303 6 672 2 106 2 673 4 581 2 495 2 718 2 541 4 584 6 22 2 310 2 675 6 266 2 721 6 25 2 645 2 167 2 507 2 647 2 370 2 728 2 594 2 72 2 681 2 460 2 600 6 467 2 689 2 655 2 330 2 41 18 281 2 557 2 186 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 8 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 8 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 114 2 25 2 405 2 647 2 370 2 71 6 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 376 4 274 6 180 8 82 2 277 2 83 4 607 2 379 2 41 6 380 6 471 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 8 252 2 96 12 531 2 488 2 53 2 536 4 575 8 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 114 2 25 2 405 2 647 2 508 4 370 2 71 8 650 2 551 4 460 2 410 2 372 2 516 2 75 4 76 2 36 2 376 4 274 8 180 8 82 2 277 2 83 4 40 2 607 2 41 6 379 2 380 6 471 2 
516 2 75 2 376 4 405 2 82 2 212 2 437 2 493 2 607 2 150 2 379 2 380 2 71 2 93 2 650 2 551 4 309 2 252 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 4 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 4 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 25 2 405 2 647 2 370 2 71 6 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 36 2 376 4 274 6 180 4 82 2 277 2 83 4 607 2 379 2 41 6 380 4 471 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 4 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 4 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 25 2 405 2 642 2 647 2 370 2 71 4 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 376 4 274 6 180 4 82 2 277 2 83 4 607 2 379 2 41 6 380 6 471 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 4 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 8 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 114 2 25 2 405 2 647 2 370 2 71 6 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 376 4 274 6 180 4 82 2 277 2 83 4 607 2 379 2 41 6 380 6 471 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 8 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 8 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 114 2 25 2 405 2 642 2 647 2 370 2 71 6 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 376 4 274 8 180 8 82 2 277 2 83 4 607 2 379 2 41 6 380 8 471 2 
475 4 477 2 345 2 349 2 350 2 150 4 200 2 93 2 483 2 708 8 252 2 96 12 531 2 488 2 53 2 536 4 207 2 575 8 671 2 212 2 437 2 715 2 581 2 493 2 635 2 541 2 217 2 584 4 218 2 309 2 220 2 114 2 25 2 405 2 647 2 370 2 71 6 455 2 650 2 551 4 460 2 372 2 75 4 516 2 76 2 376 4 274 6 180 8 82 2 277 2 83 4 607 2 379 2 41 6 380 6 471 2 
1 4 2 2 475 6 477 2 561 2 565 2 197 2 389 2 288 2 482 2 200 2 292 2 93 2 483 2 96 28 488 4 303 6 575 2 671 2 672 2 212 2 106 2 673 4 493 2 581 2 495 2 217 2 584 6 218 2 22 2 309 2 310 2 675 6 314 2 220 2 25 2 405 2 590 2 507 4 406 2 681 2 516 2 600 6 689 2 607 2 41 18 339 2 699 2 341 2 248 4 345 2 349 2 150 4 350 2 707 4 252 2 531 2 53 2 536 8 357 2 356 2 715 2 437 2 635 2 541 4 266 2 721 8 642 4 167 2 550 2 723 2 724 2 647 2 270 2 370 2 728 2 71 4 72 2 455 2 650 2 551 4 460 2 461 2 372 2 76 4 75 4 274 12 376 4 467 2 276 2 82 2 277 2 83 4 379 2 88 2 380 8 471 2 281 2 186 2 
1 4 2 2 475 6 477 2 561 2 565 2 197 2 389 2 288 4 482 2 200 2 292 2 93 2 483 2 96 28 488 4 303 6 575 6 671 2 672 2 212 2 106 2 673 4 493 2 581 2 495 2 217 2 584 6 218 2 22 2 309 2 310 2 675 6 314 2 114 4 220 2 25 2 405 2 590 2 507 4 406 4 681 2 516 2 600 6 689 2 607 2 41 18 339 2 699 2 341 2 248 4 345 2 349 2 150 4 350 2 707 4 252 2 531 2 53 2 536 8 357 2 356 4 715 2 437 2 635 2 541 4 266 2 721 8 167 2 550 4 723 2 724 2 647 2 270 2 370 2 728 2 71 8 72 2 455 2 650 2 551 4 460 2 461 2 372 2 76 4 75 4 274 12 376 4 467 2 276 4 82 2 277 2 83 4 379 2 88 2 380 8 471 2 281 2 186 2 
1 4 2 2 475 6 477 2 561 2 565 2 197 2 389 2 288 4 482 2 200 2 292 2 93 2 483 2 96 28 488 4 303 6 575 6 671 2 672 2 212 2 106 2 673 4 493 2 581 2 495 2 217 2 584 6 218 2 22 2 309 2 310 2 675 6 314 2 114 4 220 2 25 2 405 2 590 2 507 4 406 4 681 2 516 2 600 6 689 2 607 2 41 18 339 2 699 2 341 2 248 4 345 2 349 2 150 4 350 2 708 4 707 4 252 2 531 2 53 2 536 8 357 2 356 4 715 2 437 2 635 2 541 4 266 2 721 8 167 2 550 4 723 2 724 2 647 2 270 2 370 2 728 2 71 8 72 2 455 2 650 2 551 4 460 2 461 2 372 2 76 4 75 4 274 12 376 4 467 2 276 4 180 4 82 2 277 2 83 4 379 2 88 2 380 8 471 2 281 2 186 2 
1 4 2 2 475 6 477 2 561 2 565 2 197 2 389 2 288 4 482 2 200 2 292 2 93 2 483 2 296 2 96 26 488 4 303 8 575 6 671 2 672 2 212 2 106 2 673 6 581 2 493 2 495 4 217 2 584 6 218 2 22 4 309 2 310 2 675 6 587 2 114 4 220 2 25 2 405 2 590 2 507 2 406 4 681 2 36 2 516 2 412 2 600 8 689 2 232 2 607 2 41 16 339 2 699 2 341 2 248 4 345 2 349 2 150 4 350 2 708 4 707 4 252 2 429 2 531 2 53 2 536 8 357 2 356 4 715 2 437 2 635 2 541 4 266 2 721 12 642 2 449 2 167 4 550 4 723 2 724 2 647 2 270 2 370 2 728 2 71 10 72 2 455 2 650 2 551 4 460 2 461 2 372 2 76 4 75 4 274 16 376 4 467 2 276 4 180 4 82 2 277 2 83 4 379 2 380 10 471 2 281 2 186 2 
114 2 220 2 475 2 477 2 350 2 150 4 71 6 455 2 551 2 708 4 252 2 96 4 372 2 531 2 76 2 516 2 75 4 53 2 536 2 274 4 376 2 180 4 575 6 277 2 83 2 212 2 715 2 437 2 493 2 379 2 380 6 471 2 217 2 218 2 309 2 
560 2 475 2 477 2 561 2 565 2 389 2 482 2 292 2 483 2 96 28 488 4 303 6 575 6 672 2 212 2 106 2 493 2 581 2 673 4 495 3 217 2 584 6 218 2 22 3 309 2 310 2 675 6 314 2 114 2 220 2 25 2 507 4 681 2 516 2 600 6 38 2 689 2 41 24 137 2 138 2 339 2 341 2 699 2 248 4 345 2 349 2 150 4 350 2 251 2 707 4 708 2 252 2 531 2 53 2 536 2 357 2 715 2 437 2 541 4 58 2 258 2 266 2 721 8 369 2 167 3 647 2 370 2 728 2 71 6 455 2 72 2 551 2 459 2 460 2 372 2 76 2 75 4 274 4 376 2 467 2 277 2 83 2 379 2 380 6 88 2 384 3 471 2 281 2 186 2 
715 2 350 2 325 2 
715 2 350 2 325 2 
1 2 475 4 284 2 561 2 565 2 389 2 288 4 482 2 200 2 292 2 93 2 483 2 96 24 487 2 488 4 18 2 394 2 303 2 575 6 671 2 105 2 672 2 106 2 581 2 493 2 497 2 584 6 217 2 22 2 310 2 675 6 114 4 25 2 504 2 117 4 116 2 405 2 319 2 507 4 406 4 681 2 516 4 36 4 600 2 413 2 689 2 607 2 41 16 339 2 341 2 699 4 617 2 248 4 345 2 703 2 350 4 150 4 707 4 708 4 252 2 536 4 356 4 715 2 361 2 541 4 444 2 266 2 721 2 642 4 644 2 550 4 68 2 647 2 370 2 728 2 174 2 71 12 72 2 551 2 460 2 75 4 76 4 376 2 274 16 467 2 276 4 180 4 278 2 83 2 88 2 380 12 281 2 471 2 90 2 660 2 186 2 
444 2 393 2 433 2 504 2 394 2 105 2 507 2 172 2 41 2 174 2 88 2 650 2 250 2 261 2 460 2 411 2 96 4 
1 2 475 4 284 2 561 2 565 2 389 2 5 2 288 4 199 2 482 2 200 2 292 2 93 2 483 2 96 20 487 2 488 4 18 4 394 2 303 2 575 6 671 2 672 2 106 2 581 2 493 2 584 6 217 2 22 4 310 2 675 6 114 4 25 2 117 4 116 2 405 2 319 2 507 2 406 4 681 2 409 2 516 4 36 4 127 2 600 2 413 2 689 2 607 2 41 14 339 2 341 2 699 4 617 2 248 4 345 2 703 2 350 4 150 4 707 4 708 4 252 2 536 4 630 2 356 4 715 2 361 2 541 4 266 2 721 2 642 4 644 2 550 4 647 2 370 2 728 2 174 2 71 12 72 2 551 2 460 2 75 4 76 4 376 2 274 16 467 2 276 4 180 4 278 2 83 2 380 12 281 2 471 2 90 2 660 2 186 2 
1 2 475 4 284 2 561 2 565 2 389 2 288 4 199 2 482 2 200 2 292 2 93 2 483 2 666 2 96 24 487 2 488 4 18 2 394 2 303 2 575 6 671 2 105 2 672 2 106 2 581 2 493 2 584 6 217 2 22 2 310 2 675 6 114 4 25 2 504 2 117 4 116 2 405 2 319 2 507 4 406 4 681 2 516 4 36 4 600 2 413 2 689 2 607 2 41 16 339 2 341 2 699 4 617 2 248 4 345 2 703 2 350 4 150 4 707 4 708 4 252 2 536 4 630 2 356 4 715 2 361 2 541 4 444 2 266 2 721 2 642 4 644 2 550 4 68 1 647 2 370 2 728 2 174 2 71 12 72 2 551 2 460 2 75 4 76 4 376 2 274 16 467 2 276 4 180 4 278 2 83 2 88 2 380 12 281 2 471 2 90 2 660 2 186 2 
662 2 474 2 2 2 195 2 565 2 4 2 286 2 389 2 197 2 479 2 481 2 92 2 482 2 201 2 570 4 292 2 291 2 483 2 96 28 97 2 573 2 667 2 488 4 15 2 208 2 670 4 303 8 104 2 672 2 106 2 581 2 673 6 495 4 674 2 583 2 584 6 22 4 310 2 675 6 111 2 311 2 586 2 112 6 313 2 676 2 502 2 25 2 589 4 590 2 506 2 118 2 507 2 321 2 224 2 510 2 227 2 681 2 123 2 515 2 600 8 128 2 518 2 689 2 520 2 333 2 130 2 41 22 43 2 136 2 696 2 139 2 339 2 341 2 699 2 46 2 243 2 619 2 248 4 345 2 148 2 249 2 623 2 707 4 151 2 152 4 356 6 357 2 538 4 631 2 539 2 716 2 57 2 637 2 541 4 719 2 260 2 262 2 441 2 363 1 639 2 442 2 263 2 162 2 61 4 546 4 641 5 265 2 266 2 368 2 267 2 721 12 164 4 550 6 167 4 168 2 646 2 723 2 647 2 370 2 270 2 728 2 454 2 456 2 72 2 175 2 460 2 461 2 373 2 80 2 554 2 467 2 468 2 656 2 740 2 86 2 382 2 281 2 185 2 186 2 
721 2 164 6 66 2 167 3 247 2 269 2 69 2 149 2 324 2 597 2 96 2 10 2 464 2 686 2 600 2 490 2 712 3 357 2 303 2 19 4 673 2 495 3 41 2 22 3 
721 2 164 6 66 2 167 2 247 2 269 2 69 2 149 2 324 2 597 2 96 2 10 2 464 2 686 2 600 2 490 2 712 2 357 2 303 2 19 4 673 2 495 2 41 2 22 2 
721 2 164 6 66 2 167 2 247 2 269 2 69 2 149 2 324 2 597 2 96 2 10 2 464 2 686 2 600 2 490 2 712 2 357 2 303 2 19 4 673 2 495 2 41 2 22 2 
641 6 676 2 663 4 143 2 547 2 721 2 476 2 619 2 286 2 346 4 452 3 269 2 478 2 525 4 623 2 9 2 462 2 96 10 432 2 491 3 37 4 15 2 208 2 210 2 670 4 357 2 211 2 577 4 436 3 416 2 578 6 495 3 41 4 556 2 496 4 383 2 182 2 22 3 423 2 185 2 
641 4 676 2 663 4 143 2 547 2 267 2 721 2 476 2 618 2 619 2 286 2 346 4 452 2 269 2 478 2 525 4 623 2 92 2 9 2 462 2 96 10 432 2 491 2 37 4 15 2 208 2 210 2 670 4 357 2 211 2 577 4 436 2 416 2 578 6 495 2 41 4 556 2 496 4 383 2 182 2 22 2 423 2 185 2 
641 4 676 2 663 4 143 2 547 2 267 2 721 2 476 2 618 2 619 2 286 2 346 4 452 2 269 2 478 2 525 4 623 2 92 2 9 2 462 2 96 10 432 2 491 2 37 4 15 2 208 2 210 2 670 4 357 2 211 2 577 4 436 2 416 2 578 6 495 2 41 4 556 2 496 4 383 2 182 2 22 2 423 2 185 2 
641 4 676 2 663 4 143 2 547 2 267 2 721 2 476 2 618 2 619 2 286 2 346 4 452 2 269 2 478 2 525 4 623 2 92 2 9 2 462 2 96 10 432 2 491 2 37 4 15 2 208 2 210 2 670 4 357 2 211 2 577 4 436 2 416 2 578 6 495 2 41 4 556 2 496 4 383 2 182 2 22 2 423 2 185 2 
641 4 676 2 663 4 143 2 547 2 267 4 721 2 476 2 618 4 619 2 286 2 346 4 452 2 269 2 478 2 525 4 623 2 92 4 9 2 462 2 96 10 432 2 491 2 37 4 15 2 208 2 210 2 670 4 357 2 211 2 577 4 436 2 416 2 578 6 495 2 41 4 556 2 496 4 383 2 182 2 22 2 423 2 185 2 
445 2 729 2 14 2 302 2 146 2 520 2 
659 2 546 2 612 2 300 2 601 2 302 2 8 2 
364 2 239 2 64 2 549 2 285 2 345 2 320 2 529 2 96 10 178 1 514 2 11 2 653 2 328 1 465 2 209 1 734 2 469 2 604 2 214 2 41 8 87 2 421 2 542 1 183 1 720 2 
641 16 676 6 267 2 191 2 505 4 619 6 618 2 286 6 478 2 427 2 525 4 623 6 92 5 351 2 73 2 175 2 428 2 96 2 573 2 229 2 15 6 208 6 154 2 670 12 538 4 107 2 130 2 41 2 21 2 583 2 185 6 
663 2 115 2 37 2 16 2 669 2 602 2 434 2 169 2 346 2 41 1 32 2 271 2 582 1 401 4 485 6 498 2 661 2 96 1 
663 2 16 2 37 2 115 4 669 2 602 2 434 2 169 4 346 2 32 4 271 2 401 4 485 6 498 2 661 2 
663 2 16 8 37 2 115 8 669 2 602 2 434 6 169 8 346 2 41 1 32 8 271 2 582 1 401 4 485 10 498 2 661 2 96 1 
663 2 37 2 115 2 669 2 602 2 169 2 346 2 32 2 271 2 401 2 485 2 498 2 661 2 
522 2 615 2 248 2 292 2 707 2 96 6 353 2 537 1 305 2 160 2 675 4 266 2 550 2 728 2 681 2 84 1 41 6 281 2 
522 2 266 2 353 2 615 2 550 2 248 2 68 2 728 2 41 6 59 2 281 2 707 2 160 2 96 6 675 2 
533 2 522 2 266 2 353 2 615 2 550 2 248 2 68 2 728 2 41 6 281 2 707 2 160 2 96 6 675 2 
533 2 522 2 266 2 353 2 615 2 550 2 248 2 728 2 41 6 292 2 281 2 681 2 707 2 160 2 96 6 675 4 
221 2 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
337 1 657 1 687 1 731 1 145 1 463 1 
