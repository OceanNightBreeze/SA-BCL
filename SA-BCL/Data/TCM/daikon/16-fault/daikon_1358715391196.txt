#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V FAILED junit.framework.AssertionFailedError 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 653 134 332 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V FAILED junit.framework.AssertionFailedError 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V FAILED junit.framework.AssertionFailedError 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V FAILED junit.framework.AssertionFailedError 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V FAILED junit.framework.AssertionFailedError 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 46 764 516 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 46 764 516 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 46 764 516 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 46 764 516 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.Quant:subsetOf([F[F)Z
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.VarInfo:get_ioa_quantify(Ldaikon.VarInfo;)Ldaikon.Quantify.IOAQuantification;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
jtb.syntaxtree.NodeToken:trimSpecials()V
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.Quant:lexGTE([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.Intern:intern([D)[D
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfo:get_array_var()Ldaikon.VarInfo;
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:sum([[D)D
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I | OPERATOR | 54584 | != -> <=
daikon.ProglangType:baseIsIntegral()Z
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1007 | = null
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.ValueSet:ValueSet(I)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.ValueTuple:isMissing(I)Z
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Positive:enabled()Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.Quant:eltwiseGT([I)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.Invariant:logDetail()Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:negate(I)I
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.diff.InvMap:InvMap()V
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
jtb.JavaParser:jj_3_1()Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.Quantify.QuantifyReturn:QuantifyReturn(Ldaikon.VarInfo;)V
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I | STATEMENT | 15721 | stmt -> ;
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([I[I)Z
daikon.ModBitTracker:num_samples()I
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.ProglangType:baseIsScalar()Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:pairwiseLTE([I[I)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsLtIndex([I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quantify.Term:esc_name()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
jtb.JavaParser:jj_2_1(I)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.Quantify:get_flags(Z)Ljava.util.EnumSet;
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
utilMDE.MathMDE:pow(II)I
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:lt(II)Z
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.PptSlice2:arity()I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.VarInfo:get_lower_bound()Ldaikon.Quantify.Term;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:getBeginLine()I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.Intern:intern([I)[I
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.Quant:memberOf(D[F)Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.Quant:lexLT([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.inv.Invariant:logOn()Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:slice([III)[I
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.Quant:eq(FF)Z
daikon.inv.filter.InvariantFilters:InvariantFilters()V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.inv.Invariant:isWorthPrinting()Z
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
utilMDE.MathMDE:gcd(JJ)J
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarInfo:get_base_array_hashcode()Ldaikon.VarInfo;
daikon.PptMap:asCollection()Ljava.util.Collection;
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.FuzzyFloat:gt(DD)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.WeakHasherMap:size()I
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.PptSlice1:arity()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I | CONSTANT | 4877 | 40 -> 1
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.MathMDE:mod_positive(JJ)J
daikon.PptName:isCombinedExitPoint()Z
daikon.Quant:eltsLT([II)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.Node:Node()V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([S[S)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.VarInfo:esc_quantify(Z[Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.ArraysMDE:sorted([I)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:sign(I)I | CONSTANT | 2622 | 0 -> -1
utilMDE.FuzzyFloat:lt(DD)Z
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat()V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
jtb.JavaParser:jj_3_16()Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.VarInfo:isPrestate()Z
daikon.Quant:gt(II)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.filter.InvariantFilter:InvariantFilter()V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.VarInfo:isPointer()Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:max([I)I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quantify.IOAQuantification:IOAQuantification([Ldaikon.VarInfo;)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
jtb.JavaParser:jj_3R_47()Z
daikon.inv.Invariant:prob_and(DD)D
daikon.Quantify.IOAQuantification:IOAQuantification(Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.Invariant:getConfidence()D
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.OrderedPairIterator:hasNext()Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.Quantify.ESCQuantification:ESCQuantification(Ljava.util.EnumSet;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfo:esc_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.diff.RootNode:RootNode()V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.Quant:eltsEqual([II)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
utilMDE.Intern:internSubsequence([III)[I
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.ArraysMDE:element_range([I)I
jtb.JavaCharStream:getEndColumn()I
daikon.test.InvariantFormatTester:execute()Z
daikon.Quantify.ESCQuantification:bld_quant(Ldaikon.VarInfo;Ldaikon.Quantify.Term;)Ljava.lang.String;
daikon.Quantify.Length:esc_name()Ljava.lang.String;
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:jj_3R_48()Z
daikon.Quantify.Length:Length(Ldaikon.VarInfo;I)V
daikon.Quant:memberOf(S[S)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfo:get_base_array()Ldaikon.VarInfo;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:bufPrintln()V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:sum([I)I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:setDiff([I[I)[I
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([II)I
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaParser:jj_3R_49()Z
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:relate_var()V
daikon.PptSlice0:arity()I
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
jtb.JavaCharStream:getEndLine()I
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
utilMDE.Assert:assertTrue(Z)V
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
jtb.JavaParser:jj_scan_token(I)Z
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:isFloat()Z
daikon.ModBitTracker:split(I)I
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.Ppt:find_var_by_name(Ljava.lang.String;)Ldaikon.VarInfo;
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.ModBitTracker:num_sets()I
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.ValueTuple:size()I
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Invariant:prob_and(DDD)D
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.inv.unary.sequence.EltLowerBound:format_esc()Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.simplify.LemmaStack:noticeInt(J)V
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.VarInfoAux:hashCode()I
daikon.VarInfo:get_upper_bound()Ldaikon.Quantify.Term;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quantify.ESCQuantification:get_arr_vars_indexed(I)Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.Quant:setEqual([I[I)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.Quant:eltsGtIndex([I)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:gte(II)Z
daikon.Ppt:Ppt()V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:isPointerFileRep()Z
daikon.Debug:logOn()Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.Quant:pairwiseLT([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:isSubarray([I[II)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:ne(II)Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.Quantify.Constant:Constant(I)V
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:subsetOf([F[D)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.Quant:subsetOf([J[J)Z
daikon.ProglangType:isIntegral()Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.Quant:eq(II)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.Quant:concat([I[I)[I
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
utilMDE.Intern:intern([J)[J
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.Quant:eltsGT([II)Z
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:memberOf(F[D)Z
daikon.inv.Invariants:Invariants()V
utilMDE.ArraysMDE:min_max([I)[I
daikon.Quant:isReverse([I[I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.Quant:eq(JJ)Z
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:memberOf(F[F)Z
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:FillBuff()V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z | CONDITION | 4936 | if (x) -> if (!x)
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:lexEqual([I[I)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
jtb.JavaParser:jj_2_16(I)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.Quantify.ESCQuantification:get_quantification()Ljava.lang.String;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:union([I[I)[I
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.ProglangType:isPseudoArray()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
jtb.JavaCharStream:ReadByte()C
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.VarInfoName:hashCode()I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.Quant:eltwiseEqual([I)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.filter.ParentFilter:ParentFilter()V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.Quant:sameLength([I[I)Z
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.inv.Invariant:prob_or(DD)D
daikon.Quantify:quantify([Ldaikon.VarInfo;)[Ldaikon.Quantify.QuantifyReturn; | ASSIGN | 7218 | = null
daikon.Quant:subsetOf([D[D)Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
jtb.JavaParser:jj_ntk()I
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:passes()Z
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.VarInfo:get_all_simple_names()Ljava.util.List;
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsGTE([II)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:updateResults()V
daikon.Quant:subsetOf([B[I)Z
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:memberOf(J[J)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.Debug:logDetail()Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.Quant:lte(II)Z
daikon.Quant:lexLTE([I[I)Z
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.Intern:numIntArrays()I
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.Quant:noDups([I)Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
jtb.JavaCharStream:getBeginColumn()I
daikon.ProglangType:isScalar()Z
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.Invariant:justified()Z
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eq(DD)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.PptName:isEnterPoint()Z
daikon.inv.unary.sequence.EltLowerBound:format_ioa()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
jtb.Token:newToken(I)Ljtb.Token;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.Quantify.FreeVar:name()Ljava.lang.String;
daikon.Quantify.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:sum([D)D
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:lexGT([I[I)Z
jtb.JavaCharStream:readChar()C
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Ppt:indexOf(Ljava.lang.String;)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
jtb.JavaCharStream:BeginToken()C
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.ProglangType:isArray()Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:eltwiseLT([I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.VarInfo:isDerived()Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.ValueTuple:isMissingNonsensical(I)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.Quantify.Constant:name()Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quantify.Term:name_with_offset(Ljava.lang.String;I)Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsFloat()Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
jtb.JavaCharStream:backup(I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
jtb.JavaParser:jj_3R_50()Z | STATEMENT | 169054 | stmt -> ;
daikon.VarInfo:new_ppt()V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:eltsLTE([II)Z
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.ProglangType:dimensions()I
utilMDE.WeakHasherMap:processQueue()V
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.unary.sequence.EltLowerBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:size()I
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.Quant:memberOf(I[I)Z
utilMDE.ArraysMDE:min([I)I
daikon.PptSlice1:num_samples()I
daikon.ModBitTracker:num_vars()I
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.Quant:intersection([I[I)[I
daikon.Quant:subsetOf([D[F)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
863 2 862 2 750 2 867 4 613 2 528 2 402 2 446 2 379 2 
114 2 350 6 36 2 788 2 525 2 302 6 300 2 758 2 303 2 345 6 558 2 
35 2 285 2 424 6 110 2 296 2 427 2 609 6 877 6 280 4 104 4 613 2 718 6 379 2 
49 10 357 16 325 2 486 8 515 2 152 6 811 10 414 2 213 16 415 8 613 6 393 2 396 12 621 2 225 26 829 4 505 2 590 10 370 29 480 10 169 16 319 4 591 2 176 4 177 8 22 8 23 4 379 6 542 6 857 10 
531 4 830 6 
153 2 
1 2 544 2 330 2 154 2 613 4 59 2 339 2 556 4 392 2 680 2 284 2 505 2 346 2 625 2 171 2 174 2 290 2 635 4 119 2 809 2 766 2 242 2 126 4 182 2 863 2 83 2 359 4 31 2 308 2 309 2 870 2 823 2 824 2 256 2 588 2 145 2 200 2 374 2 43 2 885 2 732 2 379 4 267 2 204 2 
602 2 49 6 357 32 24 4 736 4 299 2 811 16 486 6 152 4 813 6 279 6 245 6 213 32 818 4 613 4 580 2 420 2 63 2 393 2 686 4 651 2 287 4 396 22 92 6 829 2 225 48 590 16 800 4 623 6 370 54 480 16 169 32 112 6 693 4 68 8 177 18 379 4 857 16 542 4 
435 2 663 2 204 2 
167 22 572 2 278 2 154 2 20 2 247 2 67 2 211 2 775 2 633 2 600 2 467 2 191 2 584 10 
49 4 357 2 239 2 811 2 152 2 82 2 213 2 225 4 590 2 726 2 370 6 480 2 198 2 169 2 98 2 857 2 762 2 697 2 659 2 698 2 
357 8 686 4 396 4 811 4 225 12 590 4 813 6 279 6 800 4 370 16 480 4 169 8 213 8 354 2 23 2 760 2 857 4 
803 2 64 2 246 2 
735 2 380 2 358 2 381 2 153 2 643 2 454 2 342 2 683 2 461 2 
441 3 665 2 328 1 446 2 102 2 5 2 209 2 673 2 675 2 103 2 555 4 678 2 216 2 341 2 16 3 685 2 343 2 220 24 219 1 458 2 798 3 799 1 688 3 347 4 568 2 692 2 805 16 569 2 807 2 21 3 120 2 356 2 121 5 124 6 241 2 702 6 243 2 705 2 244 2 708 1 29 2 711 3 132 2 714 2 577 2 717 3 822 2 253 1 721 2 474 2 366 2 368 2 367 2 143 2 479 6 831 1 41 3 371 2 146 2 44 2 45 32 835 1 594 3 836 2 378 6 483 2 733 2 379 32 149 1 484 6 52 2 51 2 151 2 382 2 384 2 842 2 605 4 607 2 843 2 275 1 385 3 741 2 490 24 56 2 281 2 388 1 611 2 158 2 613 34 283 2 748 2 615 2 160 2 749 4 162 4 497 6 499 2 501 2 504 2 852 2 397 1 507 3 170 2 511 2 636 6 178 2 404 2 858 2 71 2 765 2 76 4 295 2 407 2 860 2 409 2 769 2 412 2 522 2 185 2 524 16 865 10 866 1 774 2 776 1 529 3 778 2 868 1 192 2 779 2 874 16 422 2 421 2 426 2 535 2 315 2 429 4 93 16 652 1 431 32 437 2 539 2 883 1 324 2 658 4 661 2 
613 2 672 2 
293 2 425 2 613 4 
639 2 
99 4 383 14 329 4 547 4 671 8 604 10 331 14 488 10 789 18 489 10 386 10 790 14 743 14 336 2 387 2 11 2 12 8 13 2 848 14 752 2 849 2 850 2 851 2 506 2 226 2 399 2 400 2 563 2 802 6 567 2 230 4 175 2 463 4 629 4 118 2 632 8 808 8 292 2 75 2 701 2 571 18 77 2 301 2 770 8 519 4 304 2 305 6 184 2 28 2 773 50 416 2 819 10 251 4 821 8 578 4 190 2 362 2 720 14 34 6 646 6 476 2 255 4 648 2 647 10 37 2 144 14 40 14 833 2 322 2 433 2 377 14 881 2 596 50 595 14 541 10 731 6 599 50 660 2 203 14 
532 2 630 2 250 1 786 2 
543 2 532 2 
878 2 532 2 176 2 264 2 430 2 869 2 204 2 
532 2 869 2 460 2 
532 2 88 2 869 2 
509 2 630 2 557 2 
532 2 869 2 
509 2 321 2 
825 2 532 2 
509 2 630 2 619 2 
498 2 630 2 478 2 
630 2 258 2 107 2 
791 2 630 2 689 2 
127 2 630 2 512 2 
509 2 617 2 
532 2 434 2 
810 2 478 2 
193 2 258 2 
58 2 689 2 
179 2 127 2 
509 2 746 2 
127 2 839 2 
466 2 689 2 
612 2 258 2 
113 2 478 2 
509 2 630 2 619 2 573 2 
509 2 722 2 630 2 619 2 573 2 
509 2 630 2 133 2 
509 2 575 2 630 2 
311 2 538 2 131 2 137 2 
537 2 264 2 624 2 204 2 
537 2 586 2 264 2 430 2 624 2 204 2 
349 2 532 2 176 2 264 2 869 2 204 2 
704 2 309 2 
176 2 166 2 264 2 204 2 
546 2 689 2 
127 2 662 2 
478 2 208 2 
854 2 258 2 
127 2 258 2 159 2 
127 2 258 2 690 2 
772 2 127 2 258 2 
17 2 127 2 258 2 
274 6 622 6 806 2 264 2 579 2 456 2 47 2 204 2 
509 2 768 2 
561 2 180 2 641 2 667 2 167 6 725 4 2 2 517 2 554 2 879 2 523 4 214 2 157 2 338 2 106 2 559 2 682 2 217 2 
630 2 413 2 
615 2 
446 2 102 2 447 2 5 2 209 2 673 2 103 2 555 4 216 2 678 2 795 2 341 2 796 2 223 2 458 2 347 2 348 2 569 2 241 2 702 2 243 2 707 2 29 2 713 2 253 2 721 6 474 4 368 2 367 2 479 6 39 4 371 2 729 2 146 2 45 6 483 2 379 26 484 2 51 2 151 2 382 2 384 2 605 4 275 2 610 2 389 2 613 26 162 2 497 4 852 2 508 4 511 2 636 2 761 2 178 2 858 2 76 4 407 2 642 2 522 2 185 2 864 2 524 6 865 8 778 2 313 2 195 2 429 4 431 4 437 2 654 2 539 2 202 2 658 2 
446 2 102 2 447 2 5 2 209 2 673 2 103 2 555 4 216 2 678 2 341 2 796 2 223 2 458 2 347 2 348 2 807 2 569 2 241 2 702 2 243 2 470 2 707 2 29 2 713 2 253 2 721 6 474 4 585 2 368 2 367 2 479 6 39 4 371 2 729 2 146 2 45 6 483 2 379 26 484 2 51 2 151 2 382 2 384 2 605 4 275 2 389 2 613 26 283 2 162 2 497 6 852 2 508 4 511 2 401 2 636 2 178 2 858 2 765 2 76 4 407 2 642 2 522 2 185 2 864 2 524 6 865 8 778 2 313 2 195 2 429 4 431 4 437 2 654 2 539 2 202 2 658 2 
130 2 
753 2 681 2 
326 2 603 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 845 10 555 2 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 6 19 2 66 2 565 2 350 6 628 2 465 4 758 2 234 8 696 2 178 2 238 2 468 2 700 2 302 6 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 8 36 2 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
326 2 603 2 606 2 5 2 6 2 210 4 103 2 8 2 555 2 845 10 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 8 19 2 66 2 565 2 350 6 114 2 628 2 465 4 758 2 234 8 696 2 178 2 238 2 468 2 700 2 302 8 703 2 79 4 411 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 8 36 2 38 2 368 2 140 2 429 2 536 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
457 2 326 2 468 2 62 2 703 2 316 4 303 2 345 2 66 2 565 2 210 4 350 2 525 2 838 2 189 2 655 2 696 2 581 2 
326 2 603 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 845 6 555 2 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 6 19 2 66 2 565 2 350 4 114 2 628 2 465 4 758 2 234 4 696 2 178 2 238 2 468 2 700 2 302 6 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 4 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
326 2 603 2 788 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 845 6 555 2 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 4 19 2 66 2 565 2 350 6 628 2 465 4 758 2 234 4 696 2 178 2 238 2 468 2 700 2 302 6 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 4 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
326 2 603 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 845 6 555 2 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 6 19 2 66 2 565 2 350 6 628 2 465 4 758 2 234 4 696 2 178 2 238 2 468 2 700 2 302 6 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 8 36 2 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
326 2 603 2 788 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 555 2 845 10 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 6 19 2 66 2 565 2 350 8 628 2 465 4 758 2 234 8 696 2 178 2 238 2 468 2 700 2 302 8 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 8 36 2 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
326 2 603 2 207 2 606 2 739 2 5 2 6 2 210 4 103 2 8 2 845 10 555 2 494 2 613 12 457 2 62 2 163 4 109 2 797 2 65 2 345 6 19 2 66 2 565 2 350 6 628 2 465 4 758 2 234 8 696 2 178 2 238 2 468 2 700 2 302 6 703 2 303 4 522 2 709 2 574 2 525 4 527 2 189 2 419 2 581 4 473 8 36 2 140 2 368 2 536 2 429 2 316 4 727 2 479 4 371 2 201 4 437 2 838 2 655 2 379 6 
0 2 446 2 3 2 672 6 5 2 448 4 6 2 210 4 673 2 8 4 453 6 216 2 457 2 684 2 218 2 224 2 458 2 227 2 19 2 462 6 465 6 232 2 696 2 237 6 238 2 241 2 468 2 700 2 702 2 703 2 243 2 707 2 709 2 716 2 721 6 473 2 475 2 723 4 479 6 727 4 260 6 261 6 262 2 45 8 730 7 483 12 266 7 484 2 51 2 739 2 491 2 494 2 60 2 497 6 62 2 65 2 508 4 66 2 288 6 289 2 511 2 758 4 765 2 76 4 293 6 297 1 298 6 302 12 78 2 303 4 522 2 524 6 525 4 527 2 778 2 313 2 780 6 533 8 534 1 536 2 91 2 316 4 317 2 326 2 100 6 788 4 545 6 102 2 548 2 103 2 555 4 797 2 109 2 111 2 344 2 562 2 345 4 347 2 565 2 564 2 566 2 348 2 350 8 807 2 812 6 129 6 574 2 360 2 820 2 135 2 581 4 138 2 368 2 140 2 367 2 141 1 832 1 371 2 146 2 838 2 840 1 379 24 382 2 603 2 605 4 606 2 845 2 613 46 162 2 163 4 164 10 395 2 620 1 852 2 628 2 636 2 178 2 639 6 407 2 181 1 183 2 185 2 865 4 417 2 189 2 419 2 871 6 194 2 429 4 431 2 199 1 432 2 201 8 437 2 438 1 655 2 202 4 887 2 658 2 
0 2 326 2 100 6 545 6 446 2 548 2 3 2 102 2 672 6 448 4 5 2 6 2 673 2 210 4 103 2 8 4 453 6 555 4 216 2 684 2 457 2 218 2 109 2 797 2 111 2 344 2 224 2 458 2 562 2 345 8 227 2 347 4 19 2 566 2 564 2 565 2 348 2 350 8 462 6 807 2 465 6 232 2 696 2 237 6 238 2 241 2 468 2 700 2 702 2 703 2 812 6 243 2 129 6 707 2 709 2 574 2 471 2 360 2 716 2 820 2 135 2 581 4 473 6 721 6 474 2 138 2 475 2 723 4 36 4 367 2 140 2 368 2 589 2 260 6 727 4 479 6 261 6 371 2 262 2 146 2 45 8 838 2 483 12 379 26 484 2 51 2 382 2 603 2 605 4 606 2 739 2 491 2 845 2 613 48 494 2 60 2 162 4 497 6 164 10 163 4 62 2 395 2 65 2 852 2 508 4 66 2 288 6 628 2 289 2 758 4 511 2 636 2 178 2 765 2 639 6 76 4 293 6 407 2 298 6 78 2 302 12 183 2 303 4 522 2 185 2 524 6 417 2 865 8 525 4 527 2 189 2 778 2 419 2 871 6 313 2 780 6 194 2 533 8 91 2 536 2 429 4 316 4 317 2 431 2 432 2 201 8 437 2 202 4 655 2 887 2 658 4 
0 2 326 2 100 6 545 6 446 2 548 2 3 2 102 2 672 6 448 4 5 2 6 2 673 2 210 4 103 2 8 4 453 6 555 4 216 2 684 2 457 2 218 2 109 2 797 2 111 2 344 2 224 2 458 2 562 2 345 8 227 2 347 4 19 2 566 2 564 2 565 2 348 2 350 8 462 6 807 2 465 6 232 2 234 4 696 2 237 6 238 2 241 2 468 2 700 2 702 2 703 2 812 6 243 2 129 6 707 2 709 2 574 2 471 2 360 2 716 2 820 2 135 2 581 4 721 6 473 6 474 2 138 2 475 2 723 4 36 4 367 2 140 2 368 2 589 2 260 6 727 4 479 6 261 6 371 2 262 2 146 2 45 8 838 2 483 12 379 26 484 2 51 2 382 2 603 2 605 4 606 2 739 2 491 2 845 6 613 48 494 2 60 2 162 4 497 6 164 10 163 4 62 2 395 2 65 2 852 2 508 4 66 2 288 6 628 2 289 2 758 4 511 2 636 2 178 2 765 2 639 6 76 4 293 6 407 2 298 6 78 2 302 12 183 2 303 4 522 2 185 2 524 6 417 2 865 8 525 4 527 2 189 2 778 2 419 2 871 6 313 2 780 6 194 2 533 8 91 2 536 2 429 4 316 4 317 2 431 2 432 2 201 8 437 2 202 4 655 2 887 2 658 4 
0 2 446 2 3 2 672 12 448 4 5 2 6 2 673 2 210 4 8 4 453 6 216 2 457 2 684 2 218 2 224 2 458 2 459 6 227 2 19 2 691 6 462 6 231 2 465 6 232 2 234 4 696 2 237 6 238 2 241 2 468 2 700 2 702 4 703 2 243 2 707 2 709 2 471 2 716 2 473 6 721 8 474 2 475 2 36 4 723 4 479 6 727 4 260 12 261 6 262 2 45 12 483 10 484 4 50 2 51 2 276 2 739 2 491 2 494 2 60 2 497 6 62 2 65 2 508 6 66 2 288 12 289 2 511 2 758 4 765 2 76 4 293 12 767 6 298 6 302 16 78 2 303 4 522 2 524 8 84 2 525 4 527 2 778 2 313 2 780 6 533 8 536 2 316 4 317 2 326 2 100 6 788 2 545 6 101 2 102 2 548 2 103 2 792 2 555 4 797 2 109 2 111 2 344 2 562 2 345 10 347 4 565 2 564 2 566 2 348 4 350 10 114 2 351 2 807 2 355 6 812 6 129 6 574 2 360 2 820 2 135 2 581 4 138 2 368 2 140 2 367 2 589 2 371 2 146 2 592 2 838 2 379 24 382 2 603 2 605 4 606 2 156 6 845 6 613 52 162 4 163 4 164 8 395 2 168 6 852 2 626 6 628 2 636 4 178 2 638 6 639 12 406 6 407 2 183 2 185 2 865 10 417 2 189 2 419 2 871 12 194 2 429 4 431 4 432 2 201 8 437 2 655 2 202 4 887 2 658 4 
468 2 302 4 606 2 739 2 303 4 6 2 709 2 210 2 574 2 845 4 525 4 527 2 613 4 494 2 189 2 473 6 36 2 163 2 62 2 797 2 140 2 536 2 316 2 345 6 19 2 66 2 565 2 350 6 201 2 628 2 465 2 758 2 234 4 655 2 696 2 
446 2 102 2 5 2 6 2 210 2 673 2 103 2 555 4 216 2 797 2 458 2 345 6 19 2 565 2 350 6 807 2 465 2 696 2 241 2 468 2 702 3 243 2 707 2 709 2 574 2 721 6 473 6 364 3 36 2 368 2 367 2 140 2 479 6 371 2 45 8 483 4 379 24 52 2 51 2 382 2 737 2 605 4 606 2 739 2 56 2 745 2 845 2 613 28 494 2 615 2 497 6 163 2 499 2 164 2 62 2 852 2 508 4 66 2 628 2 758 2 511 2 636 3 69 2 178 2 765 2 76 4 407 2 302 4 303 4 522 2 861 2 185 2 524 6 525 4 527 2 189 2 778 2 419 2 313 2 429 4 91 2 536 2 316 2 781 2 431 3 201 2 437 2 202 2 655 2 
709 2 527 2 694 2 
709 2 527 2 694 2 
326 2 788 4 446 2 4 2 102 2 448 2 5 2 673 2 210 2 103 2 8 2 555 4 109 2 797 2 458 2 345 12 347 4 564 2 350 12 114 4 807 2 464 2 465 4 694 2 235 2 234 4 696 2 122 2 241 2 468 2 700 2 243 2 707 2 709 4 248 4 360 2 581 4 721 2 473 6 138 2 723 2 36 4 368 2 367 2 727 4 479 6 371 2 146 4 834 2 45 2 838 2 598 2 483 4 379 16 841 2 269 2 270 2 51 2 382 2 605 4 155 2 389 4 845 6 613 24 162 4 497 6 164 2 163 2 65 2 852 2 66 4 853 2 628 2 511 2 758 4 178 2 765 2 76 4 407 2 298 2 302 16 518 2 303 4 522 2 185 2 524 2 865 4 525 4 526 2 527 6 778 2 310 2 313 2 649 2 429 4 316 2 318 4 431 2 201 4 323 2 437 2 540 2 202 6 658 4 
873 2 753 2 723 2 164 2 139 2 298 2 703 2 368 2 95 2 323 2 540 2 598 2 613 4 232 2 483 2 887 2 379 2 
326 2 664 2 788 4 446 2 102 2 448 2 5 2 673 2 210 2 103 2 8 4 555 4 109 2 797 2 458 2 345 12 347 4 564 2 350 12 114 4 807 2 464 2 465 4 694 2 234 4 696 2 122 2 241 2 468 2 700 2 243 2 707 2 709 4 248 4 360 2 576 2 581 4 721 2 473 6 138 2 36 4 368 2 367 2 727 4 479 6 371 2 146 4 834 2 45 2 375 2 838 2 598 2 483 2 379 16 841 4 269 2 270 2 51 2 382 2 603 2 605 4 155 2 389 4 845 6 613 24 162 4 497 6 163 2 65 2 852 2 66 4 510 2 628 2 511 2 758 4 178 2 765 2 76 4 407 2 298 2 302 16 303 4 522 2 185 2 524 2 865 4 525 4 526 2 527 6 778 2 310 2 313 2 649 2 429 4 94 2 316 2 318 4 431 4 201 4 323 2 437 2 540 2 202 6 658 4 
326 2 788 4 446 2 102 2 448 2 5 2 673 2 210 2 103 2 8 4 555 4 109 2 797 2 458 2 345 12 347 4 564 2 350 12 114 4 807 2 464 2 465 4 694 2 234 4 696 2 122 2 241 2 468 2 700 2 243 2 707 2 709 4 248 4 360 2 361 2 581 4 721 2 473 6 138 2 723 2 36 4 368 2 367 2 727 4 479 6 371 2 146 4 834 2 45 2 838 2 598 2 483 4 379 16 841 2 269 2 270 2 51 2 382 2 273 2 603 2 605 4 744 2 155 2 389 4 845 6 613 24 162 4 497 6 164 2 163 2 65 2 852 2 66 4 628 2 511 2 758 4 178 2 765 2 76 4 407 2 298 2 302 16 303 4 522 2 185 2 524 2 865 4 525 4 526 2 527 6 778 2 310 2 313 2 649 2 429 4 316 2 318 4 431 2 201 4 323 2 437 2 540 2 202 6 657 2 785 2 658 4 
443 2 442 2 445 2 666 4 206 6 669 3 670 2 668 2 446 4 447 2 5 2 450 2 7 2 674 4 676 2 212 2 213 8 451 2 10 2 677 2 14 14 216 2 215 2 455 2 15 2 222 2 221 2 223 14 225 12 687 14 228 2 229 2 231 2 695 2 233 2 236 2 699 4 240 16 241 2 702 16 27 2 469 2 707 2 713 2 249 6 715 4 32 12 719 2 253 2 254 2 721 14 475 2 724 4 257 4 479 6 480 4 42 2 728 2 729 2 45 28 482 4 265 2 483 2 484 20 268 2 50 2 51 4 271 10 737 2 272 4 485 2 486 6 487 2 276 2 275 2 54 2 279 6 740 2 55 2 491 2 57 2 745 2 282 2 493 2 747 10 495 2 496 2 286 2 61 8 751 2 497 12 500 2 754 4 502 2 503 2 755 2 508 12 756 2 289 4 757 2 511 4 759 2 69 2 70 3 763 2 72 2 765 4 513 2 76 6 294 2 514 2 78 2 80 2 81 40 520 4 522 2 771 2 524 14 84 2 307 2 85 2 530 2 86 2 314 2 90 2 93 4 781 2 782 2 320 2 96 2 783 2 784 2 97 10 542 4 787 2 327 2 101 2 548 2 102 4 333 2 549 4 332 2 550 3 551 2 552 2 334 2 335 18 103 2 553 2 337 2 555 4 793 2 340 2 796 2 800 4 801 4 348 46 115 4 804 38 351 2 805 4 352 2 807 4 116 2 353 2 117 2 123 2 357 8 811 4 814 2 815 8 816 6 134 2 820 2 135 2 582 4 580 4 583 2 364 2 363 2 826 2 365 3 827 2 828 2 587 2 367 2 368 2 142 2 369 2 590 4 370 16 371 2 372 2 373 2 146 4 592 2 376 4 837 2 379 30 601 2 150 2 382 2 605 6 844 4 390 4 846 2 613 40 614 2 161 2 616 1 165 2 394 2 396 6 852 2 398 2 169 8 172 2 173 2 855 10 631 24 177 4 634 2 636 19 178 2 856 2 857 4 859 2 640 2 407 4 642 2 644 3 185 2 186 2 865 44 188 2 418 2 645 2 420 2 423 2 650 2 428 14 195 2 196 16 429 4 197 2 431 19 653 2 436 2 437 2 654 2 880 2 882 2 202 2 656 2 439 10 440 2 
150 2 271 2 702 2 26 2 450 2 524 2 747 4 613 2 216 2 721 2 365 2 369 2 197 2 508 2 42 2 431 2 348 6 45 2 880 2 116 2 97 2 636 2 233 2 379 2 
150 2 271 2 702 2 26 2 450 2 524 2 747 4 613 2 216 2 721 2 365 2 369 2 197 2 508 2 42 2 431 2 348 6 45 2 880 2 116 2 97 2 636 2 233 2 379 2 
150 2 271 2 702 2 26 2 450 2 524 2 747 4 613 2 216 2 721 2 365 2 369 2 197 2 508 2 42 2 431 2 348 6 45 2 880 2 116 2 97 2 636 2 233 2 379 2 
357 2 128 2 811 2 486 4 550 3 521 2 492 4 644 3 674 2 30 2 213 2 451 4 613 10 216 2 794 2 560 2 61 6 87 3 165 4 225 4 18 2 590 2 93 2 370 5 480 2 169 2 431 3 45 2 627 2 805 2 593 2 880 2 481 2 695 4 884 2 636 3 856 4 379 4 857 2 542 2 
357 2 128 2 811 2 486 4 550 2 521 2 492 4 644 2 674 2 30 2 213 2 451 4 613 10 216 2 794 2 560 2 61 6 87 2 393 2 165 4 396 2 225 4 18 2 590 2 93 2 370 4 480 2 169 2 431 2 45 2 627 2 805 2 593 2 880 2 177 2 481 2 695 4 884 2 636 2 856 4 379 4 857 2 542 2 
357 2 128 2 811 2 486 4 550 2 521 2 492 4 644 2 674 2 30 2 213 2 451 4 613 10 216 2 794 2 560 2 61 6 87 2 393 2 165 4 396 2 225 4 18 2 590 2 93 2 370 4 480 2 169 2 431 2 45 2 627 2 805 2 593 2 880 2 177 2 481 2 695 4 884 2 636 2 856 4 379 4 857 2 542 2 
357 2 128 2 811 2 486 4 550 2 521 2 492 4 644 2 674 2 30 2 213 2 451 4 613 10 216 2 794 2 560 2 61 6 87 2 393 2 165 4 396 2 225 4 18 2 590 2 93 2 370 4 480 2 169 2 431 2 45 2 627 2 805 2 593 2 880 2 177 2 481 2 695 4 884 2 636 2 856 4 379 4 857 2 542 2 
357 2 128 2 811 2 486 4 550 2 521 2 492 4 644 2 674 2 30 2 213 2 451 4 613 10 216 2 794 2 560 2 61 6 87 2 393 4 165 4 396 4 225 4 18 2 590 2 93 2 370 4 480 2 169 2 431 2 45 2 627 2 805 2 593 2 880 2 177 4 481 2 695 4 884 2 636 2 856 4 379 4 857 2 542 2 
74 2 186 2 306 2 477 2 136 2 148 2 
73 2 25 2 597 2 223 2 277 2 777 2 148 2 
205 2 125 1 53 2 444 2 405 2 738 2 410 1 706 2 742 1 103 2 710 1 817 2 613 10 391 2 847 1 679 2 472 2 252 2 33 2 872 2 108 2 875 2 89 2 260 2 403 2 379 8 
357 6 736 2 811 6 486 4 279 4 9 2 213 6 452 2 613 6 215 2 392 2 582 2 161 2 393 2 618 2 396 4 225 12 590 6 800 2 623 4 370 16 480 6 169 6 68 2 177 2 147 2 379 6 857 6 542 2 267 2 
312 1 165 2 876 2 608 2 449 2 451 2 105 4 712 7 187 2 613 1 570 2 291 2 379 1 856 2 48 2 734 2 637 2 
165 2 876 2 608 2 449 2 451 2 105 4 712 4 187 2 570 2 856 2 48 2 637 2 734 2 
312 1 165 2 876 2 608 2 449 2 451 2 105 4 712 4 187 2 613 1 570 2 379 1 856 2 48 2 637 2 734 2 
165 2 876 2 608 2 449 2 451 2 105 2 712 2 187 2 570 2 856 2 48 2 637 2 734 2 
605 2 102 2 613 4 497 4 807 2 511 2 765 2 764 2 76 2 407 2 408 2 516 2 259 1 263 1 46 2 379 4 
764 2 76 2 497 2 407 2 408 2 605 2 511 2 613 4 102 2 516 2 46 2 379 4 
764 2 76 2 497 2 407 2 408 2 605 2 511 2 613 4 102 2 516 2 46 2 379 4 
765 2 764 2 76 2 497 4 407 2 408 2 605 2 516 2 102 2 807 2 613 4 511 2 46 2 379 4 
886 2 
