#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 414 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 428 703 715 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException 222 (503,691) 475 (258,707) (503,691) 295 (258,707) 37 338 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException 222 (503,691) 475 (258,707) (503,691) 295 (258,707) 37 338 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException 222 (503,691) 475 (258,707) (503,691) 295 (258,707) 37 338 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException 222 (503,691) 475 (258,707) (503,691) 295 (258,707) 37 338 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V ERROR java.lang.reflect.InvocationTargetException 
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 662 590 264 309 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 183 700 689 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 183 700 689 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 183 700 689 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 183 700 689 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltsGtIndex([I)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
utilMDE.MathMDE:sign(I)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.ArraysMDE:min([I)I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Quant:memberOf(F[F)Z
utilMDE.ArraysMDE:indexOf([II)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Assert:assertTrue(Z)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.Intern:intern([D)[D
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ValueTuple:isMissingFlow(I)Z
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | CONSTANT | 51688 | 64 -> 1
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.diff.Node:Node()V
daikon.Quant:eltwiseGT([I)Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.PptName:isCombinedExitPoint()Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.diff.RootNode:RootNode()V
daikon.Quant:gte(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.ArraysMDE:sum([[D)D
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.ValueTuple:size()I
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant:logDetail()Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:memberOf(F[D)Z
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
jtb.JavaCharStream:getEndLine()I
utilMDE.MathMDE:gcd_differences([I)I
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:sum([I)I
daikon.inv.Invariant:logOn()Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.PptSlice1:arity()I
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.VarInfoAux:hashCode()I
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
jtb.JavaCharStream:BeginToken()C
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:noDups([I)Z
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.ModBitTracker:split(I)I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_and(DD)D
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Debug:logDetail()Z
daikon.Quant:eltsEqual([II)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.MathMDE:negate(I)I
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.inv.Invariant:prob_and(DDD)D
jtb.JavaCharStream:getEndColumn()I
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.MathMDE:modulus([I)[I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:subsetOf([B[I)Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd(II)I
daikon.Quant:memberOf(J[J)Z
daikon.PptSlice1:num_samples()I
utilMDE.WeakHasherMap:size()I
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.Ppt:Ppt()V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.PptName:isEnterPoint()Z
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1007 | = null
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.Quant:eltwiseGTE([I)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
jtb.JavaCharStream:ReadByte()C
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.Quant:eltsGT([II)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.Quant:eq(II)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.diff.Node:add(Ljava.lang.Object;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.OrderedPairIterator:setnext2()V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.Invariant:justified()Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.Quant:lt(II)Z
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I | ASSIGN | 5636 | = null
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:intersection([I[I)[I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.Invariant:isWorthPrinting()Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.Quant:eltsLTE([II)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.PptSlice2:arity()I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.Quant:eltsGTE([II)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.ProglangType:dimensions()I
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.OrderedPairIterator:setnext1()V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant:getConfidence()D
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eq(DD)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName:hashCode()I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.Options.OptionInfo:argument_required()Z
daikon.test.InvariantFormatTester:execute()Z
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern:intern([J)[J
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:isIntegral()Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaCharStream:FillBuff()V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:sameLength([I[I)Z
daikon.Quant:subsetOf([F[F)Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfo:name()Ljava.lang.String;
daikon.Quant:eltsLtIndex([I)Z
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:lexEqual([I[I)Z
utilMDE.ArraysMDE:sum([[I)I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:lexLT([I[I)Z
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([S[S)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf([D[F)Z
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern([I)[I
daikon.Quant:gt(II)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:setDiff([I[I)[I
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.ArraysMDE:sum([D)D
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.ArraysMDE:sorted([I)Z | CONSTANT | 53880 | 0 -> -1
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.filter.ObviousFilter:ObviousFilter()V
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:memberOf(D[F)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.filter.ParentFilter:ParentFilter()V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
jtb.JavaCharStream:readChar()C
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Debug:logOn()Z
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.MathMDE:gcd([I)I
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.ArraysMDE:max([I)I
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.Quant:setEqual([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.VarInfo:relate_var()V
daikon.Quant:eltwiseLTE([I)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.Quant:memberOf(S[S)Z
utilMDE.Intern:internSubsequence([III)[I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
jtb.JavaCharStream:backup(I)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.VarInfo:new_ppt()V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.Quant:subsetOf([F[D)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:subsetOf([J[J)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.ProglangType:isScalar()Z
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.LimitedSizeIntSet:size()I
utilMDE.MathMDE:pow(II)I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.Quant:eq(JJ)Z
daikon.ProglangType:isPseudoArray()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:memberOf(I[I)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.Quant:lexLTE([I[I)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.ProglangType:isArray()Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.Intern:numIntArrays()I
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:ne(II)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:subsetOf([I[I)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.Quant:union([I[I)[I
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.ValueTuple:isMissing(I)Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.Quant:subsetOf([D[D)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.ModBitTracker:num_vars()I
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:slice([III)[I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.ModBitTracker:num_samples()I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:subarray([JII)[J
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.Quant:eltsLT([II)Z
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.Quant:lexGT([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.inv.Invariants:Invariants()V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:eltwiseLT([I)Z
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.MathMDE:gcd(JJ)J
daikon.ModBitTracker:num_sets()I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:concat([I[I)[I
daikon.ProglangType:baseIsScalar()Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V | OPERATOR | 34828 | < -> ==
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.diff.InvMap:InvMap()V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:lexGTE([I[I)Z
daikon.Quant:eltwiseEqual([I)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsIntegral()Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.OrderedPairIterator:hasNext()Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
jtb.JavaParser:jj_ntk()I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:lte(II)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.PptSlice0:arity()I
daikon.Quant:eq(FF)Z
daikon.inv.unary.LowerBoundCore:calc_modulus()J
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.Quant:lexNotEqual([I[I)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
538 4 41 2 136 2 432 2 403 2 237 2 541 2 319 2 536 2 
628 2 213 2 665 2 209 6 282 6 18 6 370 2 690 2 284 2 261 2 328 2 
233 2 664 6 559 6 130 2 562 2 293 2 319 2 41 2 434 4 239 4 323 6 674 6 14 2 
103 12 626 2 502 8 697 10 143 10 36 8 392 6 256 4 412 8 508 2 278 2 41 6 197 2 680 2 481 4 480 4 463 16 313 6 245 10 514 26 534 4 615 8 319 6 386 2 471 16 499 29 592 2 63 16 426 10 165 10 
207 6 373 4 
418 2 
0 2 78 2 525 2 464 2 104 2 177 2 24 2 432 2 413 4 414 2 106 2 423 2 386 2 294 2 395 2 408 2 324 2 163 2 13 2 89 2 359 2 
331 6 103 22 625 2 301 4 143 16 502 6 697 6 391 6 392 4 216 2 277 2 123 2 41 4 279 4 357 8 463 32 48 4 512 6 313 4 633 4 245 16 514 48 221 6 82 4 133 2 534 2 615 18 319 4 471 32 406 6 499 54 592 2 63 32 426 16 33 2 116 4 350 6 117 4 165 16 
104 2 86 2 343 2 
128 2 684 2 246 2 457 2 176 2 401 2 687 2 100 2 262 22 225 2 73 2 280 2 437 2 75 10 
500 2 103 2 143 2 697 4 392 2 192 2 463 2 439 2 242 2 77 2 245 2 175 2 109 2 514 4 534 2 615 2 471 2 499 6 570 2 591 2 63 2 426 2 165 2 
103 4 245 4 302 2 68 2 221 6 143 4 514 12 279 4 471 8 481 2 499 16 463 8 63 8 426 4 633 4 350 6 165 4 
455 4 411 4 231 2 104 8 597 2 413 4 600 10 601 14 415 2 333 4 461 2 334 2 659 2 335 4 554 4 97 4 484 4 172 10 397 2 486 2 205 2 132 2 316 2 154 2 343 2 688 2 643 4 423 2 539 2 424 2 10 2 448 62 472 4 324 4 86 6 540 4 138 2 451 2 164 2 65 4 
652 2 577 2 308 2 418 2 440 2 126 2 642 2 387 2 668 2 114 2 
352 12 524 2 253 2 2 6 3 2 526 4 92 1 433 32 257 2 169 2 170 2 436 2 95 1 98 2 442 1 99 3 533 2 6 1 260 2 634 2 635 3 636 2 637 2 641 4 535 2 366 2 367 2 180 6 268 2 11 2 12 2 271 2 372 2 453 2 454 2 456 2 272 4 273 2 374 1 105 2 458 2 546 2 376 16 551 2 656 16 553 2 660 2 202 2 21 3 203 2 285 4 287 8 558 4 288 2 22 2 110 2 465 1 563 8 292 3 565 16 26 3 384 2 30 2 29 2 667 2 296 4 297 1 670 2 671 24 673 2 34 2 212 2 299 2 573 3 389 1 215 2 304 1 38 2 575 2 578 2 41 32 579 2 479 2 312 2 483 8 47 3 125 2 396 1 682 2 683 32 488 2 315 16 487 1 129 2 489 2 402 2 585 2 494 1 686 1 495 2 404 2 318 2 135 1 319 34 405 2 59 3 498 1 136 2 325 2 139 2 692 2 64 2 141 1 593 2 232 2 696 2 504 2 69 2 144 2 511 2 602 2 610 2 336 4 337 6 612 2 706 24 611 2 244 2 151 2 80 6 81 3 420 4 155 2 421 2 712 2 247 2 616 5 516 3 718 3 621 3 620 2 249 2 622 2 347 2 522 2 521 2 429 2 
137 2 319 2 
142 2 160 2 319 4 
469 2 
355 2 72 2 44 2 417 6 281 2 703 2 96 2 124 2 532 2 150 2 131 2 55 2 586 2 223 2 567 2 537 2 322 4 28 2 161 2 266 2 715 2 446 2 517 6 181 2 623 2 428 2 452 6 187 6 
51 1 49 2 194 2 326 2 
661 2 194 2 
677 2 90 2 596 2 23 2 166 2 290 4 507 2 547 2 713 2 40 2 262 6 365 2 528 2 377 2 530 4 435 2 327 2 173 2 
326 2 356 2 
655 2 104 2 91 2 270 2 
655 2 104 2 583 2 4 2 91 2 270 2 
552 2 399 2 104 2 270 2 256 2 194 2 
214 2 134 2 
606 2 104 2 270 2 256 2 
705 2 191 2 
267 2 220 2 
71 2 631 2 
250 2 393 2 
361 2 220 2 393 2 
220 2 555 2 393 2 
220 2 638 2 393 2 
220 2 678 2 393 2 
501 2 104 2 121 6 462 2 283 2 556 6 157 2 270 2 
520 2 572 2 
552 2 104 2 227 2 4 2 270 2 256 2 194 2 
552 2 478 2 194 2 
552 2 581 2 194 2 
491 2 326 2 572 2 
552 2 194 2 
148 2 572 2 
194 2 681 2 
368 2 326 2 572 2 
71 2 326 2 476 2 
326 2 649 2 393 2 
298 2 705 2 326 2 
220 2 326 2 550 2 
679 2 572 2 
194 2 584 2 
646 2 71 2 
496 2 393 2 
58 2 705 2 
220 2 185 2 
179 2 572 2 
220 2 441 2 
7 2 705 2 
94 2 393 2 
353 2 71 2 
368 2 358 2 326 2 572 2 
716 2 368 2 358 2 326 2 572 2 
16 2 326 2 572 2 
618 2 326 2 572 2 
340 2 43 2 717 2 398 2 
22 2 
352 8 524 2 2 2 526 2 433 4 93 2 257 2 629 2 98 2 533 6 6 2 260 2 634 2 636 2 637 2 535 2 641 4 263 2 180 6 268 2 12 2 272 4 273 2 105 2 458 2 546 2 203 2 285 2 558 4 111 2 384 2 29 2 568 2 667 2 296 4 672 2 34 2 388 2 389 2 119 2 41 26 483 2 125 2 50 2 485 2 683 6 488 2 315 6 314 2 495 2 319 26 320 2 224 2 136 2 139 2 64 2 593 2 67 2 698 4 504 2 234 4 144 2 610 2 336 2 337 2 244 2 151 2 80 4 709 2 79 2 155 4 712 2 620 2 521 2 
352 8 524 2 2 2 526 2 433 4 93 2 257 2 629 2 436 1 98 2 533 6 6 2 260 2 634 2 636 2 637 2 535 2 641 4 263 2 265 2 180 6 268 2 12 2 272 4 273 2 105 2 458 2 546 2 203 2 285 2 558 4 111 2 384 2 29 2 568 2 667 2 296 4 672 2 34 2 389 2 119 2 217 2 41 26 483 2 125 2 50 2 485 2 683 6 488 2 315 6 495 2 319 26 320 2 224 2 136 2 139 2 64 2 593 2 67 2 698 4 504 2 234 4 144 2 509 2 610 2 336 2 337 2 611 1 244 2 151 2 80 5 709 2 155 4 712 2 620 2 347 2 521 2 
675 2 1 2 213 2 37 2 258 2 628 4 41 6 310 2 218 8 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 10 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 6 18 6 198 2 200 4 108 8 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 6 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 213 2 37 2 258 2 41 6 628 4 310 2 218 8 438 4 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 407 2 449 2 690 4 12 2 371 10 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 6 18 8 198 2 200 4 108 8 284 2 707 2 338 2 339 2 663 2 204 4 558 2 708 2 665 2 712 2 468 2 85 2 422 2 569 2 209 8 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 70 4 37 2 506 2 193 2 57 4 258 2 628 2 645 2 569 2 310 2 701 2 209 2 282 2 690 2 32 2 338 2 
675 2 1 2 37 2 258 2 628 4 41 6 310 2 218 4 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 6 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 4 18 6 198 2 200 4 108 4 284 2 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 6 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 37 2 258 2 628 4 41 6 310 2 218 4 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 6 328 2 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 6 18 6 198 2 200 4 108 4 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 4 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 213 2 37 2 258 2 628 4 41 6 310 2 218 4 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 6 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 6 18 6 198 2 200 4 108 8 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 6 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 213 2 37 2 258 2 628 4 41 6 310 2 218 8 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 10 328 2 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 8 18 8 198 2 200 4 108 8 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 6 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
675 2 1 2 213 2 37 2 258 2 628 4 41 6 310 2 218 8 360 2 488 2 260 2 443 2 637 2 54 2 641 2 57 4 319 12 645 2 180 4 182 2 449 2 690 4 12 2 371 10 66 2 503 2 70 4 105 2 506 2 459 2 598 2 193 4 460 4 701 2 282 6 18 6 198 2 200 4 108 8 707 2 338 2 339 2 663 2 204 4 558 2 665 2 712 2 468 2 85 2 422 2 569 2 209 6 295 2 620 2 210 2 719 2 474 2 32 2 721 2 
430 2 352 4 252 7 1 2 354 2 524 2 2 2 526 2 433 2 257 2 258 2 628 4 630 7 436 2 259 2 98 2 360 2 362 4 174 4 533 6 363 4 260 2 634 2 443 2 637 2 444 2 445 1 640 2 535 2 641 4 101 2 9 2 645 2 180 6 647 2 182 2 12 2 450 2 189 4 272 4 543 2 458 10 105 2 459 2 375 1 276 2 193 4 195 8 460 4 657 4 282 8 18 12 107 8 198 2 200 8 108 2 203 2 285 2 286 4 663 2 204 6 558 4 665 4 206 2 560 2 111 2 382 2 27 2 466 2 469 4 384 2 468 2 470 1 568 2 29 2 569 2 209 4 295 2 210 2 296 4 475 2 32 2 211 2 115 2 672 2 118 4 675 2 300 2 37 2 305 1 41 22 42 1 310 2 394 2 483 2 125 2 50 2 683 8 315 6 488 2 54 2 317 1 222 2 495 2 57 4 319 40 409 4 62 2 136 2 690 4 137 4 691 2 328 4 64 2 142 4 594 4 332 4 503 2 698 4 70 4 506 2 144 2 598 2 147 2 701 2 416 1 240 2 610 2 336 2 419 4 337 2 611 2 707 2 338 2 339 2 151 2 80 6 152 1 153 2 710 4 712 2 156 2 346 1 345 2 714 4 85 2 422 2 159 4 620 2 719 2 88 2 521 2 721 2 427 2 
430 2 352 6 1 2 354 2 524 2 2 2 526 4 433 2 257 2 258 2 628 4 436 2 259 2 98 2 360 2 362 4 174 4 533 6 363 4 260 2 634 2 443 2 637 2 444 2 640 2 535 2 641 4 101 2 9 2 645 2 180 6 647 2 182 2 12 2 450 2 189 4 272 4 543 2 458 10 105 2 459 2 276 2 193 4 195 8 460 4 657 4 282 8 18 12 107 8 198 2 200 8 108 6 203 2 285 4 286 4 663 2 204 6 558 4 665 4 206 2 560 2 111 2 382 2 27 2 466 2 469 4 384 2 468 2 568 2 29 2 569 2 209 8 295 2 210 2 296 4 475 2 32 2 211 2 115 2 672 2 118 4 675 2 213 4 300 2 37 2 41 22 310 2 394 2 483 2 125 2 50 2 683 8 315 6 488 2 54 2 222 2 495 2 57 4 319 40 409 4 62 2 136 2 690 4 137 4 691 2 64 2 142 4 594 4 332 4 503 2 698 4 70 4 506 2 144 2 598 2 147 2 701 2 240 2 610 2 336 4 419 4 337 2 611 2 707 2 338 2 339 2 151 2 80 6 153 2 710 4 712 2 156 2 345 2 714 4 85 2 422 2 159 4 620 2 719 2 88 2 521 2 721 2 427 2 
430 2 352 6 1 2 354 2 524 2 2 2 526 4 433 2 257 2 258 2 628 4 436 2 259 2 98 2 360 2 362 4 174 4 533 6 363 4 634 2 260 2 443 2 637 2 444 2 640 2 535 2 641 4 101 2 9 2 645 2 180 6 647 2 182 2 12 2 450 2 371 4 189 4 272 4 543 2 458 10 105 2 459 2 276 2 193 4 195 8 460 4 657 4 282 8 18 12 107 8 198 2 200 8 108 6 203 2 285 4 286 4 663 2 204 6 558 4 665 4 206 2 560 2 111 2 382 2 27 2 466 2 469 4 468 2 384 2 568 2 29 2 569 2 209 8 295 2 210 2 296 4 475 2 32 2 211 2 115 2 672 2 118 4 675 2 213 4 300 2 37 2 41 22 310 2 394 2 483 2 218 4 125 2 50 2 683 8 315 6 488 2 54 2 222 2 495 2 57 4 319 40 409 4 62 2 136 2 690 4 137 4 691 2 64 2 142 4 594 4 332 4 503 2 698 4 70 4 506 2 144 2 598 2 147 2 701 2 240 2 610 2 336 4 419 4 337 2 611 2 707 2 338 2 339 2 151 2 80 6 153 2 710 4 712 2 156 2 345 2 714 4 85 2 422 2 159 4 620 2 719 2 88 2 521 2 721 2 427 2 
430 2 352 6 1 2 354 2 524 2 2 4 526 4 433 4 257 2 258 2 168 2 628 4 436 2 259 2 98 2 360 2 362 4 174 4 533 8 363 4 634 2 260 2 443 2 637 2 444 2 640 2 535 2 641 4 101 2 9 2 645 2 180 6 647 2 182 2 269 2 12 2 450 2 371 4 189 4 272 4 543 2 458 8 105 2 459 2 193 4 195 8 460 4 657 4 282 10 18 16 107 6 198 2 200 8 20 2 108 6 284 2 203 2 285 4 286 4 663 2 204 6 558 4 665 4 206 2 560 2 111 2 382 2 27 2 466 2 469 4 468 2 384 2 568 2 29 2 569 2 209 10 295 2 210 2 296 4 473 2 475 2 32 2 211 2 115 2 672 2 118 4 675 2 213 4 300 2 37 2 41 20 310 2 394 2 482 2 483 2 218 4 125 2 50 2 683 12 315 8 488 2 54 2 222 2 495 2 57 4 319 38 409 4 62 2 136 2 690 4 137 4 691 2 328 2 64 2 142 4 594 4 332 4 503 2 698 6 70 4 506 2 598 2 144 2 147 2 701 2 240 2 610 2 336 4 419 4 337 4 611 2 707 2 338 2 339 2 151 2 80 6 153 2 710 4 711 2 712 2 156 2 345 2 714 4 85 2 422 2 159 4 620 2 719 2 88 2 521 2 721 2 427 2 
675 2 213 2 1 2 70 2 459 2 506 2 598 2 460 2 628 4 701 2 282 6 18 4 198 2 200 2 218 4 108 6 360 2 663 2 204 2 665 2 54 2 57 2 319 4 468 2 422 2 645 2 569 2 209 6 210 2 719 2 182 2 690 4 371 4 32 2 721 2 
1 2 524 2 2 3 3 2 433 3 628 4 436 2 98 2 360 2 533 6 260 2 634 2 443 2 637 2 641 4 535 2 645 2 180 6 182 2 12 2 371 2 648 2 454 2 272 4 105 2 458 4 459 2 276 2 460 2 282 6 18 4 198 2 107 2 200 2 108 6 203 2 663 2 204 2 558 4 665 2 22 2 110 2 111 2 383 3 468 2 384 2 569 2 29 2 568 2 209 6 210 2 296 4 32 2 672 2 675 2 213 2 477 2 41 24 125 2 683 8 488 2 315 6 54 2 495 2 57 2 319 28 136 2 690 4 64 2 698 4 70 2 506 2 598 2 144 2 701 2 610 2 337 3 611 2 76 2 151 2 80 6 342 2 712 2 422 2 620 2 518 2 719 2 521 2 721 2 
198 2 158 2 360 2 
198 2 158 2 360 2 
352 4 524 2 526 4 433 2 258 2 257 4 628 4 436 2 360 6 533 2 260 2 634 2 637 2 535 2 641 4 178 2 263 4 645 2 180 6 447 4 449 2 12 2 371 6 272 4 190 2 274 2 105 2 458 4 193 4 460 2 282 12 18 16 107 2 198 4 201 4 200 4 378 2 379 2 108 6 284 4 203 2 285 4 286 2 204 4 558 4 665 4 111 6 382 2 564 2 466 2 467 2 384 2 29 2 568 2 569 2 209 12 295 2 210 2 296 4 475 2 571 2 211 2 672 2 118 2 675 4 676 2 213 4 37 2 39 2 41 16 218 4 125 2 683 2 488 2 315 2 685 2 490 2 495 2 57 2 319 24 136 2 228 2 690 4 328 4 64 2 329 2 70 2 144 2 598 2 146 2 704 2 610 2 336 4 611 2 707 2 339 4 151 2 80 6 712 2 158 2 617 2 85 2 620 2 521 2 
310 2 52 2 222 2 348 2 236 2 
352 4 524 2 526 4 433 4 258 2 257 4 628 4 436 2 360 6 533 2 260 2 634 2 637 2 535 2 641 4 178 2 263 4 645 2 180 6 447 4 449 2 102 2 12 2 371 6 272 4 190 4 274 2 105 2 458 2 193 4 460 2 196 2 282 12 18 16 198 4 201 4 200 4 378 2 379 2 108 6 284 4 203 2 285 4 286 2 204 4 558 4 665 4 111 6 382 2 564 2 466 2 384 2 29 2 568 2 569 2 209 12 295 2 210 2 296 4 475 2 474 2 672 2 118 2 675 4 676 2 213 4 574 2 37 2 39 2 41 16 46 2 218 4 125 2 683 2 488 2 315 2 685 2 490 2 495 2 57 2 319 24 136 2 228 2 690 4 328 4 64 2 329 2 70 2 144 2 598 2 610 2 336 4 611 2 707 2 339 4 151 2 80 6 712 2 158 2 617 2 85 4 620 2 87 2 521 2 
352 4 524 2 526 4 255 2 433 2 258 2 257 4 529 2 628 4 436 2 360 6 533 2 260 2 634 2 637 2 535 2 641 4 178 2 263 4 645 2 180 6 447 4 449 2 12 2 371 6 272 4 190 2 274 2 105 2 458 4 193 4 460 2 653 2 282 12 18 16 107 2 198 4 201 4 200 4 378 2 379 2 108 6 284 4 203 2 285 4 286 2 204 4 558 4 665 4 289 2 111 6 291 2 382 2 564 2 466 2 384 2 29 2 568 2 569 2 209 12 295 2 210 2 296 4 475 2 474 2 211 2 672 2 118 2 675 4 676 2 213 4 37 2 39 2 41 16 218 4 125 2 683 2 488 2 315 2 685 2 490 2 495 2 57 2 319 24 136 2 228 2 690 4 328 4 64 2 329 2 70 2 144 2 598 2 610 2 336 4 611 2 707 2 339 4 151 2 80 6 712 2 158 2 617 2 85 4 620 2 521 2 
430 2 524 2 2 2 167 2 527 2 433 2 436 1 259 2 633 2 98 2 533 6 260 2 634 2 637 2 364 2 641 4 535 2 264 2 180 6 12 2 188 2 15 2 272 2 105 2 458 2 543 2 17 2 658 2 463 2 662 2 557 2 19 2 203 2 558 4 206 2 111 2 208 2 385 2 29 2 568 2 471 2 296 2 390 4 122 2 41 20 309 2 45 1 394 2 311 2 125 2 683 8 488 2 315 6 221 4 495 2 319 26 321 2 60 2 499 6 136 2 590 2 63 2 693 2 694 1 143 2 698 4 145 2 603 6 607 2 608 2 337 2 611 1 245 2 151 2 80 3 514 4 153 2 83 2 712 2 248 2 619 2 620 2 425 2 521 2 162 2 426 2 624 2 722 2 165 2 723 2 
230 2 2 3 595 2 698 2 120 2 545 2 303 4 254 2 599 1 433 3 41 2 605 2 171 3 531 2 337 3 98 2 50 6 683 2 315 2 533 2 639 2 561 2 319 2 669 2 720 2 
230 2 2 2 595 2 698 2 120 2 545 2 303 4 254 2 433 2 41 2 605 2 171 2 531 2 337 2 98 2 50 6 683 2 315 2 533 2 639 2 561 2 319 2 669 2 720 2 
230 2 2 2 595 2 698 2 120 2 545 2 303 4 254 2 433 2 41 2 605 2 171 2 531 2 337 2 98 2 50 6 683 2 315 2 533 2 639 2 561 2 319 2 669 2 720 2 
431 2 143 2 502 4 275 4 5 4 548 2 433 3 654 2 41 4 580 2 656 2 74 2 463 2 632 2 98 2 337 3 313 2 127 2 683 2 245 2 219 3 341 2 381 2 515 4 514 4 492 2 561 2 666 6 344 4 565 2 319 10 497 4 471 2 499 6 63 2 426 2 251 3 229 2 165 2 330 3 
103 2 431 2 143 2 502 4 275 4 5 4 548 2 433 2 654 2 41 4 580 2 656 2 74 2 463 2 632 2 98 2 337 2 313 2 127 2 683 2 245 2 219 2 341 2 381 2 515 4 514 4 492 2 561 2 666 6 344 4 615 2 565 2 319 10 497 4 471 2 499 4 592 2 63 2 426 2 251 2 229 2 165 2 330 2 
103 2 431 2 143 2 502 4 275 4 5 4 548 2 433 2 654 2 41 4 580 2 656 2 74 2 463 2 632 2 98 2 337 2 313 2 127 2 683 2 245 2 219 2 341 2 381 2 515 4 514 4 492 2 561 2 666 6 344 4 615 2 565 2 319 10 497 4 471 2 499 4 592 2 63 2 426 2 251 2 229 2 165 2 330 2 
103 2 431 2 143 2 502 4 275 4 5 4 548 2 433 2 654 2 41 4 580 2 656 2 74 2 463 2 632 2 98 2 337 2 313 2 127 2 683 2 245 2 219 2 341 2 381 2 515 4 514 4 492 2 561 2 666 6 344 4 615 2 565 2 319 10 497 4 471 2 499 4 592 2 63 2 426 2 251 2 229 2 165 2 330 2 
103 4 431 2 143 2 502 4 275 4 5 4 548 2 433 2 654 2 41 4 580 2 656 2 74 2 463 2 632 2 98 2 337 2 313 2 127 2 683 2 245 2 219 2 341 2 381 2 515 4 514 4 492 2 561 2 666 6 344 4 615 4 565 2 319 10 497 4 471 2 499 4 592 4 63 2 426 2 251 2 229 2 165 2 330 2 
35 2 31 2 544 2 699 2 549 2 588 2 320 2 
513 2 650 2 544 2 410 2 349 2 566 2 
651 2 627 2 597 1 576 2 307 2 41 8 604 2 702 2 657 2 582 2 488 2 53 2 493 2 112 1 84 2 587 2 614 2 319 10 644 2 539 1 589 2 61 1 113 2 523 2 140 2 186 1 
103 4 542 2 143 6 502 4 41 6 238 2 357 2 607 2 463 6 633 2 313 2 613 2 245 6 400 2 221 4 514 12 82 2 615 2 319 6 248 2 471 6 406 4 60 2 369 2 499 16 519 2 592 2 63 6 426 6 165 6 
380 3 243 2 695 2 515 2 505 2 275 2 25 2 510 2 226 2 497 2 199 2 241 2 351 2 
380 6 243 2 695 2 515 2 505 2 275 2 25 2 56 2 319 1 510 2 8 2 41 1 226 2 497 2 199 2 184 1 241 2 351 4 
380 6 243 4 695 2 515 2 505 2 275 2 25 2 56 2 510 2 8 2 226 2 497 2 199 4 241 4 351 4 
380 10 243 8 695 2 515 2 505 2 275 2 25 2 56 8 319 1 510 2 8 6 41 1 226 2 497 2 199 8 184 1 241 8 351 4 
524 2 41 4 436 2 535 2 319 4 689 2 183 2 272 2 700 2 235 1 609 1 149 2 611 2 203 2 80 4 296 2 
41 4 272 2 524 2 80 2 296 2 689 2 700 2 183 2 535 2 149 2 203 2 319 4 
41 4 272 2 524 2 80 2 296 2 689 2 700 2 183 2 535 2 149 2 203 2 319 4 
524 2 272 2 80 4 700 2 535 2 319 4 41 4 296 2 436 2 689 2 183 2 149 2 611 2 203 2 
306 2 
