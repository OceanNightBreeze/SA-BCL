#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NullPointerException (12,320,492,551,673) (12,320,492,551,673) (12,320,492,551,673) (12,320,492,551,673) (12,320,492,551,673) 
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.ArrayIndexOutOfBoundsException 614 426 691 454 206 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException 657 
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 168 106 503 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (367,457) (367,457) 57 249 131 
daikon.test.VarInfoNameTest:testSubscript()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR utilMDE.Assert$AssertionException (367,457) (367,457) 57 249 131 
daikon.test.VarInfoNameTest:testJML()V PASSED
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.Quant:sameLength([I[I)Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.Quant:lexEqual([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:modulus([I)[I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.VarInfoName.Elements:java_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:intern([I)[I
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.inv.Invariant:prob_and(DD)D
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Intern:internSubsequence([JII)[J
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltwiseGT([I)Z
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.diff.Node:Node()V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object; | RETURN | 20497 | return null
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
daikon.Quant:setDiff([I[I)[I
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.Subscript:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
daikon.VarInfo:name()Ljava.lang.String;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.Quant:gte(II)Z
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:lexLTE([I[I)Z
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE:join([Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.VarInfoName.Subscript:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakHasherMap:size()I
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.Quant:memberOf(S[S)Z
daikon.Quant:setEqual([I[I)Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.simplify.LemmaStack:noticeInt(J)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.unary.sequence.EltLowerBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.Quant:eltwiseEqual([I)Z
utilMDE.MathMDE:missing_numbers([I)[I
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsIntegral()Z
daikon.ValueTuple:isMissingFlow(I)Z
daikon.Quant:eq(FF)Z
daikon.Quant:eltwiseGTE([I)Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:isReverse([I[I)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:slice([III)[I
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.OrderedPairIterator:hasNext()Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:passes()Z
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.Add:amount()Ljava.lang.String;
utilMDE.ArraysMDE:fn_compose([I[I)[I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:readChar()C
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V | ASSIGN | 491 | = null
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:size()I
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.VarInfoName.Simple:ioa_name_impl()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.VarInfoName:dbc_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.Quant:eq(II)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:subsetOf([F[F)Z
daikon.Quant:eq(DD)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:sum([[D)D
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.MathMDE:gcd(II)I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.diff.RootNode:RootNode()V
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:concat([I[I)[I
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.ArraysMDE:sum([D)D
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:mod_positive(II)I
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Quant:lexGT([I[I)Z
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.ArraysMDE:sum([I)I
jtb.JavaCharStream:FillBuff()V
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.Quant:memberOf(F[F)Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.MathMDE:mod_positive(JJ)J | CONDITION | 13056 | if (x) -> if (!x)
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.UtilMDE:joinLines([Ljava.lang.Object;)Ljava.lang.String;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfo:isPointer()Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.Quant:noDups([I)Z
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.Intern:internSubsequence([III)[I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:eltsGtIndex([I)Z
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
daikon.Quant:intersection([I[I)[I
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.ArraysMDE:min([I)I
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.Quant:lexLT([I[I)Z
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.ValueTuple:isMissing(I)Z
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn; | ASSIGN | 107170 | = null
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.Positive:enabled()Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.Quant:eltsGT([II)Z
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:hashCode()I
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.Intern:intern([D)[D
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:BeginToken()C
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.diff.Node:add(Ljava.lang.Object;)V
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsFloat()Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.MathMDE:sign(I)I
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarInfoName.Simple:java_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:memberOf(F[D)Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.Quant:lt(II)Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:eltwiseLT([I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:pairwiseLT([I[I)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:esc_quantify(Z[Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.PptSlice1:arity()I
daikon.inv.unary.sequence.EltLowerBound:format_esc()Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.Intern:numIntArrays()I
utilMDE.ArraysMDE:indexOf([I[I)I
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
jtb.JavaParser:jj_ntk()I
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.Assert:assertTrue(Z)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:getDiffString()Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.Debug:logOn()Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.VarInfo:new_ppt()V
utilMDE.OrderedPairIterator:setnext2()V
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
jtb.JavaCharStream:ReadByte()C
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.Invariants:Invariants()V
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.Quant:union([I[I)[I
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.ProglangType:isPseudoArray()Z
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:subsetOf([D[D)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.ProglangType:isArray()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.VarInfoName.ElementsFinder:inPre()Z
daikon.VarInfo:relate_var()V
daikon.inv.ValueSet:ValueSet(I)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice; | RETURN | 38994 | return null
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.ModBitTracker:split(I)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.ModBitTracker:num_vars()I
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.LimitedSizeIntSet:size()I
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.Quant:subsetOf([I[I)Z
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V | ASSIGN | 10356 | = null
daikon.Quant:lte(II)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice2:arity()I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:subsetOf([B[I)Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.PptSlice0:initInvariantsSeen()V
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:ioaFormatVar(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.FuzzyFloat:eq(DD)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.MathMDE:pow(II)I
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.ArraysMDE:element_range([I)I
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.ProglangType:dimensions()I
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:subsetOf([F[D)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.MathMDE:gcd_differences([I)I
daikon.inv.unary.scalar.NonModulus:updateResults()V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.ProglangType:isFloat()Z
utilMDE.Intern:intern([J)[J
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.VarInfo:ioa_name()Ljava.lang.String;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.Invariant:justified()Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Add:name_impl()Ljava.lang.String;
daikon.Quant:eq(JJ)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | CONSTANT | 51514 | 3 -> 0
daikon.Quant:subsetOf([D[F)Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:ne(II)Z
daikon.VarInfo:esc_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
utilMDE.MathMDE:negate(I)I
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Ppt:Ppt()V
daikon.Quant:pairwiseLTE([I[I)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant:logOn()Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.VarInfoName.Simple:dbc_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.InvMap:InvMap()V
daikon.Quant:pairwiseEqual([I[I)Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarInfoName:java_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonModulus:enabled()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.MathMDE:gcd([I)I
daikon.VarInfoName:ioa_name()Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.VarInfoName:name()Ljava.lang.String;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.Quant:gt(II)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.ProglangType:isPointerFileRep()Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.VarInfoName.Add:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([II)I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
daikon.PptSlice0:arity()I
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
daikon.ProglangType:baseIsScalar()Z
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:memberOf(J[J)Z
jtb.JavaCharStream:backup(I)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.Quant:eltsEqual([II)Z
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.ProglangType:isIntegral()Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.Quant:subsetOf([J[J)Z
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.ModBitTracker:num_sets()I
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:eltsGTE([II)Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.ProglangType:isScalar()Z
daikon.inv.OutputFormat:toString()Ljava.lang.String;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.ModBitTracker:num_samples()I
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
daikon.Quant:eltsLT([II)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.Quant:eltsNotEqual([II)Z
daikon.Quant:memberOf(I[I)Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.test.FormatTestCase:getDiffString()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf([S[S)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:eltsLTE([II)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:subarray([JII)[J
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:gcd(JJ)J
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.Invariant:prob_or(DD)D
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.ArraysMDE:max([I)I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
343 2 367 2 648 2 424 2 457 2 387 2 427 2 481 2 534 4 
44 6 166 2 563 2 582 2 442 2 141 2 650 2 473 6 415 2 336 2 134 6 
367 2 113 4 457 2 587 6 34 2 410 4 326 2 519 6 41 2 136 6 294 2 396 2 122 6 
367 6 298 2 646 4 553 10 493 10 626 4 573 10 602 6 812 2 13 10 202 26 733 16 560 30 173 16 99 12 796 8 304 8 610 16 663 2 287 4 46 2 457 6 21 6 213 2 335 2 133 10 28 4 107 2 746 8 365 8 
92 4 322 6 
271 2 
112 2 553 2 493 2 5 2 573 2 791 2 118 2 13 4 450 2 202 4 733 2 560 6 173 2 99 2 304 2 610 2 287 2 227 2 72 2 21 2 133 2 593 2 364 2 
366 4 610 8 176 4 724 6 553 4 493 4 801 2 142 6 573 4 822 2 133 4 202 12 733 8 28 2 173 8 560 14 99 5 
597 4 242 4 344 4 599 2 217 2 443 2 278 14 318 2 469 2 409 2 444 2 36 4 348 4 37 6 445 4 89 4 810 2 60 4 730 2 685 2 531 4 170 62 14 2 477 4 533 2 149 2 254 10 630 2 581 2 485 2 584 4 185 4 758 2 459 10 543 2 545 2 699 8 766 2 568 4 722 2 
39 2 65 2 737 2 102 2 667 2 717 2 718 2 701 2 769 2 271 2 
367 4 705 4 369 2 275 2 498 2 59 2 451 2 795 2 282 2 757 2 182 2 457 4 803 2 760 2 233 2 390 2 338 2 398 4 82 2 298 2 402 2 140 2 808 2 528 2 349 2 684 2 477 4 734 2 481 2 100 2 45 2 151 2 584 2 540 2 741 4 542 2 545 2 823 2 699 2 743 2 51 2 267 2 316 2 108 2 
54 4 366 4 367 4 2 4 724 6 553 16 493 16 245 4 142 6 573 16 602 4 655 6 91 2 13 6 731 2 202 48 733 32 381 6 173 32 816 8 560 54 99 22 224 6 610 32 304 16 176 4 287 2 357 2 457 4 21 4 288 2 212 2 695 6 213 2 388 4 133 16 235 4 365 6 
758 2 699 2 37 2 
210 2 540 2 279 2 291 2 448 2 577 22 605 2 266 2 594 2 237 2 776 2 817 2 480 2 521 10 
549 2 551 2 3 1 648 2 651 4 320 2 325 2 556 2 327 4 12 2 559 2 15 8 333 2 665 2 457 26 129 4 231 1 25 6 764 2 673 2 466 2 139 1 33 2 346 1 350 2 472 2 351 2 478 4 580 1 777 2 479 1 690 1 257 6 486 1 591 2 155 2 363 2 700 2 269 1 162 2 367 28 492 2 600 5 499 1 607 1 712 2 175 2 382 4 383 1 385 2 386 2 510 1 73 2 184 2 392 1 187 1 395 2 397 1 81 2 403 6 525 2 526 2 529 1 198 2 732 1 97 2 420 2 736 2 306 2 635 2 429 2 636 6 639 1 433 1 
818 2 
367 2 27 2 
367 4 40 2 121 2 
164 2 31 2 194 8 726 2 475 8 578 2 248 2 794 2 283 2 452 8 453 2 454 2 691 2 206 2 614 2 309 2 183 2 426 2 264 2 132 2 744 2 394 2 
677 1 7 2 220 2 80 2 
296 2 220 2 
787 2 699 2 95 2 6 2 626 2 220 2 341 2 
787 2 220 2 128 2 
787 2 546 2 220 2 
628 2 161 2 7 2 
787 2 220 2 
628 2 728 2 
220 2 786 2 
628 2 7 2 675 2 
86 2 7 2 428 2 
694 2 7 2 637 2 
552 2 7 2 174 2 
199 2 418 2 7 2 
628 2 148 2 
76 2 220 2 
425 2 86 2 
694 2 189 2 
552 2 50 2 
158 2 418 2 
628 2 642 2 
418 2 711 2 
552 2 339 2 
234 2 694 2 
86 2 137 2 
628 2 11 2 7 2 675 2 
628 2 11 2 7 2 727 2 675 2 
628 2 7 2 680 2 
628 2 171 2 7 2 
66 2 656 2 517 2 16 2 
274 2 699 2 6 2 263 2 
274 2 699 2 95 2 6 2 495 2 263 2 
787 2 699 2 63 2 6 2 626 2 220 2 
684 2 329 2 
163 2 699 2 6 2 626 2 
552 2 378 2 
762 2 418 2 
86 2 784 2 
806 2 694 2 
356 2 418 2 694 2 
418 2 103 2 694 2 
280 2 418 2 694 2 
418 2 250 2 694 2 
572 6 807 2 6 2 300 2 653 6 64 2 699 2 761 2 
628 2 359 2 
621 2 504 2 725 2 664 2 615 2 739 4 127 2 290 2 229 2 230 4 413 2 577 6 558 2 94 2 157 2 793 2 595 2 609 2 
7 2 380 2 
700 2 
644 2 549 2 0 2 440 2 648 2 651 4 325 2 222 2 327 4 658 2 559 2 15 4 752 2 120 2 662 2 561 2 333 2 665 2 457 26 228 2 25 2 764 2 765 2 135 2 676 2 772 2 466 2 681 2 350 2 472 2 574 4 247 2 688 8 252 2 478 4 253 2 777 6 257 4 487 4 591 2 155 6 698 2 363 2 160 2 367 26 792 4 500 2 607 2 712 2 175 2 797 2 800 2 613 2 382 4 802 2 184 2 75 8 620 2 399 2 403 2 408 2 525 2 526 2 198 2 811 2 732 2 97 2 420 2 98 2 303 1 101 2 736 6 306 2 635 2 105 1 636 6 638 4 215 2 
549 2 0 2 440 2 648 2 651 4 325 2 222 2 557 2 327 4 658 2 559 2 15 4 752 2 120 2 662 2 561 2 333 2 665 2 457 26 228 2 25 2 764 2 765 2 135 2 676 2 772 2 466 2 681 2 350 2 472 2 574 4 351 1 247 2 688 8 252 2 478 4 253 2 777 6 482 2 257 5 487 2 591 2 155 6 363 2 160 2 162 1 367 26 603 2 792 4 500 2 607 2 712 2 175 2 797 2 800 2 613 2 382 4 802 2 184 2 75 8 620 2 399 2 403 2 406 2 408 2 525 2 526 2 198 2 811 2 732 2 97 2 420 2 98 2 736 6 306 2 635 2 636 6 638 4 215 2 
437 2 
750 2 167 2 
583 2 150 2 144 2 
583 2 150 2 144 2 
643 2 549 2 317 2 645 2 554 2 440 6 4 6 648 2 651 4 319 4 9 2 654 2 325 2 222 4 657 2 327 4 559 2 15 2 752 4 330 2 563 4 18 2 333 2 665 2 126 6 457 16 336 4 764 2 134 16 770 2 674 4 238 2 466 4 32 2 243 2 467 2 141 4 144 2 350 2 472 2 774 4 473 12 247 4 351 2 146 2 352 2 688 4 252 4 478 4 150 4 777 2 257 6 44 12 484 2 259 2 582 4 487 2 261 2 583 6 262 4 693 2 591 2 155 2 363 2 52 2 270 2 160 2 162 2 165 2 367 24 166 4 708 4 61 2 606 2 501 4 712 2 175 2 177 4 382 4 178 2 512 2 184 2 75 4 616 2 389 2 514 2 401 4 523 2 408 2 525 2 526 2 88 2 198 2 811 4 415 4 419 2 97 2 420 2 421 2 736 2 306 2 207 2 635 2 636 6 432 2 314 2 
238 2 535 2 165 2 645 2 367 4 466 2 207 2 507 2 788 2 457 2 458 2 38 2 412 2 750 2 606 2 712 2 421 2 
549 2 317 2 554 2 440 6 4 6 648 2 319 4 651 4 9 2 654 2 325 2 222 4 657 2 327 4 559 2 15 4 752 4 330 2 563 4 18 4 333 2 665 2 126 6 457 16 336 4 764 2 134 16 768 2 770 2 674 4 238 2 466 2 32 2 243 2 467 2 141 4 144 2 350 2 472 2 774 2 473 12 247 4 351 2 146 2 352 2 688 4 252 4 478 4 150 4 777 2 257 6 44 12 484 2 259 2 582 4 487 1 261 2 583 6 262 4 693 2 591 2 155 2 363 2 489 2 52 2 160 2 162 2 165 2 367 24 490 2 166 4 708 4 375 2 61 4 501 4 712 2 175 2 177 4 382 4 512 2 184 2 75 4 616 2 514 2 401 4 523 2 197 2 408 2 525 2 526 2 88 2 198 2 811 4 415 4 97 2 420 2 421 2 736 2 306 2 207 2 539 2 635 2 636 6 432 2 314 2 
549 2 317 2 645 2 554 2 440 6 4 6 648 2 651 4 319 4 9 2 654 2 325 2 222 4 657 2 327 4 559 2 15 2 752 4 754 2 330 2 563 4 18 4 333 2 665 2 126 6 457 16 336 4 764 2 134 16 672 2 770 2 674 4 238 2 466 4 32 2 243 2 467 2 141 4 144 2 350 2 472 2 774 4 473 12 476 2 247 4 351 2 146 2 352 2 688 4 252 4 478 4 150 4 777 2 257 6 44 12 484 2 259 2 582 4 487 1 261 2 583 6 262 4 693 2 591 2 155 2 363 2 52 2 596 2 160 2 162 2 165 2 367 24 166 4 708 4 375 2 61 2 606 2 501 4 712 2 175 2 177 4 382 4 512 2 184 2 75 4 616 2 514 2 401 4 523 2 408 2 525 2 526 2 88 2 198 2 811 4 415 4 419 2 97 2 420 2 421 2 736 2 306 2 207 2 635 2 636 6 432 2 314 2 315 2 
0 2 438 2 1 2 647 2 440 2 441 2 648 4 218 12 649 2 651 10 219 10 8 2 445 2 449 2 658 2 659 2 15 21 661 2 662 2 455 2 17 3 665 2 456 2 19 2 666 2 457 42 228 46 23 2 25 18 26 2 668 2 670 2 669 10 236 4 461 2 463 14 464 2 240 2 465 2 466 2 244 2 679 2 681 2 678 16 470 2 471 2 472 2 682 3 683 2 686 14 687 2 251 16 688 25 478 4 483 2 43 4 257 20 258 2 692 2 48 2 265 2 696 6 697 4 49 2 702 2 273 2 56 1 707 1 706 2 276 2 493 4 277 2 496 12 58 16 60 2 710 4 500 2 503 2 712 2 285 2 67 2 506 2 69 2 714 4 509 2 716 2 511 4 513 4 288 2 75 24 515 2 77 2 518 4 78 2 721 2 293 6 79 2 295 3 84 4 525 2 526 4 527 2 90 2 301 2 93 16 531 2 732 2 302 2 733 8 97 2 96 2 99 6 98 20 304 4 736 14 306 2 307 2 537 2 738 2 740 3 104 2 311 1 106 2 745 6 549 6 109 3 550 10 110 10 553 4 114 4 321 4 115 2 748 12 324 1 325 2 327 4 328 2 559 2 752 4 560 16 123 2 331 4 562 2 333 2 124 4 130 10 566 2 133 4 763 2 764 2 135 2 337 2 767 2 567 2 568 2 569 2 138 2 570 2 773 16 571 2 344 2 345 2 142 6 573 4 143 2 350 2 575 3 351 6 576 2 145 2 775 2 353 2 354 2 579 2 355 1 777 14 778 6 357 4 358 2 780 2 781 4 153 4 588 1 590 2 591 6 154 2 155 28 362 4 363 2 160 2 365 6 162 6 366 4 367 52 598 4 370 2 372 2 790 2 601 4 168 2 602 4 373 2 604 14 792 12 376 2 607 2 172 4 173 8 175 2 610 8 800 2 382 12 180 1 179 2 184 2 186 2 619 2 393 2 190 2 399 14 400 2 193 2 404 4 196 12 623 2 403 21 407 4 624 2 625 2 627 2 198 2 411 2 414 2 417 2 202 12 814 2 629 2 420 4 204 2 631 2 422 2 205 2 423 24 634 2 819 12 209 2 211 2 635 2 820 3 636 6 430 2 431 2 821 2 641 2 215 2 434 12 216 2 
550 2 110 4 367 2 403 2 195 2 627 2 682 2 792 2 576 2 500 2 15 2 579 2 777 2 422 2 736 2 211 2 457 2 228 6 23 2 155 2 25 2 669 2 569 2 190 2 
550 2 110 4 367 2 403 2 195 2 627 2 682 2 792 2 576 2 500 2 15 2 579 2 777 2 422 2 736 2 211 2 457 2 228 6 23 2 155 2 25 2 669 2 569 2 190 2 
550 2 110 4 367 2 403 2 195 2 627 2 682 2 792 2 576 2 500 2 15 2 579 2 777 2 422 2 736 2 211 2 457 2 228 6 23 2 155 2 25 2 669 2 569 2 190 2 
109 3 367 10 553 2 403 3 493 2 789 4 347 4 573 2 602 2 500 2 416 2 201 2 202 4 502 2 815 4 15 3 733 2 753 2 560 4 173 2 610 2 331 2 226 2 714 2 211 2 457 4 152 4 565 2 334 2 513 2 589 4 696 6 155 2 133 2 268 2 785 3 548 2 365 4 295 3 29 2 
109 2 367 10 553 2 493 2 789 4 602 2 500 2 502 2 15 2 173 2 560 4 753 2 610 2 331 2 226 2 714 2 457 4 565 2 513 2 334 2 133 2 29 2 295 2 403 2 573 2 347 4 416 2 202 4 201 2 733 2 815 4 99 2 304 2 211 2 152 4 589 4 696 6 213 2 155 2 268 2 785 2 548 2 365 4 
109 2 367 10 553 2 493 2 789 4 602 2 500 2 502 2 15 2 173 2 560 4 753 2 610 2 331 2 226 2 714 2 457 4 565 2 513 2 334 2 133 2 29 2 295 2 403 2 573 2 347 4 416 2 202 4 201 2 733 2 815 4 99 2 304 2 211 2 152 4 589 4 696 6 213 2 155 2 268 2 785 2 548 2 365 4 
109 2 367 10 553 2 493 2 789 4 602 2 500 2 502 2 15 2 173 2 560 4 753 2 610 2 331 2 226 2 714 2 457 4 565 2 513 2 334 2 133 2 29 2 295 2 403 2 573 2 347 4 416 2 202 4 201 2 733 2 815 4 99 2 304 2 211 2 152 4 589 4 696 6 213 2 155 2 268 2 785 2 548 2 365 4 
109 2 367 10 553 2 493 2 789 4 602 2 500 2 502 2 15 2 173 2 560 4 753 2 610 2 331 2 226 2 714 2 457 4 565 2 513 2 334 2 133 2 29 2 295 2 403 2 573 2 347 4 416 2 202 4 201 2 733 2 815 4 99 4 304 4 211 2 152 4 589 4 696 6 213 4 155 2 268 2 785 2 548 2 365 4 
474 2 439 2 68 2 814 2 652 2 756 2 
723 2 241 2 592 2 520 2 809 2 756 2 399 2 
771 2 367 10 522 2 747 2 85 2 530 2 749 1 810 1 446 2 377 2 532 2 42 2 255 1 612 1 581 1 306 2 308 2 457 8 782 2 214 2 360 2 617 2 156 2 544 2 805 2 436 2 
366 2 83 2 367 6 706 2 553 6 493 6 142 4 573 6 602 2 655 4 90 2 91 1 202 12 733 6 816 2 560 15 173 6 99 5 610 6 304 3 100 2 124 2 384 2 457 6 541 2 213 2 542 2 133 6 235 2 188 2 365 4 
798 2 225 2 508 2 310 2 347 2 221 2 589 2 119 3 147 2 815 2 689 2 53 2 191 2 
798 4 367 1 225 2 508 2 457 1 310 2 347 2 221 2 589 2 292 1 119 6 147 2 203 2 815 2 689 2 671 2 53 2 191 2 
798 4 225 4 508 2 310 2 347 2 221 4 589 2 119 6 147 4 203 2 815 2 689 2 671 2 53 2 191 2 
798 4 367 1 225 8 508 2 457 1 310 2 347 2 221 8 589 2 292 1 119 10 147 8 203 6 815 2 689 2 671 8 53 2 191 2 
549 4 651 10 8 2 324 2 449 2 751 2 660 2 223 2 456 2 20 2 457 30 131 2 337 2 30 2 240 2 465 4 679 2 351 2 775 2 249 2 688 16 687 2 256 2 257 20 258 2 779 2 487 1 692 2 781 6 47 2 153 2 590 2 591 4 702 2 272 2 162 2 367 32 368 2 372 2 497 2 57 2 709 1 374 4 169 2 379 2 281 4 382 12 67 2 715 2 70 2 804 2 618 4 518 6 719 2 720 3 400 2 297 2 192 2 404 6 524 2 625 2 200 2 735 2 420 2 311 4 
162 8 549 2 272 6 55 2 367 28 56 1 707 5 371 2 651 14 8 2 323 2 10 4 57 2 58 10 447 4 751 2 223 6 755 2 284 2 611 2 713 4 382 14 332 4 180 1 181 6 564 2 20 2 457 26 289 2 804 2 131 2 391 2 719 6 720 2 773 2 622 4 524 2 35 2 351 8 813 2 249 2 688 14 355 1 420 2 735 2 257 36 536 2 258 2 260 4 487 2 538 4 781 8 819 10 586 4 311 2 591 2 488 2 640 2 159 2 313 2 547 2 702 2 
162 5 549 6 367 26 56 1 707 1 371 2 372 2 651 8 8 2 57 2 324 2 58 2 449 2 382 10 67 2 180 1 456 2 20 2 457 24 131 2 518 4 337 2 30 2 400 2 240 2 773 2 465 2 404 4 679 2 625 2 351 5 775 2 249 2 688 4 687 2 355 1 420 4 257 17 258 2 779 2 692 2 634 2 819 2 781 4 153 4 590 2 311 2 591 6 159 2 702 2 
162 4 549 2 272 4 704 2 55 2 491 2 367 46 111 2 555 2 494 2 651 20 8 2 10 2 116 2 57 2 324 1 117 2 751 2 62 2 379 2 608 2 223 4 755 2 799 2 611 2 286 2 713 2 382 20 332 2 125 2 715 2 564 2 181 6 20 2 71 2 457 44 22 2 289 2 74 2 131 2 804 2 759 2 24 4 232 2 516 2 460 2 719 4 720 2 462 2 721 4 340 2 342 2 239 2 622 2 192 2 299 2 196 6 524 2 405 2 468 2 87 2 246 2 729 2 351 4 249 2 688 37 735 2 420 2 305 2 256 2 257 46 258 2 260 2 632 2 487 2 208 2 633 2 538 2 781 6 47 2 585 2 311 3 312 2 591 2 361 4 313 2 742 2 547 2 783 4 435 2 702 2 703 2 
505 2 
