#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 720 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V ERROR utilMDE.Assert$AssertionException (227,231) 313 
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 268 731 184 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 12 477 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 400 90 482 34 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 90 482 34 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 90 482 34 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 90 482 34 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName:hashCode()I
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | RETURN | 1469 | return null
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.ArraysMDE:element_range([I)I
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
jtb.JavaCharStream:readChar()C
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.Quant:memberOf(I[I)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 9730 | = null
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.OrderedPairIterator:hasNext()Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:esc_name()Ljava.lang.String;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.ArraysMDE:isSubset([D[D)Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.Quant:lexLT([I[I)Z
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Quant:eltsGteIndex([I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.NonModulus:enabled()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.Quant:memberOf(F[F)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.Intern:internSubsequence([JII)[J
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.Quant:subsetOf([I[I)Z
daikon.PptName:isEnterPoint()Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.ValueTuple:size()I
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.MathMDE:gcd(II)I
daikon.Quant:eltwiseLT([I)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:eltsGT([II)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:isWorthPrinting()Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.diff.Node:Node(LutilMDE.Pair;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.Quant:eq(II)Z
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
jtb.JavaCharStream:ReadByte()C
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.Quant:ne(II)Z
daikon.Quant:subsetOf([F[F)Z
daikon.Quant:lexGTE([I[I)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.Ppt:Ppt()V
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.Quant:memberOf(S[S)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.test.InvariantFormatTester:execute()Z
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
daikon.Quant:lexEqual([I[I)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.Quant:isReverse([I[I)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.Assert:assertTrue(Z)V
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
jtb.JavaParser:jj_ntk()I
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.Token:newToken(I)Ljtb.Token;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.Invariant:justified()Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.Intern:numIntArrays()I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.PptSlice2:arity()I
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
utilMDE.MathMDE:negate(I)I
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.WeakHasherMap:size()I
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.Quant:memberOf(F[D)Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
jtb.JavaCharStream:getEndLine()I
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:subsetOf([F[D)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.LimitedSizeIntSet:size()I
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.ProglangType:isScalar()Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.Invariant:prob_and(DD)D
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.Quant:lexLTE([I[I)Z
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.VarInfoAux:hashCode()I
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.inv.Invariant:prob_is_ge(DD)D | STATEMENT | 6797 | stmt -> ;
daikon.inv.Invariant:getConfidence()D
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Intern:intern([I)[I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:intersection([I[I)[I
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.Invariant:prob_and(DDD)D
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit; | OPERATOR | 4882 | == -> <
daikon.Quant:eq(FF)Z
daikon.Quant:eltwiseGT([I)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.PptName:isCombinedExitPoint()Z
daikon.Quant:eq(DD)Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.Debug:logDetail()Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Quant:memberOf(J[J)Z
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:lexGT([I[I)Z
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:setEqual([I[I)Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
utilMDE.Options.OptionInfo:argument_required()Z
daikon.Quant:eltsNotEqual([II)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.Quant:eltsGTE([II)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.Quant:pairwiseLTE([I[I)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:subarray([JII)[J
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.Quant:gt(II)Z
daikon.Quant:subsetOf([D[F)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.ArraysMDE:fn_is_total([I)Z
jtb.JavaCharStream:getBeginColumn()I
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.Quant:lt(II)Z
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName; | RETURN | 86983 | return null
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.Quant:slice([III)[I
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.Quant:lte(II)Z
daikon.diff.InvMap:InvMap()V
utilMDE.MathMDE:gcd([I)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.ValueTuple:isMissing(I)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:min([I)I
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:new_ppt()V
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | RETURN | 1858 | return null
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
jtb.JavaParser:generateParseException()Ljtb.ParseException;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.Invariant:logOn()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.Quant:eltsLT([II)Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.Quant:noDups([I)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.MathMDE:pow_fast(II)I
daikon.ProglangType:dimensions()I
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.Quant:subsetOf([S[S)Z
utilMDE.ArraysMDE:sum([D)D
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:internSubsequence([III)[I
daikon.Quant:eltsGtIndex([I)Z
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([B[I)Z
utilMDE.ArraysMDE:sum([I)I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.MathMDE:pow(II)I
daikon.ProglangType:isArray()Z
daikon.Quant:gte(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.ProglangType:isIntegral()Z
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsLtIndex([I)Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.ProglangType:baseIsScalar()Z
utilMDE.ArraysMDE:indexOf([II)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.ArraysMDE:sorted([I)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object; | RETURN | 21115 | return null
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quant:union([I[I)[I
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:isPseudoArray()Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.ArraysMDE:min_max([I)[I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.Quant:subsetOf([J[J)Z
daikon.PptSlice1:arity()I
utilMDE.OrderedPairIterator:setnext2()V
daikon.Quant:subsetOf([D[D)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eq(JJ)Z
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.inv.Invariant:logDetail()Z
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:FillBuff()V
daikon.inv.unary.scalar.LowerBound:enabled()Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.PptSlice0:arity()I
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.diff.Node:Node()V
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.ValueTuple:isMissingNonsensical(I)Z
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.diff.RootNode:RootNode()V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.VarInfo:name()Ljava.lang.String;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.Quant:eltsLTE([II)Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfo:relate_var()V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.Quant:eltwiseLTE([I)Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
jtb.JavaCharStream:getEndColumn()I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.MathMDE:sign(I)I
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:getBeginLine()I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
utilMDE.Intern:intern([J)[J
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.Quant:memberOf(D[F)Z
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.MathMDE:gcd(JJ)J
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
jtb.JavaCharStream:BeginToken()C
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE:max([I)I
daikon.ProglangType:baseIsIntegral()Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsEqual([II)Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.MathMDE:missing_numbers([I)[I | CONSTANT | 18577 | 0 -> -1
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.PptSlice1:num_samples()I
utilMDE.FuzzyFloat:lte(DD)Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.PptName:PptName(Ljava.lang.String;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:concat([I[I)[I
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.Quant:eltwiseEqual([I)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:sameLength([I[I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.Debug:logOn()Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.Invariants:Invariants()V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.VarInfoName.ElementsFinder:inPre()Z
jtb.JavaCharStream:backup(I)V
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:setDiff([I[I)[I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
284 4 698 2 227 2 724 2 71 2 76 2 688 2 231 2 553 2 
569 6 737 6 226 6 661 2 527 2 611 2 549 2 73 2 48 2 335 2 769 2 
141 4 227 2 245 6 42 6 248 2 231 2 552 2 69 2 704 4 93 6 307 6 647 2 85 2 
224 29 286 16 227 6 231 6 343 2 763 8 629 8 543 2 680 6 235 10 138 10 377 2 596 16 319 6 383 8 660 2 324 12 572 4 269 4 574 10 637 4 100 2 509 16 689 10 557 26 179 4 57 10 581 8 777 2 474 2 
375 4 668 6 
152 2 
538 2 539 2 227 4 649 2 228 2 129 2 130 2 231 4 501 2 702 2 232 2 503 4 92 2 95 2 505 2 6 2 461 2 660 2 464 2 50 2 246 4 303 2 747 2 431 2 432 2 472 2 159 2 619 2 562 4 68 2 164 2 207 2 318 2 442 2 262 2 532 2 481 2 31 2 76 2 77 2 78 2 392 2 278 4 82 2 
123 2 510 2 
546 2 61 2 130 2 
464 2 439 2 273 2 24 2 217 2 678 2 535 2 478 2 47 10 470 2 726 2 297 2 223 2 350 22 
224 6 286 2 255 2 721 2 542 2 764 2 138 2 235 4 319 2 596 2 298 2 634 2 324 2 572 2 110 2 574 2 247 2 689 2 509 2 557 4 57 2 581 2 450 2 
368 6 224 14 324 5 269 2 286 8 574 4 608 4 328 2 689 4 509 8 557 12 317 4 57 4 138 4 596 8 332 6 266 2 
465 2 671 2 5 2 116 6 397 2 667 2 426 2 720 2 483 2 253 2 
121 2 355 2 135 2 514 2 137 2 170 2 152 2 151 2 420 2 33 2 
402 2 181 2 89 2 1 4 290 2 406 2 407 3 502 16 701 2 293 4 703 32 96 2 189 2 190 1 192 2 419 3 601 32 506 2 603 2 9 2 508 2 101 2 708 1 709 6 609 2 198 5 610 1 511 2 102 8 512 2 430 2 199 2 306 2 516 2 517 2 617 8 518 1 308 1 521 4 519 2 520 3 714 2 436 2 435 2 437 2 524 2 622 2 106 1 311 16 719 3 26 3 626 2 628 2 109 2 530 3 208 2 210 2 443 2 533 1 728 2 211 2 730 6 635 12 35 2 214 2 114 4 118 2 39 2 218 3 445 4 40 3 643 24 125 1 127 2 646 2 222 2 734 2 451 2 736 2 227 32 231 34 43 2 454 2 344 2 656 2 233 2 234 8 544 1 139 1 740 1 347 2 463 1 144 2 147 1 555 24 558 2 358 2 749 2 469 2 751 2 249 2 362 6 252 3 153 3 754 1 59 2 370 2 757 4 62 1 63 2 372 2 260 2 65 2 677 2 564 4 66 2 261 2 566 2 166 3 376 2 767 2 768 2 263 2 72 3 686 2 382 2 384 2 264 2 74 2 484 16 571 2 172 2 75 2 272 2 688 2 774 2 690 2 580 2 492 2 80 2 493 16 180 6 583 4 696 1 398 2 495 2 497 2 
607 2 313 2 231 2 
295 2 326 2 231 4 
529 2 
560 2 735 2 225 2 525 2 22 18 676 2 230 2 624 2 760 2 3 2 591 2 504 2 167 18 457 2 459 2 188 2 238 2 191 2 140 2 239 2 602 2 605 2 423 18 486 2 53 2 329 2 663 2 578 2 120 2 276 2 640 2 393 2 513 2 775 2 81 2 613 2 250 2 360 2 695 2 753 2 449 2 364 2 
429 2 748 2 756 1 163 2 
206 2 163 2 
706 2 28 2 179 2 130 2 283 2 163 2 321 2 
28 2 163 2 348 2 
28 2 103 2 163 2 
748 2 219 2 174 2 
28 2 163 2 
705 2 174 2 
356 2 163 2 
748 2 526 2 174 2 
748 2 485 2 658 2 
366 2 748 2 387 2 
748 2 424 2 491 2 
55 2 748 2 399 2 
174 2 742 2 
654 2 163 2 
485 2 117 2 
387 2 652 2 
424 2 331 2 
236 2 399 2 
537 2 174 2 
91 2 399 2 
475 2 424 2 
387 2 126 2 
498 2 485 2 
748 2 526 2 174 2 201 2 
748 2 526 2 673 2 174 2 201 2 
748 2 522 2 174 2 
748 2 340 2 174 2 
243 2 625 2 304 2 615 2 
124 2 130 2 739 2 283 2 
706 2 124 2 515 2 130 2 739 2 283 2 
762 2 28 2 179 2 130 2 283 2 163 2 
95 2 460 2 
416 2 179 2 130 2 283 2 
424 2 146 2 
361 2 399 2 
485 2 455 2 
387 2 639 2 
387 2 399 2 86 2 
387 2 299 2 399 2 
387 2 345 2 399 2 
176 2 387 2 399 2 
561 6 540 6 130 2 25 2 659 2 732 2 536 2 283 2 
13 2 174 2 
98 2 570 2 388 2 113 2 182 2 341 2 576 2 259 2 330 2 175 2 567 4 279 2 685 2 480 2 471 2 334 4 598 2 350 6 
748 2 216 2 
66 2 
0 4 89 2 1 4 290 6 701 2 293 4 703 6 96 2 601 4 506 2 101 2 196 2 709 2 609 2 430 2 199 2 15 2 16 2 617 2 521 2 519 2 435 2 622 2 204 2 316 2 631 2 210 2 728 2 730 4 635 8 114 4 214 4 447 2 646 2 734 2 222 2 451 2 227 26 231 26 43 2 454 2 344 2 233 2 656 2 136 2 456 2 139 2 143 4 145 2 751 2 362 2 370 2 757 4 62 2 63 2 677 2 564 2 565 2 261 2 767 2 686 2 379 2 568 2 384 2 75 2 573 2 688 2 80 2 493 6 776 2 180 6 583 2 697 2 398 2 
0 4 89 2 1 4 290 6 701 2 293 4 703 6 96 2 601 4 603 1 506 2 101 2 196 2 709 2 609 2 430 2 199 2 15 2 16 2 617 2 521 2 519 2 435 2 622 2 204 2 316 2 631 2 210 2 443 2 728 2 730 5 635 8 114 4 214 4 447 2 646 2 734 2 222 2 451 2 227 26 231 26 43 2 454 2 344 2 233 2 656 2 139 2 143 4 145 2 469 1 58 2 751 2 362 2 251 2 370 2 757 4 62 2 63 2 677 2 564 2 165 2 565 2 261 2 767 2 686 2 379 2 568 2 384 2 75 2 573 2 688 2 80 2 493 6 180 6 583 2 697 2 398 2 
292 2 
778 2 281 2 
285 2 737 6 226 6 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 661 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 202 2 757 2 670 8 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 320 2 633 4 569 6 111 2 112 2 488 2 534 2 275 2 692 8 277 10 177 2 694 2 180 4 333 2 734 2 451 2 336 2 
285 2 737 6 226 8 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 661 2 425 2 609 2 54 2 430 2 149 2 664 2 105 4 309 2 618 4 158 4 620 4 757 2 202 2 670 8 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 681 2 686 2 73 2 320 2 633 4 569 8 111 2 112 2 488 2 534 2 275 2 391 2 692 8 277 10 177 2 694 2 180 4 734 2 451 2 336 2 
569 2 737 2 620 4 111 2 112 2 21 2 203 2 488 2 425 2 534 2 441 2 54 2 664 2 30 2 549 2 48 2 8 2 633 4 
285 2 737 4 226 6 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 202 2 757 2 670 4 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 73 2 320 2 633 4 569 6 111 2 112 2 488 2 534 2 275 2 692 4 277 6 177 2 694 2 180 4 333 2 734 2 451 2 336 2 
285 2 737 6 226 6 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 202 2 757 2 670 4 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 320 2 633 4 569 4 111 2 112 2 488 2 534 2 275 2 692 4 277 6 177 2 694 2 180 4 333 2 734 2 451 2 335 2 336 2 
285 2 737 6 226 6 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 661 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 202 2 757 2 670 4 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 320 2 633 4 569 6 111 2 112 2 488 2 534 2 275 2 692 8 277 6 177 2 694 2 180 4 333 2 734 2 451 2 336 2 
285 2 737 8 226 8 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 661 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 757 2 202 2 670 8 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 320 2 633 4 569 6 111 2 112 2 488 2 534 2 275 2 692 8 277 10 177 2 694 2 180 4 333 2 734 2 451 2 335 2 336 2 
285 2 737 6 226 6 227 6 650 2 653 2 231 12 411 4 701 2 293 2 414 2 233 2 657 2 549 4 599 2 48 4 8 2 301 2 661 2 425 2 609 2 54 2 430 2 149 2 664 2 104 2 105 4 309 2 158 4 620 4 202 2 757 2 670 8 527 2 21 2 203 2 674 2 64 2 441 4 373 2 679 2 30 2 686 2 320 2 633 4 569 6 111 2 112 2 488 2 534 2 275 2 692 8 277 10 177 2 694 2 180 4 333 2 734 2 451 2 336 2 
0 4 183 2 1 4 586 6 587 2 409 2 411 6 413 1 414 2 593 8 594 2 599 4 7 2 8 2 601 2 603 2 604 2 606 2 195 2 425 2 609 2 430 2 199 2 15 2 16 2 612 2 614 6 617 2 434 2 435 2 620 4 202 2 622 2 19 2 21 2 203 2 441 4 27 6 630 6 29 2 30 2 210 2 633 4 635 4 642 2 220 2 645 2 646 2 222 2 451 2 452 10 226 12 648 1 227 24 650 2 651 2 231 46 653 2 43 2 233 2 657 4 462 2 48 4 241 4 242 4 54 2 56 2 664 2 469 2 476 6 256 2 674 2 63 2 675 2 258 7 64 2 677 2 679 2 686 2 267 2 488 2 688 2 691 7 275 2 692 2 277 2 80 2 694 2 493 6 285 2 89 2 290 6 701 2 293 4 703 8 295 6 96 2 301 2 709 2 712 2 104 2 521 2 519 2 105 4 309 2 527 4 716 1 313 6 528 1 108 2 314 6 529 6 723 2 531 2 725 6 320 2 728 2 730 6 111 2 112 2 114 4 534 2 734 2 335 4 336 2 338 1 339 2 737 8 131 2 547 2 549 4 351 6 145 2 745 6 148 2 149 2 750 2 359 2 751 12 362 2 158 8 755 2 757 4 371 6 373 2 162 1 564 2 766 6 171 1 568 4 569 4 386 1 772 6 773 6 579 1 177 2 180 6 583 2 398 2 
285 2 0 4 89 2 183 2 1 4 586 6 290 6 409 2 408 2 587 2 411 6 701 2 293 4 703 8 414 2 295 6 593 8 96 2 594 2 599 4 7 2 8 2 601 2 301 2 603 2 604 2 606 2 195 2 425 2 709 2 609 2 430 2 199 2 16 2 15 2 612 2 712 2 614 6 617 2 104 2 519 2 521 4 434 2 105 4 309 2 435 2 620 4 622 2 202 2 19 2 527 4 21 2 203 2 313 6 108 2 314 6 441 4 723 2 529 6 27 6 630 6 29 2 30 2 531 2 725 6 210 2 320 2 633 4 728 2 730 6 635 8 111 2 112 2 214 2 114 4 534 2 220 2 642 2 645 2 646 2 222 2 734 2 451 2 336 2 339 2 452 10 737 8 226 12 227 26 650 2 651 2 653 2 131 2 231 48 43 2 233 2 657 4 547 2 549 4 237 2 462 2 48 4 241 4 242 4 661 4 351 6 145 2 745 6 148 2 54 2 56 2 149 2 664 2 359 2 750 2 751 12 469 2 362 2 755 2 158 8 757 4 476 6 256 2 675 2 63 2 674 2 371 6 64 2 677 2 373 2 564 4 679 2 766 6 686 2 568 4 267 2 569 8 772 6 773 6 688 2 488 2 275 2 692 6 277 2 80 2 177 2 493 6 694 2 180 6 583 4 398 2 
285 2 0 4 89 2 183 2 1 4 586 6 290 6 409 2 408 2 587 2 411 6 701 2 293 4 703 8 414 2 295 6 593 8 96 2 594 2 599 4 7 2 8 2 601 2 301 2 603 2 604 2 606 2 195 2 425 2 709 2 609 2 430 2 199 2 16 2 15 2 612 2 712 2 614 6 617 2 104 2 519 2 521 4 434 2 105 4 309 2 435 2 620 4 622 2 202 2 19 2 527 4 21 2 203 2 313 6 108 2 314 6 441 4 723 2 529 6 27 6 630 6 29 2 30 2 531 2 725 6 210 2 320 2 633 4 728 2 730 6 635 8 111 2 112 2 214 2 114 4 534 2 220 2 642 2 645 2 646 2 222 2 734 2 451 2 336 2 339 2 452 10 737 8 226 12 227 26 650 2 651 2 653 2 131 2 231 48 43 2 233 2 657 4 547 2 549 4 237 2 462 2 48 4 241 4 242 4 661 4 351 6 145 2 745 6 148 2 54 2 56 2 149 2 664 2 359 2 750 2 751 12 469 2 362 2 755 2 158 8 757 4 670 4 476 6 256 2 675 2 63 2 674 2 371 6 64 2 373 2 677 2 564 4 679 2 766 6 686 2 568 4 267 2 569 8 772 6 773 6 688 2 488 2 275 2 692 6 277 6 80 2 177 2 493 6 694 2 180 6 583 4 398 2 
0 6 183 2 1 4 586 6 409 2 408 2 587 2 411 6 414 2 593 8 594 2 599 4 7 2 8 2 601 4 421 6 603 2 604 2 606 2 195 2 425 2 609 2 430 2 199 2 15 2 16 4 612 2 17 6 614 12 617 4 434 2 435 2 620 4 202 2 622 2 19 2 21 2 203 2 441 4 27 6 630 6 29 2 30 2 210 2 632 6 633 4 635 10 212 6 214 2 642 2 220 2 646 2 222 2 451 2 41 2 452 8 226 16 227 24 650 2 651 2 653 2 231 52 43 2 233 2 657 4 237 2 462 2 48 4 241 4 242 4 661 4 244 2 54 2 56 2 664 2 469 2 669 2 670 4 476 6 256 2 63 2 674 2 675 2 64 2 677 2 679 2 686 2 73 2 267 2 271 2 488 2 688 2 275 2 692 6 277 6 79 2 80 2 694 2 493 8 494 6 285 2 87 6 89 2 290 8 699 6 701 2 293 4 703 12 295 12 96 2 300 6 301 2 709 4 712 2 104 2 521 4 519 2 105 4 309 2 527 4 313 12 108 2 314 6 529 12 723 2 531 2 725 12 320 2 728 2 730 6 111 2 112 2 114 4 534 2 734 2 335 2 336 2 339 2 737 10 131 2 547 2 549 4 351 6 145 2 745 6 354 6 148 2 149 2 750 2 359 2 751 10 362 4 363 2 158 8 755 2 757 4 371 6 373 2 564 4 766 6 380 2 568 4 569 10 770 2 772 6 773 12 177 2 180 6 583 4 398 2 
105 2 285 2 309 2 158 2 737 6 226 4 620 2 202 2 670 4 650 2 527 2 21 2 674 2 231 4 411 2 373 2 414 2 679 2 549 4 48 4 8 2 633 2 301 2 569 6 661 2 111 2 488 2 425 2 54 2 692 6 277 4 664 2 694 2 104 2 336 2 
285 2 0 4 181 2 89 2 1 4 290 6 411 2 701 2 293 4 414 2 703 8 94 2 96 2 8 2 601 3 301 2 603 2 425 2 709 3 609 2 430 2 199 2 15 2 104 2 519 2 105 2 309 2 435 2 620 2 622 2 202 2 527 2 21 2 626 2 210 2 633 2 728 2 211 2 730 6 111 2 114 4 645 2 646 2 222 2 734 2 451 2 336 2 337 2 128 3 737 6 452 2 226 4 227 24 650 2 231 28 43 2 233 2 549 4 48 4 661 2 145 2 54 2 664 2 469 2 751 4 362 3 158 2 757 4 672 2 63 2 674 2 373 2 677 2 66 2 679 2 682 2 686 2 568 2 569 6 488 2 688 2 577 2 275 2 692 6 277 2 80 2 694 2 493 6 180 6 
414 2 694 2 229 2 
414 2 694 2 229 2 
285 2 89 2 405 2 1 4 290 2 411 4 412 2 701 2 293 4 414 6 703 2 96 2 599 2 7 2 601 2 603 2 425 4 609 2 430 2 305 4 199 2 15 2 521 4 519 2 105 2 435 2 620 2 622 2 527 4 204 4 108 2 718 2 314 2 205 2 441 4 30 2 210 2 633 2 727 2 728 2 730 6 323 2 635 4 114 4 327 2 534 2 644 2 448 2 646 2 734 2 222 2 451 2 335 4 452 2 737 12 226 16 227 16 229 2 231 24 134 2 233 2 657 4 346 4 549 4 48 4 241 2 242 2 661 4 145 2 149 2 664 2 357 2 750 2 469 2 751 4 155 2 158 4 757 4 670 4 63 2 64 2 677 2 373 2 564 4 374 2 683 2 686 2 73 4 568 6 569 12 575 2 688 2 488 2 692 6 277 6 80 2 177 2 493 2 694 4 83 2 180 6 583 4 398 4 282 2 
155 2 452 2 422 2 241 2 227 2 203 2 327 2 197 2 563 2 205 2 609 2 314 2 231 4 612 2 751 2 531 2 281 2 
285 2 89 2 405 2 1 4 290 2 411 4 412 2 701 2 293 4 414 6 703 2 96 2 599 4 7 2 601 4 603 2 425 4 609 2 710 2 14 2 430 2 305 4 199 2 15 2 521 4 519 2 105 2 435 2 620 2 622 2 527 4 204 4 108 2 718 2 314 2 205 2 441 4 30 2 210 2 633 2 727 2 728 2 730 6 635 4 114 4 327 2 534 2 641 2 644 2 448 2 646 2 734 2 222 2 451 2 335 4 737 12 226 16 227 16 453 2 229 2 653 2 231 24 233 2 657 4 346 4 549 4 48 4 242 2 661 4 145 2 149 2 664 2 357 4 750 2 469 2 751 2 155 2 158 4 757 4 670 4 63 2 64 2 677 2 373 2 761 2 564 4 374 2 686 2 73 4 568 6 569 12 688 2 488 2 692 6 277 6 80 2 177 2 493 2 694 4 83 2 180 6 583 4 398 4 282 2 
285 2 89 2 405 2 1 4 290 2 411 4 412 2 701 2 293 4 414 6 703 2 96 2 595 2 599 4 7 2 601 2 603 2 425 4 609 2 430 2 305 4 199 2 15 2 521 4 519 2 105 2 435 2 620 2 622 2 527 4 204 4 108 2 718 2 314 2 205 2 441 4 30 2 210 2 633 2 727 2 728 2 730 6 635 4 114 4 327 2 534 2 644 2 448 2 646 2 734 2 222 2 451 2 335 4 452 2 737 12 226 16 227 16 229 2 653 2 231 24 233 2 657 4 346 4 549 4 48 4 551 2 241 2 242 2 661 4 145 2 52 2 554 2 149 2 664 2 357 2 750 2 469 2 751 4 155 2 158 4 757 4 670 4 63 2 64 2 677 2 373 2 564 4 374 2 686 2 73 4 568 6 569 12 688 2 488 2 274 2 692 6 277 6 80 2 177 2 493 2 694 4 83 2 180 6 583 4 398 4 282 2 
499 2 401 2 88 2 0 4 1 2 291 2 184 2 290 6 701 2 590 2 293 4 703 8 415 2 592 2 96 2 597 4 601 2 707 2 603 1 606 2 709 2 609 2 427 2 430 2 199 2 713 2 519 2 434 2 435 2 622 2 310 2 438 2 23 2 627 2 210 2 728 2 730 3 325 2 114 2 731 2 638 2 122 2 642 2 646 2 734 2 451 2 227 18 231 24 43 2 233 2 46 2 547 2 462 2 349 2 145 2 469 1 751 2 362 2 156 1 757 4 765 2 686 2 381 2 568 2 267 2 268 2 270 1 688 2 80 2 493 6 180 6 
0 2 227 2 288 4 541 2 290 2 231 2 43 2 722 2 45 2 703 2 738 2 296 2 601 3 265 2 389 2 213 3 115 2 709 3 51 2 215 2 119 2 16 6 178 1 493 2 362 3 
0 2 227 2 288 4 541 2 290 2 231 2 43 2 722 2 45 2 703 2 738 2 296 2 601 2 265 2 389 2 213 2 115 2 709 2 51 2 215 2 119 2 16 6 493 2 362 2 
0 2 227 2 288 4 541 2 290 2 231 2 43 2 722 2 45 2 703 2 738 2 296 2 601 2 265 2 389 2 213 2 115 2 709 2 51 2 215 2 119 2 16 6 493 2 362 2 
224 6 254 2 160 2 286 2 403 3 621 3 227 4 404 2 717 6 257 3 500 2 440 4 231 10 43 2 502 2 763 4 45 2 703 2 680 2 545 2 138 2 596 2 684 4 418 2 601 3 240 4 484 2 466 4 194 2 574 2 689 2 509 2 711 2 557 4 57 2 150 2 752 4 362 3 584 2 154 2 
224 4 286 2 227 4 403 2 404 2 500 2 231 10 43 2 502 2 703 2 45 2 545 2 138 2 596 2 418 2 601 2 240 4 466 4 194 2 509 2 711 2 557 4 57 2 150 2 362 2 752 4 154 2 254 2 160 2 621 2 717 6 257 2 440 4 763 4 680 2 684 4 484 2 324 2 574 2 689 2 581 2 777 2 584 2 
224 4 286 2 227 4 403 2 404 2 500 2 231 10 43 2 502 2 703 2 45 2 545 2 138 2 596 2 418 2 601 2 240 4 466 4 194 2 509 2 711 2 557 4 57 2 150 2 362 2 752 4 154 2 254 2 160 2 621 2 717 6 257 2 440 4 763 4 680 2 684 4 484 2 324 2 574 2 689 2 581 2 777 2 584 2 
224 4 286 2 227 4 403 2 404 2 500 2 231 10 43 2 502 2 703 2 45 2 545 2 138 2 596 2 418 2 601 2 240 4 466 4 194 2 509 2 711 2 557 4 57 2 150 2 362 2 752 4 154 2 254 2 160 2 621 2 717 6 257 2 440 4 763 4 680 2 684 4 484 2 324 2 574 2 689 2 581 2 777 2 584 2 
224 4 286 2 227 4 403 2 404 2 500 2 231 10 43 2 502 2 703 2 45 2 545 2 138 2 596 2 418 2 601 2 240 4 466 4 194 2 509 2 711 2 557 4 57 2 150 2 362 2 752 4 154 2 254 2 160 2 621 2 717 6 257 2 440 4 763 4 680 2 684 4 484 2 324 4 574 2 689 2 581 4 777 4 584 2 
37 2 433 2 289 2 11 2 687 2 385 2 
433 2 280 2 666 2 353 2 548 2 396 2 631 2 
157 2 523 1 465 1 444 2 227 8 636 2 487 1 623 2 107 2 490 1 231 10 12 2 428 2 2 2 477 2 655 2 733 2 186 2 686 2 582 2 483 1 
369 2 224 14 368 4 286 6 227 6 758 2 231 6 763 4 4 2 680 2 317 2 168 2 138 6 262 2 596 6 479 2 32 2 600 4 324 5 574 6 489 2 509 6 689 6 123 2 557 12 57 6 82 2 581 4 473 2 777 4 
743 2 240 2 367 7 771 2 49 2 99 2 227 1 36 2 466 2 231 1 662 2 315 2 133 2 665 1 468 4 458 2 616 2 752 2 
743 2 240 2 367 6 771 2 49 4 99 2 36 2 466 2 662 2 315 4 133 4 468 4 458 2 616 2 752 2 
743 2 240 2 367 10 771 2 49 8 99 2 227 1 36 6 466 2 231 1 662 2 315 8 133 8 665 1 468 4 458 8 616 2 752 2 
743 2 240 2 367 2 771 2 49 2 99 2 466 2 662 2 315 2 133 2 468 2 616 2 752 2 
400 2 1 12 585 2 588 2 410 2 90 2 589 2 185 2 294 1 96 4 187 2 417 1 97 2 193 2 603 4 10 1 507 1 200 4 18 2 20 2 715 2 312 2 209 2 210 6 322 6 728 6 729 2 730 22 34 2 114 10 446 2 221 2 227 28 342 2 231 32 132 4 44 1 741 2 550 2 142 2 467 2 352 2 746 4 556 3 469 4 365 2 559 2 60 2 161 2 759 2 67 1 70 2 169 2 378 2 482 2 390 4 173 2 693 2 394 2 395 2 84 2 496 2 
730 4 603 2 34 2 193 2 227 8 38 2 744 2 287 2 114 2 1 2 231 8 700 2 746 2 90 2 96 2 469 2 482 2 417 2 210 2 728 2 
730 4 603 2 34 2 193 2 227 6 38 2 114 2 1 2 231 6 746 2 90 2 96 2 469 2 482 2 210 2 728 2 
730 4 603 2 34 2 193 2 227 6 38 2 114 2 1 2 231 6 746 2 90 2 96 2 469 2 482 2 210 2 728 2 
302 2 
