#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V ERROR utilMDE.Assert$AssertionException (33,635) (33,635) 
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 284 618 465 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 687 124 429 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V ERROR java.lang.NullPointerException 421 277 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V ERROR java.lang.NullPointerException 421 277 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V ERROR java.lang.NullPointerException 421 277 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V ERROR java.lang.NullPointerException 421 277 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V ERROR java.lang.NullPointerException 421 277 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 634 720 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 643 119 315 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 643 119 315 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 643 119 315 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 643 119 315 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.diff.RootNode:RootNode()V
utilMDE.MathMDE:sign(I)I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
utilMDE.MathMDE:pow(II)I
daikon.Quant:eltsLtIndex([I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.Quant:eltwiseGT([I)Z
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo; | RETURN | 946 | return null
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.Quant:subsetOf([D[D)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.Quant:eltsEqual([II)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.LimitedSizeIntSet:size()I
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.Quant:lexGT([I[I)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.MathMDE:mod_positive(JJ)J
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.JavaCharStream:BeginToken()C
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:eltsGtIndex([I)Z
daikon.ValueTuple:isMissingNonsensical(I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quant:memberOf(J[J)Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.Intern:numIntArrays()I
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z | CONDITION | 7988 | if (x) -> if (!x)
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.VarInfo:jml_name()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.Quant:pairwiseDivides([I[I)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaCharStream:ReadByte()C
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.ProglangType:baseIsFloat()Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.LimitedSizeIntSet:add(I)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
utilMDE.Intern:intern([I)[I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([I[I)Z
daikon.diff.Node:Node()V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([II)I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.Quant:eltsGteIndex([I)Z
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.Invariant:logDetail()Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.PptName:isEnterPoint()Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.PptName:isCombinedExitPoint()Z
utilMDE.WeakHasherMap:size()I
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.VarInfo:new_ppt()V
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.Quant:subsetOf([S[S)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.Options.OptionInfo:argument_required()Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseEqual([I[I)Z
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.MathMDE:missing_numbers([I)[I
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.Invariant:prob_and(DD)D
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Ppt:indexOf(Ljava.lang.String;)I
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:eltsGTE([II)Z
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.unary.scalar.NonModulus:updateResults()V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.Quant:eltsLTE([II)Z
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.PptSlice2:arity()I
daikon.inv.Invariant:isWorthPrinting()Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:negate(I)I
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.simplify.LemmaStack:noticeInt(J)V
daikon.Quant:pairwiseGT([I[I)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
utilMDE.ArraysMDE:sorted([I)Z
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:eltwiseLT([I)Z
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarInfoAux:hashCode()I
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:isArray()Z
daikon.Quant:subsetOf([F[D)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.VarInfo:isPointer()Z
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.Quant:eq(JJ)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.Ppt:Ppt()V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.PptSlice1:arity()I
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
utilMDE.MathMDE:modulus([I)[I
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([I)I
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:memberOf(I[I)Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.Quant:intersection([I[I)[I
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.ProglangType:dimensions()I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.PptSlice0:arity()I
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String; | ASSIGN | 16305 | = null
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
jtb.JavaCharStream:getEndColumn()I
jtb.JavaCharStream:backup(I)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
utilMDE.OrderedPairIterator:setnext2()V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.inv.Invariant:logOn()Z
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.UpperBound:enabled()Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:isReverse([I[I)Z
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.unary.scalar.Positive:enabled()Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.ProglangType:isIntegral()Z
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:gte(II)Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.Invariant:justified()Z
daikon.Quant:memberOf(F[D)Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quant:ne(II)Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
utilMDE.MathMDE:gcd([I)I
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.Intern:intern([J)[J
daikon.Quant:memberOf(D[F)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
daikon.Quant:subsetOf([D[F)Z
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.FuzzyFloat:isSubset([D[D)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:dbc_name()Ljava.lang.String;
utilMDE.ArraysMDE:sum([[I)I
daikon.test.InvariantFormatTester:execute()Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.Debug:logDetail()Z
daikon.ProglangType:baseIsIntegral()Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.Quant:lte(II)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.Quant:setEqual([I[I)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.PptSlice0:initInvariantsSeen()V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:subsetOf([B[I)Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.inv.Invariants:Invariants()V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.Quant:lexLT([I[I)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.ProglangType:baseIsScalar()Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.ValueTuple:size()I
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE:element_range([I)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfo:relate_var()V
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.ProglangType:isPointerFileRep()Z
utilMDE.MathMDE:gcd(JJ)J
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.ValueTuple:isMissing(I)Z
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:min_max([I)[I
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.diff.InvMap:InvMap()V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.Quant:setDiff([I[I)[I
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:pow_fast(II)I
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName:hashCode()I
daikon.VarInfo:simplify_name()Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:lexGTE([I[I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.PptSlice1:num_samples()I
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.Quant:eltwiseNotEqual([I)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:readChar()C | OPERATOR | 5855 | == -> <=
utilMDE.MathMDE:gcd_differences([I)I
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.Invariant:prob_or(DD)D
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.Quant:noDups([I)Z
daikon.inv.Invariant:getConfidence()D
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Quant:memberOf(F[F)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_ntk()I
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:memberOf(S[S)Z
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:gt(II)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.Quant:subsetOf([J[J)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.Assert:assertTrue(Z)V
utilMDE.ArraysMDE:sum([[D)D
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Ppt:find_var_by_name(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1652 | = null
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.Quant:union([I[I)[I
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:eltsLT([II)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:concat([I[I)[I
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Debug:logOn()Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ProglangType:isScalar()Z
daikon.Quant:eq(FF)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.Quant:lexEqual([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.ValueTuple:isMissingFlow(I)Z
jtb.JavaCharStream:FillBuff()V
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.FormatTestCase:passes()Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:max([I)I
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | RETURN | 1469 | return null
daikon.Quant:eq(II)Z
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.ProglangType:isFloat()Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:sameLength([I[I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.Intern:internSubsequence([III)[I | ASSIGN | 22726 | = null
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
utilMDE.FuzzyFloat:gt(DD)Z
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eq(DD)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaCharStream:getEndLine()I
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Quant:eltsGT([II)Z
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.Quant:subsetOf([F[F)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltwiseEqual([I)Z
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:slice([III)[I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
utilMDE.MathMDE:gcd(II)I
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:lt(II)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
502 2 635 2 751 2 454 2 141 2 95 2 62 4 33 2 707 2 
357 6 382 2 472 2 99 2 782 6 132 6 704 2 180 2 729 2 240 2 498 2 
340 4 281 4 693 6 54 2 42 2 726 6 478 6 635 2 320 2 86 2 690 2 33 2 482 6 
159 2 603 1 143 5 126 5 486 10 125 10 128 5 304 7 102 7 227 6 635 4 103 8 728 2 29 6 493 2 238 10 135 6 33 4 
213 6 778 4 
763 2 
524 2 473 4 52 2 564 2 423 2 766 2 152 4 428 2 367 2 733 2 14 2 370 2 438 2 65 2 164 2 579 2 19 2 332 2 276 2 540 4 691 2 632 2 174 2 75 2 501 2 635 4 545 4 636 2 454 2 348 2 33 4 296 2 646 2 604 2 301 2 791 2 713 2 236 2 653 2 239 2 136 2 466 2 412 2 662 2 
666 8 227 4 635 4 29 4 60 1 394 4 33 4 507 8 486 8 126 4 101 1 128 4 647 2 304 4 102 4 103 8 238 9 135 4 
239 2 329 2 757 2 
88 2 324 2 279 10 401 2 52 2 362 2 536 2 407 22 106 2 424 2 572 2 556 2 731 2 776 2 
722 2 143 2 591 2 197 2 227 2 148 2 29 2 96 2 78 2 366 2 126 2 486 4 125 4 128 2 304 2 102 2 103 6 238 6 135 2 169 2 110 2 
631 1 227 7 479 2 29 6 60 2 570 3 732 1 486 13 126 7 128 6 304 7 328 5 102 7 103 8 238 15 493 2 135 7 582 4 47 2 22 8 
339 2 723 4 360 62 91 2 251 2 224 2 501 4 3 2 727 2 27 2 545 4 228 2 566 2 258 4 94 4 347 4 322 2 423 2 286 4 365 2 599 4 708 2 291 2 232 2 574 2 508 4 509 4 233 4 549 2 601 2 437 4 757 6 329 2 375 10 410 2 239 8 380 4 191 2 796 10 797 14 
457 2 185 2 510 2 763 2 651 2 92 2 715 2 492 2 769 2 10 2 
311 2 312 6 313 1 314 2 527 24 198 3 422 2 199 4 6 2 529 2 426 2 202 1 530 6 97 2 9 3 432 32 210 32 12 1 13 4 735 2 327 2 100 2 624 2 740 4 741 2 331 2 104 1 625 2 335 1 628 2 541 1 542 2 220 2 338 2 24 2 23 24 747 8 343 2 445 2 223 2 225 2 635 32 452 2 118 2 547 3 750 2 31 2 456 2 33 34 34 2 645 2 462 2 351 2 36 2 464 2 551 2 648 3 552 2 43 2 554 2 235 2 467 4 660 3 759 2 138 2 139 3 761 2 664 2 359 2 471 1 53 2 562 2 246 16 476 4 361 1 144 1 252 1 57 2 253 2 565 1 150 2 257 2 59 3 568 4 58 2 261 2 153 2 263 16 671 2 155 2 156 4 483 2 674 2 488 2 270 1 161 2 373 2 686 2 67 1 773 2 68 3 165 5 374 3 273 3 378 8 69 1 494 16 379 4 584 1 277 2 586 2 692 12 384 2 280 2 172 8 589 2 388 2 783 2 502 2 701 2 595 2 700 2 177 2 504 2 285 6 392 16 79 2 506 2 787 2 183 2 602 2 402 2 300 2 85 3 606 2 303 2 409 1 413 2 795 2 411 2 87 2 517 3 717 6 718 2 518 2 519 2 616 2 
33 2 499 2 
393 2 193 2 33 4 
608 2 
618 2 341 2 342 4 695 2 620 2 284 2 226 2 594 2 116 2 623 2 425 2 7 2 598 4 84 2 607 2 755 2 683 2 465 2 376 2 581 2 583 2 742 2 336 2 278 2 
668 1 697 2 719 2 292 2 
190 2 697 2 
694 2 239 2 603 2 305 2 307 2 697 2 44 2 
305 2 449 2 697 2 
305 2 145 2 697 2 
383 2 408 2 719 2 
305 2 697 2 
408 2 46 2 
657 2 697 2 
408 2 719 2 189 2 
399 2 563 2 719 2 
237 2 627 2 719 2 
436 2 719 2 230 2 
385 2 798 2 719 2 
408 2 790 2 
593 2 697 2 
399 2 242 2 
0 2 627 2 
436 2 32 2 
798 2 56 2 
408 2 756 2 
157 2 798 2 
89 2 436 2 
665 2 627 2 
28 2 399 2 
408 2 680 2 719 2 189 2 
369 2 408 2 680 2 719 2 189 2 
112 2 408 2 719 2 
408 2 639 2 719 2 
748 2 115 2 736 2 170 2 
694 2 239 2 667 2 706 2 
694 2 239 2 667 2 706 2 650 2 44 2 
694 2 550 2 239 2 603 2 305 2 697 2 
610 2 65 2 
694 2 239 2 603 2 792 2 
749 2 436 2 
798 2 208 2 
399 2 663 2 
217 2 627 2 
481 2 627 2 798 2 
746 2 627 2 798 2 
64 2 627 2 798 2 
573 2 627 2 798 2 
444 2 694 2 265 2 576 6 738 6 578 2 685 2 239 2 
491 2 408 2 
630 4 358 2 419 2 675 2 269 2 474 2 737 4 39 2 765 2 621 2 407 6 93 2 406 2 614 2 181 2 415 2 241 2 264 2 
295 2 719 2 
351 2 
522 2 310 2 311 2 312 2 1 2 316 2 422 2 199 2 6 2 529 2 202 2 204 2 530 2 432 6 210 4 13 2 735 2 327 2 740 2 104 2 331 2 16 2 441 4 343 2 747 2 225 4 345 2 635 26 118 2 31 2 33 26 645 2 462 2 352 2 43 2 552 2 353 2 562 2 476 4 147 4 669 2 568 4 58 2 261 2 671 2 156 4 674 6 161 2 773 2 688 2 274 2 379 4 277 2 586 2 692 8 589 2 784 2 502 2 700 2 595 2 701 2 177 2 504 2 285 6 392 6 288 2 398 2 787 2 183 2 511 2 411 2 413 2 87 2 717 4 
522 2 311 2 312 2 1 2 422 2 199 2 6 2 529 2 202 2 204 2 530 2 432 6 210 4 13 2 735 2 327 2 740 2 104 2 331 2 16 2 441 4 343 2 747 2 225 4 345 2 635 26 452 2 118 2 31 2 456 2 33 26 645 2 462 2 352 2 43 2 552 2 353 2 553 2 562 2 476 4 147 4 568 4 58 2 261 2 671 2 156 4 674 6 161 2 773 2 688 2 274 2 379 4 277 2 586 2 777 2 692 8 589 2 784 2 502 2 700 2 595 2 701 2 177 2 504 2 285 6 392 6 505 2 288 2 398 2 506 2 787 2 183 2 511 2 411 2 413 2 87 2 717 6 
532 2 
73 2 641 2 
357 6 472 4 525 2 194 4 245 2 2 4 420 2 476 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 8 529 2 259 2 268 2 734 2 485 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 8 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 386 10 25 2 782 6 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 6 240 2 655 2 417 2 356 2 51 2 
357 8 472 4 525 2 194 4 245 2 476 2 420 2 2 4 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 8 529 2 259 2 268 2 734 2 485 2 327 2 676 4 211 2 158 4 372 2 161 2 739 8 537 2 330 2 580 2 167 2 379 2 218 2 20 4 498 2 21 2 382 2 386 10 25 2 447 2 782 6 635 6 118 2 180 4 285 4 287 2 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 8 794 2 240 2 655 2 417 2 356 2 51 2 
548 2 357 2 472 2 734 2 525 2 158 2 245 2 2 4 782 2 537 2 146 4 363 2 149 2 180 2 259 2 655 2 417 2 21 2 
357 6 472 4 525 2 194 4 245 2 2 4 420 2 476 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 4 529 2 259 2 268 2 734 2 485 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 4 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 382 2 386 6 25 2 782 4 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 6 655 2 417 2 356 2 51 2 
357 4 472 4 525 2 194 4 245 2 2 4 420 2 476 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 4 529 2 259 2 268 2 734 2 485 2 99 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 4 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 386 6 25 2 782 6 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 6 655 2 417 2 356 2 51 2 
357 6 472 4 525 2 194 4 245 2 2 4 420 2 476 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 4 529 2 259 2 268 2 734 2 485 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 8 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 386 6 25 2 782 6 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 6 240 2 655 2 417 2 356 2 51 2 
357 6 472 4 525 2 194 4 245 2 476 2 2 4 420 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 8 529 2 259 2 268 2 734 2 485 2 99 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 8 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 386 10 25 2 782 8 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 8 240 2 655 2 417 2 356 2 51 2 
357 6 472 4 525 2 194 4 245 2 2 4 420 2 476 2 55 2 477 2 146 4 363 2 528 4 319 2 149 2 364 8 529 2 259 2 268 2 734 2 485 2 676 4 327 2 211 2 158 4 372 2 162 2 161 2 739 8 537 2 330 2 580 2 167 2 168 2 379 2 218 2 498 2 21 2 386 10 25 2 782 6 447 2 635 6 118 2 180 4 285 4 787 2 33 12 642 2 548 2 231 2 183 2 349 2 43 2 132 6 240 2 655 2 417 2 356 2 51 2 
194 4 2 4 420 2 422 2 4 2 199 2 6 2 204 2 432 8 431 2 210 2 13 2 211 2 434 2 435 2 18 2 218 2 21 2 441 4 629 1 221 2 25 2 447 2 635 24 452 2 456 2 642 2 33 46 231 2 645 2 461 6 40 2 38 6 43 2 45 6 655 2 658 6 468 2 661 6 51 2 472 4 245 2 476 4 248 2 55 2 477 2 256 1 58 2 259 2 261 2 61 2 671 12 268 2 674 6 485 2 676 8 490 6 688 2 689 2 495 2 277 2 496 1 498 4 499 6 692 4 502 2 700 2 504 2 285 6 288 4 82 2 83 2 711 2 302 6 716 1 717 6 306 7 721 1 311 2 525 2 312 2 528 6 319 2 529 2 530 2 734 2 327 2 99 4 735 2 533 2 739 2 740 2 537 2 330 4 331 2 538 2 107 8 108 6 114 2 747 2 543 2 344 1 118 2 546 2 548 2 121 4 120 6 349 2 752 1 754 6 130 2 132 12 555 2 137 2 356 4 559 2 357 4 561 1 562 2 146 4 363 2 149 2 568 4 156 4 368 10 771 2 772 2 158 4 575 6 372 2 160 2 161 2 162 2 577 2 580 2 167 2 379 4 586 2 588 2 386 2 590 2 782 8 389 7 784 2 391 2 177 2 180 4 392 6 179 6 785 1 787 2 183 2 789 2 608 6 405 4 611 6 411 2 417 2 193 6 
525 2 311 2 194 4 312 2 420 2 2 4 528 6 4 2 319 2 422 2 199 4 6 2 529 2 204 2 530 2 431 2 432 8 210 2 734 2 13 4 735 2 327 2 434 2 211 2 435 2 533 2 739 6 537 2 740 4 330 4 331 2 18 2 538 2 218 2 108 6 107 8 441 4 21 2 114 2 747 2 221 2 25 2 447 2 543 2 225 2 635 26 452 2 118 2 546 2 456 2 33 48 642 2 120 6 121 4 231 2 548 2 349 2 645 2 461 6 754 6 38 6 40 2 130 2 43 2 555 2 132 12 45 6 240 4 655 2 658 6 137 2 468 2 356 4 661 6 559 2 51 2 357 8 472 4 245 2 562 2 476 4 55 2 248 2 477 2 146 4 363 2 149 2 58 2 568 4 259 2 261 2 61 2 671 12 268 2 368 10 156 4 771 2 485 2 674 6 676 8 772 2 575 6 158 4 371 2 160 2 372 2 577 2 162 2 161 2 490 6 688 2 689 2 167 2 580 2 495 2 379 4 70 2 277 2 498 4 586 2 499 6 692 8 588 2 386 2 590 2 782 8 784 2 391 2 502 2 700 2 504 2 177 2 179 6 392 6 180 4 285 6 288 4 787 2 183 2 82 2 83 2 789 2 302 6 711 2 608 6 405 4 611 6 411 2 717 6 417 2 193 6 
525 2 311 2 194 4 312 2 420 2 2 4 528 6 4 2 319 2 422 2 199 4 6 2 529 2 204 2 530 2 431 2 432 8 210 2 734 2 13 4 735 2 327 2 434 2 211 2 435 2 533 2 739 6 537 2 740 4 330 4 331 2 18 2 538 2 218 2 108 6 107 8 441 4 21 2 114 2 747 2 221 2 25 2 447 2 543 2 225 2 635 26 452 2 118 2 546 2 456 2 33 48 642 2 120 6 121 4 231 2 548 2 349 2 645 2 461 6 754 6 38 6 40 2 130 2 43 2 555 2 132 12 45 6 240 4 655 2 658 6 137 2 468 2 356 4 661 6 559 2 51 2 357 8 472 4 245 2 562 2 476 4 55 2 248 2 477 2 146 4 363 2 149 2 364 4 58 2 568 4 259 2 261 2 61 2 671 12 268 2 368 10 156 4 771 2 674 6 485 2 676 8 772 2 575 6 158 4 371 2 160 2 372 2 577 2 162 2 161 2 490 6 688 2 689 2 167 2 580 2 495 2 379 4 70 2 277 2 498 4 586 2 499 6 692 8 588 2 386 6 590 2 782 8 784 2 391 2 502 2 700 2 504 2 177 2 179 6 392 6 180 4 285 6 288 4 787 2 183 2 82 2 83 2 789 2 302 6 711 2 608 6 405 4 611 6 411 2 717 6 417 2 193 6 
194 4 2 4 420 2 422 2 4 2 199 4 6 2 200 2 622 2 204 2 206 6 432 12 431 2 210 4 13 4 211 2 434 2 435 2 214 6 18 2 218 2 21 2 441 6 221 2 25 2 633 2 447 2 225 2 635 24 452 2 456 2 642 2 33 52 231 2 645 2 461 6 40 2 38 6 43 2 45 6 240 4 655 2 658 6 468 2 661 6 51 2 472 4 245 2 476 4 248 2 249 2 55 2 477 2 250 6 58 2 259 2 261 2 61 2 671 10 268 2 485 2 674 8 676 8 490 6 688 2 689 2 495 2 70 2 277 2 498 4 499 12 692 10 502 2 700 2 504 2 285 6 288 4 82 2 83 2 711 2 302 12 717 6 311 2 525 2 312 4 725 6 318 2 528 6 319 2 529 2 530 4 734 2 327 2 735 2 99 2 534 2 739 6 740 4 537 2 330 4 331 2 538 2 743 6 333 6 107 8 108 12 114 2 747 4 543 2 118 2 546 2 548 2 121 4 120 6 349 2 754 6 130 2 132 16 555 2 137 2 356 4 559 2 357 10 562 2 146 4 363 2 149 2 364 4 568 4 770 6 156 4 368 8 771 2 772 2 158 4 575 12 371 2 372 2 160 2 161 2 162 2 577 2 580 2 167 2 379 4 585 6 381 2 586 2 171 6 382 2 588 2 386 6 590 2 782 10 784 4 391 2 177 2 180 4 392 8 179 6 786 2 787 2 183 2 789 2 608 12 405 4 611 6 411 2 417 2 193 12 
357 6 472 4 194 2 386 4 25 2 420 2 2 2 447 2 782 6 477 2 146 2 528 2 363 2 319 2 149 2 364 4 180 4 33 4 231 2 548 2 734 2 485 2 676 2 211 2 162 2 739 6 132 4 167 2 580 2 240 2 655 2 218 2 417 2 498 2 21 2 
194 2 311 2 312 3 2 2 420 2 528 2 422 2 319 2 6 2 529 2 204 2 530 3 432 8 210 3 734 2 327 2 735 2 211 2 533 2 739 6 741 2 218 2 441 4 21 2 25 2 447 2 635 24 118 2 452 2 456 2 33 28 642 2 548 2 231 2 645 2 351 2 43 2 132 4 354 2 240 2 655 2 357 6 472 4 359 2 140 2 562 2 476 4 477 2 146 2 363 2 149 2 568 4 58 2 261 2 262 2 671 4 156 4 368 2 63 2 485 2 674 6 676 2 162 2 161 2 688 2 580 2 167 2 379 4 277 2 498 2 586 2 386 2 388 2 782 6 502 2 700 2 177 2 504 2 702 2 180 4 285 6 392 6 288 2 787 2 183 2 299 3 411 2 717 6 417 2 
485 2 580 2 724 2 
485 2 580 2 724 2 
525 2 311 2 194 2 724 2 2 2 619 2 528 4 422 2 5 2 199 4 6 2 529 2 204 2 207 4 432 2 210 2 13 4 735 2 327 2 99 4 211 2 739 6 740 4 330 2 331 4 626 4 111 2 113 2 25 2 635 16 452 2 118 2 453 2 30 2 456 2 33 24 121 2 548 4 122 2 349 2 645 2 352 4 130 2 43 2 132 16 240 4 356 4 51 2 357 12 472 4 245 2 562 2 476 4 55 2 146 2 363 2 364 4 567 2 568 4 58 2 261 2 671 4 368 2 156 4 484 2 771 2 485 6 674 2 676 4 158 4 161 2 688 2 580 4 379 4 586 2 498 4 692 4 382 4 780 2 386 6 175 2 782 12 502 2 700 2 177 2 504 2 285 6 392 2 180 4 705 2 288 6 395 2 787 2 80 2 183 2 294 2 82 2 515 2 609 2 405 2 611 2 411 2 717 6 417 2 
673 2 368 2 327 2 73 2 175 2 590 2 537 2 515 2 635 2 652 2 405 2 346 2 611 2 61 2 671 2 33 4 80 2 
525 2 194 2 311 2 724 2 2 2 619 2 528 4 422 2 5 2 199 4 6 2 529 2 321 2 204 2 207 4 432 2 210 4 13 4 735 2 327 2 99 4 211 2 739 6 740 4 330 4 331 4 626 4 111 2 113 4 25 2 635 16 452 2 118 2 455 2 30 2 456 2 33 24 121 2 548 4 122 2 349 2 645 2 352 4 130 2 649 2 43 2 132 16 240 4 356 4 51 2 357 12 472 4 245 2 562 2 476 4 55 2 146 2 363 2 364 4 568 4 58 2 261 2 671 2 268 2 156 4 484 2 771 2 485 6 674 2 676 4 158 4 161 2 688 2 580 4 379 4 586 2 498 4 692 4 382 4 386 6 175 2 782 12 502 2 700 2 177 2 504 2 285 6 392 2 180 4 705 2 288 6 395 2 787 2 80 2 183 2 82 2 298 2 515 2 609 2 611 2 612 2 411 2 717 6 417 2 
525 2 311 2 194 2 724 2 2 2 619 2 528 4 422 2 5 2 199 4 6 2 529 2 204 2 207 4 432 2 210 2 13 4 433 2 735 2 327 2 99 4 211 2 739 6 740 4 330 4 331 4 334 2 626 4 111 2 113 2 25 2 635 16 452 2 118 2 30 2 456 2 33 24 121 2 548 4 122 2 349 2 645 2 352 4 130 2 43 2 132 16 240 4 356 4 51 2 357 12 472 4 245 2 562 2 476 4 55 2 146 2 363 2 670 2 364 4 568 4 58 2 261 2 671 4 268 2 368 2 156 4 484 2 771 2 485 6 674 2 676 4 158 4 161 2 688 2 580 4 379 4 586 2 498 4 692 4 382 4 386 6 175 2 782 12 502 2 700 2 177 2 504 2 285 6 392 2 180 4 705 2 288 6 395 2 787 2 80 2 183 2 82 2 400 2 709 2 515 2 609 2 405 2 611 2 411 2 717 6 417 2 
195 2 1 2 196 2 422 4 200 2 622 2 201 2 427 12 202 2 204 2 203 2 8 2 429 2 209 2 432 28 430 2 210 19 11 2 437 2 212 4 15 2 16 2 215 2 439 2 216 10 440 2 441 12 442 2 222 2 633 2 446 3 448 2 26 2 227 8 635 30 452 4 29 8 456 4 638 12 640 2 229 10 33 40 458 12 460 3 459 2 645 2 37 2 647 2 41 2 43 2 654 6 238 19 656 2 659 2 49 2 50 2 469 10 470 2 243 4 244 2 475 2 476 4 248 2 249 2 254 2 255 2 480 14 58 4 60 4 260 2 261 2 262 2 671 2 263 4 266 4 267 2 674 14 677 2 678 2 679 3 486 16 489 24 681 2 66 4 684 2 272 2 687 2 274 2 275 16 494 4 495 2 277 2 72 2 692 40 500 2 74 6 282 4 283 4 76 2 502 4 699 4 698 2 504 2 503 2 702 2 285 6 703 2 286 2 288 2 289 4 290 4 293 2 509 2 297 2 83 2 299 2 511 2 512 4 711 2 712 10 304 8 513 2 514 8 714 2 717 12 308 2 521 3 522 2 523 2 311 2 312 19 723 2 526 2 317 2 529 2 730 2 530 16 323 2 732 3 325 2 326 2 327 2 534 2 328 8 102 8 103 14 331 4 104 2 105 2 538 2 539 2 745 12 109 36 747 18 543 2 544 2 345 14 117 4 118 2 347 2 123 2 124 2 126 8 127 2 753 2 128 8 129 2 353 2 133 4 134 2 354 2 758 6 135 8 355 2 557 2 560 2 762 3 140 2 142 2 562 4 151 36 568 6 569 16 570 4 767 4 571 2 156 6 772 4 163 1 161 2 166 4 377 2 379 4 381 2 586 4 587 2 779 2 387 2 592 2 390 2 784 46 176 10 178 2 177 2 392 14 596 2 786 2 597 2 396 2 397 2 398 2 787 2 183 2 184 2 187 2 605 2 188 2 403 1 793 2 414 4 192 2 416 2 418 2 615 2 799 2 617 2 
432 2 210 2 184 2 762 2 674 2 779 2 312 2 487 2 605 2 681 2 712 2 544 2 784 6 176 2 635 2 596 2 392 2 216 4 416 2 277 2 530 2 50 2 33 2 441 2 
432 2 210 2 184 2 762 2 674 2 779 2 312 2 487 2 605 2 681 2 712 2 544 2 784 6 176 2 635 2 596 2 392 2 216 4 416 2 277 2 530 2 50 2 33 2 441 2 
432 2 210 2 184 2 762 2 674 2 779 2 312 2 487 2 605 2 681 2 712 2 544 2 784 6 176 2 635 2 596 2 392 2 216 4 416 2 277 2 530 2 50 2 33 2 441 2 
432 2 210 3 312 3 679 3 710 3 37 2 421 2 166 2 494 2 277 2 263 2 50 2 788 2 337 2 521 3 
432 2 210 2 166 2 312 2 679 2 494 2 710 2 37 2 277 2 421 2 263 2 50 2 337 2 788 2 521 2 
432 2 210 2 166 2 312 2 679 2 494 2 710 2 37 2 277 2 421 2 263 2 50 2 337 2 788 2 521 2 
432 2 210 2 166 2 312 2 679 2 494 2 710 2 37 2 277 2 421 2 263 2 50 2 337 2 788 2 521 2 
432 2 210 2 166 2 312 2 679 2 494 2 710 2 37 2 277 2 421 2 263 2 50 2 337 2 788 2 521 2 
535 2 271 2 513 2 764 2 558 2 672 2 
774 2 768 2 271 2 182 2 131 2 345 2 531 2 
309 2 644 2 186 2 463 1 173 2 90 2 634 2 247 2 682 2 696 2 27 1 635 8 566 1 529 2 637 1 613 2 219 1 497 2 520 2 33 10 720 2 
244 2 666 1 781 1 390 2 227 4 635 3 29 3 77 1 60 2 570 2 394 1 98 1 33 3 732 2 507 2 486 7 126 4 128 3 66 2 304 4 328 3 713 1 102 4 514 2 103 5 238 9 332 1 135 4 414 1 775 1 
500 2 81 2 443 1 325 2 677 2 35 2 350 2 450 2 404 2 635 1 17 2 516 2 71 2 48 2 154 2 744 4 205 7 33 1 
81 2 500 2 325 2 677 2 35 2 350 2 450 4 404 2 17 4 516 2 71 2 48 2 154 4 744 4 205 6 
81 8 500 2 443 1 325 2 677 2 35 2 350 2 450 8 404 6 635 1 17 8 516 2 71 2 48 2 154 8 744 4 205 10 33 1 
500 2 325 2 677 2 35 2 350 2 450 2 17 2 516 2 71 2 48 2 154 2 744 2 205 2 
315 2 119 2 643 2 600 2 234 1 760 1 
600 2 643 2 119 2 315 2 
600 2 643 2 119 2 315 2 
600 2 643 2 119 2 315 2 
451 2 
