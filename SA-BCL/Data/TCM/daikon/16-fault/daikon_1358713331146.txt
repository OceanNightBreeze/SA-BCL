#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V ERROR java.lang.NullPointerException 37 
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NoClassDefFoundError 85 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 115 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 115 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NoClassDefFoundError 115 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 115 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 115 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NoClassDefFoundError 427 40 84 289 426 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.NullPointerException 189 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NoClassDefFoundError 283 409 7 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NoClassDefFoundError 283 409 7 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NoClassDefFoundError 283 409 7 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NoClassDefFoundError 283 409 7 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:slice([III)[I
jtb.ParseException:getMessage()Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
jtb.JavaCharStream:FillBuff()V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.LimitedSizeIntSet:size()I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.MathMDE:gcd(II)I
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:eltwiseGT([I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
jtb.JavaCharStream:readChar()C
daikon.Quant:eltwiseEqual([I)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
jtb.JavaParser:jj_scan_token(I)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:eltsGTE([II)Z
daikon.Quant:lexEqual([I[I)Z
jtb.JavaCharStream:ReadByte()C
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:subsetOf([S[S)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V | ASSIGN | 58129 | = null
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
jtb.JavaCharStream:getBeginColumn()I
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.OrderedPairIterator:setnext1()V
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:lte(DD)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.ModBitTracker:num_sets()I
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.ModBitTracker:split(I)I
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.Invariant:prob_and(DDD)D
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.Invariant:prob_or(DD)D
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:noDups([I)Z
utilMDE.MathMDE:gcd([I)I
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:union([I[I)[I
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.Quant:subsetOf([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.Quant:isReverse([I[I)Z | CONDITION | 156037 | if (x) -> if (!x)
daikon.Quant:eltsEqual([II)Z
utilMDE.MathMDE:missing_numbers([I)[I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:lt(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.Quant:subsetOf([D[D)Z
daikon.Quant:eltsLteIndex([I)Z
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:lexGT([I[I)Z
utilMDE.ArraysMDE:subarray([JII)[J
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I | CONSTANT | 21933 | 99 -> 1
daikon.Quant:eltsGT([II)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsLT([II)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.test.TestQuant:removeAdjacentDups([I)[I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.MathMDE:sign(I)I
daikon.Quant:subsetOf([D[F)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.ArraysMDE:indexOf([I[I)I
jtb.JavaParser:jj_ntk()I
jtb.JavaParser:jj_2_16(I)Z
daikon.Quant:memberOf(F[D)Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.Quant:memberOf(D[F)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltsLTE([II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.ArraysMDE:max([I)I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
utilMDE.ArraysMDE:fn_identity(I)[I
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.inv.Invariant:prob_and(DD)D
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.Quant:eltsNotEqual([II)Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.Quant:eltsGteIndex([I)Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.Assert:assertTrue(Z)V
utilMDE.MathMDE:pow_fast(II)I
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
jtb.JavaCharStream:getBeginLine()I
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.Intern:numIntArrays()I
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:lexGTE([I[I)Z
jtb.JavaCharStream:backup(I)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z | ASSIGN | 925 | = null
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
utilMDE.MathMDE:negate(I)I
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.ArraysMDE:concat([I[I)[I
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.Intern:intern([D)[D
daikon.ValueTuple:isMissing(I)Z
daikon.Quant:memberOf(S[S)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.MathMDE:gcd(JJ)J
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.Quant:pairwiseGTE([I[I)Z
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.Quant:memberOf(F[F)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.Quant:eltwiseGTE([I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
jtb.JavaParser:generateParseException()Ljtb.ParseException;
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
jtb.JavaParser:jj_3_16()Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.MathMDE:pow(II)I
utilMDE.ArraysMDE:sum([I)I
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.ValueTuple:size()I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:gt(II)Z
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Quant:setEqual([I[I)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.Quant:eq(FF)Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:memberOf(I[I)Z
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.Quant:lexLT([I[I)Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.MathMDE:modulus([I)[I
utilMDE.Intern:internSubsequence([III)[I
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsGtIndex([I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J | OPERATOR | 13933 | > -> <=
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.Quant:lexLTE([I[I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.Quant:setDiff([I[I)[I
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.Quant:concat([I[I)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
jtb.JavaCharStream:getEndColumn()I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.Quant:eq(DD)Z
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:pairwiseEqual([I[I)Z
daikon.Quant:gte(II)Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.Quant:eq(II)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.ArraysMDE:sum([D)D
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:lte(II)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.Intern:intern([I)[I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.Quant:ne(II)Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.ArraysMDE:min_max([I)[I
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.Quant:memberOf(J[J)Z
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsLtIndex([I)Z
daikon.Quant:eltwiseNotEqual([I)Z
jtb.JavaCharStream:getEndLine()I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.Quant:intersection([I[I)[I
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.Quant:sameLength([I[I)Z
utilMDE.MathMDE:gcd_differences([I)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.Quant:subsetOf([J[J)Z
daikon.ModBitTracker:num_samples()I
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:subsetOf([F[D)Z
daikon.Quant:subsetOf([B[I)Z
jtb.Token:newToken(I)Ljtb.Token;
jtb.syntaxtree.NodeToken:trimSpecials()V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.Intern:intern([J)[J
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap:size()I
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltwiseLT([I)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.ArraysMDE:sum([[I)I
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.Quant:subsetOf([F[F)Z
daikon.ModBitTracker:num_vars()I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaCharStream:BeginToken()C
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.ArraysMDE:element_range([I)I
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.ProglangType:dimensions()I
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.ArraysMDE:sum([[D)D
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.Quant:eq(JJ)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap:processQueue()V
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.test.InvariantFormatTester:execute()Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
384 2 278 2 331 2 296 2 202 2 19 4 137 2 153 2 172 2 
49 2 303 2 234 2 199 2 37 2 163 2 
167 4 58 2 137 2 382 6 172 2 288 2 346 6 64 2 20 2 46 6 67 6 22 4 70 2 
118 8 320 2 321 4 373 6 325 6 51 8 355 16 268 4 271 16 385 4 231 8 194 12 137 6 312 26 344 2 169 29 232 10 172 6 142 10 110 2 348 2 87 2 421 10 422 10 349 16 48 10 203 2 174 4 177 8 265 2 
248 4 214 6 
241 2 
148 2 375 2 379 2 153 2 156 2 269 2 4 2 332 2 334 4 336 2 273 2 223 2 387 2 274 2 57 2 342 2 105 2 394 2 344 2 172 4 17 2 404 2 69 2 236 2 243 2 185 2 127 2 188 2 35 4 252 4 131 2 82 2 416 2 137 4 135 2 197 2 364 2 200 2 201 4 316 2 43 2 262 2 263 2 369 2 
240 2 373 4 149 4 0 2 1 6 380 6 325 4 51 18 355 32 54 4 219 6 271 32 76 2 385 2 358 4 359 6 81 6 12 2 194 22 136 4 137 4 312 48 232 16 169 54 172 4 60 8 420 4 18 4 142 16 422 16 348 2 112 2 421 6 349 32 48 16 423 2 68 6 206 4 177 6 
211 2 61 2 269 2 
212 2 133 2 59 2 151 2 196 2 52 2 364 2 140 2 62 2 333 2 400 22 88 10 367 2 145 2 
407 2 374 2 378 2 325 2 51 2 184 2 355 2 271 2 6 2 385 2 98 2 194 2 312 4 313 2 232 2 169 6 106 2 142 2 422 2 421 4 349 2 48 2 147 2 
149 4 194 4 285 2 380 6 312 12 268 2 355 8 232 4 169 16 420 4 142 4 304 2 271 8 422 4 349 8 48 4 359 6 
267 2 211 2 120 4 121 62 26 2 376 2 94 2 324 4 123 2 159 2 269 8 220 2 74 4 334 4 126 4 78 2 249 4 9 4 57 2 191 2 229 4 132 4 134 2 284 4 394 4 16 4 61 6 108 14 141 2 47 2 21 10 235 2 173 2 89 2 425 2 146 2 352 4 292 10 264 2 237 2 
166 2 241 2 391 2 256 2 286 2 216 2 139 2 171 2 399 2 371 2 
193 2 322 2 85 2 412 2 
39 2 137 2 
72 2 137 4 158 2 
75 2 
150 2 91 2 377 4 326 6 3 2 53 4 155 6 157 2 329 2 270 12 96 2 335 8 222 2 8 6 338 6 226 8 388 2 275 2 10 10 164 18 227 8 277 2 279 6 101 12 230 2 281 8 341 12 168 2 13 2 392 12 14 2 170 2 290 12 397 10 233 4 113 2 350 12 178 4 294 2 239 16 180 12 353 2 354 2 27 40 299 2 300 2 30 4 302 12 187 12 128 4 79 2 34 40 129 4 80 2 306 4 251 10 254 4 192 4 362 12 41 12 363 2 198 4 257 40 314 2 419 10 42 2 258 2 261 10 205 6 
182 1 311 2 351 2 107 2 
311 2 154 2 
253 2 119 2 104 2 311 2 174 2 345 2 269 2 
253 2 246 2 311 2 
253 2 311 2 90 2 
92 2 351 2 
253 2 311 2 
93 2 327 2 
160 2 311 2 
351 2 327 2 308 2 
372 2 309 2 351 2 
242 2 175 2 351 2 
323 2 318 2 351 2 
221 2 351 2 100 2 
327 2 28 2 
340 2 311 2 
309 2 381 2 
44 2 242 2 
25 2 318 2 
100 2 228 2 
327 2 370 2 
165 2 100 2 
280 2 318 2 
103 2 242 2 
309 2 339 2 
33 2 351 2 327 2 308 2 
33 2 351 2 327 2 308 2 266 2 
295 2 351 2 327 2 
351 2 245 2 327 2 
395 2 365 2 347 2 11 2 
104 2 298 2 204 2 269 2 
119 2 104 2 298 2 204 2 86 2 269 2 
253 2 104 2 311 2 174 2 293 2 269 2 
342 2 77 2 
104 2 2 2 174 2 269 2 
114 2 318 2 
32 2 100 2 
117 2 309 2 
143 2 242 2 
260 2 242 2 100 2 
242 2 291 2 100 2 
109 2 242 2 100 2 
186 2 242 2 100 2 
183 6 213 2 95 2 269 2 307 2 104 2 417 6 368 2 
327 2 301 2 
102 2 361 2 138 2 356 4 124 2 400 6 413 2 337 2 305 4 225 2 36 2 116 2 176 2 360 2 130 2 389 2 250 2 208 2 
99 2 351 2 
122 2 
193 2 322 2 115 2 412 2 
193 2 322 2 115 2 412 2 
5 2 66 2 410 2 
5 2 66 2 410 2 
193 2 322 2 115 2 412 2 
193 2 322 2 115 2 412 2 
193 2 322 2 115 2 412 2 
406 2 405 2 181 2 152 2 29 2 218 2 190 2 166 1 255 2 282 2 40 2 137 4 84 2 286 1 289 2 426 2 427 2 
97 2 210 2 45 2 408 2 401 2 418 2 
217 2 401 2 402 2 386 2 15 2 144 2 24 2 
50 2 244 2 330 2 55 2 357 2 272 2 161 1 224 2 56 2 390 2 276 2 38 2 414 1 415 2 195 2 137 10 310 1 393 2 172 8 111 2 65 2 235 1 173 1 403 2 207 2 238 2 
149 2 373 2 380 4 411 2 355 6 271 6 247 2 189 2 358 2 81 4 135 2 83 2 312 12 287 2 169 17 232 6 43 2 396 2 142 6 422 6 349 6 48 6 319 2 177 4 
179 2 71 2 297 2 343 3 215 2 73 2 317 2 383 2 31 2 259 2 398 2 125 2 23 2 
179 2 71 4 297 2 137 1 343 6 215 2 73 2 172 1 328 1 317 2 383 2 259 2 31 2 398 2 125 2 162 2 209 2 23 2 
179 2 71 4 297 2 343 6 215 2 73 2 317 2 383 2 31 2 259 4 398 2 125 4 162 2 209 2 23 4 
179 2 71 4 297 2 137 1 343 10 215 2 73 2 172 1 328 1 317 2 383 2 31 2 259 8 398 2 125 8 162 8 209 6 23 8 
7 2 283 2 172 2 409 2 137 2 315 1 366 1 424 2 
7 2 283 2 137 2 409 2 424 2 172 2 
7 2 283 2 137 2 409 2 424 2 172 2 
7 2 283 2 137 2 409 2 424 2 172 2 
63 2 
