#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 29 610 617 285 716 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 527 568 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 738 549 468 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 738 549 468 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 738 549 468 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 738 549 468 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvMap:InvMap()V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern([I)[I
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.ValueSet:ValueSet(I)V
daikon.Quant:lexGTE([I[I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.PptSlice1:num_samples()I
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:noDups([I)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariants:Invariants()V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo; | ASSIGN | 22517 | = null
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.Quant:pairwiseLTE([I[I)Z
jtb.JavaParser:jj_3R_57()Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
jtb.JavaParser:jj_3R_134()Z
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Ppt:Ppt()V
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
jtb.JavaCharStream:BeginToken()C
jtb.JavaParser:jj_3R_58()Z
jtb.JavaParser:generateParseException()Ljtb.ParseException;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
utilMDE.ArraysMDE:sum([[D)D
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.Quant:eltwiseLT([I)Z
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.PptSlice2:arity()I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:lexGT([I[I)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.JavaCharStream:getEndLine()I
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.ArraysMDE:sum([D)D
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
jtb.JavaParser:jj_3R_50()Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.Quant:memberOf(F[F)Z
utilMDE.Intern:intern([D)[D
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.Quant:eltwiseNotEqual([I)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.Modifiers:Modifiers(Ljtb.syntaxtree.NodeListOptional;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.Quant:lt(II)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.ProglangType:baseIsIntegral()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.FuzzyFloat:gt(DD)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
jtb.JavaParser:jj_3R_163()Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
jtb.JavaParser:jj_3R_85()Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaParser:jj_3R_135()Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
utilMDE.Intern:internSubsequence([III)[I
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
jtb.Token:newToken(I)Ljtb.Token;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:baseIsScalar()Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.EntrySet:size()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I | CONSTANT | 17989 | 115 -> 1
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.MathMDE:pow_fast(II)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.Quant:pairwiseEqual([I[I)Z
jtb.JavaCharStream:getEndColumn()I
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.Quant:eq(DD)Z
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
jtb.JavaParser:jj_3R_54()Z
daikon.inv.unary.UpperBoundCore:computeProbability()D
utilMDE.Assert:assertTrue(Z)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.VarInfo:name()Ljava.lang.String;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.Quant:eltwiseEqual([I)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:setEqual([I[I)Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.ProglangType:isIntegral()Z
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:lexNotEqual([I[I)Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.Quant:setDiff([I[I)[I
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:intersection([I[I)[I
utilMDE.MathMDE:gcd(II)I
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern:numIntArrays()I
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eq(II)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
jtb.JavaParser:jj_3R_47()Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.Quant:eltsGTE([II)Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.diff.RootNode:RootNode()V
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.Quant:lexEqual([I[I)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:FillBuff()V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.Quant:concat([I[I)[I
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:memberOf(J[J)Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.syntaxtree.Modifiers:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.ArraysMDE:sum([I)I
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.VarInfoName:hashCode()I
utilMDE.FuzzyFloat:eq(DD)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:sameLength([I[I)Z
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.Invariant:isWorthPrinting()Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
utilMDE.MathMDE:sign(I)I
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.Quant:memberOf(F[D)Z
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.ProglangType:dimensions()I
daikon.Quant:slice([III)[I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.ProglangType:isPseudoArray()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:ne(II)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.Invariant:logOn()Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.Debug:logDetail()Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.inv.filter.ParentFilter:ParentFilter()V
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.Quant:eltsLTE([II)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
jtb.JavaParser:jj_3R_52()Z
daikon.Quant:isReverse([I[I)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.ArraysMDE:max([I)I
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.ArraysMDE:sum([[I)I
utilMDE.Options.OptionInfo:argument_required()Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.ArraysMDE:sorted([I)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
jtb.JavaCharStream:getBeginColumn()I
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | ASSIGN | 2763 | = null
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.PptName:isEnterPoint()Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.Quant:union([I[I)[I
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.LimitedSizeIntSet:add(I)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:subsetOf([F[D)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfo:relate_var()V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaCharStream:readChar()C
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.Quant:eq(JJ)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([I[I)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:memberOf(D[F)Z
daikon.VarInfo:new_ppt()V
daikon.Quant:subsetOf([S[S)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.Invariant:justified()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.Intern:intern([J)[J
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:eltsGtIndex([I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | ASSIGN | 1095 | = null
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.MathMDE:missing_numbers([I)[I
jtb.JavaParser:jj_ntk()I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.MathMDE:mod_positive(II)I
jtb.JavaParser:jj_scan_token(I)Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName; | ASSIGN | 4561 | = null
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.Quant:eltwiseGT([I)Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:jj_3_16()Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.WeakHasherMap:size()I
jtb.JavaCharStream:ReadByte()C
daikon.Quant:eltsGT([II)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.Quant:eltsEqual([II)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.Quant:eltsNotEqual([II)Z
utilMDE.ArraysMDE:concat([I[I)[I
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
jtb.JavaParser:jj_3R_53()Z
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.Invariant:prob_and(DD)D
daikon.PptSlice1:arity()I
daikon.ProglangType:isArray()Z
daikon.Quant:lte(II)Z
daikon.Quant:subsetOf([F[F)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.Debug:logOn()Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.Quant:eltwiseLTE([I)Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.JavaParser:jj_3R_48()Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:calc_range()J
jtb.JavaCharStream:getBeginLine()I
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.MathMDE:pow(II)I
daikon.PptName:isCombinedExitPoint()Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.Quant:subsetOf([D[D)Z
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.Quant:subsetOf([B[I)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
jtb.JavaCharStream:backup(I)V
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel.CondIterator:hasNext()Z
jtb.JavaParser:jj_2_1(I)Z
jtb.JavaParser:jj_3R_161()Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.Quant:eltsLT([II)Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
jtb.JavaParser:jj_3R_49()Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.inv.Invariant:logDetail()Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.PptSlice0:arity()I
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.Node:Node()V
utilMDE.MathMDE:gcd(JJ)J
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.ArraysMDE:min_max([I)[I
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
jtb.JavaParser:jj_3_1()Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.Quant:gt(II)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:memberOf(S[S)Z
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.ArraysMDE:element_range([I)I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.Quant:subsetOf([D[F)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.Quant:eltsLteIndex([I)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:isScalar()Z
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.MathMDE:negate(I)I
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
jtb.JavaParser:jj_3R_133()Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.test.InvariantFormatTester:execute()Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
jtb.JavaParser:jj_3R_56()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
utilMDE.WeakHasherMap:processQueue()V
daikon.Quant:lexLTE([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:lexLT([I[I)Z
jtb.JavaParser:jj_3R_162()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 913 | = null
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:gte(II)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
jtb.JavaParser:jj_2_16(I)Z
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:subsetOf([J[J)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
jtb.JavaParser:jj_3R_55()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.Invariant:getConfidence()D
daikon.inv.Invariant:prob_or(DD)D
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.Invariant:prob_and(DDD)D
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.Quant:eq(FF)Z
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.MathMDE:gcd([I)I
utilMDE.MathMDE:modulus([I)[I
utilMDE.ArraysMDE:isSubset([D[D)Z
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParser:jj_3R_51()Z
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.Quant:memberOf(I[I)Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
633 2 241 2 740 2 266 2 708 2 459 2 695 4 520 2 571 2 
651 2 439 2 698 2 653 2 268 6 628 6 348 2 109 2 701 2 339 6 13 2 
0 4 621 4 761 2 749 2 189 6 516 6 69 6 633 2 241 2 564 2 333 6 796 2 177 2 
745 4 407 8 146 16 625 30 517 6 650 16 298 2 6 6 74 2 368 8 302 4 355 26 209 2 179 2 134 4 630 8 715 12 473 10 503 10 658 8 15 2 720 10 156 16 112 2 633 6 241 6 262 10 359 4 694 10 286 2 
491 6 181 4 
488 2 
697 2 745 2 428 2 47 2 223 2 146 2 625 6 650 2 297 2 6 2 368 2 355 4 135 2 576 2 473 2 715 2 503 2 720 2 156 2 315 2 193 2 262 4 694 2 
699 4 715 5 473 4 503 4 623 6 146 8 494 6 625 14 720 4 650 8 156 8 302 2 694 4 355 12 133 4 522 2 305 2 
671 4 325 4 125 4 674 4 245 62 4 2 775 2 626 2 437 2 7 2 728 4 438 2 754 2 776 2 387 2 75 2 598 2 497 2 207 6 226 2 539 2 711 2 541 4 371 2 108 2 38 4 543 14 762 8 736 2 480 2 688 4 689 4 159 4 789 4 282 10 584 4 613 2 197 10 242 2 797 4 
758 2 492 2 447 2 310 2 16 2 750 2 454 2 402 2 381 2 488 2 
46 2 48 2 648 2 249 2 436 2 299 4 354 2 444 2 211 2 446 2 762 2 449 2 114 2 664 2 613 2 764 2 767 2 556 2 322 4 405 2 671 4 222 2 126 2 270 2 327 2 463 2 172 4 777 2 730 2 629 2 520 2 77 2 524 2 631 2 138 2 530 2 633 4 689 2 241 4 636 2 43 2 639 2 286 2 490 2 
745 2 670 4 534 6 124 4 699 4 166 2 458 2 26 6 146 32 623 6 494 6 752 2 625 54 517 4 650 32 496 2 6 4 706 2 709 8 368 18 303 6 355 48 133 4 630 6 277 4 473 16 150 6 337 4 715 22 503 16 372 4 720 16 156 32 112 2 633 4 421 2 241 4 262 6 694 16 
207 2 762 2 242 2 
357 22 199 2 605 2 417 2 145 2 461 10 293 2 60 2 774 2 702 2 654 2 767 2 443 2 306 2 
289 2 588 2 290 2 90 2 200 3 291 2 201 2 94 2 294 3 95 2 96 2 5 1 704 2 595 16 296 4 205 2 707 2 9 2 708 2 710 2 389 2 498 2 390 2 11 1 604 2 210 16 396 2 212 2 505 2 719 2 110 2 18 6 316 2 508 2 19 2 509 2 214 2 115 2 319 2 23 24 118 2 320 2 723 1 218 2 119 1 122 2 24 2 622 2 25 4 513 1 28 4 515 2 328 2 518 1 225 3 732 5 521 2 523 2 34 3 33 1 334 2 336 2 235 2 40 1 238 8 420 2 737 3 340 2 633 34 140 2 241 32 531 2 640 32 423 1 143 32 427 2 244 2 430 6 246 12 247 2 350 2 435 3 440 1 442 2 356 4 445 2 254 16 546 2 152 2 547 2 548 2 61 6 763 2 154 1 63 2 451 2 160 1 765 2 766 2 557 2 163 16 666 2 558 2 665 2 362 2 269 2 773 4 676 4 170 8 677 1 275 3 679 2 680 2 466 2 567 2 76 2 467 2 175 2 569 2 78 2 781 6 783 2 470 2 575 2 370 2 684 2 182 1 279 1 80 2 79 3 280 4 184 3 373 2 81 1 185 3 687 3 579 24 785 2 482 2 191 2 84 3 283 2 196 2 379 2 86 8 485 2 87 4 
756 2 
633 2 331 2 
633 4 593 2 768 2 
589 2 591 2 700 2 202 14 703 18 705 10 99 2 100 8 600 2 102 14 104 4 713 10 714 2 106 6 395 2 311 8 312 2 718 2 17 10 612 2 215 2 616 14 117 2 121 2 219 6 512 2 224 4 727 2 409 18 128 2 729 8 31 2 130 2 227 14 230 14 415 2 335 2 36 2 338 2 139 48 239 2 637 10 422 10 342 4 638 14 744 4 347 4 424 10 426 12 645 2 432 2 748 2 535 2 646 2 349 2 351 10 148 2 55 2 655 2 540 6 656 2 657 2 544 32 448 2 659 2 153 2 358 2 452 14 261 2 66 14 165 2 67 2 267 2 673 2 364 14 68 2 169 2 71 6 561 2 272 2 562 2 779 12 682 4 566 4 572 14 780 2 180 2 577 48 685 8 478 2 375 2 376 4 83 4 790 2 194 14 489 48 
221 2 533 1 304 2 360 2 
265 2 304 2 
787 2 45 2 607 2 359 2 762 2 304 2 281 2 
787 2 252 2 304 2 
787 2 502 2 304 2 
394 2 433 2 360 2 
787 2 304 2 
394 2 583 2 
585 2 304 2 
394 2 229 2 360 2 
742 2 324 2 360 2 
35 2 675 2 360 2 
416 2 596 2 360 2 
233 2 136 2 360 2 
394 2 250 2 
127 2 304 2 
742 2 91 2 
609 2 675 2 
596 2 553 2 
429 2 136 2 
394 2 456 2 
136 2 642 2 
596 2 519 2 
675 2 696 2 
782 2 742 2 
394 2 332 2 229 2 360 2 
394 2 271 2 332 2 229 2 360 2 
394 2 601 2 360 2 
394 2 592 2 360 2 
477 2 168 2 88 2 89 2 
123 2 357 6 746 4 493 2 686 2 504 2 771 2 236 4 632 2 506 2 597 2 635 2 741 2 343 2 693 2 217 2 469 2 382 2 
550 2 360 2 
45 2 341 2 762 2 586 2 
45 2 341 2 607 2 457 2 762 2 586 2 
787 2 45 2 359 2 762 2 304 2 276 2 
22 2 648 2 
45 2 359 2 762 2 385 2 
596 2 578 2 
314 2 136 2 
652 2 742 2 
419 2 675 2 
726 2 136 2 675 2 
721 2 136 2 675 2 
97 2 136 2 675 2 
136 2 10 2 675 2 
45 2 762 2 581 6 660 2 142 2 486 2 380 6 288 2 
394 2 192 2 
390 2 
588 2 90 2 290 2 292 2 594 2 707 6 9 2 708 2 710 2 604 2 396 2 505 2 397 2 18 2 509 2 20 4 19 2 122 2 25 4 622 2 513 2 28 4 731 2 521 2 336 2 39 2 633 26 241 26 531 2 346 2 640 4 423 2 143 6 427 2 244 2 430 4 246 6 147 2 356 4 59 2 254 6 547 2 152 4 259 2 260 2 61 6 763 2 453 2 554 2 766 2 558 2 665 2 666 2 362 2 773 2 676 2 72 2 465 2 567 2 175 2 78 2 781 2 471 2 684 2 80 2 280 2 482 2 283 2 196 2 485 2 87 4 198 4 
588 2 90 2 290 2 594 2 707 6 9 2 708 2 710 2 604 2 396 2 505 2 397 2 18 2 509 2 20 4 19 2 122 2 25 4 622 2 513 2 28 4 412 2 731 2 521 2 336 2 235 2 39 2 633 26 241 26 531 2 346 2 640 4 423 2 143 6 427 2 244 2 430 5 246 6 147 2 356 4 757 2 59 2 254 6 546 1 547 2 152 4 259 2 61 6 763 2 453 2 766 2 558 2 665 2 666 2 362 2 773 2 676 2 72 2 465 2 567 2 175 2 78 2 781 2 370 1 471 2 684 2 80 2 280 2 482 2 283 2 196 2 485 2 87 4 794 2 198 4 
178 2 
551 2 479 2 
590 2 90 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 308 2 256 2 396 2 258 2 109 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 268 6 25 2 460 2 167 4 462 2 514 2 27 2 28 2 411 8 73 2 627 2 628 6 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 8 237 4 188 2 580 10 339 6 483 2 633 12 241 6 692 2 284 4 
590 2 90 2 644 4 93 2 348 4 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 13 2 308 2 256 2 396 2 258 2 109 2 61 4 158 2 318 4 161 2 766 2 665 2 264 2 558 2 667 4 25 2 268 8 460 2 167 4 462 2 514 2 27 2 28 2 411 8 73 2 628 6 778 2 681 2 132 2 78 2 231 2 336 2 183 2 735 2 476 8 237 4 188 2 580 10 339 8 483 2 633 12 241 6 692 2 284 4 
667 4 93 2 256 2 348 2 735 2 258 2 1 2 237 2 514 2 339 2 653 2 318 4 161 2 628 2 208 2 132 2 149 2 231 2 
590 2 90 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 13 2 308 2 256 2 396 2 258 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 268 6 25 2 460 2 167 4 462 2 514 2 27 2 28 2 411 4 73 2 627 2 628 4 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 4 237 4 188 2 580 6 339 6 483 2 633 12 241 6 692 2 284 4 
590 2 90 2 698 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 308 2 256 2 396 2 258 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 268 6 25 2 460 2 167 4 462 2 514 2 27 2 28 2 411 4 73 2 627 2 628 6 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 4 237 4 188 2 580 6 339 4 483 2 633 12 241 6 692 2 284 4 
590 2 90 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 308 2 256 2 396 2 258 2 109 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 268 6 25 2 460 2 167 4 462 2 514 2 27 2 28 2 411 8 73 2 627 2 628 6 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 4 237 4 188 2 580 6 339 6 483 2 633 12 241 6 692 2 284 4 
590 2 90 2 698 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 308 2 256 2 396 2 258 2 109 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 25 2 268 8 460 2 167 4 462 2 514 2 27 2 28 2 411 8 73 2 627 2 628 8 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 8 237 4 188 2 580 10 339 6 483 2 633 12 241 6 692 2 284 4 
590 2 90 2 348 4 93 2 1 2 434 2 753 4 203 2 439 2 8 2 653 4 353 2 54 2 208 2 251 2 149 2 58 2 308 2 256 2 396 2 258 2 109 2 61 4 161 2 318 4 766 2 264 2 558 2 665 2 455 2 667 4 268 6 25 2 460 2 167 4 462 2 514 2 27 2 28 2 411 8 73 2 627 2 628 6 778 2 132 2 78 2 231 2 336 2 183 2 735 2 476 8 237 4 188 2 580 10 339 6 483 2 633 12 241 6 692 2 284 4 
587 2 588 2 590 4 383 7 593 6 1 2 594 4 203 2 8 2 9 2 599 2 208 2 391 2 603 6 604 12 396 2 608 2 14 6 213 2 18 2 20 4 400 6 403 10 618 2 406 2 619 2 25 4 408 1 27 2 28 4 410 1 30 2 411 2 628 8 228 1 231 2 37 2 234 2 237 4 41 8 633 46 241 24 640 2 427 2 430 6 49 6 246 4 434 2 439 4 653 4 54 2 441 2 251 2 56 2 58 2 254 6 256 2 257 2 258 2 61 6 662 2 65 2 665 2 264 2 455 2 667 4 268 12 672 2 460 2 462 2 676 2 73 2 678 2 465 2 78 2 684 2 280 2 475 4 482 2 483 2 691 1 692 2 284 8 485 2 87 4 287 2 90 2 698 4 93 2 495 2 707 6 708 2 710 2 103 1 105 6 712 6 500 1 308 2 107 6 505 2 507 2 317 2 509 2 318 4 725 2 510 4 122 2 514 2 329 1 331 6 731 2 132 2 733 2 336 2 734 6 735 2 529 7 339 4 531 2 532 2 344 2 143 8 348 4 753 4 353 2 755 6 756 6 356 4 149 2 546 2 151 6 547 2 763 2 155 2 161 2 766 2 558 2 769 2 361 2 362 2 167 6 773 2 363 2 170 2 171 6 367 2 778 2 563 2 573 1 781 2 574 2 370 2 183 2 188 4 580 2 786 6 788 6 377 1 196 2 
587 2 588 2 590 4 90 2 93 2 593 6 1 2 495 2 594 4 203 2 708 2 9 2 8 2 707 6 710 2 599 2 208 2 391 2 105 6 603 6 712 6 604 12 308 2 107 6 14 6 608 2 396 2 109 4 505 2 213 2 18 2 317 2 507 2 20 4 509 2 318 4 400 6 725 2 510 4 403 10 122 2 618 2 619 2 406 2 25 4 27 2 514 2 28 4 30 2 411 6 331 6 628 8 731 2 132 2 231 2 733 2 336 2 234 2 734 6 37 2 735 2 237 4 41 8 339 8 633 48 241 26 531 2 532 2 344 2 640 2 143 8 427 2 348 4 49 6 430 6 246 8 51 2 434 2 753 4 439 4 353 2 653 4 755 6 54 2 441 2 756 6 56 2 251 2 356 4 149 2 58 2 254 6 151 6 256 2 546 2 152 2 257 2 547 2 258 2 61 6 763 2 155 2 662 2 161 2 65 2 766 2 264 2 558 2 665 2 455 2 667 4 361 2 769 2 362 2 672 2 268 12 460 2 167 6 773 4 462 2 363 2 676 4 170 2 73 2 171 6 367 2 678 2 563 2 778 2 369 2 465 2 78 2 781 2 574 2 370 2 684 2 183 2 475 4 280 4 580 2 188 4 786 6 482 2 483 2 788 6 196 2 692 2 485 2 284 8 87 4 287 2 
587 2 588 2 590 4 90 2 93 2 593 6 1 2 495 2 594 4 203 2 708 2 9 2 707 6 8 2 710 2 599 2 208 2 391 2 105 6 603 6 712 6 604 12 308 2 107 6 14 6 608 2 396 2 109 4 505 2 213 2 18 2 317 2 507 2 20 4 509 2 318 4 400 6 725 2 510 4 403 10 122 2 618 2 619 2 406 2 25 4 27 2 514 2 28 4 30 2 411 6 331 6 628 8 731 2 132 2 231 2 733 2 336 2 234 2 734 6 37 2 735 2 237 4 41 8 339 8 633 48 241 26 531 2 532 2 344 2 640 2 143 8 427 2 348 4 49 6 430 6 246 8 51 2 434 2 753 4 439 4 353 2 653 4 755 6 54 2 441 2 756 6 56 2 251 2 356 4 149 2 58 2 254 6 151 6 256 2 546 2 152 2 257 2 547 2 258 2 61 6 763 2 155 2 662 2 161 2 65 2 766 2 264 2 558 2 665 2 455 2 667 4 361 2 769 2 362 2 672 2 268 12 460 2 167 6 773 4 462 2 363 2 676 4 170 2 73 2 171 6 367 2 678 2 563 2 778 2 369 2 465 2 78 2 781 2 574 2 370 2 684 2 183 2 475 4 280 4 476 4 188 4 580 6 786 6 482 2 483 2 788 6 196 2 692 2 485 2 284 8 87 4 287 2 
587 2 588 2 590 4 593 12 1 2 594 4 203 2 8 2 9 2 599 2 208 2 391 2 602 6 13 2 603 6 604 10 396 2 14 12 213 2 18 4 20 6 614 2 615 6 400 6 401 6 403 8 618 2 619 2 406 2 25 4 27 2 28 4 30 2 411 6 628 10 231 2 414 2 37 2 234 2 237 4 41 8 633 52 240 6 241 24 640 4 427 2 430 6 49 6 246 10 51 2 434 2 439 4 653 4 53 2 54 2 441 2 251 2 56 2 58 2 254 8 256 2 257 2 258 2 61 6 661 6 662 2 65 2 665 2 264 2 455 2 667 4 268 16 672 2 460 2 462 2 676 4 73 2 678 4 465 2 78 2 683 6 684 2 280 4 475 4 476 4 482 2 483 2 692 2 284 8 485 2 87 4 287 2 698 2 90 2 92 2 93 2 495 2 707 8 708 2 710 2 105 12 712 6 499 6 501 2 308 2 107 6 109 4 313 2 505 2 507 2 317 2 509 2 318 4 725 2 510 4 122 2 323 2 514 2 331 12 731 2 132 2 733 2 336 2 734 12 735 2 339 10 531 2 532 2 344 2 143 12 348 4 753 4 353 2 755 6 756 12 356 4 149 2 546 2 151 6 152 2 547 2 763 2 155 2 161 2 766 2 558 2 769 2 361 2 362 2 770 6 167 6 772 6 773 4 363 2 170 4 171 6 367 2 778 2 563 2 369 2 781 4 574 2 370 2 183 2 580 6 188 4 374 2 786 6 788 6 196 2 
667 2 268 4 460 2 93 2 348 4 167 2 1 2 27 2 514 2 462 2 411 6 753 2 73 2 439 2 353 2 8 2 653 4 628 6 778 2 54 2 208 2 58 2 231 2 256 2 476 4 109 2 580 4 339 6 633 4 318 2 161 2 692 2 284 2 264 2 455 2 
588 2 90 2 93 2 1 2 594 2 707 6 9 2 708 2 8 2 300 3 710 2 301 2 390 2 208 2 604 4 308 2 396 2 608 2 109 2 505 2 18 3 509 2 20 4 318 2 115 2 399 2 403 2 122 2 25 4 514 2 27 2 28 4 411 6 628 6 129 2 731 2 231 2 336 2 528 2 339 6 633 28 241 24 531 2 640 3 143 8 348 4 430 6 247 2 753 2 439 2 353 2 653 4 54 2 356 4 58 2 254 6 256 2 546 2 547 2 61 6 763 2 63 2 161 2 766 2 665 2 558 2 264 2 455 2 667 2 362 2 268 4 460 2 167 2 462 2 73 2 778 2 465 2 78 2 781 3 370 2 684 2 580 2 482 2 196 2 692 2 793 2 284 2 485 2 87 4 
73 2 462 2 641 2 
73 2 462 2 641 2 
588 2 590 4 90 2 698 4 1 4 3 2 594 6 203 2 707 2 9 2 708 2 710 2 13 4 604 4 396 2 109 4 505 2 509 2 318 2 321 2 403 2 510 2 122 2 25 4 28 4 411 6 628 12 731 2 132 2 232 2 336 2 237 4 339 12 633 24 241 16 531 2 141 2 346 4 743 2 640 2 243 2 641 2 143 2 427 4 348 4 430 6 246 4 751 2 434 2 352 2 536 4 753 2 439 4 653 4 353 2 755 2 57 2 356 4 254 2 255 2 546 2 256 2 547 2 258 2 61 6 763 2 161 2 766 2 558 2 665 2 667 2 362 2 672 2 268 16 460 2 167 4 773 4 462 4 676 4 73 6 273 2 174 4 274 2 563 2 465 2 78 2 370 2 684 2 784 2 475 2 280 4 476 4 186 2 188 2 580 6 483 2 791 2 196 2 85 2 378 2 485 2 284 4 87 4 287 2 
604 2 735 2 213 2 30 2 70 2 386 2 633 4 551 2 241 2 52 2 755 2 378 2 85 2 57 2 403 2 665 2 510 2 
588 2 590 4 90 2 698 4 1 4 3 2 594 6 203 2 707 2 9 2 708 2 710 2 13 4 604 2 309 2 396 2 109 4 505 2 509 2 318 2 321 2 122 2 25 4 28 4 411 6 628 12 731 2 132 2 336 2 237 4 339 12 739 2 633 24 241 16 531 2 141 2 346 4 743 2 640 4 641 2 143 2 427 4 348 4 430 6 246 4 751 2 434 2 352 2 536 4 753 2 439 4 653 4 353 2 755 2 57 2 356 4 254 2 255 2 546 2 256 2 547 2 258 2 61 6 763 2 161 2 766 2 263 2 558 2 665 2 667 2 362 2 672 2 268 16 460 2 167 4 773 4 462 4 676 4 73 6 273 4 174 4 563 2 465 2 78 2 370 2 684 2 183 2 475 2 280 4 476 4 186 2 187 2 188 4 580 6 483 2 791 2 196 2 85 2 378 2 284 4 485 2 87 4 795 2 287 2 
588 2 590 4 90 2 698 4 1 4 3 2 594 6 203 2 707 2 9 2 708 2 206 2 710 2 13 4 604 4 396 2 109 4 505 2 509 2 318 2 321 2 120 2 403 2 510 2 122 2 25 4 28 4 411 6 628 12 731 2 132 2 336 2 237 4 339 12 633 24 241 16 531 2 141 2 346 4 743 2 640 2 641 2 143 2 427 4 348 4 430 6 246 4 751 2 434 2 352 2 536 4 753 2 439 4 653 4 353 2 755 2 57 2 356 4 254 2 255 2 545 2 546 2 256 2 547 2 258 2 61 6 763 2 161 2 766 2 558 2 665 2 667 2 362 2 672 2 268 16 460 2 167 4 773 4 462 4 676 4 73 6 273 2 174 4 563 2 465 2 78 2 370 2 684 2 278 2 183 2 475 2 280 4 476 4 186 2 188 4 580 6 483 2 791 2 196 2 85 2 378 2 484 2 485 2 284 4 87 4 287 2 
716 2 547 2 747 2 610 2 29 2 190 2 62 2 633 4 634 2 204 2 42 2 195 2 131 2 617 2 285 2 12 2 
643 2 624 3 330 2 707 2 678 6 565 2 781 3 254 2 759 2 760 2 606 2 137 2 18 3 482 2 633 2 241 2 20 2 722 2 116 4 21 2 345 2 216 1 487 2 640 3 143 2 
781 2 643 2 759 2 254 2 760 2 606 2 137 2 624 2 482 2 18 2 633 2 241 2 20 2 707 2 330 2 722 2 21 2 116 4 678 6 565 2 345 2 487 2 640 2 143 2 
781 2 643 2 759 2 254 2 760 2 606 2 137 2 624 2 482 2 18 2 633 2 241 2 20 2 707 2 330 2 722 2 21 2 116 4 678 6 565 2 345 2 487 2 640 2 143 2 
425 2 384 4 146 2 2 6 647 3 650 2 595 2 537 2 388 2 355 4 542 4 210 2 503 2 720 2 111 2 156 2 18 3 398 2 64 2 559 3 404 2 620 2 365 4 625 5 517 2 366 4 570 2 413 2 472 3 630 4 526 2 473 2 137 2 482 2 633 10 241 4 694 2 640 3 143 2 44 4 
425 2 384 4 146 2 2 6 647 2 650 2 595 2 537 2 388 2 355 4 542 4 210 2 715 2 503 2 720 2 111 2 156 2 18 2 112 2 398 2 64 2 559 2 404 2 620 2 365 4 625 4 517 2 366 4 368 2 570 2 413 2 472 2 630 4 526 2 473 2 137 2 482 2 633 10 241 4 694 2 640 2 143 2 44 4 
425 2 384 4 146 2 2 6 647 2 650 2 595 2 537 2 388 2 355 4 542 4 210 2 715 2 503 2 720 2 111 2 156 2 18 2 112 2 398 2 64 2 559 2 404 2 620 2 365 4 625 4 517 2 366 4 368 2 570 2 413 2 472 2 630 4 526 2 473 2 137 2 482 2 633 10 241 4 694 2 640 2 143 2 44 4 
425 2 384 4 146 2 2 6 647 2 650 2 595 2 537 2 388 2 355 4 542 4 210 2 715 2 503 2 720 2 111 2 156 2 18 2 112 2 398 2 64 2 559 2 404 2 620 2 365 4 625 4 517 2 366 4 368 2 570 2 413 2 472 2 630 4 526 2 473 2 137 2 482 2 633 10 241 4 694 2 640 2 143 2 44 4 
425 2 384 4 146 2 2 6 647 2 650 2 595 2 537 2 388 2 355 4 542 4 210 2 715 4 503 2 720 2 111 2 156 2 18 2 112 4 398 2 64 2 559 2 404 2 620 2 365 4 625 4 517 2 366 4 368 4 570 2 413 2 472 2 630 4 526 2 473 2 137 2 482 2 633 10 241 4 694 2 640 2 143 2 44 4 
668 2 173 2 220 2 474 2 724 2 481 2 
393 2 511 2 39 2 326 2 560 2 176 2 724 2 
525 2 527 2 717 2 396 2 50 2 582 2 626 1 633 4 241 4 792 1 464 1 226 1 32 1 568 2 164 2 
699 2 431 2 26 4 623 4 146 6 625 14 650 6 295 2 517 2 709 2 98 2 368 5 538 2 355 12 253 2 630 4 337 2 473 6 715 5 503 6 720 6 156 6 157 2 112 4 633 6 241 6 421 1 663 2 694 6 43 2 639 2 
307 2 144 2 384 2 418 2 248 2 649 2 690 2 611 3 450 2 101 2 555 2 542 2 44 2 
307 2 144 2 384 2 418 2 248 2 649 2 633 1 113 1 690 2 611 6 241 1 450 2 552 2 101 2 555 4 162 2 542 2 44 2 
307 4 144 2 384 2 418 4 248 2 649 2 690 2 611 6 450 4 552 2 101 2 555 4 162 2 542 2 44 2 
307 8 144 2 384 2 418 8 248 2 649 2 633 1 113 1 690 2 611 10 241 1 450 8 552 6 101 2 555 4 162 8 542 2 44 2 
392 1 549 2 468 2 82 1 738 2 
738 2 468 2 549 2 
738 2 468 2 549 2 
738 2 468 2 549 2 
669 2 
