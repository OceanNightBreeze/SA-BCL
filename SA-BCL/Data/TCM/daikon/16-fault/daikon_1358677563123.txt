#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.NullPointerException 506 549 298 
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR daikon.config.Configuration$ConfigException (241,253,400,513,522) (241,253,400,513,522) (241,253,400,513,522) 
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.ArrayIndexOutOfBoundsException 602 239 669 417 379 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V ERROR java.lang.NullPointerException 355 
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V ERROR java.lang.NullPointerException 355 
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 261 488 571 550 597 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 351 101 356 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 351 101 356 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 351 101 356 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 351 101 356 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.ValueTuple:size()I
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.Quant:eltsLteIndex([I)Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.config.Configuration.ConfigException:ConfigException(Ljava.lang.String;Ljava.lang.Throwable;)V
daikon.Quant:intersection([I[I)[I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:pairwiseGTE([I[I)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:lexEqual([I[I)Z
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.Invariant:logOn()Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.MathMDE:modulus([I)[I
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:isPseudoArray()Z
utilMDE.ArraysMDE:subarray([III)[I
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:eltsLtIndex([I)Z
daikon.Quant:subsetOf([J[J)Z
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.Quant:pairwiseLT([I[I)Z
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:lexLTE([I[I)Z | CONDITION | 171995 | if (x) -> if (!x)
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.Quant:subsetOf([D[F)Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
jtb.JavaCharStream:ReadByte()C
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.OrderedPairIterator:setnext1()V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltsLT([II)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.inv.Invariant:getConfidence()D
daikon.Quant:eltwiseEqual([I)Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:memberOf(S[S)Z
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.PptSlice1:arity()I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
utilMDE.ArraysMDE:element_range([I)I
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.ModBitTracker:num_samples()I
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.Intern:intern([J)[J
daikon.Quant:eltsGTE([II)Z
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.Debug:logDetail()Z
utilMDE.MathMDE:pow_fast(II)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.diff.RootNode:RootNode()V
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.Quant:gt(II)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.VarInfo:new_ppt()V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.ModBitTracker:num_vars()I
daikon.ProglangType:dimensions()I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.ValueSet:ValueSet(I)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V | CONDITION | 32424 | if (x) -> if (!x)
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.PptSlice1:num_samples()I
daikon.ProglangType:isScalar()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.WeakHasherMap:processQueue()V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.Quant:eltsGT([II)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.ValueTuple:isMissing(I)Z
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.Quant:memberOf(I[I)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.Quant:sameLength([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:subsetOf([F[D)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName:hashCode()I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Ppt:Ppt()V
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Assert:assertTrue(Z)V
daikon.Quant:eltsGtIndex([I)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.Quant:eltwiseLT([I)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaCharStream:readChar()C
daikon.PptSlice0:arity()I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.inv.unary.UpperBoundCore:computeConfidence()D
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.ProglangType:isArray()Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd([I)I
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:lte(II)Z
daikon.Quant:lexGT([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method; | ASSIGN | 38039 | = null
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.MathMDE:gcd(II)I
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.ModBitTracker:num_sets()I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.diff.InvMap:InvMap()V
daikon.Quant:union([I[I)[I
daikon.inv.unary.LowerBoundCore:computeProbability()D
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:memberOf(D[F)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.Quant:eq(DD)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.ArraysMDE:max([I)I
jtb.JavaCharStream:BeginToken()C
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
jtb.JavaCharStream:backup(I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.Quant:isReverse([I[I)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_or(DD)D
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.ArraysMDE:sorted([I)Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.Quant:setEqual([I[I)Z
daikon.inv.Invariants:Invariants()V
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.Intern:numIntArrays()I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1007 | = null
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.Quant:slice([III)[I
daikon.test.TestQuant:removeAdjacentDups([I)[I | ASSIGN | 816 | = null
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.ArraysMDE:sum([I)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Quant:eq(II)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.Quant:pairwiseDivides([I[I)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.config.Configuration:apply(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
jtb.JavaParser:jj_ntk()I
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
utilMDE.FuzzyFloat:gte(DD)Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:sum([D)D
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltwiseGT([I)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.ProglangType:baseIsScalar()Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.PptName:isCombinedExitPoint()Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V | STATEMENT | 2624 | stmt -> ;
daikon.Quant:eltwiseLTE([I)Z
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap:size()I
daikon.Quant:noDups([I)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.Quant:subsetOf([F[F)Z
daikon.PptSlice2:arity()I
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfo:relate_var()V
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.LimitedSizeIntSet:size()I
daikon.Quant:memberOf(F[F)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.Quant:eltsLTE([II)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_and(DD)D
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Invariant:prob_and(DDD)D
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.MathMDE:negate(I)I
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.Quant:eltsNotEqual([II)Z
daikon.VarInfoAux:hashCode()I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:lexLT([I[I)Z
utilMDE.FuzzyFloat:lt(DD)Z
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.Quant:subsetOf([D[D)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:logDetail()Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.Quant:memberOf(J[J)Z
daikon.Quant:concat([I[I)[I
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.Quant:subsetOf([B[I)Z
utilMDE.ArraysMDE:concat([I[I)[I
daikon.Quant:lt(II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.Invariant:justified()Z
utilMDE.ArraysMDE:min([I)I
utilMDE.MathMDE:gcd(JJ)J
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.ModBitTracker:split(I)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.filter.ParentFilter:ParentFilter()V
utilMDE.MathMDE:mod_positive(II)I
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.ArraysMDE:sum([[D)D
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:lexGTE([I[I)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.diff.Node:Node()V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.Intern:intern([D)[D
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:isWorthPrinting()Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.PptSlice0:initInvariantsSeen()V
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:pow(II)I
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Options.OptionInfo:argument_required()Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.VarInfo:name()Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.ArraysMDE:min_max([I)[I
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.InvariantFormatTester:execute()Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | OPERATOR | 52438 | != -> >=
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
jtb.JavaCharStream:FillBuff()V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.Quant:eltsEqual([II)Z
daikon.Debug:logOn()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.MathMDE:sign(I)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.Quant:ne(II)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:eq(FF)Z
daikon.Quant:memberOf(F[D)Z
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.Quant:subsetOf([I[I)Z
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:setDiff([I[I)[I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.FuzzyFloat:gt(DD)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.Quant:eq(JJ)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.PptName:isEnterPoint()Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.Quant:subsetOf([S[S)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.Quant:eltwiseGTE([I)Z
daikon.Quant:gte(II)Z
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.Intern:intern([I)[I
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:isIntegral()Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1730 | if (x) -> if (!x)
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.Intern:internSubsequence([III)[I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
543 2 43 2 259 2 490 4 80 2 112 2 226 2 132 2 511 2 
420 6 115 2 664 2 74 2 57 2 66 6 89 2 13 2 86 2 510 2 454 6 
469 2 678 6 401 6 104 6 94 2 281 4 511 2 314 2 388 4 462 2 489 2 226 2 91 6 
140 2 662 2 176 10 202 10 24 12 483 16 118 6 599 8 374 10 511 6 143 2 209 2 338 2 266 4 6 10 352 8 269 10 677 6 130 4 471 4 623 8 40 4 423 30 689 2 42 2 228 26 226 6 154 16 480 16 230 8 
461 4 297 6 
32 2 
202 2 176 2 560 2 24 2 483 2 320 2 374 2 348 2 463 2 603 2 266 2 245 2 6 4 269 2 677 2 499 2 623 2 220 2 474 2 423 6 228 4 154 2 480 2 
147 2 381 6 202 4 176 4 58 4 24 5 232 4 269 4 483 8 130 2 374 4 423 14 284 2 228 12 154 8 480 8 350 6 
157 2 255 2 201 2 410 6 595 2 455 2 141 2 234 6 487 30 123 2 584 2 404 2 29 2 30 2 545 4 421 2 247 2 638 2 549 2 328 2 620 2 270 10 107 2 523 4 451 2 575 2 298 2 503 2 390 4 300 2 274 2 481 2 506 2 
160 2 580 2 75 2 95 2 50 2 516 2 32 2 272 2 87 2 171 2 
140 2 317 2 234 2 434 2 614 2 185 2 437 4 539 2 290 2 102 2 190 2 107 2 330 2 551 2 193 2 591 2 359 2 557 2 21 2 366 2 332 2 595 4 631 2 117 4 562 2 635 2 511 4 259 2 79 2 121 2 419 2 307 2 81 2 675 2 217 2 341 2 218 4 525 2 136 2 88 2 172 2 477 2 226 4 643 2 
346 6 202 16 176 16 579 6 24 22 232 4 483 32 118 4 599 6 374 16 511 4 143 2 536 6 567 4 210 2 211 4 56 4 350 6 266 2 6 6 381 6 58 4 268 6 269 16 679 2 677 4 189 2 623 18 447 2 423 54 111 8 576 2 425 4 228 48 226 4 154 32 480 32 139 2 507 4 
523 2 141 2 234 2 
578 2 333 2 203 22 431 2 649 2 312 2 347 10 512 2 554 2 515 2 517 2 345 2 558 2 419 2 
482 2 277 1 396 2 279 2 610 1 484 2 612 1 400 2 236 2 283 2 237 1 321 2 186 2 242 4 494 2 543 2 244 2 618 2 5 1 586 2 547 1 248 2 621 2 14 2 446 2 64 4 109 1 152 2 626 6 253 2 153 2 628 2 555 2 254 5 71 6 198 4 409 2 162 2 564 1 563 1 511 24 459 1 375 2 120 1 262 1 166 1 671 1 466 2 213 2 309 2 214 6 216 3 126 2 522 2 680 2 342 2 34 2 641 4 133 2 271 1 473 2 685 2 642 2 344 4 226 22 392 1 275 1 229 5 
337 2 
296 2 511 2 
501 2 511 4 497 2 
302 2 397 2 178 2 417 2 305 2 669 2 187 2 602 2 239 2 243 6 322 2 379 2 124 2 167 2 308 2 9 2 215 6 59 2 62 6 387 2 552 2 609 2 
570 1 194 2 361 2 373 2 
373 2 478 2 
192 2 40 2 355 2 234 2 470 2 373 2 15 2 
192 2 343 2 373 2 
192 2 640 2 373 2 
194 2 331 2 627 2 
192 2 373 2 
627 2 617 2 
508 2 373 2 
170 2 194 2 627 2 
51 2 194 2 667 2 
648 2 194 2 129 2 
135 2 194 2 257 2 
534 2 19 2 194 2 
627 2 73 2 
65 2 373 2 
667 2 235 2 
460 2 129 2 
257 2 440 2 
534 2 666 2 
627 2 505 2 
534 2 391 2 
257 2 227 2 
11 2 129 2 
44 2 667 2 
170 2 22 2 194 2 627 2 
170 2 22 2 194 2 627 2 28 2 
194 2 386 2 627 2 
194 2 376 2 627 2 
83 2 63 2 150 2 479 2 
530 2 234 2 470 2 533 2 
288 2 530 2 355 2 234 2 470 2 533 2 
192 2 40 2 234 2 470 2 373 2 645 2 
88 2 464 2 
40 2 354 2 234 2 470 2 
257 2 179 2 
534 2 119 2 
69 2 667 2 
129 2 493 2 
534 2 514 2 129 2 
53 2 
534 2 129 2 258 2 
534 2 553 2 129 2 
414 6 234 2 668 6 144 2 654 2 468 2 470 2 316 2 
108 2 627 2 
632 2 663 2 203 6 633 2 292 2 518 2 84 2 60 2 676 2 532 2 45 4 433 2 472 2 196 2 491 2 656 2 301 4 529 2 
606 2 194 2 
213 2 
277 2 432 2 180 2 611 2 97 2 543 2 618 2 100 2 548 2 621 2 445 2 446 2 626 4 628 2 555 2 198 4 304 2 375 2 568 2 466 2 467 4 309 2 214 6 126 6 128 2 572 2 311 2 34 2 131 2 133 2 574 4 389 2 315 2 226 26 229 2 482 2 396 2 484 2 236 2 321 2 238 2 242 4 585 2 244 2 406 2 586 2 248 2 61 2 407 2 64 4 500 2 151 2 592 8 153 2 70 2 71 4 254 2 409 2 596 2 162 6 163 2 511 26 601 2 671 2 263 4 672 2 680 6 340 2 342 2 169 2 687 2 426 2 344 4 175 2 
277 2 279 2 180 2 611 2 97 2 543 2 618 2 100 2 548 2 621 2 445 2 446 2 626 4 628 2 555 2 198 4 304 2 375 2 568 2 27 2 466 2 467 4 309 2 214 6 126 6 128 2 572 2 311 2 34 2 133 2 574 4 642 2 389 2 315 2 226 26 229 2 482 2 396 2 484 2 485 2 236 2 321 2 238 2 242 4 585 2 496 2 244 2 406 2 586 2 248 2 61 2 407 2 64 4 500 2 593 2 592 8 153 2 70 2 71 6 254 2 409 2 596 2 162 6 163 2 511 26 601 2 671 2 263 4 672 2 680 6 340 2 342 2 169 2 687 2 426 2 344 4 175 2 
265 2 
18 2 600 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 8 294 2 66 6 299 2 363 2 364 10 661 2 556 2 555 2 594 4 453 2 155 4 454 6 409 2 159 2 115 4 412 2 74 4 205 2 413 2 561 4 457 2 510 2 26 8 511 12 306 2 264 2 466 2 420 6 125 4 214 4 519 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 353 4 12 2 103 2 624 8 294 2 66 6 299 2 363 2 364 10 556 2 555 2 594 4 155 4 454 8 409 2 159 2 115 4 412 2 74 4 664 2 205 2 413 2 561 4 457 2 510 2 26 8 511 12 306 2 264 2 466 2 420 8 125 4 267 2 214 4 519 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 427 2 428 2 644 2 
287 2 420 2 125 4 115 2 148 2 74 2 561 4 103 2 294 2 652 2 222 2 306 2 3 2 66 2 349 2 594 2 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 4 294 2 66 4 299 2 363 2 364 6 661 2 556 2 555 2 594 4 453 2 155 4 454 6 409 2 159 2 115 4 412 2 74 4 664 2 205 2 413 2 561 4 457 2 26 4 511 12 306 2 264 2 466 2 420 6 125 4 214 4 519 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 4 294 2 66 6 299 2 363 2 364 6 661 2 556 2 555 2 594 4 453 2 155 4 454 6 409 2 159 2 115 4 412 2 74 4 205 2 413 2 561 4 457 2 26 4 511 12 306 2 264 2 466 2 420 4 125 4 214 4 519 2 86 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 8 294 2 66 6 299 2 363 2 364 6 661 2 556 2 555 2 594 4 453 2 155 4 454 6 409 2 159 2 115 4 412 2 74 4 205 2 413 2 561 4 457 2 510 2 26 4 511 12 306 2 264 2 466 2 420 6 125 4 214 4 519 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 8 294 2 66 8 299 2 363 2 364 10 661 2 556 2 555 2 594 4 453 2 155 4 454 8 409 2 159 2 115 4 412 2 74 4 205 2 413 2 561 4 457 2 510 2 26 8 511 12 306 2 264 2 466 2 420 6 125 4 214 4 519 2 86 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
482 2 396 2 395 2 399 2 93 2 142 4 48 2 652 2 3 2 436 2 349 2 242 2 492 2 244 2 287 2 586 2 148 2 12 2 103 2 624 8 294 2 66 6 299 2 363 2 364 10 661 2 556 2 555 2 594 4 453 2 155 4 454 6 409 2 159 2 115 4 412 2 74 4 205 2 413 2 561 4 457 2 510 2 26 8 511 12 306 2 264 2 466 2 420 6 125 4 214 4 519 2 33 4 604 2 222 2 89 2 475 2 344 2 226 6 428 2 644 2 
0 2 531 7 180 2 183 2 3 2 537 6 538 4 349 2 4 2 543 2 544 1 548 2 12 2 357 6 358 6 197 2 363 2 364 2 555 2 556 2 198 4 559 6 23 2 368 2 205 4 25 10 561 4 206 1 375 2 377 1 568 2 569 2 214 6 33 6 34 2 574 4 219 6 221 8 37 6 222 2 224 2 226 24 229 2 577 2 396 2 395 2 399 2 233 1 47 4 48 2 236 2 242 4 244 2 586 2 248 2 249 2 250 2 64 4 66 8 592 4 70 2 71 6 254 2 594 4 72 6 409 2 412 2 74 4 596 2 413 2 415 2 78 2 264 2 420 4 86 4 604 2 422 2 605 2 89 4 428 2 279 2 93 2 611 2 435 2 436 2 438 6 616 1 286 2 441 2 287 2 618 12 442 1 100 4 291 2 289 6 621 2 103 2 106 1 446 2 624 2 294 2 296 6 626 2 450 2 299 2 628 2 454 12 114 2 115 4 634 1 457 2 636 2 306 2 122 2 466 2 125 4 309 2 126 8 127 2 133 2 642 2 475 2 476 6 644 2 482 2 484 2 651 2 142 4 652 2 321 2 492 2 497 6 326 2 148 2 661 2 153 2 155 8 158 2 159 4 161 6 162 6 163 2 164 6 511 46 165 6 672 2 673 7 337 6 674 2 519 2 680 6 342 2 682 2 683 2 524 2 686 1 687 2 344 4 527 2 
0 2 279 2 611 2 93 2 180 4 183 2 435 2 3 2 537 6 438 6 436 2 538 4 349 2 286 2 4 2 441 2 543 2 618 12 287 2 100 4 289 6 291 2 548 4 621 2 12 2 103 2 446 2 357 6 624 6 358 6 294 2 448 2 296 6 450 2 626 2 299 2 363 2 197 2 364 2 628 2 556 2 555 2 198 4 454 12 114 2 23 2 559 6 115 4 368 2 205 4 25 10 561 4 457 2 636 2 375 2 306 2 122 2 568 2 569 2 466 2 467 2 125 4 309 2 214 6 126 8 127 2 33 6 34 2 219 6 574 4 133 2 221 8 37 6 222 2 642 2 224 2 475 2 476 6 226 26 229 2 577 2 644 2 482 2 395 2 396 2 399 2 484 2 651 2 47 4 142 4 48 2 652 2 236 2 321 2 242 4 492 2 497 6 244 2 326 2 148 2 586 2 248 2 329 2 249 2 250 2 64 4 66 8 592 8 661 2 70 2 153 2 594 4 254 2 155 8 71 6 72 6 158 2 409 2 159 4 161 6 74 4 412 2 596 2 162 6 163 4 413 2 415 2 164 6 510 4 165 6 511 48 78 2 672 2 264 2 337 6 420 8 674 2 519 2 680 6 682 2 342 2 422 2 604 2 683 2 524 2 605 2 687 2 89 4 527 2 344 4 428 2 
0 2 279 2 611 2 93 2 180 4 183 2 435 2 3 2 537 6 438 6 436 2 538 4 349 2 286 2 4 2 441 2 543 2 618 12 287 2 100 4 289 6 291 2 548 4 621 2 12 2 103 2 446 2 357 6 624 6 358 6 294 2 448 2 296 6 450 2 626 2 299 2 363 2 197 2 364 6 628 2 556 2 555 2 198 4 454 12 114 2 23 2 559 6 115 4 368 2 205 4 25 10 561 4 457 2 26 4 636 2 375 2 306 2 122 2 568 2 569 2 466 2 467 2 125 4 309 2 214 6 126 8 127 2 33 6 34 2 219 6 574 4 133 2 221 8 37 6 222 2 642 2 224 2 475 2 476 6 226 26 229 2 577 2 644 2 482 2 395 2 396 2 399 2 484 2 651 2 47 4 142 4 48 2 652 2 236 2 321 2 242 4 492 2 497 6 244 2 326 2 148 2 586 2 248 2 329 2 249 2 250 2 64 4 66 8 592 8 661 2 70 2 153 2 594 4 254 2 155 8 71 6 72 6 158 2 409 2 159 4 161 6 74 4 412 2 596 2 162 6 163 4 413 2 415 2 164 6 510 4 165 6 511 48 78 2 672 2 264 2 337 6 420 8 674 2 519 2 680 6 682 2 342 2 422 2 604 2 683 2 524 2 605 2 687 2 89 4 527 2 344 4 428 2 
0 2 180 4 181 6 183 2 3 2 537 6 538 4 349 2 4 2 543 2 10 2 548 4 12 2 357 6 358 6 363 2 197 2 364 6 555 2 556 2 198 4 559 6 23 2 368 2 369 6 205 4 25 8 561 4 26 4 375 2 568 2 569 2 378 6 380 2 214 6 31 2 33 6 34 2 574 6 219 6 221 8 37 12 222 2 224 2 226 24 229 4 577 2 395 2 396 2 399 2 46 2 47 4 48 2 236 2 242 4 244 2 586 2 246 6 248 2 249 2 64 4 66 10 592 10 408 2 70 4 71 6 254 4 594 4 72 6 409 2 412 2 74 4 596 2 413 2 415 2 78 2 264 2 420 10 85 6 86 2 604 2 422 2 605 2 89 4 428 2 430 6 279 2 93 2 611 2 435 2 436 2 438 6 286 2 441 2 287 2 618 10 100 4 291 2 289 6 621 2 103 2 446 2 624 6 294 2 448 2 296 12 626 4 450 2 299 2 628 2 454 16 114 2 629 6 115 4 457 2 636 2 306 2 122 2 466 2 467 2 125 4 309 2 126 12 127 2 133 2 642 2 475 2 476 6 644 2 482 2 647 2 484 2 651 2 142 4 652 2 321 2 492 2 497 12 326 2 148 2 329 2 661 2 153 2 155 8 158 2 159 4 664 2 161 12 162 8 163 4 665 6 510 4 164 12 511 52 165 6 334 6 672 4 337 12 674 2 519 2 339 2 680 8 342 2 682 2 683 2 524 2 687 2 344 4 527 2 528 2 
115 4 395 2 412 2 74 4 413 2 399 2 561 2 457 2 510 2 26 4 511 4 142 2 48 2 652 2 306 2 3 2 436 2 492 2 287 2 420 6 125 2 148 2 519 2 33 2 604 2 624 6 222 2 66 6 475 2 89 2 661 2 364 4 155 2 454 4 644 2 
278 2 279 2 613 2 3 2 436 2 543 2 618 4 287 2 100 2 621 2 446 2 624 6 626 3 364 2 628 2 452 2 555 2 556 2 198 4 454 4 115 4 25 2 561 2 457 2 375 2 306 2 568 2 466 2 125 2 309 2 213 2 214 6 126 8 33 2 34 2 133 2 574 4 222 2 642 2 475 2 225 2 226 24 229 3 644 2 482 2 395 2 396 2 399 2 484 2 142 2 48 2 236 2 652 2 321 2 402 2 241 2 242 4 492 2 244 2 586 2 148 2 248 2 250 2 64 4 66 6 661 2 153 2 155 2 71 6 254 3 409 2 74 4 412 2 596 2 162 6 413 2 510 2 511 28 513 2 420 6 519 2 680 6 342 2 604 2 684 3 687 2 89 2 344 4 276 2 
412 2 519 2 280 2 
412 2 519 2 280 2 
279 2 92 4 611 4 180 4 280 2 182 2 183 2 538 2 349 2 98 2 99 2 4 2 543 2 546 2 618 4 287 4 100 6 548 4 621 2 12 2 446 2 624 6 450 2 626 2 360 2 299 2 364 6 628 2 555 2 198 4 454 16 115 4 205 4 456 2 303 2 25 2 561 2 26 4 208 2 375 2 306 2 466 2 125 2 309 2 214 6 126 2 33 4 34 2 133 2 134 2 642 2 475 2 315 4 226 16 644 2 482 2 396 2 395 2 319 2 484 2 650 2 47 2 142 2 236 2 486 2 52 4 321 2 242 4 495 2 244 2 586 2 248 2 64 4 66 12 592 4 153 2 594 4 71 6 155 4 72 2 409 2 159 2 412 4 74 4 664 4 596 2 162 2 163 4 510 4 511 24 264 2 420 12 82 2 519 6 520 2 680 2 86 4 342 2 687 2 89 4 344 4 174 2 429 2 428 2 
244 2 618 2 546 2 368 2 25 2 415 2 370 2 600 2 17 2 511 4 208 2 294 2 67 2 360 2 538 2 226 2 72 2 
279 2 92 4 611 4 180 4 280 2 183 2 349 2 98 2 99 2 4 2 543 2 546 2 618 2 619 2 287 4 100 6 548 4 621 2 12 2 446 2 624 6 450 2 626 4 360 2 299 2 363 2 364 6 628 2 555 2 198 4 454 16 115 4 205 4 303 2 561 2 26 4 208 2 375 2 306 2 466 2 212 2 125 2 309 2 214 6 126 2 33 4 34 2 133 2 313 2 134 2 642 2 475 2 315 4 226 16 644 2 482 2 318 2 396 2 395 2 484 2 650 2 47 2 142 2 236 2 486 2 52 4 321 2 242 4 495 2 244 2 586 2 327 2 248 2 64 4 66 12 592 4 153 2 594 4 155 4 71 6 72 2 409 2 159 4 412 4 74 4 664 4 596 2 162 2 163 4 510 4 511 24 264 2 420 12 82 4 519 6 520 2 680 2 86 4 342 2 687 2 89 4 344 4 174 2 428 2 
279 2 92 4 611 4 180 4 280 2 183 2 184 2 538 2 349 2 98 2 99 2 4 2 543 2 546 2 618 4 287 4 100 6 548 4 621 2 12 2 446 2 624 6 450 2 626 2 360 2 299 2 363 2 364 6 628 2 555 2 198 4 454 16 115 4 205 4 303 2 25 2 561 2 26 4 207 2 208 2 375 2 306 2 466 2 125 2 309 2 214 6 126 2 33 4 34 2 133 2 134 2 41 2 642 2 475 2 315 4 226 16 644 2 482 2 396 2 395 2 484 2 650 2 47 2 142 2 236 2 486 2 52 4 321 2 242 4 495 2 244 2 586 2 248 2 64 4 590 2 66 12 592 4 153 2 594 4 71 6 155 4 72 2 409 2 256 2 159 4 412 4 74 4 664 4 596 2 162 2 163 4 510 4 511 24 264 2 420 12 82 2 519 6 520 2 680 2 86 4 342 2 687 2 89 4 344 4 174 2 428 2 
279 1 176 2 1 1 96 2 435 2 543 2 618 2 100 2 550 2 446 2 622 2 293 2 626 2 20 2 197 2 555 2 365 2 198 2 202 2 372 2 374 2 375 2 568 2 465 2 466 2 381 4 214 6 571 2 126 8 127 2 36 2 133 2 574 4 38 2 642 1 228 4 226 20 393 2 480 2 229 2 482 2 396 2 231 6 232 2 483 2 484 2 651 2 581 2 49 2 236 2 582 2 321 2 488 2 242 4 657 2 244 2 325 1 586 2 587 2 248 2 589 2 498 2 660 2 64 2 502 4 504 2 153 2 154 2 71 3 254 2 409 2 509 2 596 2 597 2 162 6 416 2 76 2 511 26 261 2 674 2 269 2 680 6 681 2 342 2 683 2 423 6 344 4 90 2 
162 2 511 2 282 2 568 2 439 2 403 2 672 6 324 2 126 2 521 2 680 2 191 3 574 2 16 2 295 2 223 2 626 3 68 2 195 2 173 1 226 2 113 2 229 3 254 3 200 4 
162 2 126 2 521 2 680 2 16 2 511 2 574 2 191 2 282 2 295 2 626 2 223 2 195 2 68 2 439 2 568 2 672 6 113 2 403 2 226 2 254 2 229 2 200 4 324 2 
162 2 126 2 521 2 680 2 16 2 511 2 574 2 191 2 282 2 295 2 626 2 223 2 195 2 68 2 439 2 568 2 672 6 113 2 403 2 226 2 254 2 229 2 200 4 324 2 
202 2 176 2 204 2 398 3 483 2 598 2 118 2 599 4 371 2 374 2 511 10 335 2 418 2 54 3 568 2 146 4 583 4 336 2 588 4 8 2 383 2 126 2 444 2 310 4 269 2 39 2 526 2 423 5 223 2 626 3 362 2 252 2 228 4 226 4 154 2 229 3 480 2 199 4 646 3 156 6 
176 2 483 2 398 2 143 2 54 2 146 4 583 4 588 4 8 2 444 2 623 2 626 2 252 2 362 2 154 2 199 4 156 6 204 2 202 2 24 2 118 2 598 2 371 2 599 4 374 2 511 10 335 2 418 2 568 2 336 2 383 2 126 2 269 2 310 4 39 2 526 2 223 2 423 4 226 4 228 4 480 2 229 2 646 2 
176 2 483 2 398 2 143 2 54 2 146 4 583 4 588 4 8 2 444 2 623 2 626 2 252 2 362 2 154 2 199 4 156 6 204 2 202 2 24 2 118 2 598 2 371 2 599 4 374 2 511 10 335 2 418 2 568 2 336 2 383 2 126 2 269 2 310 4 39 2 526 2 223 2 423 4 226 4 228 4 480 2 229 2 646 2 
176 2 483 2 398 2 143 2 54 2 146 4 583 4 588 4 8 2 444 2 623 2 626 2 252 2 362 2 154 2 199 4 156 6 204 2 202 2 24 2 118 2 598 2 371 2 599 4 374 2 511 10 335 2 418 2 568 2 336 2 383 2 126 2 269 2 310 4 39 2 526 2 223 2 423 4 226 4 228 4 480 2 229 2 646 2 
176 2 483 2 398 2 143 4 54 2 146 4 583 4 588 4 8 2 444 2 623 4 626 2 252 2 362 2 154 2 199 4 156 6 204 2 202 2 24 4 118 2 598 2 371 2 599 4 374 2 511 10 335 2 418 2 568 2 336 2 383 2 126 2 269 2 310 4 39 2 526 2 223 2 423 4 226 4 228 4 480 2 229 2 646 2 
77 2 449 2 688 2 540 2 55 2 323 2 
169 2 535 2 382 2 566 2 240 2 35 2 323 2 
411 2 394 2 116 2 511 10 260 2 2 2 145 2 615 1 670 2 123 1 285 2 541 2 542 2 586 2 7 1 385 2 188 2 168 2 573 2 37 2 273 2 251 1 575 1 138 2 226 8 367 2 
317 2 579 4 176 6 202 6 177 2 24 5 232 2 483 6 118 2 599 4 374 6 511 6 143 2 56 2 381 4 384 2 269 6 149 2 36 2 622 2 623 3 110 2 423 15 111 2 226 6 228 12 557 2 154 6 393 2 480 6 139 1 
658 4 405 2 630 7 659 2 443 2 511 1 565 2 625 2 607 2 653 2 637 2 608 2 137 2 424 1 146 2 226 1 583 2 199 2 
658 4 405 2 630 6 659 2 443 4 565 4 625 2 607 2 653 4 637 2 608 2 137 2 146 2 583 2 199 2 
658 4 405 2 630 10 659 8 443 8 511 1 565 8 625 6 607 2 653 8 637 2 608 2 137 2 424 1 146 2 226 1 583 2 199 2 
658 2 405 2 630 2 443 2 565 2 607 2 653 2 637 2 608 2 137 2 146 2 583 2 199 2 
279 2 236 2 655 1 351 2 101 2 356 2 105 2 446 2 64 2 198 2 71 4 511 4 375 2 639 1 642 2 226 4 
351 2 101 2 356 2 105 2 446 2 511 4 64 2 236 2 375 2 226 4 198 2 71 2 
351 2 101 2 279 1 356 2 105 2 446 2 511 4 64 2 236 2 375 2 642 1 226 4 198 2 71 3 
351 2 101 2 279 2 356 2 105 2 446 2 511 4 64 2 236 2 375 2 642 2 226 4 198 2 71 4 
458 2 
