#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V ERROR java.lang.ArrayIndexOutOfBoundsException 644 (122,135) 654 (3,126,165,203,363,425,441,446,640) 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 624 596 627 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 619 711 549 476 673 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 97 49 322 682 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 216 275 361 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 216 275 361 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 216 275 361 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 216 275 361 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_0()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_1()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_2()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_StreetNumberSet_3()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_checkRep_4()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_checkRep_5()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_6()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_7()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_8()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_9()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_10()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_11()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_12()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_contains_13()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_orderStatistic_14()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_orderStatistic_15()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_size_16()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMapQuick1_StreetNumberSet_size_17()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testmisc_Fib_main_18()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isEmpty_19()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isEmpty_20()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isFull_21()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_isFull_22()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_getFront_23()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_getFront_24()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_25()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_26()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_27()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_dequeue_28()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_29()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_30()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_31()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testDataStructures_QueueAr_enqueue_32()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__33()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__34()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__35()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__36()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__37()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__38()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bdiv__39()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__40()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__41()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__42()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 
daikon.test.split.SplitterFactoryTest:testMath__BigFloat_bmul__43()V ERROR java.lang.RuntimeException (384,561) (384,561) (355,397) (355,397) 

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.ArraysMDE:subarray([JII)[J
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:subsetOf([S[S)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.Quant:lt(II)Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:modulus([I)[I
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:ne(DD)Z
jtb.JavaCharStream:ReadByte()C
daikon.Quant:lexNotEqual([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I | CONSTANT | 5627 | 0 -> -1
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.MathMDE:gcd(JJ)J
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.test.TestQuant:removeAdjacentDups([I)[I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.PptName:isCombinedExitPoint()Z
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.PrintAllVisitor:bufPrintln()V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:lexLT([I[I)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.PptSlice1:num_samples()I
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:lexGT([I[I)Z
daikon.VarInfo:new_ppt()V
daikon.Quant:eq(II)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:size()I
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.Quant:setDiff([I[I)[I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:subsetOf([D[D)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:eltwiseLT([I)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.Quant:eq(FF)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.Quant:memberOf(I[I)Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.inv.Invariant:logDetail()Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
jtb.JavaCharStream:backup(I)V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.Quant:subsetOf([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:isArray()Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.Quant:sameLength([I[I)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.LimitedSizeIntSet:size()I
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.ProglangType:isScalar()Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Ppt:Ppt()V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
utilMDE.Intern:intern([D)[D
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.Assert:assertTrue(Z)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.PptSlice0:arity()I
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Quant:eq(JJ)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
utilMDE.ArraysMDE:max([I)I
daikon.Quant:lexEqual([I[I)Z
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Intern:intern([J)[J
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:sign(I)I
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1007 | = null
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:eltsEqual([II)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.ArraysMDE:min([I)I
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.diff.RootNode:RootNode()V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice1:arity()I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.FuzzyFloat:lte(DD)Z
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:ne(II)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.PptName:isEnterPoint()Z
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.Debug:logOn()Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.UtilMDE:lineNumberFileReader(Ljava.io.File;)Ljava.io.LineNumberReader;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
utilMDE.Options.OptionInfo:argument_required()Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.Invariant:prob_and(DD)D
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.diff.Node:Node()V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.MathMDE:gcd([I)I
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.Fmt:i(I)Ljava.lang.Integer;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:negate(I)I
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | OPERATOR | 51862 | != -> <
daikon.Quant:eltwiseEqual([I)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaCharStream:getEndLine()I
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:memberOf(F[F)Z
jtb.JavaCharStream:getEndColumn()I
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | ASSIGN | 1057 | = null
daikon.inv.Invariant:isWorthPrinting()Z
daikon.Quant:eltwiseLTE([I)Z
daikon.Quant:eltsGtIndex([I)Z
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.ProglangType:isPseudoArray()Z
daikon.Quant:eltsLteIndex([I)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:setEqual([I[I)Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.Quant:memberOf(J[J)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.split.SplitterFactoryTest:assertEqualFiles(Ljava.lang.String;)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.ArraysMDE:element_range([I)I
daikon.Quant:subsetOf([B[I)Z
utilMDE.MathMDE:gcd_differences([I)I
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.Quant:gt(II)Z
utilMDE.UtilMDE:lineNumberFileReader(Ljava.lang.String;)Ljava.io.LineNumberReader;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.inv.Invariant:prob_or(DD)D
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I | STATEMENT | 5655 | stmt -> ;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:union([I[I)[I
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.UtilMDE:equalFiles(Ljava.lang.String;Ljava.lang.String;Z)Z
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
jtb.JavaCharStream:BeginToken()C
daikon.Quant:gte(II)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
daikon.diff.InvMap:InvMap()V
daikon.test.split.SplitterFactoryTest:assertEqualFiles(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([D[F)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:memberOf(S[S)Z
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.Quant:eltsLT([II)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName:hashCode()I
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsLtIndex([I)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.Invariants:Invariants()V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:noDups([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:slice([III)[I
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.filter.InvariantFilter:InvariantFilter()V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:pairwiseLT([I[I)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:eq(DD)Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.Quant:lte(II)Z
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:indexOf([II)I | STATEMENT | 13838 | stmt -> ;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.Quant:subsetOf([F[D)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.Quant:eltwiseGT([I)Z
daikon.Quant:concat([I[I)[I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:subsetOf([J[J)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltsGTE([II)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.Quant:eltsGT([II)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltsNotEqual([II)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.ProglangType:isIntegral()Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant:logOn()Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.ProglangType:dimensions()I
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.ProglangType:baseIsScalar()Z
utilMDE.UtilMDE:equalFiles(Ljava.lang.String;Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant:prob_and(DDD)D
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.Quant:subsetOf([F[F)Z
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:calc_range()J
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Debug:logDetail()Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:memberOf(D[F)Z
jtb.JavaCharStream:readChar()C
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.Quant:isReverse([I[I)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
jtb.JavaCharStream:FillBuff()V
utilMDE.WeakHasherMap:size()I
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.ModBitTracker:ModBitTracker(I)V
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.FuzzyFloat:indexOf([D[D)I
jtb.JavaParser:jj_ntk()I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.Invariant:justified()Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsLTE([II)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.Quant:eltwiseNotEqual([I)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.ArraysMDE:sum([I)I
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method; | ASSIGN | 38039 | = null
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:memberOf(F[D)Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.PptSlice2:arity()I
utilMDE.Intern:intern([I)[I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.ValueSet:ValueSet(I)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakHasherMap:processQueue()V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.Intern:numIntArrays()I
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.InvariantFormatTester:execute()Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:pairwiseEqual([I[I)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
utilMDE.MathMDE:pow(II)I
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
utilMDE.ArraysMDE:sum([[I)I
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.Invariant:getConfidence()D
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.Quant:lexLTE([I[I)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:intersection([I[I)[I
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:lexGTE([I[I)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.MathMDE:gcd(II)I
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.VarInfo:relate_var()V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
558 2 135 2 445 2 542 2 651 2 654 2 659 2 277 2 589 2 379 2 310 2 663 2 122 2 96 2 615 2 482 2 695 4 129 2 319 2 70 6 640 2 720 2 644 4 
135 8 379 4 687 2 461 6 445 8 122 4 465 2 482 5 126 4 651 4 70 15 363 4 654 8 205 6 659 4 644 12 530 2 
366 4 487 2 344 2 389 4 304 2 678 2 58 4 111 4 681 2 226 2 272 10 76 8 11 6 468 2 519 2 472 2 294 2 93 14 710 2 36 2 209 2 211 2 611 2 311 2 41 4 95 2 314 4 715 4 260 4 551 4 717 10 665 2 573 4 574 4 21 2 641 4 82 2 104 2 364 4 221 62 
290 2 415 2 200 2 117 2 610 2 550 2 78 2 281 2 67 2 189 2 
270 2 497 2 702 2 527 2 155 4 469 2 181 2 690 2 59 2 
180 2 56 2 460 2 297 2 402 2 512 6 174 2 705 6 706 2 60 6 47 2 
160 2 634 2 345 2 181 2 312 6 690 2 232 6 629 2 578 6 359 4 494 2 719 6 581 4 
645 2 26 4 1 2 458 2 135 16 679 8 598 2 445 16 249 2 464 2 203 6 651 10 654 16 659 10 635 2 379 10 687 4 181 6 690 6 122 10 96 8 285 4 187 8 482 12 695 10 131 8 319 4 70 29 640 6 644 26 
289 4 597 6 
610 2 
684 2 404 2 195 2 87 2 715 4 72 2 617 2 236 2 76 2 483 2 239 2 364 2 
303 4 3 8 536 6 135 26 441 4 679 6 461 6 445 26 249 2 446 2 651 12 203 4 654 26 425 4 205 6 659 12 379 12 181 4 690 4 43 2 122 12 96 14 482 16 165 2 317 2 126 4 695 6 319 2 70 38 640 4 363 4 669 6 644 38 24 2 83 2 
487 2 76 2 11 2 
475 2 230 2 14 2 212 2 713 2 704 22 31 10 68 2 391 2 227 2 575 2 602 2 595 2 252 2 
377 2 
434 2 170 5 435 2 534 2 535 4 85 2 265 1 173 3 438 1 541 2 348 2 267 2 91 4 179 32 276 3 548 2 453 2 279 2 353 3 354 2 181 32 552 3 553 2 184 2 358 12 98 2 636 2 286 4 360 2 188 2 455 1 639 2 556 2 642 2 22 2 105 2 23 24 106 6 457 3 368 2 557 2 560 16 559 2 192 2 562 3 108 1 462 2 463 2 28 1 29 2 198 3 202 2 467 2 371 2 652 32 653 2 373 2 34 2 35 12 658 2 661 2 296 2 210 2 477 2 120 2 38 2 39 2 42 2 123 2 127 2 132 2 484 1 298 2 299 2 220 3 486 8 222 2 54 2 134 2 57 6 390 1 680 2 59 2 582 2 307 2 394 2 398 1 62 2 309 1 400 2 499 2 686 2 500 1 145 16 690 34 66 2 503 16 146 3 593 2 408 2 505 2 409 2 697 1 698 8 240 2 410 4 242 2 71 8 326 2 509 1 151 3 245 1 412 2 413 2 246 3 247 2 515 2 248 3 416 2 331 4 600 2 418 4 75 2 74 2 419 2 708 1 421 2 424 6 333 2 426 2 522 2 159 2 523 2 604 2 335 2 607 1 608 2 714 2 163 6 79 4 716 2 164 2 618 24 620 4 528 16 432 2 433 1 622 2 721 2 
690 2 491 2 
565 2 287 2 690 4 
387 2 437 2 624 2 676 6 194 2 513 2 628 2 627 2 543 2 139 2 580 6 138 6 305 2 32 6 395 2 118 2 632 2 588 4 63 2 378 2 571 2 162 2 318 2 321 2 149 2 621 2 50 2 596 2 
167 1 86 2 567 2 150 2 
161 2 86 2 
493 2 367 2 76 2 92 2 
493 2 367 2 380 2 76 2 55 2 92 2 
285 2 367 2 100 2 76 2 119 2 86 2 
422 2 585 2 
285 2 367 2 76 2 439 2 
480 2 514 2 
507 2 15 2 
388 2 407 2 
605 2 369 2 
73 2 15 2 369 2 
15 2 369 2 700 2 
84 2 15 2 369 2 
15 2 369 2 709 2 
367 2 649 2 76 2 393 2 308 2 182 6 357 2 699 6 
566 2 255 2 
285 2 367 2 76 2 119 2 55 2 86 2 703 2 
343 2 119 2 86 2 
119 2 86 2 141 2 
584 2 255 2 150 2 
119 2 86 2 
234 2 255 2 
517 2 86 2 
675 2 255 2 150 2 
388 2 150 2 449 2 
251 2 369 2 150 2 
480 2 521 2 150 2 
15 2 664 2 150 2 
306 2 255 2 
86 2 612 2 
388 2 110 2 
369 2 324 2 
492 2 480 2 
15 2 19 2 
255 2 269 2 
136 2 15 2 
325 2 480 2 
340 2 369 2 
388 2 414 2 
675 2 196 2 255 2 150 2 
675 2 33 2 196 2 255 2 150 2 
662 2 255 2 150 2 
255 2 150 2 526 2 
295 2 261 2 253 2 411 2 
452 4 352 2 623 2 570 2 498 4 193 2 401 2 489 2 704 6 405 2 579 2 10 2 115 2 103 2 320 2 655 2 448 2 365 2 
282 2 150 2 
192 2 
264 2 434 2 435 2 436 2 535 4 85 2 265 2 541 2 267 2 89 2 178 2 447 4 91 2 179 4 548 2 451 2 181 26 98 2 358 8 636 2 188 2 102 2 642 2 105 2 106 2 559 2 109 2 462 2 202 2 467 2 650 2 652 6 35 8 376 2 120 2 42 2 132 2 298 2 668 2 222 2 54 2 57 2 680 2 59 2 229 4 307 2 394 2 398 2 231 2 690 26 66 2 593 2 410 4 241 2 71 2 244 2 416 4 331 2 418 4 74 2 707 2 424 4 159 6 522 2 523 2 604 4 336 2 335 2 608 2 163 6 79 2 259 2 716 2 620 4 528 6 721 2 
264 2 434 2 435 2 436 2 535 4 85 2 265 2 541 2 267 2 89 2 447 4 91 2 179 4 548 2 451 2 181 26 98 2 358 8 636 2 188 2 102 2 642 2 105 2 106 2 559 2 109 2 463 2 462 2 202 2 467 2 650 2 652 6 656 2 35 8 120 2 42 2 132 2 298 2 668 2 52 2 222 2 54 2 57 2 680 2 59 2 229 4 307 2 394 2 398 2 231 2 690 26 233 2 66 2 593 2 410 4 241 2 71 2 244 2 416 2 331 2 418 4 74 2 707 2 424 6 333 2 159 6 522 2 523 2 604 4 336 2 335 2 608 2 163 6 79 2 716 2 620 4 528 6 432 2 721 2 
315 2 
429 2 518 2 
396 2 180 2 225 2 297 2 313 2 512 2 705 2 250 2 291 4 176 2 692 2 417 2 564 2 316 2 228 2 219 2 238 4 456 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 6 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 402 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 512 6 705 4 291 4 250 2 417 2 199 4 706 2 292 2 418 2 74 2 154 4 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 6 219 2 263 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 6 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 512 4 705 6 291 4 250 2 417 2 199 4 706 2 292 2 418 2 74 2 154 4 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 6 47 2 219 2 263 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 6 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 460 2 512 6 705 6 291 4 250 2 417 2 199 4 706 2 292 2 418 2 74 2 154 8 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 6 219 2 263 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 8 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 460 2 512 6 705 8 291 4 250 2 417 2 199 8 706 2 292 2 418 2 74 2 154 8 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 10 47 2 219 2 263 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 6 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 460 2 512 6 705 6 291 4 250 2 417 2 199 8 706 2 292 2 418 2 74 2 154 8 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 10 219 2 263 2 
342 2 535 4 533 10 171 2 2 2 540 2 538 2 7 6 541 2 9 2 176 2 12 2 179 2 350 6 180 4 351 1 181 24 183 6 358 4 188 2 191 2 559 2 25 2 197 1 202 2 564 2 35 4 375 2 568 2 569 6 208 1 377 6 40 1 42 2 44 6 47 4 219 2 51 2 222 2 54 2 225 2 57 2 577 2 59 2 60 12 228 2 394 2 396 2 587 2 399 2 64 2 591 4 403 2 66 2 593 2 406 4 69 2 594 2 238 4 410 4 241 4 71 2 250 2 417 2 599 4 418 4 74 2 601 2 424 6 428 2 606 2 256 2 258 2 79 2 613 8 614 2 262 1 81 6 620 4 263 2 85 2 443 2 444 7 266 2 267 12 88 2 447 4 91 2 274 6 451 2 280 2 98 2 636 2 638 8 287 6 642 2 456 2 106 2 107 2 647 2 463 2 291 4 292 4 114 2 467 2 652 8 471 2 660 2 120 2 297 4 479 2 125 2 666 2 128 2 298 2 133 6 491 6 137 6 495 2 307 2 683 2 496 4 313 2 690 46 691 6 692 4 147 2 316 2 506 2 323 2 510 6 511 2 512 4 152 7 705 8 153 2 329 2 706 4 331 2 154 2 707 2 157 2 156 1 158 6 333 2 159 6 522 2 712 2 336 2 337 2 524 1 525 1 163 6 338 1 716 2 528 6 168 6 169 6 341 2 721 2 
342 2 533 10 535 4 2 2 171 2 85 2 538 2 540 2 7 6 443 2 266 2 541 2 9 2 267 12 176 2 88 2 447 4 91 4 12 2 274 6 179 2 350 6 451 2 180 4 280 2 181 26 183 6 358 8 98 2 636 2 188 2 638 8 287 6 642 2 456 2 106 2 191 2 25 2 559 2 460 4 107 2 647 2 463 2 291 4 292 4 114 2 564 2 202 2 467 2 652 8 471 2 35 8 375 2 568 2 660 2 569 6 377 6 120 2 297 4 479 2 42 2 44 6 125 2 128 2 666 2 383 2 219 2 298 2 51 2 222 2 133 6 54 2 225 2 57 2 577 2 491 6 59 2 60 12 137 6 228 2 495 2 683 2 307 2 496 4 394 2 396 2 587 2 399 2 64 2 403 2 591 4 690 48 313 2 66 2 691 6 406 4 692 4 593 2 147 2 316 2 69 2 148 2 594 2 506 2 238 4 410 4 323 2 241 4 71 2 510 6 511 2 512 8 153 2 705 8 250 2 329 2 599 4 417 2 331 4 706 4 418 4 154 6 74 2 601 2 707 2 157 2 424 6 158 6 333 2 522 2 159 6 604 2 428 2 606 2 712 2 336 2 256 2 337 2 258 2 163 6 79 4 613 8 716 2 614 2 81 6 620 4 528 6 168 6 169 6 263 2 341 2 721 2 
342 2 533 10 535 4 2 2 171 2 85 2 538 2 540 2 7 6 443 2 266 2 541 2 9 2 267 12 176 2 88 2 447 4 91 4 12 2 274 6 179 2 350 6 451 2 180 4 280 2 181 26 183 6 358 8 98 2 636 2 188 2 638 8 287 6 642 2 456 2 106 2 191 2 25 2 559 2 460 4 107 2 647 2 463 2 291 4 199 4 292 4 114 2 564 2 202 2 467 2 652 8 471 2 35 8 375 2 568 2 660 2 569 6 377 6 120 2 297 4 479 2 42 2 44 6 125 2 666 2 128 6 383 2 219 2 298 2 51 2 222 2 133 6 54 2 225 2 57 2 577 2 491 6 59 2 60 12 137 6 228 2 495 2 683 2 307 2 496 4 394 2 396 2 587 2 399 2 64 2 403 2 591 4 690 48 313 2 66 2 691 6 406 4 692 4 593 2 147 2 316 2 69 2 148 2 594 2 506 2 238 4 410 4 323 2 241 4 71 2 510 6 511 2 512 8 153 2 705 8 250 2 329 2 599 4 417 2 331 4 706 4 418 4 154 6 74 2 601 2 707 2 157 2 424 6 158 6 333 2 522 2 159 6 604 2 428 2 606 2 712 2 336 2 256 2 337 2 258 2 163 6 79 4 613 8 716 2 614 2 81 6 620 4 528 6 168 6 169 6 263 2 341 2 721 2 
342 2 535 4 533 8 171 2 538 2 4 2 537 6 540 2 7 6 541 2 9 2 8 6 176 2 12 2 179 4 350 12 180 4 181 24 183 6 356 2 358 10 188 2 191 2 25 2 559 2 199 4 202 2 564 2 35 10 375 2 568 2 569 12 377 12 213 6 42 2 572 6 44 6 218 2 47 2 383 2 385 6 219 2 51 2 222 2 54 2 225 2 57 4 577 2 59 2 60 16 228 2 394 2 396 2 587 2 399 2 64 2 403 2 402 2 591 4 66 2 593 2 406 4 69 2 594 2 238 4 410 4 241 4 71 4 250 2 417 2 599 4 418 4 74 2 601 2 424 6 604 2 428 2 606 2 256 2 258 2 79 4 613 8 614 2 81 12 620 4 263 2 85 2 443 2 266 2 267 10 268 2 271 2 88 2 90 2 447 6 91 4 274 6 631 2 451 4 280 2 98 2 636 2 638 8 287 12 642 2 456 2 106 4 460 4 107 2 647 2 463 2 291 4 292 4 114 2 467 2 652 12 470 6 471 2 660 2 120 2 297 4 479 2 125 2 128 6 666 2 298 2 133 6 490 2 491 12 137 6 140 6 495 2 307 2 683 2 496 4 313 2 690 52 691 6 692 4 147 2 316 2 148 2 506 2 323 2 510 6 327 6 511 2 512 10 705 10 153 2 329 2 706 4 331 4 154 6 707 2 157 2 158 6 333 2 159 8 522 2 334 6 712 2 336 2 337 2 163 6 716 2 528 8 168 6 169 6 341 2 721 2 
25 2 225 2 460 2 7 2 443 2 512 6 705 6 250 2 291 2 199 4 706 2 60 4 88 2 154 6 564 2 12 2 157 2 496 2 396 2 712 2 587 2 180 4 256 2 280 2 297 4 690 4 258 2 313 2 638 2 316 2 128 4 594 2 238 2 263 2 456 2 
535 4 534 2 533 2 85 2 2 2 6 2 7 2 443 2 541 2 347 2 267 4 88 2 447 4 12 2 179 3 180 4 279 2 280 2 181 24 98 2 636 2 188 2 638 2 642 2 456 2 106 3 25 2 192 2 559 2 460 2 463 2 291 2 564 2 202 2 467 2 652 8 660 2 120 2 297 4 42 2 128 2 667 2 298 2 222 2 300 3 54 2 225 2 57 3 59 2 60 4 307 2 496 2 394 2 396 2 587 2 685 2 690 28 144 2 313 2 66 2 593 2 316 2 594 2 238 2 410 4 241 2 512 6 705 6 250 2 706 2 418 4 74 2 154 6 707 2 424 6 157 2 333 2 159 6 522 2 712 2 336 2 256 2 714 2 163 6 258 2 620 4 528 6 263 2 721 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 6 88 2 228 2 12 2 496 4 396 2 61 2 587 2 180 4 280 2 403 2 181 6 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 460 2 512 6 705 6 291 4 250 2 417 2 199 8 706 2 292 2 418 2 74 2 154 8 564 2 467 2 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 128 10 219 2 263 2 
535 2 225 2 538 2 443 2 7 4 541 2 9 2 176 2 60 8 88 2 228 2 12 2 496 4 396 2 13 2 587 2 180 4 280 2 403 2 181 6 402 2 313 2 690 12 406 2 692 4 593 2 188 2 316 2 638 4 594 2 506 2 238 4 456 2 559 2 25 2 460 2 512 8 705 6 250 2 291 4 417 2 199 8 706 2 292 2 418 2 74 2 154 8 564 2 467 2 372 4 157 2 471 2 660 2 712 2 256 2 297 4 258 2 163 4 42 2 80 2 128 10 219 2 
466 2 25 2 594 2 
466 2 25 2 594 2 
533 2 535 4 85 2 442 2 440 2 7 4 443 2 541 2 9 2 267 4 176 2 91 4 12 2 179 2 180 4 181 16 283 2 185 2 358 4 98 2 636 2 188 2 638 4 642 2 559 2 25 4 460 4 109 4 27 2 563 2 463 2 291 2 199 4 292 4 466 2 201 2 202 2 564 2 467 2 652 2 374 2 657 2 471 2 35 4 206 2 120 2 297 4 479 2 42 2 214 2 217 2 128 6 47 4 130 2 219 2 298 2 224 4 222 2 223 2 54 2 225 2 59 2 60 16 307 2 496 2 394 2 396 4 590 4 403 2 591 2 402 4 690 24 66 2 691 2 406 2 692 4 593 2 594 6 238 2 410 4 241 6 512 12 705 12 416 1 599 2 331 4 706 4 418 4 74 2 154 6 707 2 424 6 333 2 254 2 159 2 336 2 163 6 79 4 614 2 716 4 616 2 718 2 620 4 528 2 341 2 721 2 
533 2 337 2 442 2 181 2 690 4 563 2 267 2 691 2 599 2 30 2 45 2 99 2 188 2 518 2 228 2 495 2 254 2 
535 4 85 2 538 2 442 2 440 2 7 4 443 2 541 2 9 2 267 2 176 2 91 4 12 2 179 4 546 2 180 4 181 16 185 2 186 2 358 4 98 2 636 2 188 2 638 4 642 2 643 2 559 2 25 4 460 4 109 4 27 2 563 2 463 2 291 2 199 4 292 4 466 2 202 2 564 2 467 2 652 2 374 2 657 2 471 2 35 4 120 2 297 4 479 2 42 2 214 2 217 2 128 6 47 4 130 4 219 2 298 2 224 4 222 2 223 2 54 2 225 2 59 2 60 16 307 2 496 2 394 2 396 4 590 4 403 2 591 2 402 4 690 24 66 2 691 2 406 4 692 4 593 2 594 6 238 2 410 4 241 6 701 2 512 12 705 12 416 2 331 4 706 4 418 4 74 2 154 6 707 2 424 6 603 2 333 2 254 2 159 2 336 2 163 6 79 4 614 2 716 4 616 2 620 4 528 2 341 2 721 2 
533 2 535 4 85 2 538 2 442 2 440 2 7 4 443 2 541 2 9 2 267 4 176 2 91 4 349 2 12 2 179 2 180 4 181 16 185 2 358 4 98 2 636 2 188 2 638 4 642 2 559 2 25 4 460 4 109 4 27 2 563 2 463 2 291 2 199 4 292 4 466 2 202 2 564 2 467 2 652 2 374 2 657 2 471 2 35 4 120 2 297 4 479 2 42 2 214 2 217 2 381 2 128 6 47 4 130 2 219 2 298 2 224 4 222 2 223 2 54 2 225 2 59 2 60 16 307 2 496 2 394 2 396 4 590 4 403 2 591 2 402 4 143 2 690 24 66 2 691 2 406 4 692 4 593 2 694 2 594 6 238 2 410 4 241 6 512 12 705 12 416 1 330 2 599 2 331 4 706 4 418 4 74 2 154 6 707 2 424 6 333 2 254 2 159 2 336 2 163 6 79 4 614 2 716 4 616 2 620 4 528 2 341 2 721 2 
535 4 85 2 171 2 172 2 539 2 445 2 541 2 267 2 447 4 179 2 545 2 549 2 16 2 181 20 98 2 636 2 637 2 188 2 642 2 644 4 106 2 190 2 559 2 461 4 113 2 202 2 467 2 651 2 652 8 116 2 654 2 204 2 659 2 568 2 476 2 120 2 379 2 42 2 122 2 121 2 481 2 126 2 666 2 382 2 48 2 576 2 386 6 298 2 222 2 301 4 673 2 54 2 674 2 135 2 57 2 59 2 307 2 394 2 690 26 689 2 66 2 593 2 693 2 147 2 237 2 70 6 410 4 241 2 511 2 418 4 74 2 707 2 424 4 159 6 522 2 428 2 711 2 163 6 619 2 620 4 528 6 721 2 
53 2 57 3 5 1 648 2 447 2 273 2 652 2 520 2 179 3 159 2 522 2 142 2 586 2 451 6 94 4 181 2 690 2 502 2 430 2 696 2 528 2 671 2 670 2 106 3 288 3 
53 2 57 2 648 2 447 2 273 2 652 2 520 2 179 2 159 2 522 2 142 2 586 2 451 6 94 4 181 2 690 2 502 2 430 2 696 2 528 2 671 2 670 2 106 2 288 2 
53 2 57 2 648 2 447 2 273 2 652 2 520 2 179 2 159 2 522 2 142 2 586 2 451 6 94 4 181 2 690 2 502 2 430 2 696 2 528 2 671 2 670 2 106 2 288 2 
560 2 302 3 135 2 57 3 679 4 445 2 177 2 516 2 77 6 420 4 651 2 203 2 652 2 392 2 654 2 332 2 659 2 179 3 522 2 450 4 207 3 474 2 379 2 181 4 688 2 257 2 145 2 690 10 18 4 122 2 339 2 20 2 430 2 555 4 166 2 431 4 70 5 529 2 644 4 531 3 
302 2 135 2 57 2 679 4 445 2 177 2 392 2 179 2 450 4 181 4 688 2 690 10 145 2 18 4 96 2 20 2 555 4 70 4 644 4 560 2 249 2 516 2 77 6 203 2 651 2 420 4 652 2 654 2 332 2 659 2 522 2 474 2 207 2 379 2 257 2 122 2 339 2 430 2 482 2 166 2 431 4 529 2 531 2 
302 2 135 2 57 2 679 4 445 2 177 2 392 2 179 2 450 4 181 4 688 2 690 10 145 2 18 4 96 2 20 2 555 4 70 4 644 4 560 2 249 2 516 2 77 6 203 2 651 2 420 4 652 2 654 2 332 2 659 2 522 2 474 2 207 2 379 2 257 2 122 2 339 2 430 2 482 2 166 2 431 4 529 2 531 2 
302 2 135 2 57 2 679 4 445 2 177 2 392 2 179 2 450 4 181 4 688 2 690 10 145 2 18 4 96 2 20 2 555 4 70 4 644 4 560 2 249 2 516 2 77 6 203 2 651 2 420 4 652 2 654 2 332 2 659 2 522 2 474 2 207 2 379 2 257 2 122 2 339 2 430 2 482 2 166 2 431 4 529 2 531 2 
302 2 135 2 57 2 679 4 445 2 177 2 392 2 179 2 450 4 181 4 688 2 690 10 145 2 18 4 96 4 20 2 555 4 70 4 644 4 560 2 249 4 516 2 77 6 203 2 651 2 420 4 652 2 654 2 332 2 659 2 522 2 474 2 207 2 379 2 257 2 122 2 339 2 430 2 482 4 166 2 431 4 529 2 531 2 
89 2 459 2 544 2 454 2 609 2 478 2 17 2 
46 2 37 2 544 2 423 2 485 2 293 2 
710 1 0 2 488 1 181 4 690 4 626 2 501 2 215 2 681 1 175 2 97 2 593 2 554 1 362 1 682 2 322 2 49 2 
532 2 3 2 135 6 346 2 441 2 679 4 461 3 445 6 249 4 651 5 203 2 654 6 659 5 427 2 379 5 181 6 592 2 690 6 122 5 96 6 693 2 235 2 124 2 482 6 317 1 126 2 70 12 48 2 669 4 644 11 83 1 190 2 
450 2 547 2 243 2 646 2 677 2 181 1 328 2 625 2 690 1 630 6 112 2 284 4 504 2 101 2 555 2 420 2 583 1 672 2 
450 2 547 4 243 2 646 4 677 2 328 2 625 4 630 6 112 2 284 4 504 2 101 2 555 2 420 2 672 2 
450 2 547 8 243 2 646 8 677 2 181 1 328 2 625 8 690 1 630 10 112 6 284 4 504 8 101 2 555 2 420 2 583 1 672 2 
450 2 547 2 243 2 646 2 677 2 328 2 625 2 630 2 284 2 101 2 555 2 420 2 672 2 
222 2 275 2 394 2 633 1 181 4 690 4 65 1 361 2 410 2 508 2 463 2 424 4 333 2 216 2 620 2 298 2 
222 2 508 2 181 4 690 4 463 2 216 2 620 2 361 2 424 4 298 2 275 2 333 2 394 2 410 2 
222 2 508 2 181 4 690 4 463 2 216 2 620 2 361 2 424 4 298 2 275 2 333 2 394 2 410 2 
222 2 508 2 181 4 690 4 216 2 620 2 361 2 424 2 298 2 275 2 394 2 410 2 
473 2 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
397 1 278 1 370 1 561 1 355 1 384 1 
