#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 422 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V ERROR utilMDE.Options$ArgException 77 
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NoClassDefFoundError 369 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 387 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 387 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NoClassDefFoundError 387 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 387 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 387 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NoClassDefFoundError 48 413 26 359 144 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NoClassDefFoundError 29 297 42 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NoClassDefFoundError 29 297 42 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NoClassDefFoundError 29 297 42 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NoClassDefFoundError 29 297 42 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.Quant:memberOf(F[F)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.Quant:subsetOf([F[D)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:element_range([I)I
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.Quant:noDups([I)Z
daikon.Quant:lexGTE([I[I)Z
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
jtb.JavaParser:jj_scan_token(I)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
jtb.JavaParser:jj_3_16()Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.FuzzyFloat:gte(DD)Z
jtb.JavaParser:jj_3R_53()Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
jtb.JavaCharStream:getEndLine()I
jtb.JavaParser:jj_3R_51()Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.OrderedPairIterator:setnext2()V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.Quant:setEqual([I[I)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.Quant:eltsGtIndex([I)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.ProglangType:dimensions()I
utilMDE.Intern:intern([I)[I
utilMDE.LimitedSizeIntSet:add(I)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.Quant:subsetOf([F[F)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
jtb.JavaCharStream:getBeginLine()I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.Assert:assertTrue(Z)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String; | CONDITION | 14830 | if (x) -> if (!x)
jtb.JavaParser:jj_3R_162()Z
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:concat([I[I)[I
utilMDE.FuzzyFloat:ne(DD)Z
daikon.Quant:eltsNotEqual([II)Z
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.Quant:eq(JJ)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
jtb.JavaParser:jj_3R_163()Z
utilMDE.Intern:numIntArrays()I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:eq(FF)Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltwiseGTE([I)Z
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:jj_3R_161()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:lt(II)Z
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
jtb.JavaParser:jj_3R_135()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.Quant:subsetOf([B[I)Z
jtb.JavaParser:jj_3R_133()Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.Quant:gte(II)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.Options.ArgException:ArgException(Ljava.lang.String;)V
utilMDE.MathMDE:gcd([I)I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:subsetOf([D[F)Z
daikon.ModBitTracker:num_sets()I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:eltwiseLT([I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
jtb.JavaParser:jj_3_1()Z
daikon.inv.Invariant:prob_or(DD)D
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.Quant:eltsLtIndex([I)Z
daikon.Quant:eltsGTE([II)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.InvariantFormatTester:execute()Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.MathMDE:modulus([I)[I
daikon.Quant:union([I[I)[I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quant:ne(II)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsGT([II)Z
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.ArraysMDE:subarray([III)[I
jtb.JavaParser:jj_3R_52()Z
daikon.Quant:eltwiseGT([I)Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:eltwiseNotEqual([I)Z
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:gcd(JJ)J
utilMDE.WeakHasherMap.EntrySet:size()I
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
jtb.syntaxtree.NodeToken:trimSpecials()V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
jtb.JavaParser:jj_3R_48()Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.Quant:memberOf(S[S)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.MathMDE:missing_numbers([I)[I
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.Quant:lexLTE([I[I)Z
jtb.syntaxtree.Modifiers:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:eq(II)Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.Quant:memberOf(J[J)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
jtb.JavaCharStream:getEndColumn()I
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I | CONSTANT | 7816 | 80 -> 0
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:sameLength([I[I)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.Quant:lexNotEqual([I[I)Z | CONDITION | 170166 | if (x) -> if (!x)
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.Quant:subsetOf([S[S)Z
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:negate(I)I
utilMDE.MathMDE:pow(II)I
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.Quant:lexEqual([I[I)Z
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:slice([III)[I
utilMDE.WeakHasherMap:size()I
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.Quant:intersection([I[I)[I
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:jj_3R_55()Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
jtb.JavaCharStream:getBeginColumn()I
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.Quant:eltsLT([II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.Quant:eltsLTE([II)Z
jtb.JavaCharStream:readChar()C
jtb.JavaParser:generateParseException()Ljtb.ParseException;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([I[I)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.JavaParser:jj_3R_58()Z
jtb.JavaParser:jj_3R_57()Z
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.Quant:gt(II)Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Quant:memberOf(D[F)Z
daikon.ModBitTracker:ModBitTracker(I)V
daikon.inv.Invariant:prob_and(DD)D
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.ModBitTracker:num_samples()I
jtb.JavaParser:jj_3R_50()Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
jtb.JavaParser:jj_3R_49()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:pairwiseLTE([I[I)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.MathMDE:sign(I)I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.Quant:eltsGteIndex([I)Z
utilMDE.OrderedPairIterator:setnext1()V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseGT([I[I)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
jtb.JavaParser:jj_3R_47()Z
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.Quant:eltsEqual([II)Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.Invariant:prob_and(DDD)D
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.Intern:intern([J)[J
jtb.JavaParser:jj_3R_85()Z
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_3R_134()Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
jtb.JavaParser:jj_2_1(I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.MathMDE:gcd(II)I
utilMDE.LimitedSizeIntSet:size()I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.Quant:eltwiseLTE([I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:eq(DD)Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:isMissing(I)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.JavaParser:jj_ntk()I
utilMDE.ArraysMDE:concat([I[I)[I
daikon.Quant:subsetOf([D[D)Z
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.WeakHasherMap:processQueue()V
jtb.JavaCharStream:FillBuff()V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:memberOf(F[D)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.ValueTuple:size()I
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.Intern:intern([D)[D
utilMDE.FuzzyFloat:gt(DD)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.ModBitTracker:split(I)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I | CONSTANT | 17989 | 115 -> 1
daikon.Quant:isReverse([I[I)Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_2_16(I)Z
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
jtb.JavaCharStream:ReadByte()C
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:lexGT([I[I)Z
jtb.JavaParser:jj_3R_54()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
jtb.syntaxtree.Modifiers:Modifiers(Ljtb.syntaxtree.NodeListOptional;)V
daikon.Quant:setDiff([I[I)[I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.Quant:lte(II)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
jtb.JavaParserTokenManager:MoreLexicalActions()V
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.ModBitTracker:num_vars()I
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
jtb.JavaCharStream:backup(I)V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.Quant:eltsEqualIndex([I)Z
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
utilMDE.FuzzyFloat:eq(DD)Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:min([I)I | CONSTANT | 860 | 0 -> -1
daikon.Quant:memberOf(I[I)Z
daikon.Quant:lexLT([I[I)Z
jtb.JavaParser:jj_3R_56()Z
daikon.Quant:eltwiseEqual([I)Z
jtb.JavaCharStream:BeginToken()C
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
175 2 55 2 337 4 12 2 158 2 268 2 339 2 214 2 71 2 
25 6 350 2 308 2 206 2 292 6 252 2 80 2 147 2 52 2 330 2 58 6 
394 2 96 2 207 2 4 2 254 6 37 4 136 6 344 4 12 2 139 2 348 6 71 2 145 6 
212 16 160 4 135 12 54 6 138 8 137 16 111 2 12 6 115 10 248 2 317 2 265 2 61 4 418 10 357 10 169 2 296 10 360 4 273 8 64 8 421 8 198 16 324 6 326 2 21 4 103 2 278 29 171 26 104 10 71 6 
131 4 310 6 
365 2 
422 2 
283 2 27 4 212 32 309 8 134 2 180 2 135 22 370 4 241 4 54 4 138 6 137 32 372 6 12 4 94 6 115 16 143 6 380 6 228 2 315 6 418 16 61 2 386 4 357 16 296 6 196 4 421 18 198 32 361 2 324 4 44 4 66 4 327 6 103 2 278 54 171 48 104 16 71 4 154 2 
32 2 295 2 294 2 
282 2 17 2 82 10 340 2 217 2 371 2 409 22 67 2 200 2 201 2 236 2 33 2 46 2 173 2 
211 2 212 2 135 2 54 2 137 2 286 2 90 2 112 2 115 2 383 2 167 2 418 2 61 2 385 2 357 2 296 4 232 2 421 2 234 2 198 2 278 6 171 4 104 2 
315 6 266 2 418 4 212 8 19 2 357 4 135 4 196 4 198 8 137 8 44 4 21 2 278 16 115 4 171 12 104 4 380 6 
307 62 157 4 336 10 366 2 210 4 5 4 159 2 107 4 179 4 85 2 220 2 408 2 86 10 221 2 91 4 373 2 223 2 32 2 312 4 117 2 187 2 289 2 189 2 319 2 60 2 295 8 294 6 148 2 274 2 420 4 101 14 255 4 428 2 153 4 331 4 202 2 72 2 204 2 333 4 174 4 
77 2 290 2 415 2 125 2 321 2 150 2 300 2 301 2 127 2 116 2 365 2 
74 2 124 2 369 2 411 2 
256 2 12 2 
12 4 322 2 272 2 
133 2 
208 12 209 14 106 2 7 2 9 2 219 2 109 2 222 2 311 10 225 4 114 6 13 32 227 2 313 2 314 14 229 4 316 8 15 4 18 2 325 2 22 14 328 2 329 2 332 48 130 10 23 2 334 2 335 10 132 2 342 2 28 4 242 2 244 14 349 6 351 6 245 10 354 2 250 48 35 4 251 2 36 14 358 2 40 14 45 2 152 2 156 18 50 2 161 2 376 4 263 2 165 18 381 4 382 2 264 2 384 48 168 2 59 14 62 10 63 2 65 8 68 12 69 8 277 2 70 2 170 2 389 2 172 2 391 2 73 2 280 2 76 2 75 6 398 2 399 2 78 2 404 14 181 4 182 2 285 2 89 2 185 10 186 8 188 10 414 14 97 2 98 2 417 2 194 2 199 14 425 2 427 14 429 2 302 2 304 4 305 2 306 2 
402 2 213 2 176 1 195 2 
258 2 195 2 
240 2 423 2 269 2 295 2 160 2 216 2 195 2 
31 2 423 2 195 2 
423 2 195 2 261 2 
151 2 213 2 377 2 
423 2 195 2 
151 2 320 2 
83 2 195 2 
233 2 151 2 213 2 
113 2 213 2 38 2 
267 2 213 2 284 2 
298 2 396 2 213 2 
102 2 374 2 213 2 
151 2 426 2 
195 2 164 2 
122 2 113 2 
267 2 341 2 
162 2 396 2 
102 2 95 2 
151 2 406 2 
102 2 291 2 
396 2 41 2 
267 2 126 2 
113 2 141 2 
233 2 151 2 224 2 213 2 
215 2 
151 2 213 2 84 2 
407 2 151 2 213 2 
105 2 16 2 338 2 368 2 
0 2 119 2 353 2 230 2 3 2 270 2 108 2 197 2 218 2 343 4 43 2 87 2 184 2 409 6 92 4 362 2 93 2 57 2 
163 2 213 2 
352 2 81 2 295 2 216 2 
352 2 81 2 269 2 295 2 216 2 149 2 
423 2 295 2 160 2 216 2 195 2 392 2 
10 2 192 2 
295 2 160 2 216 2 231 2 
155 2 396 2 
102 2 142 2 
246 2 113 2 
249 2 267 2 
102 2 267 2 424 2 
102 2 267 2 193 2 
102 2 267 2 388 2 
102 2 267 2 11 2 
49 2 216 2 190 6 121 2 416 2 355 2 295 2 39 6 
151 2 293 2 
346 2 
74 2 387 2 124 2 411 2 
74 2 387 2 124 2 411 2 
403 2 128 2 178 2 
403 2 128 2 178 2 
74 2 387 2 124 2 411 2 
74 2 387 2 124 2 411 2 
74 2 387 2 124 2 411 2 
238 2 239 2 26 2 48 2 177 2 12 4 56 2 226 2 144 2 34 2 413 2 412 2 290 1 321 1 359 2 257 2 203 2 
2 2 51 2 363 2 303 2 129 2 166 2 
247 2 79 2 367 2 390 2 279 2 129 2 100 2 
237 2 400 2 401 2 405 2 183 1 30 2 88 2 221 1 345 2 287 1 288 2 12 10 410 2 375 2 243 2 120 2 123 2 253 1 419 2 271 2 275 2 276 2 364 2 202 1 71 8 24 2 
397 2 260 2 212 6 6 2 309 2 137 6 138 4 12 6 140 2 94 4 115 6 379 2 315 4 318 2 418 6 386 2 99 2 357 6 299 2 20 2 198 6 44 2 324 2 278 17 171 12 71 6 104 6 
205 2 395 2 281 2 118 2 191 1 14 2 259 2 356 4 8 2 53 2 262 7 110 2 12 1 347 2 235 2 378 2 71 1 393 2 
205 2 395 2 281 2 118 2 14 4 259 2 356 4 8 2 53 2 262 6 110 4 347 2 235 2 378 4 393 2 
205 2 395 2 281 2 118 2 191 1 14 8 259 2 356 4 8 6 53 2 262 10 110 8 12 1 347 2 235 2 378 8 71 1 393 8 
205 2 395 2 281 2 118 2 14 2 259 2 356 2 53 2 262 2 110 2 347 2 235 2 378 2 
1 2 12 2 71 2 29 2 146 1 297 2 42 2 47 1 
29 2 42 2 1 2 12 2 71 2 297 2 
29 2 42 2 1 2 12 2 71 2 297 2 
29 2 42 2 1 2 12 2 71 2 297 2 
323 2 
