#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.UnsupportedOperationException 663 398 76 192 685 380 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.ArrayIndexOutOfBoundsException 513 658 481 533 543 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V ERROR java.lang.NullPointerException (417,613) (417,613) 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.UnsupportedOperationException 663 342 76 192 685 380 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.UnsupportedOperationException 663 342 76 192 685 380 
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 266 561 391 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V FAILED junit.framework.AssertionFailedError 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR utilMDE.Assert$AssertionException (118,646) (118,646) 673 506 364 445 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 506 364 445 
daikon.test.VarInfoNameTest:testEscForall()V PASSED
daikon.test.VarInfoNameTest:testSubscript()V PASSED
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:noDuplicates([D)Z | ASSIGN | 57849 | = null
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sum([D)D
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.VarInfoName.QuantHelper:quant_increment(Ldaikon.VarInfoName;ILdaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseLTE([I)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.PptSlice1:arity()I
daikon.Quant:intersection([I[I)[I
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:setEqual([I[I)Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.Quant:pairwiseLTE([I[I)Z
daikon.ValueTuple:size()I
daikon.Quant:subsetOf([I[I)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.WeakHasherMap:size()I
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.MathMDE:modulus([I)[I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.InvMap:InvMap()V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
jtb.JavaCharStream:backup(I)V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.VarInfoName.NodeFinder:NodeFinder(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.ValueTuple:isMissingFlow(I)Z
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Prestate:esc_name_impl()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eq(JJ)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.ModBitTracker:num_vars()I
daikon.VarInfo:new_ppt()V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.ArraysMDE:sorted([I)Z
daikon.Quant:gt(II)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.Intern:internSubsequence([JII)[J
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.Quant:subsetOf([F[D)Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.ValueSet:ValueSet(I)V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariants:Invariants()V
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.OutputFormat:toString()Ljava.lang.String;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.Quant:eltsGteIndex([I)Z
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:max([I)I
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.VarInfoName.Replacer:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
utilMDE.MathMDE:negate(I)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.Quant:subsetOf([B[I)Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:lexEqual([I[I)Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.Quant:eltsNotEqual([II)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.MathMDE:sign(I)I
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
daikon.VarInfoName.Elements:getUpperBound()Ldaikon.VarInfoName;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.Quant:subsetOf([D[F)Z
utilMDE.MathMDE:pow(II)I
daikon.Quant:lexGT([I[I)Z
utilMDE.ArraysMDE:sum([I)I
daikon.Quant:memberOf(D[F)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltsEqual([II)Z
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.TestQuant:removeAdjacentDups([I)[I
utilMDE.OrderedPairIterator:setnext2()V
daikon.Quant:memberOf(F[D)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.ModBitTracker:num_sets()I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quant_element_conditions(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:baseIsScalar()Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.NodeFinder:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.Quant:subsetOf([S[S)Z
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:eq(FF)Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltwiseGT([I)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.VarInfoName.Slice:getLowerBound()Ldaikon.VarInfoName;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
utilMDE.Options.OptionInfo:argument_required()Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.Quant:lt(II)Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.diff.RootNode:RootNode()V
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.Quant:memberOf(S[S)Z
daikon.Quant:union([I[I)[I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Quant:eltsLTE([II)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
utilMDE.ArraysMDE:min_max([I)[I
daikon.diff.Node:Node()V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName:isLiteralConstant()Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quant:ne(II)Z
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.PptSlice2:arity()I
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaCharStream:readChar()C
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
utilMDE.MathMDE:gcd_differences([I)I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
utilMDE.LimitedSizeIntSet:size()I
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:logOn()Z
daikon.Quant:eq(DD)Z
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.ArraysMDE:element_range([I)I
utilMDE.Intern:intern([I)[I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.Ppt:Ppt()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.QuantHelper:quant_var_initial_state(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.VarInfoName:hashCode()I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:sameLength([I[I)Z
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE:gcd(II)I
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ModBitTracker:split(I)I
daikon.Quant:memberOf(J[J)Z
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:eltsGtIndex([I)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.Invariant:prob_and(DD)D
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I | ASSIGN | 184000 | = null
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.VarInfoName.ElementsFinder:inPre()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaCharStream:ReadByte()C
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:eltsLtIndex([I)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Replacer:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
daikon.Quant:lexLT([I[I)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.VarInfoName:name()Ljava.lang.String;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.Quant:slice([III)[I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.ArraysMDE:sum([[D)D
daikon.PptSlice0:arity()I
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.Quant:subsetOf([D[D)Z
daikon.Debug:logOn()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.Quant:eq(II)Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:applyDecrement()Ldaikon.VarInfoName;
daikon.ProglangType:isPseudoArray()Z
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | CONSTANT | 51514 | 3 -> 0
utilMDE.UtilMDE:joinLines([Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.VarInfoAux:hashCode()I
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:concat([I[I)[I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
utilMDE.UtilMDE:join([Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:subsetOf([J[J)Z
utilMDE.MathMDE:gcd(JJ)J
utilMDE.FuzzyFloat:eq(DD)Z
daikon.ProglangType:isIntegral()Z
jtb.JavaParser:jj_ntk()I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:noDups([I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer; | RETURN | 13631 | return null
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.Quant:eltwiseGTE([I)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.OrderedPairIterator:hasNext()Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.ProglangType:isArray()Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 6369 | = null
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.Invariant:justified()Z
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | RETURN | 1511 | return null
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.QuantHelper:quant_execution_condition(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.Quant:eltwiseEqual([I)Z
daikon.Quant:memberOf(F[F)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.Quant:eltwiseLT([I)Z
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.ModBitTracker:num_samples()I
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.Intern:intern([J)[J
utilMDE.ArraysMDE:subarray([III)[I
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:gte(II)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.ArraysMDE:sum([[I)I
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaCharStream:BeginToken()C
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.Slice:getUpperBound()Ldaikon.VarInfoName;
daikon.VarInfoName.NodeFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName; | RETURN | 78854 | return null
utilMDE.ArraysMDE:min([I)I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.Quant:eltsLteIndex([I)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.ProglangType:baseIsIntegral()Z
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.VarInfoName.Add:amount()Ljava.lang.String;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
utilMDE.Assert:assertTrue(Z)V
daikon.inv.Invariant:prob_and(DDD)D
daikon.Quant:setDiff([I[I)[I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:eltsGTE([II)Z
daikon.VarInfoName.NodeFinder:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
utilMDE.Intern:numIntArrays()I
daikon.Quant:eltsLT([II)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.NodeFinder:inPre()Z
daikon.Quant:lexLTE([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | STATEMENT | 98818 | stmt -> ;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.VarInfoName:inPrestateContext(Ldaikon.VarInfoName;)Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Quant:isReverse([I[I)Z
daikon.ProglangType:isScalar()Z
daikon.Quant:eltsGT([II)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
jtb.JavaCharStream:FillBuff()V
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.Quant:lte(II)Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.ProglangType:dimensions()I
daikon.Quant:subsetOf([F[F)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.MathMDE:gcd([I)I
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.VarInfoName.Elements:getLowerBound()Ldaikon.VarInfoName;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.ValueTuple:isMissing(I)Z
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.Quant:memberOf(I[I)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:nonmodulus_strict([I)[I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
646 2 482 2 400 2 356 4 406 2 405 2 672 2 106 2 118 2 
212 2 489 2 628 2 384 2 40 2 195 6 239 2 274 6 549 2 662 2 164 6 
234 2 203 6 327 2 311 6 118 2 646 2 285 2 418 2 240 4 276 6 589 4 209 6 279 2 
605 16 393 2 395 2 104 8 702 16 251 4 107 2 357 2 358 4 313 10 572 2 597 6 210 8 450 2 433 26 598 4 51 10 166 10 434 4 363 6 115 16 668 10 556 8 367 10 118 6 646 6 197 2 691 29 509 12 352 8 
465 6 690 4 
503 2 
694 2 1 2 393 2 20 2 609 2 396 2 470 2 5 2 298 4 138 2 300 2 410 2 578 2 362 2 686 2 218 2 57 2 176 2 622 2 262 2 124 2 98 2 487 2 672 2 
605 8 542 4 466 6 246 6 702 8 704 4 313 4 377 2 705 2 433 12 166 4 115 8 554 8 668 4 367 4 118 4 646 4 691 14 509 6 352 2 
694 2 10 2 161 2 
30 2 66 2 295 2 654 2 248 2 446 2 349 2 437 2 531 22 70 10 220 2 7 2 473 2 551 2 
652 2 560 2 605 2 225 2 702 2 358 2 87 2 313 2 46 2 433 4 189 2 51 4 166 2 363 2 115 2 346 2 668 2 367 2 691 6 509 2 352 2 558 2 649 2 
605 2 542 2 166 2 466 4 115 2 251 2 702 2 668 2 367 2 313 2 691 6 573 2 433 4 
462 4 694 8 699 2 293 2 228 4 373 2 544 4 206 2 633 4 161 2 336 4 298 4 399 10 162 2 614 4 10 6 707 2 574 4 139 2 636 2 637 4 140 2 324 4 52 2 145 2 362 4 147 2 579 2 412 4 53 2 386 4 149 2 583 2 57 2 415 62 174 2 123 10 421 2 715 14 718 2 
503 2 641 2 214 2 148 2 334 2 272 2 6 2 315 2 316 2 265 2 
541 3 627 3 444 1 630 2 3 3 4 3 545 2 184 2 635 32 89 1 11 1 12 2 552 2 92 2 14 2 553 4 190 2 15 1 94 2 453 6 192 2 193 2 646 32 454 2 198 2 557 2 96 2 368 6 200 2 457 3 559 16 289 2 202 16 290 1 371 2 372 3 655 1 467 2 468 4 375 2 471 2 22 1 570 2 659 2 571 3 108 1 208 1 472 1 380 2 381 2 663 2 575 2 112 2 475 2 26 2 113 3 383 2 666 1 215 1 667 2 387 2 388 2 389 4 480 2 118 34 120 2 483 2 588 2 486 2 126 2 127 4 223 24 390 2 591 32 132 2 134 6 676 2 492 16 229 6 231 2 314 2 398 2 315 1 316 1 499 2 404 2 317 2 405 2 318 2 319 1 321 2 323 2 143 1 684 2 235 3 685 2 236 1 326 2 413 3 56 2 601 2 416 2 419 2 59 2 329 2 510 2 156 2 64 2 603 2 425 2 695 2 427 3 698 2 428 2 607 2 331 5 515 2 610 4 518 2 520 2 706 1 615 2 75 2 254 2 523 2 76 2 618 2 344 2 345 2 710 24 711 2 532 16 82 2 350 2 538 2 712 2 537 3 351 2 440 2 
183 2 118 2 
647 2 411 2 118 4 
170 2 
158 2 626 2 130 2 543 2 429 8 513 2 333 8 135 2 366 2 658 2 533 2 534 2 305 8 611 2 481 2 60 2 679 2 109 2 63 2 242 2 49 2 322 2 
392 2 88 2 594 1 494 2 
696 2 494 2 
694 2 598 2 576 2 714 2 194 2 25 2 494 2 
714 2 34 2 494 2 
714 2 44 2 494 2 
392 2 675 2 308 2 
714 2 494 2 
186 2 308 2 
160 2 494 2 
392 2 485 2 308 2 
392 2 606 2 230 2 
392 2 42 2 99 2 
392 2 608 2 682 2 
392 2 267 2 670 2 
586 2 308 2 
281 2 494 2 
606 2 590 2 
16 2 99 2 
247 2 682 2 
267 2 547 2 
689 2 308 2 
267 2 136 2 
407 2 682 2 
629 2 99 2 
606 2 442 2 
392 2 485 2 154 2 308 2 
392 2 485 2 154 2 501 2 308 2 
392 2 567 2 308 2 
392 2 105 2 308 2 
328 2 678 2 260 2 29 2 
694 2 122 2 576 2 519 2 
694 2 284 2 122 2 576 2 519 2 194 2 
694 2 598 2 576 2 714 2 648 2 494 2 
124 2 540 2 
694 2 598 2 576 2 464 2 
677 2 682 2 
267 2 650 2 
606 2 653 2 
99 2 296 2 
267 2 452 2 99 2 
657 2 267 2 99 2 
267 2 175 2 99 2 
267 2 99 2 309 2 
694 2 576 2 687 2 417 6 613 2 211 2 
221 2 308 2 
226 2 436 2 529 4 602 2 531 6 283 2 219 2 196 2 173 2 587 2 152 2 403 2 90 2 110 2 177 2 360 4 693 2 474 2 
392 2 153 2 
326 2 
179 2 132 2 134 2 676 6 545 2 229 4 184 2 635 6 231 2 11 2 405 2 318 2 48 2 321 2 552 2 92 2 685 2 94 2 453 2 192 2 601 2 646 22 96 2 368 6 200 2 156 2 64 2 603 2 289 2 371 2 468 4 471 2 610 4 208 2 380 2 24 2 522 2 663 2 524 2 255 2 523 2 112 2 575 2 475 2 342 2 76 2 618 2 344 2 345 2 388 2 389 4 532 6 118 22 669 2 120 2 350 2 538 2 712 2 483 2 28 2 222 2 127 4 717 4 591 4 
179 2 132 2 134 2 676 6 545 2 229 6 184 2 635 6 231 2 499 2 11 2 405 2 318 2 321 2 48 2 552 2 92 2 685 2 94 2 453 2 192 2 601 2 416 2 646 22 96 2 368 6 200 2 156 2 64 2 603 2 289 2 371 2 468 4 471 2 610 4 208 2 380 2 24 2 522 2 663 2 524 2 255 2 523 2 112 2 575 2 475 2 342 2 76 2 618 2 344 2 345 2 388 2 389 4 532 6 118 22 669 2 120 2 350 2 538 2 712 2 483 2 28 2 222 2 127 4 717 4 591 4 
21 2 
213 2 169 2 
592 2 282 2 100 2 
592 2 282 2 100 2 
628 4 269 2 545 2 182 2 359 2 635 2 274 16 275 4 277 2 549 4 552 2 361 2 13 2 94 2 282 4 192 4 646 16 195 12 455 4 96 2 368 6 200 2 289 2 100 6 461 2 371 2 562 2 566 2 565 4 103 2 468 4 207 2 471 2 376 2 299 2 379 4 662 4 24 6 575 2 112 2 475 4 212 4 664 2 114 2 385 4 302 2 388 2 389 4 118 24 120 2 483 2 671 2 127 4 222 2 125 6 306 2 390 4 591 2 674 2 592 2 31 4 489 4 593 2 676 2 38 2 229 6 40 4 497 2 498 2 499 2 405 2 318 4 48 2 321 2 681 2 142 2 325 4 55 4 56 4 601 2 416 2 422 2 64 2 426 2 65 2 330 2 245 2 514 1 335 2 252 2 610 4 337 2 164 12 523 2 526 1 617 4 618 2 344 2 78 2 532 2 172 2 712 2 536 2 259 2 263 6 440 4 
475 2 144 2 562 2 593 2 566 2 169 2 103 2 582 2 271 2 238 2 471 2 118 4 359 2 646 2 232 2 142 2 50 2 
628 4 269 2 545 2 182 2 634 2 635 2 274 16 275 4 277 2 549 4 552 2 361 4 13 2 94 2 282 4 192 4 646 16 195 12 455 4 96 2 368 6 200 2 289 2 100 6 371 2 562 2 565 4 103 2 468 4 207 2 471 2 299 2 379 4 662 4 24 6 575 2 112 2 475 2 212 4 664 2 114 2 479 2 385 4 302 2 388 2 389 4 118 24 120 2 483 2 671 2 127 4 222 2 125 6 390 4 591 4 674 2 592 2 31 4 489 4 33 2 593 2 676 2 38 2 229 6 40 4 497 2 498 2 499 2 405 2 318 4 48 2 321 2 408 2 502 2 681 2 142 2 325 4 55 4 56 4 601 2 150 2 416 2 422 2 64 2 426 2 65 2 330 2 245 4 335 2 252 2 610 4 164 12 523 2 617 4 618 2 344 2 78 2 532 2 172 2 712 2 536 2 259 2 263 6 440 4 
0 2 628 4 180 2 269 2 545 2 182 2 359 2 635 2 274 16 275 4 277 2 549 4 278 2 552 2 361 4 13 2 94 2 282 4 192 4 646 16 195 12 455 4 96 2 368 6 200 2 289 2 100 6 460 2 371 2 562 2 566 2 565 4 103 2 468 4 207 2 471 2 299 2 379 4 662 4 24 6 575 2 112 2 475 4 212 4 664 2 114 2 385 4 302 2 388 2 389 4 118 24 120 2 483 2 671 2 127 4 222 2 125 6 390 4 591 2 674 2 592 2 31 4 489 4 593 2 676 2 38 2 229 6 40 4 497 2 498 2 499 2 405 2 318 4 48 2 321 2 681 2 142 2 325 4 55 4 56 4 601 2 150 2 416 2 422 2 64 2 426 2 65 2 330 2 245 2 335 2 252 2 610 4 164 12 523 2 617 4 618 2 344 2 78 2 532 2 172 2 712 2 536 2 259 2 263 6 441 2 440 4 
266 2 635 8 8 1 94 2 453 2 644 2 646 18 96 2 368 6 97 2 200 2 289 2 459 2 561 2 371 2 292 2 563 2 102 2 468 2 471 2 660 2 24 2 112 2 475 2 577 2 388 2 389 2 118 24 120 2 121 2 483 2 484 2 127 4 222 2 488 2 391 2 591 2 227 2 133 2 35 2 134 2 676 6 493 4 229 4 499 2 45 2 47 2 405 2 320 2 321 2 409 2 54 2 416 2 64 2 603 2 604 2 700 2 68 2 610 4 516 2 523 2 525 1 343 2 618 2 619 2 344 2 532 6 81 2 712 2 713 2 717 4 
85 2 19 2 129 2 490 2 134 3 676 2 569 2 39 2 312 1 635 2 74 2 524 6 168 2 555 3 453 3 171 2 532 2 118 2 119 4 646 2 261 2 84 2 717 2 603 2 591 3 
85 2 19 2 129 2 490 2 134 2 676 2 569 2 39 2 635 2 74 2 524 6 168 2 555 2 453 2 171 2 532 2 118 2 119 4 646 2 261 2 84 2 717 2 603 2 591 2 
85 2 19 2 129 2 490 2 134 2 676 2 569 2 39 2 635 2 74 2 524 6 168 2 555 2 453 2 171 2 532 2 118 2 119 4 646 2 261 2 84 2 717 2 603 2 591 2 
128 4 370 2 463 3 605 2 204 2 354 2 702 2 568 2 569 2 273 2 313 2 635 2 521 2 597 2 210 4 433 4 91 4 709 2 141 6 166 2 505 2 115 2 347 3 257 2 237 2 453 3 668 2 367 2 438 2 118 10 646 4 535 4 691 6 623 3 692 4 61 4 559 2 603 2 202 2 591 3 
128 4 354 2 273 2 635 2 313 2 597 2 450 2 141 6 91 4 505 2 453 2 237 2 367 2 646 4 691 4 509 2 61 4 692 4 559 2 603 2 202 2 605 2 463 2 370 2 204 2 702 2 569 2 568 2 521 2 210 4 433 4 709 2 166 2 115 2 347 2 257 2 668 2 118 10 438 2 535 4 623 2 352 2 591 2 
128 4 354 2 273 2 635 2 313 2 597 2 450 2 141 6 91 4 505 2 453 2 237 2 367 2 646 4 691 4 509 2 61 4 692 4 559 2 603 2 202 2 605 2 463 2 370 2 204 2 702 2 569 2 568 2 521 2 210 4 433 4 709 2 166 2 115 2 347 2 257 2 668 2 118 10 438 2 535 4 623 2 352 2 591 2 
128 4 354 2 273 2 635 2 313 2 597 2 450 2 141 6 91 4 505 2 453 2 237 2 367 2 646 4 691 4 509 2 61 4 692 4 559 2 603 2 202 2 605 2 463 2 370 2 204 2 702 2 569 2 568 2 521 2 210 4 433 4 709 2 166 2 115 2 347 2 257 2 668 2 118 10 438 2 535 4 623 2 352 2 591 2 
128 4 354 2 273 2 635 2 313 2 597 2 450 4 141 6 91 4 505 2 453 2 237 2 367 2 646 4 691 4 509 4 61 4 692 4 559 2 603 2 202 2 605 2 463 2 370 2 204 2 702 2 569 2 568 2 521 2 210 4 433 4 709 2 166 2 115 2 347 2 257 2 668 2 118 10 438 2 535 4 623 2 352 4 591 2 
241 2 369 2 500 2 530 2 178 2 512 2 
185 2 476 2 584 2 286 2 369 2 288 2 205 2 
443 2 293 1 397 2 546 2 430 2 595 2 596 2 23 1 43 2 338 2 661 2 402 2 708 2 550 2 683 1 167 2 388 2 118 10 646 8 174 1 95 2 17 1 199 2 83 2 508 2 539 2 
431 2 
159 2 101 1 665 2 244 2 2 2 36 7 414 2 701 2 69 4 118 1 646 1 439 2 61 2 692 2 155 2 340 2 638 2 91 2 
159 2 665 2 244 4 2 2 414 2 36 6 701 4 69 4 439 2 61 2 692 2 155 2 340 4 638 2 91 2 
159 6 101 1 665 2 244 8 2 2 414 8 36 10 701 8 69 4 118 1 646 1 439 2 61 2 692 2 155 2 340 8 638 2 91 2 
665 2 244 2 439 2 692 2 61 2 2 2 155 2 340 2 36 2 701 2 69 2 91 2 638 2 
353 2 355 4 445 2 268 2 270 2 181 2 548 2 449 2 639 2 640 2 280 2 364 2 642 1 643 4 645 2 646 34 456 2 200 6 287 4 458 4 18 2 371 4 294 2 468 14 469 2 374 2 297 2 111 2 301 2 580 2 478 2 116 2 389 16 118 38 585 2 673 2 32 3 394 2 310 4 229 30 41 2 499 4 233 2 680 2 504 2 506 2 507 4 688 1 416 4 420 2 62 2 64 6 424 2 697 2 243 1 249 2 250 1 67 2 703 2 71 2 517 1 253 2 72 2 339 2 73 2 432 2 435 2 165 2 527 2 348 1 528 2 256 4 79 12 80 2 621 2 716 2 264 2 
371 2 224 2 243 2 131 2 564 2 445 2 268 2 270 2 468 4 67 2 229 6 495 2 612 2 111 2 506 2 364 2 478 2 528 2 389 4 118 12 646 12 200 2 458 6 64 2 
625 2 353 4 86 4 445 2 355 8 268 2 270 2 181 4 631 2 632 2 548 16 9 4 447 10 448 8 187 2 188 2 639 4 640 6 280 4 93 2 364 2 191 2 642 8 643 10 645 4 646 70 456 4 200 6 458 14 287 24 201 2 651 4 18 4 291 2 371 2 294 4 656 4 468 36 374 4 297 2 378 4 111 2 382 4 301 4 477 2 580 8 216 8 581 4 116 4 217 8 389 44 117 16 118 78 304 4 307 4 673 4 32 10 491 4 394 4 310 24 37 16 229 104 41 4 137 14 401 4 499 30 680 30 504 4 146 4 506 2 599 10 507 10 600 4 688 5 58 8 416 28 420 10 62 4 423 2 64 6 157 4 424 6 511 10 697 4 249 4 67 2 71 4 253 2 72 4 612 2 163 4 339 4 73 4 341 2 616 4 435 6 165 4 527 8 528 2 256 10 77 32 620 4 79 24 258 4 716 4 264 4 624 4 
353 2 32 2 445 2 268 2 270 3 229 36 41 4 496 2 499 8 449 2 680 8 451 2 640 5 639 4 506 2 507 6 364 2 688 1 191 3 642 6 643 6 416 8 646 26 151 2 420 2 200 2 458 15 64 2 157 2 424 2 18 4 291 1 371 2 697 2 243 2 332 2 249 2 250 2 67 2 468 14 517 2 612 2 73 4 432 2 111 2 341 2 616 2 477 1 435 2 478 1 27 2 528 2 256 6 116 4 79 8 80 2 389 14 303 2 118 28 585 10 716 2 264 4 307 4 
365 2 
