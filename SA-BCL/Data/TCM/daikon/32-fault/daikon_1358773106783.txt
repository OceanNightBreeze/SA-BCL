#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V ERROR java.lang.NullPointerException 482 
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V ERROR utilMDE.Assert$AssertionException (471,541) (471,541) 
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError (105,335) 
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR utilMDE.Assert$AssertionException (471,541) (471,541) 202 
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 346 98 82 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V FAILED junit.framework.AssertionFailedError 
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testConditionalPptsTrue()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testPpts1Ppts2()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testPpts1Ppts3()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException 344 (527,563) 468 (179,497) (527,563) 281 (179,497) 193 58 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testNullaryInvs()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.DiffTester:testNonModulus()V ERROR java.lang.NullPointerException (39,578) (7,341) (7,341) 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NullPointerException (39,578) 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException (39,578) (39,578) 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException (39,578) 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 354 383 160 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.Error 491 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 42 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 42 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 42 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 42 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.Intern:intern([I)[I
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:sameLength([I[I)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:eltsLtIndex([I)Z
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.diff.InvMap:InvMap()V
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.ModBitTracker:num_samples()I
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.Quant:eltsLT([II)Z
utilMDE.WeakHasherMap:size()I
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.MathMDE:pow_fast(II)I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V | ASSIGN | 1551 | = null
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:gt(II)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1730 | if (x) -> if (!x)
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.VarInfoName:hashCode()I
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.Invariant:prob_or(DD)D
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:indexFor(II)I
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.Quant:setDiff([I[I)[I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:lexLTE([I[I)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.ModBitTracker:num_vars()I
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.ProglangType:baseIsIntegral()Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant; | RETURN | 547 | return null
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.Quant:subsetOf([I[I)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
jtb.JavaCharStream:ReadByte()C
daikon.Quant:lexLT([I[I)Z
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.JavaParser:jj_ntk()I
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.ValueTuple:isMissingFlow(I)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.PptSlice2:arity()I
daikon.Quant:memberOf(S[S)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:lexEqual([I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair; | ASSIGN | 2099 | = null
utilMDE.ArraysMDE:max([I)I
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.ProglangType:baseIsScalar()Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.ValueTuple:size()I
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.ModBitTracker:num_sets()I
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:memberOf(F[D)Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ModBitTracker:ModBitTracker(I)V
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.Quant:concat([I[I)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I | STATEMENT | 12352 | stmt -> ;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.Quant:eltwiseLT([I)Z
daikon.test.InvariantFormatTester:execute()Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.ProglangType:isPseudoArray()Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseGT([I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z | STATEMENT | 22083 | stmt -> ;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:noDups([I)Z
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.Quant:union([I[I)[I
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:subsetOf([S[S)Z
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.VarInfoAux:hashCode()I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:pow(II)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.Quant:eq(II)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
jtb.JavaCharStream:getEndLine()I
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:memberOf(F[F)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:eltsGtIndex([I)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltwiseEqual([I)Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.PptName:isCombinedExitPoint()Z
utilMDE.MathMDE:missing_numbers([I)[I
daikon.Quant:subsetOf([B[I)Z
daikon.Ppt:Ppt()V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.FuzzyFloat:gt(DD)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:lte(II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
jtb.syntaxtree.NodeOptional:NodeOptional()V
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.Quant:memberOf(I[I)Z
daikon.inv.Invariants:Invariants()V
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfo:new_ppt()V
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsLteIndex([I)Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice1:arity()I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.ProglangType:isArray()Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.MathMDE:gcd(JJ)J
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.ArraysMDE:min([I)I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:enabled()Z
utilMDE.WeakHasherMap:processQueue()V
jtb.JavaCharStream:readChar()C
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern:intern([J)[J
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.VarInfo:relate_var()V
daikon.ValueTuple:isMissing(I)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.Invariant:prob_and(DD)D
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:gte(DD)Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | CONDITION | 65850 | if (x) -> if (!x)
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.Quant:eltsGT([II)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.test.FormatTestCase:passes()Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer; | RETURN | 13631 | return null
daikon.Quant:pairwiseDivides([I[I)Z
daikon.Quant:isReverse([I[I)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.ProglangType:isScalar()Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Quant:eltwiseNotEqual([I)Z
daikon.Quant:eltsEqual([II)Z
daikon.Quant:eq(JJ)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.Quant:subsetOf([D[F)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:justified()Z
daikon.Quant:slice([III)[I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:setnext1()V
daikon.PptName:isEnterPoint()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant; | RETURN | 2124 | return null
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.diff.Node:Node()V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.PptSlice0:initInvariantsSeen()V
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.Invariant:logOn()Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
jtb.JavaCharStream:getEndColumn()I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.ProglangType:dimensions()I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.Quant:eq(DD)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eq(FF)Z
daikon.PptSlice0:arity()I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
daikon.Quant:subsetOf([F[F)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:eltsGteIndex([I)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.diff.Node:children()Ljava.util.Iterator;
jtb.JavaCharStream:FillBuff()V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.Quant:subsetOf([F[D)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.Quant:eltsGTE([II)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ModBitTracker:split(I)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.Debug:logOn()Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.MathMDE:gcd(II)I
daikon.Quant:gte(II)Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:lexGT([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:ne(II)Z
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Assert:assertTrue(Z)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:size()I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object; | CONDITION | 17506 | if (x) -> if (!x)
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:memberOf(J[J)Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE:sign(I)I
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.Quant:lt(II)Z
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.ArraysMDE:sum([[D)D
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
utilMDE.MathMDE:negate(I)I
utilMDE.Intern:internSubsequence([JII)[J | STATEMENT | 23714 | stmt -> ;
utilMDE.Intern:numIntArrays()I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.ProglangType:format()Ljava.lang.String;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.Quant:subsetOf([D[D)Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:BeginToken()C
daikon.ProglangType:isIntegral()Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.Invariant:getConfidence()D
daikon.Quant:lexGTE([I[I)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:intersection([I[I)[I
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Quant:eltsLTE([II)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
utilMDE.Intern:internSubsequence([III)[I
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.diff.RootNode:RootNode()V
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.ValueSet:ValueSet(I)V
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.ArraysMDE:sum([I)I
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
utilMDE.MathMDE:gcd([I)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.ArraysMDE:sum([D)D
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf([J[J)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:setEqual([I[I)Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
428 2 90 2 471 2 592 2 94 2 475 4 541 2 558 2 119 2 
367 2 313 2 560 2 482 2 473 4 112 2 427 2 379 4 
434 2 471 2 500 2 417 6 622 4 8 4 78 6 209 2 59 6 37 6 239 2 541 2 402 2 
581 2 298 10 392 4 471 6 596 2 248 10 325 4 284 8 529 10 530 27 310 4 270 2 274 2 135 24 554 8 575 2 256 6 214 4 515 2 215 14 319 10 628 4 539 14 217 2 14 6 493 10 540 10 218 6 240 14 541 6 
194 4 50 6 
418 2 
298 2 525 2 248 2 529 2 530 6 310 2 151 2 435 2 32 2 135 4 215 2 319 2 13 2 516 2 517 2 539 2 36 2 14 2 493 2 540 4 61 2 218 2 240 2 
392 2 298 2 74 2 135 4 248 2 215 2 225 4 319 2 529 2 530 5 539 2 493 1 355 2 240 2 
40 2 571 2 334 2 463 6 416 2 607 2 514 2 399 2 251 2 105 4 609 2 505 2 190 2 421 2 175 6 422 2 94 2 212 2 
470 2 64 2 222 2 87 2 6 2 589 2 229 2 271 2 418 2 448 2 
471 4 182 2 5 2 113 2 597 2 476 2 351 2 480 4 353 2 309 2 312 2 270 2 358 2 572 2 437 4 91 2 272 2 573 2 197 4 235 2 538 2 278 2 610 2 541 4 94 2 542 2 496 2 203 2 369 2 615 2 131 2 327 2 165 2 287 2 167 2 68 2 460 2 213 2 169 2 71 2 512 2 335 2 105 2 390 4 
221 2 298 4 471 4 499 6 248 4 225 6 529 4 530 13 432 4 355 4 135 12 104 2 215 8 319 4 539 8 492 8 493 6 240 8 541 4 218 2 
105 2 609 2 399 2 
259 2 345 2 204 2 553 10 335 2 264 2 314 2 81 2 384 22 142 2 429 2 66 2 340 2 86 2 
559 3 471 30 1 2 393 3 2 2 562 4 474 1 302 2 304 6 566 2 83 6 147 2 397 2 567 2 306 14 305 19 481 2 227 2 150 2 311 2 231 2 317 2 9 2 92 2 12 4 15 2 495 14 241 2 580 2 18 1 246 1 164 2 501 2 24 5 324 2 326 19 249 1 407 1 328 3 329 2 409 2 168 2 253 6 331 2 590 2 412 1 29 2 102 1 103 3 170 2 338 2 420 2 106 2 108 2 520 4 423 2 111 1 178 2 265 3 347 2 186 2 185 2 526 2 46 2 528 2 601 1 602 2 116 14 191 2 269 2 433 6 51 4 604 2 359 2 535 14 438 1 439 3 274 2 446 1 277 4 121 2 57 1 123 2 612 2 199 2 614 2 541 32 200 1 62 2 202 2 282 2 616 2 371 2 129 1 286 25 375 2 457 3 617 2 458 2 288 1 210 2 378 3 377 2 381 2 620 2 73 28 462 2 137 3 555 2 624 2 294 2 556 1 467 2 558 2 633 2 220 1 
54 2 
541 2 391 2 
336 2 233 2 541 4 
206 2 346 2 43 2 404 2 266 2 82 2 98 2 267 2 226 2 398 2 550 6 88 6 211 2 534 2 362 2 55 2 513 2 441 2 155 2 623 2 320 6 144 2 60 2 521 2 366 2 454 2 
19 2 415 2 201 2 45 1 
579 2 201 2 
154 2 105 2 591 2 593 2 
551 2 154 2 105 2 591 2 181 2 593 2 
63 2 105 2 593 2 276 2 214 2 201 2 
538 2 177 2 
105 2 374 2 593 2 214 2 
261 2 349 2 
508 2 451 2 
31 2 464 2 
47 2 570 2 
47 2 508 2 89 2 
47 2 67 2 508 2 
47 2 508 2 466 2 
47 2 549 2 508 2 
20 2 586 2 431 2 48 6 442 6 593 2 105 2 450 2 
469 2 523 2 
551 2 105 2 593 2 276 2 214 2 564 2 201 2 
276 2 632 2 201 2 
77 2 276 2 201 2 
469 2 19 2 357 2 
276 2 201 2 
469 2 364 2 
148 2 201 2 
469 2 19 2 115 2 
65 2 19 2 464 2 
47 2 19 2 273 2 
261 2 19 2 198 2 
19 2 508 2 625 2 
469 2 238 2 
363 2 201 2 
464 2 159 2 
47 2 443 2 
261 2 174 2 
0 2 508 2 
469 2 536 2 
436 2 508 2 
261 2 232 2 
47 2 290 2 
464 2 21 2 
469 2 110 2 19 2 115 2 
469 2 110 2 19 2 115 2 22 2 
469 2 19 2 356 2 
469 2 35 2 19 2 
472 2 263 2 207 2 594 2 
414 2 522 2 368 2 230 2 80 2 223 2 184 2 384 6 365 2 503 2 141 2 406 4 587 2 252 2 408 2 107 2 449 2 613 4 
19 2 140 2 
501 2 
471 26 2 2 300 2 301 2 303 2 304 2 566 2 147 2 83 4 479 4 481 2 227 2 483 2 315 2 11 2 92 2 12 4 577 2 494 2 242 2 23 2 502 2 409 2 253 6 331 2 590 2 411 2 100 4 254 4 29 2 255 2 258 2 420 8 520 4 423 2 109 2 347 2 183 2 185 2 601 2 433 2 604 2 51 4 359 6 192 2 53 2 535 6 444 2 120 2 445 2 277 4 57 2 122 2 123 2 541 26 62 2 202 2 544 2 282 2 371 2 128 2 286 4 375 2 458 2 73 6 462 2 624 2 555 2 465 2 630 2 143 2 389 2 558 2 633 2 
471 26 2 2 300 2 301 2 304 2 566 2 83 6 147 2 479 4 481 2 227 2 483 2 488 2 315 2 9 2 11 2 92 2 12 4 494 2 23 2 502 2 409 2 253 6 331 2 590 2 411 2 100 4 254 4 29 2 255 2 338 2 258 2 420 8 520 4 423 2 109 2 347 2 183 2 185 2 601 2 433 2 604 2 51 4 359 6 192 2 53 2 535 6 275 2 444 2 120 2 445 2 277 4 57 2 122 2 123 2 452 2 541 26 62 2 202 2 544 2 282 2 371 2 128 2 286 4 375 2 458 2 73 6 462 2 555 2 624 2 465 2 630 2 143 2 389 2 558 2 633 2 146 2 
208 2 
30 2 504 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 6 506 2 291 2 152 6 379 4 153 2 7 2 33 2 257 6 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 124 2 367 2 95 2 560 2 473 4 584 2 247 2 112 2 427 2 25 2 547 2 477 6 506 2 69 2 291 2 152 6 379 4 153 2 7 2 33 2 257 6 387 2 578 2 341 2 419 2 557 4 17 2 
497 2 7 2 367 2 193 2 3 2 440 2 584 4 473 2 33 2 427 2 25 2 547 2 387 4 578 2 58 2 341 2 506 2 379 2 
260 2 41 4 471 6 560 2 179 2 3 2 473 6 427 4 527 2 566 2 147 2 477 4 478 2 430 2 532 4 152 4 604 2 7 2 153 2 487 6 193 2 440 4 606 2 277 2 12 2 578 2 58 2 541 12 17 2 497 2 456 2 583 2 367 4 498 2 95 2 321 2 281 2 584 4 247 2 96 2 25 2 547 2 250 2 506 2 409 2 291 2 253 4 379 4 380 2 462 2 76 4 33 2 624 2 555 2 257 6 337 2 387 4 419 2 341 2 631 2 
41 4 471 6 560 2 179 2 3 2 473 4 427 4 527 2 566 2 147 2 477 4 478 2 430 2 532 4 152 4 604 2 7 2 153 2 487 6 193 2 440 4 606 2 277 2 12 2 578 2 58 2 541 12 17 2 497 2 456 2 583 2 367 4 498 2 95 2 321 2 281 2 584 4 247 2 96 2 25 2 547 2 250 2 506 2 409 2 291 2 253 4 379 6 380 2 511 2 462 2 76 4 33 2 624 2 555 2 257 6 337 2 387 4 419 2 341 2 631 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 4 506 2 291 2 152 6 379 4 153 2 7 2 33 2 257 4 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 6 506 2 291 2 152 6 379 4 153 2 7 2 33 2 257 6 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 6 506 2 291 2 152 6 379 4 153 2 7 2 33 2 257 6 387 2 578 2 341 2 419 2 17 2 
471 18 560 4 3 2 2 2 473 4 563 2 301 2 304 2 395 2 566 2 83 6 147 2 396 2 481 2 227 2 152 2 153 2 7 2 487 12 9 2 11 2 92 2 12 4 578 2 158 2 17 2 497 2 583 2 498 2 95 2 247 2 584 4 96 2 25 2 506 2 409 2 331 2 253 6 590 2 100 4 511 4 29 2 33 2 337 2 172 2 338 2 341 2 419 2 420 2 520 4 344 2 423 2 41 4 179 2 347 2 427 4 185 2 114 2 527 2 430 2 532 8 433 2 533 2 51 4 604 2 359 6 193 2 535 6 440 4 277 4 123 2 58 2 541 28 62 2 202 2 456 2 367 4 281 2 370 2 282 2 371 2 547 2 286 2 375 2 458 4 289 2 291 2 132 4 380 2 379 8 133 2 75 2 73 8 462 2 76 6 382 2 293 2 555 2 624 2 465 2 387 4 631 2 468 2 558 2 633 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 506 2 291 2 152 4 379 4 133 2 153 2 7 2 33 2 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 2 506 2 291 2 152 4 379 4 133 2 153 2 7 2 33 2 257 2 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 367 2 95 2 560 2 473 4 247 2 584 2 112 2 427 2 25 2 547 2 477 2 506 2 291 2 152 4 379 4 133 2 153 2 7 2 33 2 257 2 387 2 578 2 341 2 419 2 17 2 
456 2 583 2 367 2 95 2 560 2 247 2 584 2 473 4 112 2 427 2 25 2 547 2 477 2 506 2 291 2 152 4 379 4 153 2 7 2 33 2 257 2 387 2 578 2 341 2 419 2 17 2 
471 24 560 2 473 4 301 2 304 3 566 2 395 2 83 6 147 2 481 2 227 2 311 2 152 4 7 2 153 2 231 2 9 2 318 2 11 2 92 2 12 4 578 2 17 2 583 2 95 2 584 2 247 2 501 2 25 2 166 2 506 2 28 3 409 2 253 6 331 2 590 2 100 4 29 2 33 2 257 2 337 2 338 2 419 2 341 2 520 4 343 2 112 2 347 2 427 2 185 2 269 2 433 3 51 4 604 2 359 6 535 6 277 4 541 24 62 2 202 2 455 2 456 2 367 2 545 2 282 2 371 2 547 2 286 3 375 2 458 4 291 2 379 4 73 8 462 2 382 2 555 2 624 2 465 2 387 2 558 2 633 2 
631 2 524 2 17 2 
631 2 524 2 17 2 
471 14 560 2 473 4 112 2 301 2 347 2 427 2 185 2 566 2 477 2 147 2 83 6 481 2 227 2 152 4 359 2 51 4 604 2 118 2 52 2 535 2 9 2 11 2 277 4 92 2 12 4 578 2 93 2 611 2 541 14 401 2 62 2 17 2 367 2 584 2 282 2 371 2 25 2 286 2 375 2 507 2 458 2 409 2 331 2 253 6 379 4 590 2 29 2 73 2 462 2 33 2 624 2 555 2 257 2 465 2 338 2 295 2 387 2 520 4 558 2 633 2 
30 2 471 2 244 2 3 2 322 2 156 2 576 2 395 2 608 2 373 2 548 2 490 2 458 2 409 2 344 2 541 4 176 2 
471 14 560 2 561 2 473 4 112 2 301 2 347 2 427 2 185 2 566 2 477 2 147 2 83 6 481 2 227 2 152 4 359 2 51 4 604 2 118 2 52 2 535 2 9 2 11 2 277 4 92 2 12 4 578 2 93 2 611 2 541 14 401 4 62 2 17 2 367 2 584 2 282 2 371 2 25 2 286 4 375 2 507 2 458 2 409 2 331 2 253 6 379 4 590 2 29 2 73 2 462 2 33 2 624 2 555 2 257 2 465 2 338 2 295 2 387 2 39 2 520 4 558 2 633 2 
471 14 560 2 473 4 112 2 301 2 347 2 427 2 185 2 566 2 477 2 147 2 83 6 481 2 227 2 152 4 359 2 51 4 604 2 118 2 52 2 535 2 9 2 11 2 277 4 92 2 12 4 578 2 93 2 611 2 541 14 401 2 62 2 17 2 367 2 584 2 282 2 371 2 25 2 286 2 375 2 507 2 458 2 409 2 331 2 253 6 379 4 590 2 29 2 73 2 462 2 33 2 624 2 555 2 257 2 465 2 338 2 295 2 387 2 520 4 558 2 633 2 
298 2 471 20 301 2 224 4 304 2 566 2 83 3 147 2 307 2 84 4 227 2 569 2 9 1 319 2 12 4 491 2 160 2 161 2 16 1 240 2 582 2 585 2 323 2 248 2 26 2 409 2 253 6 331 2 590 2 413 2 509 2 510 2 100 4 29 2 34 2 338 1 172 2 339 2 420 2 520 2 109 2 595 4 44 2 347 2 187 1 114 2 529 2 530 5 188 2 531 2 354 2 49 2 433 2 51 2 604 2 359 6 533 2 360 2 605 6 535 6 445 2 196 2 277 4 447 2 539 2 541 26 62 2 543 2 202 2 546 2 370 2 127 2 282 2 371 2 130 2 285 2 286 2 458 2 289 2 618 2 619 2 552 2 72 2 73 8 462 2 134 2 135 4 138 1 383 2 555 2 624 2 293 2 215 2 465 2 386 2 216 2 296 2 145 2 219 2 558 2 633 2 79 2 297 2 
202 2 471 2 243 2 205 2 304 3 565 2 394 4 286 3 189 2 149 2 459 2 588 2 433 3 359 2 461 2 100 2 292 2 73 2 535 2 621 2 234 2 173 3 541 2 109 6 
461 2 202 2 359 2 100 2 471 2 205 2 292 2 243 2 73 2 535 2 621 2 304 2 394 4 565 2 234 2 286 2 189 2 149 2 173 2 459 2 588 2 541 2 109 6 433 2 
461 2 202 2 359 2 100 2 471 2 205 2 292 2 243 2 73 2 535 2 621 2 304 2 394 4 565 2 234 2 286 2 189 2 149 2 173 2 459 2 588 2 541 2 109 6 433 2 
471 4 298 2 425 2 4 3 599 4 306 2 529 2 530 6 85 2 116 2 117 6 433 3 486 3 574 2 195 4 56 2 400 4 319 2 489 2 537 4 539 2 237 2 240 2 541 10 202 2 125 2 248 2 372 2 325 2 286 3 73 2 135 4 621 2 256 4 171 2 215 2 627 2 342 2 38 3 424 4 
202 2 125 2 298 2 471 4 245 2 425 2 4 2 372 2 248 2 325 2 599 4 529 2 306 2 530 4 85 2 286 2 116 2 117 6 433 2 486 2 73 2 574 2 195 4 135 4 56 2 621 2 256 4 171 2 400 4 215 2 319 2 489 2 627 2 537 4 342 2 539 2 493 2 38 2 237 2 218 2 541 10 240 2 424 4 
202 2 125 2 298 2 471 4 245 2 425 2 4 2 372 2 248 2 325 2 599 4 529 2 306 2 530 4 85 2 286 2 116 2 117 6 433 2 486 2 73 2 574 2 195 4 135 4 56 2 621 2 256 4 171 2 400 4 215 2 319 2 489 2 627 2 537 4 342 2 539 2 493 2 38 2 237 2 218 2 541 10 240 2 424 4 
202 2 125 2 298 2 471 4 245 2 425 2 4 2 372 2 248 2 325 2 599 4 529 2 306 2 530 4 85 2 286 2 116 2 117 6 433 2 486 2 73 2 574 2 195 4 135 4 56 2 621 2 256 4 171 2 400 4 215 2 319 2 489 2 627 2 537 4 342 2 539 2 493 2 38 2 237 2 218 2 541 10 240 2 424 4 
202 2 125 2 298 2 471 4 245 4 425 2 4 2 372 2 248 2 325 2 599 4 529 2 306 2 530 5 85 2 286 2 116 2 117 6 433 2 486 2 73 2 574 2 195 4 135 4 56 2 621 2 256 4 171 2 400 4 215 2 319 2 489 2 627 2 537 4 342 2 539 2 493 4 38 2 237 2 218 4 541 10 240 2 424 4 
410 2 163 2 262 2 10 2 157 2 258 2 568 2 
385 2 308 2 361 2 157 2 330 2 405 2 
40 1 280 2 471 8 426 2 126 2 348 1 283 2 598 2 147 2 99 2 600 2 268 2 190 1 27 2 485 2 70 2 101 2 332 2 333 2 136 2 316 2 236 1 626 2 388 1 541 10 453 2 
298 2 135 4 248 2 224 4 215 2 319 2 529 2 386 2 352 2 285 2 530 6 491 2 539 2 518 2 493 2 240 2 543 2 
162 2 279 2 403 2 471 1 299 2 180 4 139 7 350 2 97 2 400 2 537 2 519 2 484 2 603 1 376 2 541 1 424 2 228 2 
162 2 279 4 403 4 299 2 180 4 139 6 350 2 97 2 400 2 537 2 519 2 484 2 376 2 424 2 228 4 
162 2 279 8 403 8 471 1 299 6 180 4 139 10 350 2 97 2 400 2 537 2 519 2 484 8 603 1 376 2 541 1 424 2 228 8 
162 2 279 2 403 2 180 2 139 2 350 2 97 2 400 2 537 2 519 2 376 2 424 2 228 2 
42 2 
42 2 
42 2 
42 2 
629 2 
