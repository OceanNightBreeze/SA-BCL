#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V ERROR utilMDE.Options$ArgException 737 7 
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NullPointerException 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V FAILED junit.framework.ComparisonFailure 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException 129 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException 129 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 545 628 310 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 102 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 102 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 102 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 102 
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 102 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V ERROR java.lang.NullPointerException 50 564 
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.NullPointerException 354 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (278,782) (278,782) 232 807 350 3 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (278,782) 19 807 350 3 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 807 350 3 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.Error 259 807 350 3 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V | ASSIGN | 2308 | = null
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String; | CONDITION | 14923 | if (x) -> if (!x)
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eq(II)Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object; | RETURN | 62299 | return null
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.ValueTuple:isMissing(I)Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:subsetOf([B[I)Z
daikon.Quant:memberOf(I[I)Z
daikon.Debug:logOn()Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual; | RETURN | 1561 | return null
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.Ppt:Ppt()V
daikon.inv.Invariant:logOn()Z
daikon.Quant:concat([I[I)[I
daikon.PptSlice1:num_samples()I
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.diff.Node:Node()V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.ArraysMDE:sum([I)I
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd(II)I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object; | ASSIGN | 19872 | = null
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.Quant:subsetOf([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D | OPERATOR | 36891 | != -> ==
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:setDiff([I[I)[I
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.TypeOf:esc_name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:getEndLine()I
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:lexGTE([I[I)Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.Quant:eltsGT([II)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.Quant:subsetOf([J[J)Z
utilMDE.MathMDE:modulus([I)[I
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.Quant:subsetOf([F[F)Z
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltwiseLT([I)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.Quant:lte(II)Z
daikon.Quant:pairwiseLTE([I[I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.ModBitTracker:num_samples()I
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.ArraysMDE:element_range([I)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
utilMDE.LimitedSizeIntSet:size()I
daikon.Quant:subsetOf([S[S)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltwiseGTE([I)Z
daikon.test.VarInfoNameDriver.PostPreConverter:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 99177 | return null
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.PostPreConverter:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.PptSlice0:arity()I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvMap:toString()Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.ArraysMDE:sorted([I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.Quant:eltsLT([II)Z
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Quant:eltsLtIndex([I)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.ModBitTracker:num_vars()I
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.diff.PrintAllVisitor:bufPrintln()V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.ArraysMDE:min([I)I
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Debug:logDetail()Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.ModBitTracker:split(I)I
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.MathMDE:negate(I)I
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.Intern:internSubsequence([JII)[J
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit; | OPERATOR | 4882 | == -> <
daikon.Quant:gte(II)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:setEqual([I[I)Z
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1343 | if (x) -> if (!x)
daikon.inv.Invariant:justified()Z
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.VarInfoName.Field:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:eltsLTE([II)Z
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.Intern:numIntArrays()I
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.VarInfoName.AbstractVisitor:visitField(Ldaikon.VarInfoName.Field;)Ljava.lang.Object;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.Quant:memberOf(F[F)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.VarInfoName.Poststate:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.PptMap:asCollection()Ljava.util.Collection;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.VarInfo:new_ppt()V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.Quant:sameLength([I[I)Z
daikon.inv.Invariant:prob_and(DD)D
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.test.InvariantFormatTester:execute()Z
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.Quant:eltsLteIndex([I)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.Intern:intern([J)[J
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ValueTuple:size()I
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilters:InvariantFilters()V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:name()Ljava.lang.String;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.PptSlice1:arity()I
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Quant:subsetOf([D[F)Z
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.Field:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName:hashCode()I
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:eq(JJ)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([F[D)Z
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGT([I[I)Z
daikon.Quant:eltwiseEqual([I)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:memberOf(S[S)Z
daikon.PptSlice2:arity()I
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.Quant:ne(II)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.diff.Node:Node(LutilMDE.Pair;)V
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sum([D)D
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:max([I)I
daikon.inv.unary.UpperBoundCore:calc_range()J
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.ProglangType:isArray()Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ModBitTracker:num_sets()I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.ValueTuple:isMissingFlow(I)Z
daikon.Quant:eq(FF)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.Quant:subsetOf([D[D)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfoName:toString()Ljava.lang.String;
utilMDE.MathMDE:sign(I)I
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:eq(DD)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.Quant:eltsNotEqual([II)Z
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.inv.ValueSet:ValueSet(I)V
daikon.VarInfoName.TypeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.diff.RootNode:RootNode()V
daikon.ProglangType:dimensions()I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:slice([III)[I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.LowerBound:enabled()Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltsGTE([II)Z
daikon.VarInfoName:applyPoststate()Ldaikon.VarInfoName;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant; | RETURN | 3656 | return null
utilMDE.WeakHasherMap:size()I
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;ZZZZ)[Ljava.lang.String;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.PptName:isEnterPoint()Z
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.PptSlice0:initInvariantsSeen()V
daikon.ProglangType:baseIsScalar()Z
daikon.diff.InvMap:InvMap()V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.Quant:eltwiseLTE([I)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.ProglangType:isScalar()Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase; | ASSIGN | 12386 | = null
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.Invariant:prob_or(DD)D
daikon.Quant:eltsEqual([II)Z
daikon.Quant:gt(II)Z
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.inv.Invariant:isWorthPrinting()Z
daikon.Quant:lexLT([I[I)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String; | CONDITION | 14085 | if (x) -> if (!x)
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.Intern:intern([I)[I
utilMDE.FuzzyFloat:lt(DD)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.Invariant:logDetail()Z
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd([I)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.MathMDE:mod_positive(II)I
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfoName.Replacer:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ldaikon.VarInfoName;
jtb.JavaCharStream:FillBuff()V
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.test.VarInfoNameDriver.QuantifySimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ljava.lang.Object;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:eltsGtIndex([I)Z
utilMDE.ArraysMDE:subarray([III)[I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.PptName:isCombinedExitPoint()Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.VarInfoAux:hashCode()I
utilMDE.MathMDE:pow(II)I
utilMDE.LimitedSizeIntSet:add(I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.VarInfoName.Field:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariants:Invariants()V
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.OrderedPairIterator:setnext1()V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.Quant:isReverse([I[I)Z
daikon.ProglangType:isIntegral()Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
jtb.JavaCharStream:getBeginLine()I
daikon.Quant:memberOf(F[D)Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:lexEqual([I[I)Z
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.MathMDE:gcd_differences([I)I
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaCharStream:ReadByte()C
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:eltwiseGT([I)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.Quant:lt(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.VarInfoName.Poststate:Poststate(Ldaikon.VarInfoName;)V
daikon.Quant:noDups([I)Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
jtb.JavaParser:jj_ntk()I
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
jtb.JavaCharStream:BeginToken()C
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.Quant:lexGT([I[I)Z
daikon.VarInfoName.TypeOf:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.Options.ArgException:ArgException(Ljava.lang.String;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.VarInfo:name()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfoName.Replacer:visitField(Ldaikon.VarInfoName.Field;)Ldaikon.VarInfoName;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
jtb.JavaCharStream:getBeginColumn()I
daikon.Quant:eltwiseNotEqual([I)Z
daikon.Quant:union([I[I)[I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.Quant:memberOf(J[J)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:intersection([I[I)[I
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.Intern:intern([D)[D
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
daikon.ValueTuple:tuplemodHasModified(I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:memberOf(D[F)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:getEndColumn()I
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
utilMDE.MathMDE:gcd(JJ)J
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.Assert:assertTrue(Z)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.Quant:eltsGteIndex([I)Z
utilMDE.ArraysMDE:sum([[D)D
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaCharStream:readChar()C
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.VarInfoName.Poststate:repr_impl()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel; | RETURN | 571 | return null
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
706 2 93 4 782 2 278 2 784 2 623 2 289 2 538 2 486 2 
570 6 783 2 269 2 639 6 744 2 103 2 349 2 568 2 769 2 11 6 756 2 
782 2 154 6 278 2 116 2 518 2 120 4 390 2 166 2 792 6 106 4 78 6 8 6 153 2 
163 10 782 6 322 6 572 6 344 10 405 8 167 2 791 2 682 2 612 4 753 10 440 2 233 2 755 8 685 12 278 6 71 28 387 16 128 4 177 2 178 8 331 10 659 16 560 10 74 4 334 4 663 2 52 16 243 8 218 26 
677 6 410 4 
142 2 
113 2 765 2 485 2 375 2 519 2 675 2 577 2 629 2 581 4 732 2 584 2 683 2 380 2 278 4 13 2 176 2 594 4 133 2 237 2 239 2 338 2 399 2 781 2 782 4 88 2 403 2 145 2 786 2 706 2 549 2 791 2 96 2 358 2 42 2 801 4 505 2 561 2 803 2 420 2 422 2 264 2 512 2 424 2 513 4 
163 16 782 4 322 4 516 6 572 4 268 2 344 16 270 2 605 4 167 2 169 6 502 2 466 2 649 8 753 16 255 6 123 6 755 18 205 2 685 22 327 6 797 6 278 4 387 32 71 54 759 4 128 2 127 4 178 6 560 16 659 32 774 4 331 6 52 32 104 2 138 4 185 4 242 4 218 48 
378 2 679 2 519 2 
111 2 41 2 413 10 245 2 689 22 573 2 157 2 775 2 299 2 448 2 577 2 60 2 451 2 286 2 
163 2 572 2 344 2 273 2 610 2 172 2 173 2 33 2 753 2 755 2 685 2 554 2 71 6 387 2 128 2 560 2 659 2 331 4 508 2 52 2 698 2 397 2 218 4 
685 4 163 4 516 6 387 8 71 16 344 4 430 2 626 2 774 4 560 4 659 8 334 2 169 6 52 8 242 4 753 4 218 12 
726 4 87 2 622 2 701 2 668 4 456 2 88 4 517 4 458 2 375 2 519 8 548 2 378 6 488 4 679 2 583 2 586 14 230 2 306 4 684 4 256 2 309 10 634 4 415 2 530 2 638 2 282 4 330 2 418 2 44 10 73 2 392 2 618 4 476 2 805 4 513 4 599 2 342 4 426 62 368 2 
727 2 142 2 700 2 244 2 248 2 606 2 199 2 737 2 379 2 7 2 470 2 
221 2 427 2 428 2 112 19 222 2 118 2 520 1 119 2 627 1 731 2 227 2 633 2 124 1 528 12 16 2 15 2 637 4 734 2 532 2 534 2 238 2 535 3 452 2 739 6 336 3 536 2 139 2 537 1 539 2 643 12 542 2 644 1 345 6 463 2 29 2 347 4 465 1 348 2 252 2 253 25 32 2 31 1 352 2 34 6 751 2 754 2 155 3 656 2 363 2 47 2 566 3 665 1 161 3 477 2 367 5 481 1 267 2 483 4 670 2 671 2 59 1 377 2 767 2 582 3 384 2 383 2 385 2 70 2 278 32 279 2 281 4 179 2 690 1 388 2 776 3 184 2 495 2 693 2 696 2 291 2 189 2 780 2 191 2 782 30 401 1 194 2 784 2 702 1 406 2 787 2 90 2 198 2 705 1 304 24 790 6 200 3 305 2 503 2 715 1 800 1 102 2 617 2 419 19 510 1 421 2 511 4 215 2 217 2 107 12 425 12 220 3 219 2 
278 2 609 2 
278 4 137 2 308 2 
550 2 
266 2 571 2 741 2 246 2 544 2 432 2 624 2 164 2 297 18 672 18 788 18 745 2 436 2 768 2 646 2 122 2 587 2 231 2 749 2 681 2 64 2 504 2 151 2 65 2 526 2 592 2 39 2 770 2 446 2 474 2 183 2 721 2 692 2 51 2 806 2 212 2 694 2 598 2 216 2 55 2 81 2 82 2 
307 2 9 2 497 2 187 1 
14 2 9 2 
386 2 416 2 28 2 748 2 519 2 9 2 612 2 
28 2 250 2 9 2 
49 2 28 2 9 2 
402 2 307 2 642 2 
28 2 9 2 
402 2 551 2 
9 2 475 2 
402 2 307 2 576 2 
719 2 247 2 307 2 
307 2 552 2 80 2 
372 2 307 2 79 2 
680 2 443 2 307 2 
402 2 373 2 
742 2 9 2 
77 2 247 2 
552 2 531 2 
79 2 676 2 
680 2 99 2 
402 2 97 2 
680 2 785 2 
611 2 79 2 
319 2 552 2 
247 2 141 2 
402 2 307 2 576 2 661 2 
402 2 307 2 496 2 576 2 661 2 
402 2 595 2 307 2 
402 2 307 2 140 2 
69 2 728 2 224 2 333 2 
689 6 462 4 72 4 362 2 766 2 434 2 746 2 75 2 450 2 365 2 678 2 287 2 94 2 150 2 647 2 382 2 340 2 27 2 
461 2 307 2 
386 2 519 2 36 2 553 2 
386 2 416 2 743 2 519 2 36 2 553 2 
386 2 53 2 28 2 519 2 9 2 612 2 
688 2 399 2 
386 2 482 2 519 2 612 2 
68 2 79 2 
493 2 680 2 
136 2 247 2 
552 2 265 2 
563 2 680 2 552 2 
680 2 552 2 590 2 
680 2 711 2 552 2 
680 2 552 2 66 2 
703 6 519 2 168 2 585 6 386 2 717 2 799 2 135 2 
402 2 4 2 
532 2 
221 2 427 2 1 2 222 2 114 2 115 2 118 2 119 2 729 2 227 2 124 2 527 2 637 4 17 4 734 8 235 2 452 2 739 4 335 2 337 2 539 6 643 6 543 2 457 2 345 2 29 2 347 4 253 4 352 2 254 2 34 6 750 2 751 2 754 2 472 2 656 2 363 2 260 2 477 2 483 4 57 2 574 2 59 2 489 2 175 2 277 2 772 2 278 26 279 2 281 4 284 2 495 2 693 2 188 2 85 2 782 26 601 2 784 2 90 2 198 2 304 6 790 2 707 2 201 2 305 2 503 2 204 4 720 2 102 2 617 2 209 4 217 2 108 2 219 2 
221 2 427 2 1 2 222 2 114 2 118 2 119 2 323 2 729 2 225 2 227 2 632 2 124 2 527 2 637 4 17 4 734 8 235 2 238 2 452 2 739 6 335 2 337 2 139 2 539 6 643 6 543 2 457 2 345 2 29 2 347 4 253 4 352 2 254 2 34 6 750 2 751 2 754 2 656 2 363 2 260 2 477 2 483 4 574 2 59 2 489 2 381 2 175 2 277 2 772 2 278 26 279 2 281 4 284 2 495 2 693 2 188 2 85 2 782 26 601 2 784 2 90 2 198 2 304 6 790 2 707 2 201 2 305 2 503 2 204 4 720 2 102 2 617 2 209 4 217 2 108 2 219 2 
48 2 
147 2 725 2 
570 2 40 4 500 2 271 2 529 2 704 2 639 2 625 2 298 2 103 2 509 2 579 2 275 2 152 2 479 4 355 2 38 2 756 2 
514 4 570 6 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 6 125 2 686 2 278 12 281 2 637 2 529 2 639 4 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 783 2 500 2 704 2 298 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 4 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 6 619 2 479 4 
514 4 570 4 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 6 125 2 686 2 278 12 281 2 637 2 529 2 639 6 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 500 2 704 2 298 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 4 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 4 619 2 568 2 479 4 
514 4 570 6 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 6 125 2 686 2 278 12 281 2 637 2 529 2 639 6 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 500 2 704 2 298 2 349 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 8 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 6 619 2 479 4 
514 8 570 6 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 8 125 2 686 2 278 12 281 2 637 2 529 2 639 8 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 500 2 704 2 298 2 349 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 8 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 10 619 2 568 2 479 4 
514 8 570 6 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 6 125 2 686 2 278 12 281 2 637 2 529 2 639 6 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 500 2 704 2 298 2 349 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 8 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 10 619 2 479 4 
221 2 0 2 427 2 222 2 625 2 226 2 227 2 631 2 10 2 11 12 637 4 442 4 639 8 20 2 447 2 449 2 238 2 452 2 22 6 241 2 643 6 249 2 29 12 645 2 253 2 34 6 467 6 35 10 469 4 37 6 38 2 652 2 40 4 656 2 258 4 260 2 658 2 46 6 664 2 477 2 479 4 667 6 483 4 271 2 484 2 673 7 274 2 61 1 62 2 63 2 490 2 275 2 67 8 686 2 277 2 278 46 279 2 491 6 281 4 285 2 495 2 693 2 697 2 699 6 84 2 85 2 294 2 500 2 704 2 298 2 90 2 300 2 301 2 303 1 304 8 710 7 95 2 305 2 503 2 713 2 714 1 98 2 308 6 101 2 102 2 103 4 509 2 315 2 317 6 108 2 118 2 521 2 119 2 524 4 525 2 125 2 326 1 329 1 529 2 734 4 134 2 739 6 337 4 139 2 339 2 539 6 543 2 343 6 345 2 347 4 352 2 550 6 751 2 152 4 754 2 353 2 756 4 355 2 757 2 555 2 159 2 158 2 363 2 562 2 760 2 761 6 568 4 570 4 165 2 575 2 580 1 579 2 171 6 588 1 769 4 593 2 180 2 181 1 778 6 600 2 782 24 193 2 784 2 198 2 609 6 790 2 202 2 409 6 204 4 207 2 798 2 614 1 417 8 617 2 619 2 217 2 808 6 219 2 
221 2 427 4 0 2 222 2 118 2 625 2 521 2 119 2 226 2 524 4 227 2 631 2 525 2 10 2 125 2 11 12 442 4 637 4 529 2 734 8 20 2 639 8 447 2 449 2 134 2 238 2 452 2 739 6 22 6 337 4 241 2 139 2 339 2 539 6 643 6 543 2 343 6 345 2 249 2 29 12 347 4 349 4 645 2 253 2 550 6 352 2 34 6 35 10 467 6 751 2 469 4 152 4 37 6 353 2 754 2 757 6 38 2 355 2 756 4 652 2 555 2 40 4 656 2 258 4 158 2 159 2 260 2 363 4 658 2 46 6 562 2 760 2 565 2 761 6 664 2 477 2 479 4 667 6 570 8 483 4 271 2 484 2 165 2 575 2 274 2 579 2 171 6 62 2 63 2 490 2 275 2 769 4 67 8 686 2 593 2 277 2 279 2 278 48 491 6 281 4 180 2 285 2 495 2 693 2 778 6 697 2 290 2 699 6 600 2 84 2 85 2 193 2 782 26 294 2 784 2 500 2 704 2 90 4 298 2 300 2 198 2 301 2 609 6 790 2 304 8 95 2 202 2 305 2 409 6 503 2 713 2 98 2 308 6 204 4 798 2 311 2 207 2 101 2 417 8 102 2 103 4 509 2 617 2 209 2 315 2 317 6 619 2 808 6 217 2 108 2 219 2 
514 4 221 2 427 4 0 2 222 2 118 2 625 2 521 2 119 2 226 2 227 2 524 4 631 2 525 2 10 2 125 2 11 12 442 4 637 4 529 2 734 8 20 2 639 8 447 2 449 2 134 2 238 2 452 2 739 6 22 6 337 4 241 2 139 2 339 2 539 6 643 6 543 2 343 6 345 2 249 2 29 12 347 4 349 4 645 2 253 2 550 6 352 2 34 6 35 10 467 6 751 2 469 4 152 4 37 6 353 2 754 2 757 6 38 2 355 2 756 4 652 2 555 2 40 4 656 2 258 4 158 2 159 2 260 2 363 4 658 2 46 6 562 2 760 2 761 6 565 6 664 2 477 2 479 4 667 6 570 8 483 4 271 2 484 2 165 2 575 2 274 2 579 2 171 6 62 2 63 2 490 2 275 2 769 4 67 8 686 2 593 2 277 2 279 2 278 48 491 6 281 4 180 2 285 2 495 2 693 2 778 6 697 2 290 2 699 6 600 2 84 2 85 2 193 2 782 26 294 2 784 2 500 2 704 2 90 4 298 2 300 2 198 2 301 2 609 6 790 2 304 8 95 2 202 2 305 2 409 6 503 2 713 2 98 2 308 6 204 4 798 2 311 2 207 2 101 2 417 8 102 2 103 4 509 2 617 2 209 2 315 2 317 6 619 2 808 6 217 2 108 2 219 2 
221 2 0 2 427 4 222 2 625 2 226 2 5 6 227 2 631 2 10 2 11 16 637 4 442 4 639 10 20 2 447 2 238 2 452 2 22 6 241 2 643 8 249 2 29 10 645 2 253 4 34 6 467 6 35 8 469 4 468 6 651 6 37 12 38 2 652 2 40 4 656 2 258 4 260 2 658 2 46 6 664 2 477 2 479 4 667 6 483 4 271 2 484 2 274 2 62 2 63 2 490 2 275 2 67 8 686 2 277 2 278 52 279 2 491 6 281 4 492 2 285 2 495 2 693 2 695 6 697 2 290 2 699 12 84 2 85 2 294 2 500 2 704 2 298 2 90 4 300 2 301 2 304 12 95 2 305 2 503 2 713 2 98 2 308 12 311 2 718 6 101 2 102 2 103 4 509 2 314 6 315 2 316 2 317 6 108 4 514 4 321 6 118 2 521 2 119 2 524 4 525 2 125 2 529 2 734 10 134 2 739 6 337 4 139 2 339 2 539 8 543 4 144 2 343 6 345 4 347 4 349 4 149 6 352 2 550 12 751 2 152 4 754 2 353 2 756 4 355 2 757 6 555 2 159 2 158 2 363 4 559 2 562 2 760 2 565 6 761 6 568 2 570 10 369 2 165 2 575 2 170 2 579 2 171 6 769 4 593 2 180 2 778 12 600 2 782 24 193 2 783 2 784 2 198 2 609 12 790 4 202 2 409 6 204 6 798 2 207 2 417 8 617 2 802 2 209 2 210 2 423 6 619 2 217 2 808 6 219 2 
514 4 570 6 0 2 271 2 704 2 521 2 298 2 349 2 274 2 524 2 525 2 467 2 10 2 275 2 769 2 125 2 11 4 757 6 38 2 355 2 756 4 686 2 40 2 278 4 529 2 20 2 639 6 417 2 159 2 103 4 315 2 565 4 339 2 479 2 600 2 
221 2 0 2 222 2 118 2 521 2 119 2 524 2 227 2 525 2 439 2 10 2 125 2 11 4 637 4 529 2 639 6 20 2 532 2 447 2 534 2 533 2 449 2 238 2 452 2 739 6 337 2 139 2 339 2 539 6 643 6 345 3 29 4 347 4 349 2 253 3 352 2 34 6 648 3 467 2 751 2 35 2 754 2 756 4 355 2 38 2 757 6 40 2 656 2 159 2 565 2 477 2 479 2 570 6 483 4 271 2 671 2 274 2 275 2 769 2 686 2 277 2 278 28 279 2 281 4 388 2 76 2 495 2 693 2 600 2 85 2 782 24 784 2 704 2 195 2 298 2 198 2 304 8 790 3 305 2 503 2 203 2 204 4 417 2 102 2 103 4 617 2 315 2 217 2 219 2 
514 8 570 6 221 2 0 2 222 2 271 2 118 2 625 2 521 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 11 6 125 2 686 2 278 12 281 2 637 2 529 2 639 6 20 2 180 2 447 2 285 2 452 2 339 2 600 2 782 6 500 2 704 2 298 2 349 2 352 2 34 4 467 4 469 2 152 4 754 2 756 4 355 2 38 2 757 8 40 4 798 2 417 4 159 2 616 2 103 4 509 2 617 2 315 2 565 10 619 2 479 4 
514 8 570 8 221 2 0 2 222 2 271 2 118 2 625 2 274 2 579 2 524 4 525 2 490 2 275 2 10 2 769 2 325 2 11 8 125 2 686 2 278 12 281 2 637 2 529 2 20 2 639 6 180 2 447 2 285 2 452 2 339 2 398 4 600 2 782 6 783 2 500 2 704 2 91 2 298 2 349 2 352 2 34 4 467 4 469 2 152 4 754 2 355 2 38 2 757 8 756 4 40 4 798 2 417 4 159 2 103 4 509 2 617 2 315 2 565 10 619 2 479 4 
374 2 125 2 600 2 
374 2 125 2 600 2 
514 4 221 2 427 4 0 2 222 2 118 2 625 2 2 2 522 2 119 2 227 2 524 2 125 4 11 16 442 2 637 4 529 4 129 2 734 4 735 2 640 2 639 12 238 2 452 2 739 6 337 6 139 2 339 2 539 2 643 2 457 4 460 2 29 4 347 4 349 4 253 2 352 2 34 6 467 4 35 2 751 2 152 2 754 2 757 6 756 4 40 2 656 2 258 2 260 4 363 4 565 6 477 2 568 4 479 2 570 12 483 4 271 2 374 2 275 2 769 4 277 2 771 2 278 24 279 2 491 2 281 4 495 2 693 2 186 2 600 2 85 2 782 16 784 2 783 4 500 2 501 2 90 4 198 2 304 2 92 2 305 2 793 2 503 2 716 2 795 4 798 2 412 4 417 4 103 4 617 2 723 2 619 2 217 2 219 2 
782 2 278 4 491 2 258 2 118 2 2 2 29 2 509 2 226 2 578 2 408 2 723 2 241 2 35 2 650 2 186 2 725 2 
514 4 221 2 427 4 0 2 222 2 118 2 625 2 2 2 119 2 524 2 227 2 125 6 11 16 441 2 442 2 637 4 529 4 129 2 734 4 735 4 640 2 639 12 238 2 452 2 739 6 337 6 139 2 339 2 26 2 539 2 643 2 457 4 460 2 29 2 347 4 349 4 253 4 352 2 34 6 467 4 751 2 469 4 152 4 353 2 754 2 757 6 756 4 555 2 40 2 473 2 656 2 260 4 363 4 658 2 760 2 263 2 565 6 477 2 568 4 479 2 570 12 483 4 271 2 374 2 674 2 275 2 769 4 277 2 771 2 278 24 279 2 491 2 281 4 180 2 285 2 495 2 693 2 186 2 600 4 400 2 85 2 782 16 784 2 783 4 500 2 501 2 90 4 198 2 304 2 92 2 305 2 793 2 503 2 795 4 798 2 412 4 417 4 103 4 617 2 723 2 619 2 320 2 217 2 219 2 
514 4 221 2 427 4 0 2 222 2 118 2 625 2 2 2 119 2 227 2 524 2 12 2 125 6 11 16 442 2 637 4 529 4 129 2 734 4 735 2 640 2 639 12 132 2 238 2 738 2 452 2 739 6 337 6 139 2 339 2 539 2 643 2 457 4 460 2 29 4 347 4 349 4 253 2 352 2 34 6 467 4 35 2 751 2 469 4 152 4 353 2 754 2 757 6 756 4 555 2 40 2 656 2 258 2 260 4 363 4 658 2 760 2 565 6 477 2 568 4 479 2 570 12 483 4 271 2 374 2 674 2 275 2 769 4 277 2 771 2 278 24 279 2 491 2 281 4 180 2 285 2 495 2 693 2 186 2 600 4 400 2 85 2 782 16 784 2 783 4 500 2 501 2 90 4 198 2 304 2 92 2 305 2 793 2 503 2 795 4 206 2 798 2 411 2 412 4 417 4 103 4 617 2 723 2 619 2 217 2 219 2 
621 2 221 2 222 2 118 2 119 2 435 4 628 2 227 2 637 4 134 2 452 2 739 2 337 2 540 1 539 6 643 6 345 2 545 2 29 2 347 2 547 2 148 2 253 2 352 2 34 6 751 2 754 2 557 2 257 2 364 2 477 2 762 2 483 2 484 2 63 2 277 2 278 24 279 2 281 4 391 1 691 2 777 2 495 2 597 2 394 2 697 2 782 18 294 2 296 2 602 2 784 2 89 2 304 8 790 2 305 2 503 2 98 2 204 4 310 2 613 2 615 2 102 2 617 2 722 2 318 2 214 2 724 2 219 2 
539 2 782 2 295 2 643 2 543 6 371 2 345 3 117 2 302 3 790 3 304 2 253 3 747 2 204 2 276 2 278 2 654 2 636 2 102 2 182 2 666 2 162 4 341 2 292 1 109 2 
539 2 782 2 654 2 278 2 643 2 295 2 543 6 371 2 636 2 345 2 117 2 102 2 182 2 302 2 304 2 790 2 253 2 747 2 666 2 162 4 341 2 109 2 204 2 276 2 
539 2 782 2 654 2 278 2 643 2 295 2 543 6 371 2 636 2 345 2 117 2 102 2 182 2 302 2 304 2 790 2 253 2 747 2 666 2 162 4 341 2 109 2 204 2 276 2 
528 2 782 2 278 2 328 1 43 1 102 2 507 2 608 2 790 1 304 2 708 2 253 1 453 2 740 2 229 1 425 2 276 2 
304 2 782 2 528 2 278 2 708 2 740 2 453 2 102 2 507 2 425 2 608 2 276 2 
304 2 782 2 528 2 278 2 708 2 740 2 453 2 102 2 507 2 425 2 608 2 276 2 
304 2 782 2 528 2 278 2 708 2 740 2 453 2 102 2 507 2 425 2 608 2 276 2 
304 2 782 2 528 2 278 2 708 2 740 2 453 2 102 2 507 2 425 2 608 2 276 2 
357 2 50 2 564 2 131 2 779 2 313 2 
499 2 393 2 131 2 235 2 283 2 730 2 789 2 
622 1 782 8 429 2 404 2 764 1 487 2 433 2 407 2 324 2 30 2 438 1 352 2 733 2 278 10 758 2 18 1 156 2 360 2 361 2 21 2 418 1 657 2 213 2 25 2 699 2 83 2 
163 3 322 2 516 4 387 2 71 6 344 3 130 2 560 2 774 2 659 4 607 2 45 2 549 2 52 4 105 2 753 3 354 2 218 4 
192 2 541 2 143 2 414 2 272 2 208 2 660 2 523 2 288 3 395 2 752 2 589 2 480 2 
782 1 192 2 278 1 541 2 143 2 414 2 272 2 208 2 376 2 262 1 660 2 523 4 288 6 395 2 752 2 471 2 589 2 480 2 
192 2 541 4 143 2 414 2 272 2 376 2 208 2 660 2 523 4 288 6 395 4 752 2 471 2 589 4 480 2 
782 1 192 2 278 1 541 8 143 2 414 2 272 2 376 8 208 2 262 1 660 2 523 4 288 10 395 8 752 2 471 6 589 8 480 2 
56 2 483 4 669 1 3 2 119 2 437 2 228 2 232 2 278 12 641 2 332 6 238 2 739 8 740 2 495 2 240 2 23 2 139 2 190 1 498 2 782 12 146 2 459 2 464 2 347 4 350 2 751 2 556 2 807 2 620 2 
782 12 455 2 56 2 483 4 459 2 431 2 464 2 3 2 347 4 119 2 437 2 350 2 228 2 751 2 278 14 556 2 19 2 332 4 641 2 238 4 740 2 739 12 495 2 807 2 23 2 139 4 620 2 
515 2 763 4 370 6 483 28 223 4 58 2 3 2 119 8 437 2 6 2 121 4 630 6 174 2 126 2 591 2 687 2 278 58 635 4 280 30 234 8 736 6 445 4 236 6 389 14 641 6 332 20 238 16 596 2 494 2 739 64 454 2 495 8 23 50 24 4 139 16 396 8 498 2 293 2 782 58 459 1 146 2 604 14 346 2 196 2 347 28 197 2 251 4 546 2 709 2 350 2 351 6 794 2 712 14 751 8 100 2 653 6 796 2 556 6 356 4 558 4 312 6 655 6 359 4 506 4 261 30 160 2 804 4 366 4 662 2 807 2 567 4 54 8 478 4 569 4 110 2 620 6 
86 2 782 12 56 2 483 4 603 2 146 1 459 2 464 2 3 2 347 4 119 2 437 2 350 2 228 2 751 2 278 12 556 2 773 2 259 2 332 7 641 2 238 2 211 2 739 8 495 2 807 2 23 2 139 2 498 1 620 2 
444 2 
