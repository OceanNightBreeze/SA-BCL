#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testHasher()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V ERROR java.lang.ClassCastException 
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError (335,580) 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V ERROR java.lang.NullPointerException 277 
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V ERROR utilMDE.Assert$AssertionException (30,415) (30,415) 
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V ERROR utilMDE.Assert$AssertionException (30,415) 420 
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR daikon.config.Configuration$ConfigException (11,91,120,418,435) (11,91,120,418,435) (11,91,120,418,435) (11,91,120,418,435) 
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 338 444 112 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V ERROR java.lang.ArrayIndexOutOfBoundsException 417 
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testConditionalPptsTrue()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testPpts1Empty()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testPpts1Ppts1()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testPpts1Ppts2()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testPpts1Ppts3()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testNullaryInvs()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.DiffTester:testNonModulus()V ERROR java.lang.NullPointerException 457 300 (382,384) (382,384) 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NullPointerException 65 (297,587) 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException 65 (297,587) (297,587) 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException 65 (297,587) 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 49 84 433 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.NullPointerException 46 177 176 (72,206,340,550,585,591,596) (80,105) 6 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 312 76 488 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 312 76 488 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 312 76 488 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 312 76 488 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eq(JJ)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.Quant:subsetOf([B[I)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.OrderedPairIterator:setnext2()V
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.Quant:eq(FF)Z
daikon.Quant:eltsGT([II)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.JavaCharStream:BeginToken()C
daikon.diff.RootNode:RootNode()V
daikon.inv.Invariant:logOn()Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:eltsGteIndex([I)Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
utilMDE.Assert:assertTrue(Z)V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.Quant:lexGTE([I[I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType; | RETURN | 7895 | return null
daikon.diff.Node:Node()V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseGT([I)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.test.FormatTestCase:passes()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:baseIsFloat()Z
daikon.Quant:pairwiseGTE([I[I)Z
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I | CONSTANT | 4963 | 78 -> 77
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:subsetOf([D[F)Z
utilMDE.MathMDE:modulus([I)[I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.ProglangType:dimensions()I
utilMDE.Intern:intern([I)[I
utilMDE.MathMDE:gcd(II)I
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.Quant:lexGT([I[I)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.Quant:isReverse([I[I)Z
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.ArraysMDE:element_range([I)I
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.Quant:memberOf(D[F)Z
daikon.Quant:memberOf(J[J)Z
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.WeakHasherMap:size()I
daikon.Quant:eq(II)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.VarInfo:relate_var()V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:memberOf(F[D)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I | STATEMENT | 12352 | stmt -> ;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.diff.DetailedStatisticsVisitor:freq(II)D
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.PptSlice0:arity()I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 7162 | return null
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.MathMDE:mod_positive(II)I
utilMDE.ArraysMDE:max([I)I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.Quant:eltsGtIndex([I)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName:hashCode()I
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
utilMDE.MathMDE:negate(I)I
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.Quant:subsetOf([I[I)Z
daikon.ProglangType:isFloat()Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.VarInfo:isPointer()Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([J[J)Z
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.ProglangType:isIntegral()Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.Debug:logOn()Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V | CONDITION | 9913 | if (x) -> if (!x)
utilMDE.Intern:internSubsequence([III)[I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:eltsLteIndex([I)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
jtb.JavaCharStream:FillBuff()V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.Quant:lexLT([I[I)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:gte(II)Z
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.MathMDE:gcd(JJ)J
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.Quant:memberOf(S[S)Z
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.inv.unary.scalar.NonModulus:updateResults()V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.Quant:union([I[I)[I
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.Quant:eltsGTE([II)Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:sum([D)D
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.Quant:slice([III)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:eq(DD)Z
daikon.PptSlice1:arity()I
jtb.JavaCharStream:getEndLine()I
utilMDE.ArraysMDE:sum([[D)D
daikon.ProglangType:isPointerFileRep()Z
utilMDE.MathMDE:pow(II)I
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:eltsEqual([II)Z
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 913 | = null
daikon.Quant:lexEqual([I[I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair; | ASSIGN | 1906 | = null
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.inv.Invariants:Invariants()V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.ArraysMDE:min([I)I
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.MathMDE:sign(I)I
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.MathMDE:gcd([I)I
daikon.ModBitTracker:split(I)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
utilMDE.MathMDE:missing_numbers([I)[I
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | STATEMENT | 65291 | stmt -> ;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.Intern:numIntArrays()I
daikon.Quant:noDups([I)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.Quant:intersection([I[I)[I
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:setEqual([I[I)Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:isScalar()Z
daikon.Quant:lexLTE([I[I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:lte(II)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.Quant:concat([I[I)[I
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.ModBitTracker:num_vars()I
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.MathMDE:mod_positive(JJ)J
daikon.diff.InvMap:InvMap()V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse([II)[I | STATEMENT | 61501 | stmt -> ;
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.Quant:lexNotEqual([I[I)Z | CONDITION | 170166 | if (x) -> if (!x)
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
jtb.JavaCharStream:backup(I)V
daikon.Quant:eltwiseGTE([I)Z | CONDITION | 177183 | if (x) -> if (!x)
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V | OPERATOR | 5137 | + -> /
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Invariant:prob_and(DD)D | CONSTANT | 8716 | 1 -> -1
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:sum([I)I
jtb.JavaCharStream:getEndColumn()I
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([F[F)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z | CONDITION | 7988 | if (x) -> if (!x)
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration.ConfigException:ConfigException(Ljava.lang.String;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfo:new_ppt()V
daikon.test.InvariantFormatTester:execute()Z
daikon.Ppt:Ppt()V
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ModBitTracker:num_samples()I
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.Quant:subsetOf([F[D)Z
jtb.JavaParser:jj_ntk()I
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:memberOf(F[F)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List; | ASSIGN | 100168 | = null
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:sameLength([I[I)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.Quant:eltsLtIndex([I)Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.inv.Invariant:justified()Z
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:lt(II)Z
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | CONDITION | 12410 | if (x) -> if (!x)
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice2:arity()I
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.Quant:setDiff([I[I)[I
daikon.ValueTuple:isMissing(I)Z
daikon.Quant:subsetOf([S[S)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.Quant:gt(II)Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.Quant:eltwiseLTE([I)Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:ne(II)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.Invariant:prob_or(DD)D
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.Invariant:getConfidence()D
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.Quant:eltsLT([II)Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.VarInfoAux:hashCode()I
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.ModBitTracker:num_sets()I
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.LimitedSizeIntSet:size()I
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:eltsLTE([II)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern([J)[J
daikon.simplify.LemmaStack:noticeInt(J)V
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:readChar()C
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaCharStream:ReadByte()C
daikon.inv.Invariant:format()Ljava.lang.String;
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.Quant:subsetOf([D[D)Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.Quant:memberOf(I[I)Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.PptSlice0:initInvariantsSeen()V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltwiseEqual([I)Z
daikon.Quant:eltwiseLT([I)Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:lte(DD)Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:size()I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
114 2 100 2 394 2 150 2 229 4 118 4 210 2 525 2 506 2 230 6 216 2 155 2 427 5 573 2 345 2 176 2 177 2 558 2 72 2 452 2 595 2 
46 2 150 7 354 2 549 1 151 5 118 13 210 6 230 15 273 8 340 3 105 2 591 4 427 8 92 2 573 6 176 7 177 7 558 7 595 7 611 1 
326 2 79 10 441 4 287 4 50 4 331 2 564 2 171 2 85 62 123 6 124 2 316 4 337 2 335 8 398 4 378 2 214 4 154 2 156 14 532 4 555 2 463 2 359 4 68 2 574 2 160 4 278 4 132 4 96 4 540 2 482 2 577 4 466 2 320 2 351 2 73 10 281 2 198 2 484 2 308 2 
33 2 208 2 492 2 
310 2 412 2 246 2 395 2 355 4 372 2 83 2 421 2 335 2 398 4 422 2 87 2 157 2 293 2 257 2 258 2 260 2 538 2 96 2 482 2 388 2 321 2 75 2 197 2 306 2 543 2 282 2 353 2 98 4 324 2 
242 8 46 1 206 4 150 4 415 4 585 8 118 8 210 4 230 9 292 1 30 4 427 8 573 4 176 4 558 4 177 4 595 4 596 2 
123 2 335 2 154 2 
518 2 599 2 136 2 547 2 601 2 347 2 348 2 101 2 249 2 63 10 104 2 541 22 255 2 580 2 
581 2 30 2 446 2 468 2 565 2 142 2 415 2 98 2 539 4 
325 2 277 2 430 4 344 2 279 2 576 6 314 2 15 6 396 2 467 2 135 2 
30 2 256 6 167 6 181 2 546 6 226 4 415 2 445 2 510 2 419 2 553 4 143 6 399 2 
30 4 427 16 92 2 294 4 150 8 573 8 415 4 229 12 176 8 558 8 177 8 118 16 209 2 210 8 72 6 588 4 190 2 595 8 163 2 230 17 66 2 
502 6 513 4 
606 2 
517 2 
519 2 415 2 
420 2 190 2 415 2 
225 4 393 1 153 2 554 2 397 2 5 1 400 2 318 4 95 2 11 2 481 2 12 1 483 1 168 4 169 2 415 26 328 2 22 2 418 2 565 2 567 2 339 1 30 24 428 1 429 2 35 1 432 2 575 2 111 2 434 6 436 6 435 2 180 2 42 5 499 1 45 2 268 2 582 2 269 4 117 1 120 2 188 8 505 1 272 2 356 1 590 1 127 2 593 1 130 2 509 2 194 1 512 1 199 2 200 2 202 2 285 2 61 1 368 2 523 4 139 2 140 2 527 2 531 1 462 6 380 1 220 2 295 1 536 2 69 2 221 1 70 6 387 2 301 2 74 2 
244 2 561 6 138 2 444 2 416 2 121 2 248 2 23 2 563 6 336 2 338 2 447 2 86 2 423 2 381 2 607 2 7 2 557 6 148 2 222 2 112 2 13 2 14 2 239 2 57 2 559 2 305 2 134 2 
511 2 343 2 62 1 
107 2 375 2 115 2 578 2 335 2 352 2 66 2 
364 2 115 2 578 2 
115 2 578 2 173 2 
93 2 511 2 461 2 
115 2 578 2 
511 2 311 2 
115 2 59 2 
511 2 276 2 461 2 
315 2 236 2 461 2 
493 2 97 2 461 2 
99 2 371 2 461 2 
475 2 53 2 461 2 
597 2 511 2 
115 2 515 2 
236 2 598 2 
493 2 503 2 
371 2 43 2 
417 2 
511 2 213 2 
475 2 27 2 
371 2 166 2 
493 2 211 2 
236 2 464 2 
313 2 511 2 276 2 461 2 
414 2 
224 2 511 2 461 2 
145 2 511 2 461 2 
309 2 207 2 521 2 129 2 
373 2 107 2 552 2 335 2 
373 2 284 2 107 2 552 2 375 2 335 2 
107 2 115 2 578 2 335 2 485 2 66 2 
258 2 346 2 
107 2 335 2 66 2 298 2 
21 2 371 2 
475 2 288 2 
236 2 526 2 
493 2 548 2 
493 2 475 2 231 2 
493 2 475 2 369 2 
493 2 475 2 89 2 
493 2 475 2 34 2 
223 2 442 2 48 6 122 2 335 2 217 6 107 2 147 2 
367 2 474 2 570 2 8 2 487 2 20 2 456 2 108 2 67 2 109 2 443 2 133 2 195 4 4 2 303 4 253 2 541 6 425 2 
608 2 461 2 
184 2 115 2 461 2 
115 2 280 2 
95 2 
225 4 81 2 82 2 469 8 400 2 318 4 401 2 233 2 164 2 406 2 18 2 560 2 168 4 169 2 415 26 22 2 330 2 562 2 565 2 103 2 489 2 567 2 341 2 30 26 31 4 571 2 259 2 432 2 262 2 575 2 111 2 263 4 495 4 434 6 436 4 439 2 45 2 501 2 583 2 269 4 119 2 188 4 589 2 272 2 356 2 590 2 449 2 127 2 509 2 56 2 453 2 199 2 454 2 60 2 200 6 202 2 285 6 455 2 368 6 522 2 139 2 289 2 140 2 527 2 462 2 220 2 536 2 296 2 69 2 70 2 387 2 302 2 74 2 304 2 
225 4 81 2 82 2 469 8 1 2 153 2 400 2 318 4 401 2 233 2 406 2 18 2 560 2 168 4 169 2 415 26 22 2 330 2 562 2 565 2 103 2 489 2 567 2 341 2 30 26 31 4 259 2 432 2 262 2 575 2 111 2 36 2 263 4 495 4 350 2 434 6 436 6 180 2 439 2 45 2 583 2 269 4 119 2 188 4 589 2 272 2 356 2 590 2 449 2 127 2 594 2 509 2 56 2 453 2 199 2 454 2 60 2 200 6 202 2 285 6 455 2 368 6 522 2 139 2 289 2 140 2 527 2 462 2 220 2 536 2 296 2 69 2 70 2 387 2 302 2 74 2 304 2 
504 2 78 2 
137 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
325 2 270 2 382 2 537 2 384 2 587 2 604 2 576 2 300 2 24 4 38 4 252 2 15 2 396 2 28 2 448 2 241 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 529 2 376 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 77 2 407 2 391 2 
408 2 342 2 159 2 457 2 170 2 382 2 537 2 384 2 300 2 77 2 407 2 391 2 
225 4 153 2 91 2 400 2 159 2 318 4 95 2 16 2 407 2 408 2 168 4 169 2 170 2 415 24 22 2 565 2 25 2 566 2 491 2 567 2 424 2 30 24 342 2 432 2 575 2 111 2 263 4 434 6 436 6 40 2 180 2 45 2 269 4 120 2 188 3 272 2 127 2 509 2 199 2 362 3 200 6 202 4 365 2 285 8 457 2 368 6 522 2 139 2 140 2 527 2 64 2 529 2 462 3 220 2 536 2 296 2 69 2 382 2 537 2 70 3 384 2 387 2 300 2 302 2 74 2 304 2 542 2 77 2 391 2 
186 2 426 2 44 2 
186 2 426 2 44 2 
225 4 469 4 314 2 153 2 396 4 472 2 556 2 400 2 318 4 477 2 94 2 404 2 15 10 407 6 325 4 560 4 411 2 168 4 169 2 415 24 22 2 562 2 24 2 565 2 25 2 567 2 28 2 341 4 30 16 430 10 432 2 431 2 575 2 111 2 434 6 576 10 436 6 497 2 38 2 180 2 579 2 44 2 45 2 269 4 119 4 587 2 186 2 188 2 272 2 191 2 192 2 127 2 128 2 592 4 358 2 451 2 279 2 509 2 199 2 200 2 135 4 202 4 285 2 368 2 524 2 139 2 289 4 140 2 527 2 529 2 376 2 65 2 215 2 144 2 220 2 534 2 536 2 296 2 69 2 387 2 302 2 74 2 304 4 467 4 391 2 
202 2 30 2 358 2 415 4 586 2 524 2 161 2 140 2 437 2 25 2 579 2 191 2 291 2 472 2 379 2 78 2 241 2 
225 4 469 4 314 2 153 2 396 4 556 2 400 2 318 4 477 2 94 2 404 2 15 10 407 6 325 4 560 4 411 2 168 4 169 2 415 20 22 2 562 2 24 2 565 2 567 2 28 2 341 4 30 14 32 2 430 10 432 2 431 4 575 2 111 2 434 6 576 10 436 6 497 2 38 2 180 2 579 2 44 2 45 2 269 4 119 4 186 2 587 2 188 4 272 2 191 2 192 2 127 2 128 2 592 4 451 2 279 2 509 2 199 2 200 2 135 4 202 2 285 2 368 2 139 2 289 4 140 2 527 2 529 2 376 2 65 2 215 2 144 2 220 2 534 2 536 2 296 2 297 2 69 2 387 2 302 2 74 2 304 4 467 4 391 2 
225 4 469 4 314 2 153 2 396 4 472 2 556 2 400 2 318 4 477 2 94 2 404 2 15 10 407 6 325 4 560 4 411 2 168 4 169 2 415 24 22 2 562 2 24 2 565 2 25 2 567 2 28 2 341 4 30 16 430 10 432 2 431 2 575 2 111 2 434 6 576 10 436 6 497 2 38 2 180 2 579 2 44 2 45 2 269 4 119 4 587 2 186 2 188 2 272 2 191 2 192 2 127 2 128 2 592 4 358 2 451 2 279 2 509 2 199 2 200 2 135 4 202 4 285 2 368 2 524 2 139 2 289 4 140 2 527 2 529 2 376 2 65 2 215 2 144 2 220 2 534 2 536 2 296 2 69 2 387 2 302 2 74 2 304 4 467 4 391 2 
0 2 150 4 469 28 151 8 2 2 152 2 153 2 3 4 316 2 473 8 6 2 476 2 317 2 318 4 9 2 160 2 10 2 479 2 478 10 480 2 319 4 162 2 322 2 323 2 18 14 168 2 169 2 327 2 329 2 22 2 490 2 340 4 29 2 30 24 174 4 176 4 177 4 349 2 496 1 40 2 180 2 500 2 46 2 182 2 47 2 50 2 49 2 183 2 185 2 188 11 189 2 190 2 51 4 52 4 356 2 357 6 359 2 54 26 508 2 193 2 55 10 56 2 509 2 361 2 196 6 58 2 514 2 199 2 362 2 363 2 60 22 200 12 201 4 202 2 203 2 204 2 522 2 368 12 210 4 527 2 212 2 528 2 377 2 530 2 218 2 220 2 536 2 69 2 70 11 385 2 386 4 387 2 74 2 389 2 542 2 390 6 544 8 545 2 392 2 225 2 80 4 81 2 227 2 228 2 551 6 84 2 230 10 88 2 90 2 400 2 401 2 402 2 558 4 233 10 403 4 234 8 235 2 237 6 238 2 406 2 240 2 410 2 245 2 413 26 415 30 247 2 562 4 102 2 251 2 565 2 566 2 568 2 254 24 424 2 427 8 106 2 569 12 572 2 259 2 573 4 261 2 432 2 110 12 263 10 433 2 434 6 436 4 265 2 267 4 440 2 441 2 116 2 269 4 118 8 272 2 274 2 590 2 449 2 450 2 275 2 127 2 595 4 285 18 455 2 286 2 600 3 602 2 459 2 139 2 140 2 460 4 605 2 462 11 146 2 296 2 609 2 465 2 304 2 611 2 307 2 
603 2 126 2 219 2 251 2 470 2 178 2 
333 2 299 2 125 2 232 2 131 2 233 2 178 2 
149 1 283 2 520 2 19 2 415 10 458 2 271 2 332 2 471 1 250 2 172 2 26 2 334 2 30 8 535 2 507 2 494 1 383 2 509 2 466 1 264 2 438 2 266 2 612 2 308 1 486 2 
242 2 46 3 205 2 206 1 150 4 80 2 370 1 415 3 585 1 151 3 550 1 118 7 210 3 187 1 290 1 230 9 340 2 158 1 30 3 427 6 6 2 573 3 176 4 558 4 177 4 610 1 595 4 611 3 17 1 500 2 
175 2 243 3 409 2 360 2 37 2 374 2 71 2 39 2 41 2 405 2 113 2 165 2 516 2 
30 1 366 2 175 2 243 6 409 2 415 1 360 2 179 1 37 2 374 2 71 2 141 2 39 2 41 4 405 2 113 2 165 2 516 2 
366 2 175 2 243 6 409 2 360 4 37 2 374 4 71 2 141 2 39 2 41 4 405 2 113 2 165 4 516 2 
30 1 366 8 175 2 243 10 409 2 415 1 360 8 179 1 37 2 374 8 71 2 141 6 39 2 41 4 405 2 113 2 165 8 516 2 
312 2 488 2 533 1 76 2 498 1 
312 2 76 2 488 2 
312 2 76 2 488 2 
312 2 76 2 488 2 
584 2 
