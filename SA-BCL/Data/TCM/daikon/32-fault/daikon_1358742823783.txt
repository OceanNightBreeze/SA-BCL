#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 292 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V FAILED junit.framework.AssertionFailedError 
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V ERROR utilMDE.Assert$AssertionException (421,457) 135 
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.ArrayIndexOutOfBoundsException 295 471 377 23 244 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR utilMDE.Assert$AssertionException (421,457) 135 513 454 609 599 630 327 164 (203,613) 36 (102,171) (203,613) 289 (102,171) 512 272 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR utilMDE.Assert$AssertionException (421,457) 135 513 454 609 599 630 327 164 (203,613) 36 (102,171) (203,613) 289 (102,171) 512 272 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR utilMDE.Assert$AssertionException (421,457) 135 513 454 609 599 630 327 164 (203,613) 36 (102,171) (203,613) 289 (102,171) 512 272 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR utilMDE.Assert$AssertionException (421,457) 135 513 454 609 599 630 327 164 (203,613) 36 (102,171) (203,613) 289 (102,171) 512 272 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 121 37 389 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 255 329 
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.Error 583 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V ERROR java.lang.NullPointerException 276 453 (39,495) (39,495) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V ERROR java.lang.NullPointerException 276 453 (39,495) (39,495) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V ERROR java.lang.NullPointerException 276 453 (39,495) (39,495) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 413 217 313 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 413 217 313 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 413 217 313 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 413 217 313 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.Invariants:Invariants()V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:new_ppt()V
daikon.Quant:subsetOf([D[F)Z
daikon.diff.Node:Node()V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.MathMDE:sign(I)I
daikon.Quant:setDiff([I[I)[I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.PptTopLevel.CondIterator:hasNext()Z
jtb.JavaParser:jj_ntk()I
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:gte(II)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.MathMDE:pow(II)I
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.OrderedPairIterator:setnext2()V
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.ValueSet:ValueSet(I)V
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.Quant:lt(II)Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eq(FF)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseLT([I)Z
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.Quant:gt(II)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:memberOf(J[J)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Intern:internSubsequence([III)[I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.Quant:noDups([I)Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Options.OptionInfo:argument_required()Z
daikon.VarInfoName:hashCode()I
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.Quant:isReverse([I[I)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1343 | if (x) -> if (!x)
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:ne(II)Z
daikon.inv.Invariant:prob_and(DD)D | CONSTANT | 8716 | 1 -> -1
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.ProglangType:baseIsIntegral()Z
daikon.Quant:subsetOf([J[J)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.MathMDE:gcd_differences([I)I
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:negate(I)I
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.Ppt:Ppt()V
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltwiseGTE([I)Z
utilMDE.LimitedSizeIntSet:add(I)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:lexLTE([I[I)Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:subsetOf([S[S)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object; | ASSIGN | 13889 | = null
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.ProglangType:dimensions()I
daikon.Quant:concat([I[I)[I
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I | OPERATOR | 54584 | != -> <=
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.Quant:slice([III)[I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.PptSlice2:arity()I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.Quant:sameLength([I[I)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.MathMDE:gcd(JJ)J
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseGT([I)Z
utilMDE.ArraysMDE:subarray([III)[I
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.inv.Invariant:logOn()Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
jtb.JavaCharStream:readChar()C
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.Quant:eltsEqualIndex([I)Z
daikon.Quant:subsetOf([I[I)Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String; | ASSIGN | 19813 | = null
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:justified()Z
daikon.Quant:eltwiseLTE([I)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet; | ASSIGN | 2825 | = null
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.JavaCharStream:ReadByte()C
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.PptName:isEnterPoint()Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([B[I)Z
daikon.ProglangType:isScalar()Z
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.ProglangType:isPseudoArray()Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit; | ASSIGN | 3246 | = null
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.MathMDE:modulus([I)[I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName; | ASSIGN | 4767 | = null
utilMDE.Intern:intern([I)[I
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:eltsGT([II)Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.ArraysMDE:min([I)I | CONSTANT | 860 | 0 -> -1
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I | CONSTANT | 51514 | 3 -> 0
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:subsetOf([F[D)Z
daikon.Quant:lexGT([I[I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.test.TestQuant:removeAdjacentDups([I)[I
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:memberOf(F[D)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.Quant:eltsLT([II)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.ProglangType:isIntegral()Z
utilMDE.MathMDE:gcd(II)I
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Quant:eltsGteIndex([I)Z
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:intersection([I[I)[I
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.RootNode:RootNode()V
utilMDE.Intern:intern([J)[J
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Quant:memberOf(S[S)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.Quant:memberOf(F[F)Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.Quant:lte(II)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:subsetOf([D[D)Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.InvariantFormatTester:execute()Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.JavaCharStream:FillBuff()V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.PptSlice1:num_samples()I
daikon.Debug:logOn()Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String; | OPERATOR | 49349 | > -> ==
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptName:isCombinedExitPoint()Z
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 913 | = null
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.VarInfo:relate_var()V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.VarInfoAux:hashCode()I
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:isArray()Z
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.PptSlice1:arity()I
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.Quant:eltsEqual([II)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Assert:assertTrue(Z)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.Quant:eltsNotEqual([II)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double; | ASSIGN | 17372 | = null
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.Quant:eq(DD)Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.ProglangType:format()Ljava.lang.String;
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:baseIsScalar()Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:pairwiseLTE([I[I)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.Quant:eq(II)Z
daikon.diff.InvMap:InvMap()V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.Quant:memberOf(D[F)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.Quant:eltsGTE([II)Z
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:concat([I[I)[I
daikon.inv.Invariant:prob_or(DD)D
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.MathMDE:gcd([I)I
utilMDE.LimitedSizeIntSet:size()I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice0:initInvariantsSeen()V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:memberOf(I[I)Z
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
jtb.JavaCharStream:backup(I)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.Quant:subsetOf([F[F)Z
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
jtb.JavaCharStream:BeginToken()C
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.PptSlice0:arity()I
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:eltwiseEqual([I)Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.Quant:eltsGtIndex([I)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object; | CONDITION | 17506 | if (x) -> if (!x)
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.Quant:setEqual([I[I)Z
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.Intern:numIntArrays()I
daikon.Quant:union([I[I)[I
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.Quant:lexLT([I[I)Z
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.Quant:lexEqual([I[I)Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:eq(JJ)Z
daikon.inv.Invariant:getConfidence()D
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:size()I
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltsLTE([II)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.Quant:pairwiseLT([I[I)Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
442 2 269 2 421 2 457 2 483 2 388 2 402 2 537 4 158 2 
5 2 221 6 451 2 476 2 428 2 184 2 206 2 326 2 201 2 62 6 359 6 
4 2 275 4 361 4 187 2 144 4 337 2 137 2 225 4 552 2 
153 2 103 16 229 4 104 2 365 8 403 2 212 2 404 2 81 4 457 6 421 6 348 6 180 8 235 4 572 2 113 8 383 10 535 12 386 10 38 16 12 10 15 10 447 10 352 26 429 16 558 8 560 30 125 4 20 2 285 6 
181 4 165 6 
136 2 
297 2 103 2 590 2 591 2 60 2 61 2 81 2 383 2 535 2 386 4 38 2 462 2 12 2 633 2 15 2 447 2 352 4 429 2 558 2 323 2 560 6 19 2 285 2 
229 2 103 8 535 5 38 8 12 4 15 4 547 6 318 2 447 4 352 12 305 6 240 4 429 8 560 14 21 4 383 4 116 2 
76 2 520 2 434 2 131 6 211 2 330 2 439 2 550 2 30 4 331 8 110 4 112 62 381 2 88 10 34 14 118 4 335 10 140 4 479 4 141 2 536 2 218 4 146 4 281 2 353 4 185 2 17 2 354 2 123 4 242 4 465 4 97 2 393 4 56 2 149 2 641 2 450 2 247 2 227 2 517 4 
615 2 419 2 136 2 90 2 293 2 392 2 54 2 358 2 127 2 152 2 
292 2 
103 20 249 4 546 8 547 6 595 2 212 2 305 6 81 2 421 4 457 4 569 2 348 4 180 6 529 2 383 16 508 4 386 6 535 12 38 20 12 16 262 4 15 12 447 16 352 32 429 20 240 4 558 12 560 35 57 4 467 4 285 4 21 4 
354 2 331 2 131 2 
554 2 154 2 519 2 74 2 617 2 344 2 338 2 160 2 307 2 406 2 372 10 277 2 532 22 65 2 
317 2 0 4 374 4 75 2 77 1 248 2 175 4 3 1 177 10 549 1 457 32 82 2 378 2 83 4 7 2 87 2 320 2 86 32 382 6 92 2 183 2 93 6 11 2 390 2 263 2 264 1 557 3 96 1 325 2 99 2 466 1 395 2 268 2 561 2 562 2 269 2 398 2 399 2 400 2 106 2 274 2 564 2 565 2 27 2 108 2 570 2 31 1 407 2 409 2 333 2 412 1 575 4 334 16 580 2 279 6 480 2 195 3 197 2 120 3 200 2 122 2 482 16 124 2 587 6 202 3 283 2 485 3 284 2 416 2 418 2 208 2 490 3 128 4 43 1 286 16 346 2 496 2 47 2 421 34 288 2 597 2 501 5 139 3 214 2 425 2 426 3 215 24 142 32 49 1 604 2 605 1 145 2 219 2 53 2 611 2 430 2 432 2 356 2 222 2 223 2 151 6 360 1 58 4 156 2 521 2 616 2 364 6 619 2 618 2 300 2 302 2 301 2 303 2 162 4 438 16 527 24 308 2 621 2 233 3 622 1 63 1 163 3 441 1 530 2 627 2 628 2 166 2 534 1 312 2 66 2 64 2 238 2 443 2 632 6 538 2 446 3 239 2 636 2 70 3 71 2 637 2 173 2 540 2 543 2 642 2 
510 2 
421 2 415 2 
421 2 135 2 16 2 
23 2 230 2 471 2 563 2 525 2 377 2 259 8 551 2 626 2 85 2 33 2 260 2 506 2 579 2 477 2 91 8 371 2 295 2 391 2 638 2 243 8 244 2 
491 2 449 1 545 2 226 2 
340 2 491 2 
331 2 509 2 411 2 190 2 
331 2 509 2 592 2 411 2 306 2 190 2 
331 2 491 2 18 2 235 2 411 2 548 2 
109 2 105 2 
331 2 235 2 411 2 205 2 
369 2 290 2 
69 2 503 2 
42 2 316 2 
98 2 635 2 
98 2 598 2 69 2 
98 2 69 2 161 2 
98 2 299 2 69 2 
98 2 69 2 606 2 
363 6 331 2 29 2 332 6 411 2 52 2 188 2 373 2 
134 2 468 2 
331 2 491 2 235 2 411 2 345 2 548 2 306 2 
585 2 491 2 548 2 
491 2 548 2 246 2 
134 2 130 2 226 2 
491 2 548 2 
448 2 134 2 
460 2 491 2 
134 2 226 2 342 2 
42 2 639 2 226 2 
98 2 484 2 226 2 
369 2 226 2 237 2 
111 2 69 2 226 2 
134 2 576 2 
491 2 40 2 
42 2 94 2 
254 2 98 2 
369 2 234 2 
69 2 157 2 
134 2 245 2 
69 2 339 2 
369 2 582 2 
98 2 610 2 
42 2 95 2 
601 2 134 2 226 2 342 2 
601 2 134 2 624 2 226 2 342 2 
134 2 226 2 194 2 
134 2 531 2 226 2 
350 2 256 2 6 2 542 2 
35 2 375 2 298 2 494 2 143 4 169 2 555 2 351 2 314 2 355 2 267 2 72 2 100 2 574 2 8 2 532 6 469 4 629 2 
440 2 226 2 
47 2 
0 4 175 2 248 2 3 2 177 8 80 2 549 2 178 2 252 4 251 2 457 26 82 2 378 2 257 2 83 2 458 2 7 2 86 4 382 2 553 2 183 2 93 2 387 2 390 2 186 2 99 2 395 2 396 2 268 6 561 2 269 2 399 2 400 2 565 2 27 2 107 4 108 2 32 2 333 2 575 4 334 6 279 4 284 2 418 2 208 2 128 4 594 2 421 26 422 2 500 2 133 2 425 2 142 6 604 2 145 2 222 2 151 6 58 4 616 2 618 2 436 2 302 2 301 2 162 2 621 2 627 2 628 4 64 2 443 2 632 2 538 2 445 2 540 2 541 2 
0 4 174 2 175 2 248 2 3 2 177 8 80 2 549 2 178 2 252 4 251 2 457 26 82 2 378 2 257 2 83 2 7 2 86 4 382 2 553 2 183 2 93 2 387 2 390 2 186 2 99 2 395 2 396 2 268 6 561 2 562 2 269 2 399 2 400 2 565 2 27 2 107 4 108 2 32 2 333 2 575 4 334 6 279 6 282 2 283 2 487 2 284 2 418 2 208 2 128 4 594 2 421 26 422 2 133 2 425 2 142 6 604 2 145 2 222 2 151 6 58 4 616 2 618 2 436 2 302 2 301 2 162 2 621 2 627 2 628 4 64 2 443 2 632 2 538 2 445 2 540 2 543 2 
216 2 
498 2 463 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 8 516 2 221 6 151 4 224 2 613 2 359 6 228 2 102 2 397 2 271 8 616 2 272 2 401 10 472 2 618 2 565 2 366 2 108 2 62 6 191 2 408 2 575 2 278 2 577 2 476 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 207 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 457 6 5 4 421 12 423 2 289 2 504 2 291 2 9 4 427 2 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 8 516 2 221 8 151 4 224 2 22 4 326 2 613 2 359 6 228 2 102 2 397 2 271 8 616 2 272 2 401 10 472 2 618 2 565 2 366 2 108 2 62 8 191 2 575 2 278 2 577 2 476 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 207 2 
102 2 9 4 492 2 168 2 512 2 13 2 272 2 68 2 472 2 428 2 347 4 62 2 514 2 5 2 278 2 589 2 167 2 359 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 4 516 2 221 6 151 4 224 2 326 2 613 2 359 4 228 2 102 2 397 2 271 4 616 2 272 2 401 6 472 2 618 2 565 2 366 2 108 2 62 6 191 2 408 2 575 2 278 2 577 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 207 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 4 516 2 221 6 151 4 224 2 613 2 359 6 228 2 102 2 397 2 271 4 616 2 272 2 401 6 472 2 618 2 565 2 366 2 108 2 62 4 191 2 408 2 575 2 278 2 577 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 451 2 207 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 8 516 2 221 6 151 4 224 2 613 2 359 6 228 2 102 2 397 2 271 4 616 2 272 2 401 6 472 2 618 2 565 2 366 2 108 2 62 6 191 2 408 2 575 2 278 2 577 2 476 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 207 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 8 516 2 221 8 151 4 224 2 613 2 359 8 228 2 102 2 397 2 271 8 616 2 272 2 401 10 472 2 618 2 565 2 366 2 108 2 62 6 191 2 408 2 575 2 278 2 577 2 476 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 451 2 207 2 
0 2 492 2 493 4 343 2 455 2 250 2 347 4 5 4 421 12 457 6 423 2 289 2 291 2 261 2 9 4 512 2 13 4 390 2 14 2 428 4 147 4 514 2 55 8 516 2 221 6 151 4 224 2 613 2 359 6 228 2 102 2 397 2 271 8 616 2 272 2 401 10 472 2 618 2 565 2 366 2 108 2 62 6 191 2 408 2 575 2 278 2 577 2 476 2 236 2 167 2 581 4 443 2 168 2 68 2 538 2 201 2 171 2 640 2 589 2 207 2 
0 4 544 2 454 2 175 2 455 2 250 2 2 2 177 4 80 2 251 2 252 4 5 4 457 20 378 2 258 2 83 2 459 2 7 2 86 2 382 2 261 2 183 2 9 4 93 2 10 4 13 4 390 2 14 2 16 2 186 2 394 2 395 4 268 6 561 2 562 2 269 2 102 2 327 2 397 2 399 2 400 2 272 2 472 2 565 2 27 2 567 2 108 2 405 2 191 2 333 2 575 4 278 2 334 6 577 2 279 6 581 8 36 2 415 2 201 4 584 2 203 2 588 2 589 2 284 2 488 2 418 2 489 2 128 4 492 2 493 4 343 2 347 4 421 32 135 2 599 2 423 2 600 2 289 2 138 2 510 2 142 8 512 2 145 2 513 2 147 6 428 4 609 2 514 2 220 2 55 2 516 2 221 12 151 6 224 2 612 2 613 2 359 8 228 2 58 4 616 2 524 2 618 2 302 2 301 2 366 2 162 2 62 4 368 2 620 4 621 2 309 2 164 2 236 2 64 2 167 2 630 2 168 2 443 2 632 2 68 2 445 2 538 2 171 2 172 2 241 2 640 2 451 4 543 2 
0 4 544 2 454 2 175 4 455 2 250 2 2 2 177 6 80 2 251 2 252 4 5 4 457 20 378 2 258 2 83 4 459 2 7 2 86 2 382 2 261 2 183 2 9 4 93 2 10 4 13 4 390 2 14 2 16 2 186 2 394 2 395 4 268 6 561 2 562 2 269 2 102 2 327 2 397 2 399 2 400 2 272 2 472 2 565 2 27 2 567 2 108 2 405 2 191 2 333 2 575 4 278 2 334 6 577 2 476 4 279 6 581 8 36 2 415 2 201 4 584 2 203 2 588 2 589 2 284 2 488 2 418 2 489 2 128 4 492 2 493 4 343 2 347 4 421 32 135 2 599 2 423 2 600 2 289 2 138 2 510 2 142 8 512 2 145 2 513 2 147 6 428 4 609 2 514 2 220 2 55 6 516 2 221 12 151 6 224 2 612 2 613 2 359 8 228 2 58 4 616 2 524 2 618 2 302 2 301 2 366 2 162 4 62 8 368 2 620 4 621 2 309 2 164 2 236 2 64 2 167 2 630 2 168 2 443 2 632 2 68 2 445 2 538 2 171 2 172 2 241 2 640 2 543 2 
0 4 544 2 454 2 175 4 455 2 250 2 2 2 177 6 80 2 251 2 252 4 5 4 457 20 378 2 258 2 83 4 459 2 7 2 86 2 382 2 183 2 261 2 9 4 93 2 10 4 13 4 390 2 14 2 16 2 186 2 394 2 395 4 268 6 561 2 562 2 269 2 102 2 327 2 397 2 399 2 271 4 400 2 272 2 401 4 472 2 565 2 27 2 567 2 108 2 405 2 191 2 333 2 575 4 278 2 334 6 577 2 476 4 279 6 581 8 36 2 415 2 201 4 584 2 203 2 588 2 589 2 284 2 488 2 418 2 489 2 128 4 492 2 493 4 343 2 347 4 421 32 135 2 599 2 423 2 600 2 289 2 138 2 510 2 142 8 512 2 145 2 513 2 147 6 428 4 609 2 514 2 220 2 55 6 516 2 221 12 151 6 224 2 612 2 613 2 359 8 228 2 58 4 616 2 524 2 618 2 302 2 301 2 366 2 162 4 62 8 368 2 620 4 621 2 309 2 164 2 236 2 64 2 167 2 630 2 168 2 443 2 632 2 68 2 445 2 538 2 171 2 172 2 241 2 640 2 543 2 
0 4 544 2 454 2 175 4 455 2 250 2 2 2 177 6 80 2 251 2 252 6 5 4 457 18 378 2 258 2 83 4 459 2 7 2 86 4 382 4 183 2 261 2 9 4 93 4 10 4 13 4 390 2 14 2 16 2 186 2 394 2 395 2 268 8 561 2 326 2 562 2 269 2 102 2 327 2 397 2 399 2 328 2 271 4 400 2 272 2 401 4 472 2 565 2 27 2 567 2 108 2 405 2 192 2 191 2 333 2 575 4 278 2 334 8 577 2 476 4 279 6 581 8 36 2 336 2 415 2 201 4 584 2 586 2 203 2 588 2 589 2 284 2 488 2 418 2 489 2 128 4 492 2 493 4 343 2 347 4 421 30 135 2 599 2 423 2 600 2 289 2 510 2 142 12 512 2 145 2 513 2 147 6 428 4 609 2 514 2 220 2 55 6 516 2 221 16 151 6 224 2 612 2 613 2 359 10 228 2 155 2 58 4 616 2 524 2 618 2 302 2 301 2 366 2 162 4 62 10 368 2 620 4 621 2 309 2 164 2 236 2 64 2 167 2 630 2 443 2 168 2 632 2 68 2 445 2 538 2 171 2 172 2 640 2 539 2 451 2 543 2 
228 2 397 2 492 2 493 2 271 4 343 2 401 4 472 2 455 2 366 2 347 2 62 6 421 4 5 4 191 2 423 2 577 2 476 2 167 2 261 2 581 2 9 2 168 2 68 2 14 2 147 2 428 4 201 2 514 2 55 6 516 2 221 4 224 2 589 2 359 6 
0 4 455 2 176 2 80 2 252 4 5 4 457 24 378 2 7 2 86 3 382 3 261 2 183 2 9 2 93 3 321 2 11 2 390 2 14 2 324 3 186 2 395 4 268 6 561 2 562 2 269 2 397 2 399 2 400 2 274 2 401 2 472 2 565 2 27 2 108 2 191 2 333 2 575 4 577 2 334 6 476 2 279 6 581 2 201 2 284 2 589 2 418 2 128 4 492 2 493 2 343 2 47 2 347 2 421 28 423 2 138 2 142 8 145 2 147 2 428 4 514 2 55 6 516 2 221 4 151 6 224 2 359 6 228 2 58 4 616 2 618 2 302 2 301 2 366 2 526 2 232 2 62 6 64 2 167 2 168 2 443 2 67 2 68 2 538 2 445 2 241 2 173 2 640 2 543 2 
193 2 455 2 366 2 
193 2 455 2 366 2 
0 4 175 4 78 2 455 6 250 2 177 4 80 2 253 2 178 4 457 16 5 4 378 2 83 4 7 2 86 2 183 2 9 2 10 2 461 2 13 4 390 2 265 4 186 2 395 4 268 2 561 2 326 4 562 2 269 2 102 2 24 2 400 2 271 4 401 6 472 2 565 2 27 2 568 4 108 2 405 2 333 2 193 2 575 4 474 2 334 2 577 2 476 4 279 6 581 4 36 2 201 4 284 2 488 2 418 2 207 2 128 4 492 4 493 2 129 2 347 2 421 24 502 2 423 2 289 2 507 2 142 2 512 2 349 2 145 2 147 4 428 4 515 2 55 6 221 16 357 2 151 6 614 2 296 2 359 12 58 4 616 2 618 2 302 2 301 2 366 4 162 4 62 12 621 4 528 2 623 2 236 4 533 2 64 2 630 2 443 2 168 2 444 2 538 2 445 6 315 2 171 2 241 2 451 4 543 2 
630 2 44 2 349 2 463 2 565 2 437 2 253 2 322 2 457 2 421 4 241 2 486 2 395 2 182 2 278 2 296 2 507 2 
0 4 175 4 78 2 455 6 250 4 79 2 177 4 80 2 178 4 457 16 5 4 378 2 83 4 7 2 86 4 183 2 9 2 10 2 461 2 13 4 390 2 265 4 186 2 395 2 268 2 561 2 326 4 562 2 269 2 102 2 24 2 400 2 271 4 401 6 472 2 565 2 27 2 568 4 108 2 405 2 333 2 193 2 575 4 334 2 577 2 476 4 578 2 279 6 581 4 36 2 201 4 284 2 488 2 418 2 207 2 128 4 492 4 493 2 129 2 45 2 347 2 421 24 502 2 423 2 289 2 291 2 507 2 142 2 511 2 512 2 349 2 145 2 147 4 428 4 55 6 221 16 357 2 151 6 296 2 359 12 58 4 616 2 522 2 618 2 302 2 301 2 366 4 162 4 62 12 621 4 528 2 623 2 236 4 64 2 630 2 443 2 168 2 444 2 538 2 445 6 315 4 171 2 451 4 543 2 
0 4 175 4 78 2 455 6 250 4 177 4 80 2 253 2 178 4 457 16 5 4 378 2 83 4 380 2 84 2 7 2 86 2 183 2 9 2 10 2 461 2 13 4 390 2 265 4 186 2 395 4 268 2 561 2 326 4 562 2 269 2 102 2 24 2 400 2 271 4 401 6 25 2 472 2 565 2 27 2 568 4 108 2 405 2 333 2 193 2 575 4 334 2 577 2 476 4 279 6 581 4 36 2 201 4 284 2 488 2 418 2 207 2 128 4 492 4 493 2 129 2 347 2 421 24 502 2 423 2 289 2 291 2 507 2 142 2 512 2 349 2 145 2 147 4 428 4 431 2 55 6 221 16 357 2 151 6 296 2 359 12 58 4 616 2 618 2 302 2 301 2 366 4 162 4 62 12 621 4 528 2 623 2 236 4 64 2 630 2 443 2 168 2 444 2 538 2 445 6 634 2 315 2 171 2 241 2 451 4 543 2 
0 4 73 2 1 2 376 2 80 2 252 4 319 2 457 18 258 2 459 2 7 2 86 2 382 2 384 2 183 2 93 2 389 2 390 2 556 2 464 2 266 2 559 2 395 2 268 6 561 2 562 1 269 2 470 1 399 2 565 2 108 2 410 2 575 4 334 6 115 2 279 3 37 2 414 2 121 2 584 2 284 2 126 2 418 2 128 2 132 2 497 2 421 24 424 2 294 1 142 8 145 2 50 4 607 2 148 2 220 2 151 6 58 2 616 2 523 2 618 2 302 2 301 2 309 2 64 2 631 2 443 2 538 2 445 2 172 2 543 1 
452 2 399 2 593 2 46 2 304 2 456 2 252 2 251 6 457 2 421 2 179 2 213 2 48 2 311 2 334 2 86 3 382 3 117 4 478 3 93 3 119 1 142 2 51 2 150 2 268 2 
117 4 478 2 452 2 93 2 399 2 142 2 593 2 46 2 51 2 304 2 456 2 251 6 252 2 179 2 421 2 457 2 48 2 213 2 150 2 311 2 334 2 268 2 86 2 382 2 
117 4 478 2 452 2 93 2 399 2 142 2 593 2 46 2 51 2 304 2 456 2 251 6 252 2 179 2 421 2 457 2 48 2 213 2 150 2 311 2 334 2 268 2 86 2 382 2 
103 2 270 2 399 2 362 3 420 2 273 2 28 2 367 3 438 2 421 10 457 4 348 2 180 4 499 2 379 2 571 4 573 4 625 3 311 2 475 2 86 3 114 6 382 3 383 2 602 4 38 2 370 2 12 2 142 2 199 4 15 2 447 2 352 4 429 2 482 2 560 5 41 2 433 2 189 4 209 2 
420 2 212 2 457 4 421 10 348 2 180 4 499 2 379 2 86 2 382 2 383 2 602 4 142 2 12 2 15 2 352 4 429 2 558 2 560 4 433 2 189 4 103 2 270 2 399 2 362 2 273 2 438 2 367 2 28 2 571 4 625 2 573 4 311 2 475 2 114 6 535 2 38 2 370 2 199 4 447 2 482 2 41 2 209 2 
420 2 212 2 457 4 421 10 348 2 180 4 499 2 379 2 86 2 382 2 383 2 602 4 142 2 12 2 15 2 352 4 429 2 558 2 560 4 433 2 189 4 103 2 270 2 399 2 362 2 273 2 438 2 367 2 28 2 571 4 625 2 573 4 311 2 475 2 114 6 535 2 38 2 370 2 199 4 447 2 482 2 41 2 209 2 
420 2 212 2 457 4 421 10 348 2 180 4 499 2 379 2 86 2 382 2 383 2 602 4 142 2 12 2 15 2 352 4 429 2 558 2 560 4 433 2 189 4 103 2 270 2 399 2 362 2 273 2 438 2 367 2 28 2 571 4 625 2 573 4 311 2 475 2 114 6 535 2 38 2 370 2 199 4 447 2 482 2 41 2 209 2 
420 2 212 4 457 4 421 10 348 2 180 4 499 2 379 2 86 2 382 2 383 2 602 4 142 2 12 2 15 2 352 4 429 2 558 4 560 4 433 2 189 4 103 2 270 2 399 2 362 2 273 2 438 2 367 2 28 2 571 4 625 2 573 4 311 2 475 2 114 6 535 4 38 2 370 2 199 4 447 2 482 2 41 2 209 2 
518 2 422 2 603 2 310 2 435 2 170 2 481 2 
310 2 26 2 231 2 59 2 505 2 89 2 
255 2 329 2 210 2 
103 2 38 2 12 2 15 2 159 2 447 2 583 2 352 4 596 2 429 2 305 4 560 5 473 2 101 2 21 2 383 2 
385 5 280 2 453 2 495 2 199 2 566 1 39 2 421 1 457 1 276 4 571 2 189 2 
385 2 453 2 280 2 276 4 571 2 199 2 495 2 189 2 39 2 
385 2 453 2 280 2 276 4 571 2 199 2 495 2 189 2 39 2 
385 2 280 2 453 2 196 2 495 2 199 2 39 2 287 2 341 2 276 2 571 2 417 2 189 2 
217 2 313 2 198 1 413 2 204 1 
313 2 217 2 413 2 
313 2 217 2 413 2 
313 2 217 2 413 2 
608 2 
