#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_subsetOf_different_types()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.diff.XorVisitorTester:testXor()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 119 93 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.StringIndexOutOfBoundsException 176 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR utilMDE.Assert$AssertionException (110,148) (110,148) 3 201 
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.Error 68 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 355 6 349 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 355 6 349 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 355 6 349 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 355 6 349 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.VarComparabilityImplicit:alwaysComparable()Z
jtb.JavaCharStream:getEndLine()I
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:sum([I)I
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.Invariant:prob_and(DD)D
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.ArraysMDE:sorted([I)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Quant:eltsNotEqual([II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:lexGT([I[I)Z
utilMDE.Intern:numIntArrays()I
daikon.Quant:gt(II)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:sameLength([I[I)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
jtb.JavaParser:jj_ntk()I
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.Quant:eltsLteIndex([I)Z
utilMDE.ArraysMDE:noDuplicates([J)Z | ASSIGN | 58337 | = null
daikon.Quant:pairwiseEqual([I[I)Z
jtb.JavaCharStream:getBeginLine()I
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 2268 | = null
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:eltsGteIndex([I)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsGT([II)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.ProglangType:dimensions()I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object; | CONSTANT | 17524 | 1 -> -1
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.Quant:memberOf(I[I)Z
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:eltwiseGTE([I)Z
utilMDE.LimitedSizeIntSet:size()I
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.ArraysMDE:max([I)I
daikon.Quant:eq(JJ)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
jtb.ParseException:getMessage()Ljava.lang.String;
jtb.JavaCharStream:getBeginColumn()I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfoName:hashCode()I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:subarray([JII)[J
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.Quant:subsetOf([B[I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:subsetOf([S[S)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
utilMDE.FuzzyFloat:lt(DD)Z
jtb.JavaParser:jj_2_16(I)Z
utilMDE.Intern:intern([D)[D
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.WeakHasherMap:size()I
daikon.Quant:slice([III)[I
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V | CONSTANT | 11643 | 0 -> -1
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.Quant:subsetOf([I[I)Z
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.ProglangType:format()Ljava.lang.String;
daikon.Quant:eltwiseLTE([I)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:concat([I[I)[I
daikon.Quant:lexEqual([I[I)Z
daikon.Quant:eltsLT([II)Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:subsetOf([J[J)Z
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.Quant:pairwiseGT([I[I)Z
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:setDiff([I[I)[I
daikon.inv.Invariant:prob_or(DD)D
utilMDE.Assert:assertTrue(Z)V
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
utilMDE.MathMDE:gcd(JJ)J
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.MathMDE:pow(II)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.Ppt:Ppt()V
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.PptSlice0:arity()I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.MathMDE:negate(I)I
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.test.InvariantFormatTester:execute()Z | CONSTANT | 5806 | 1 -> 0
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
utilMDE.WeakHasherMap:processQueue()V
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:sum([[D)D
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ModBitTracker:ModBitTracker(I)V | OPERATOR | 2283 | >= -> ==
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:noDuplicates([I)Z
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
jtb.JavaCharStream:FillBuff()V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z | OPERATOR | 157882 | < -> >
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.Quant:lte(II)Z
daikon.Quant:ne(II)Z
utilMDE.OrderedPairIterator:setnext2()V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.Intern:intern([I)[I
jtb.ParseException:ParseException(Ljava.lang.String;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.Quant:lt(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.Quant:eq(II)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.Quant:eltwiseGT([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
jtb.JavaParser:jj_3_16()Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.MathMDE:gcd(II)I | CONDITION | 4310 | if (x) -> if (!x)
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quant:eltwiseLT([I)Z
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.MathMDE:sign(I)I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.Quant:eltwiseEqual([I)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.ArraysMDE:concat([I[I)[I
jtb.JavaCharStream:getEndColumn()I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.Quant:memberOf(J[J)Z
utilMDE.OrderedPairIterator:hasNext()Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | CONSTANT | 64756 | 0 -> -1
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.inv.Invariants:Invariants()V
daikon.Quant:gte(II)Z
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:internSubsequence([III)[I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.LimitedSizeIntSet:add(I)V
jtb.JavaCharStream:ReadByte()C
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Quant:intersection([I[I)[I
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.Quant:setEqual([I[I)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.Quant:union([I[I)[I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:bitwiseComplement(I)I
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:eltsLTE([II)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Quant:eltsLtIndex([I)Z
jtb.JavaCharStream:readChar()C
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE:sum([[I)I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaParser:jj_scan_token(I)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.ArraysMDE:min([I)I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.ArraysMDE:element_range([I)I
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.VarInfoName:name()Ljava.lang.String;
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.Intern:intern([J)[J
daikon.Quant:memberOf(S[S)Z
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
jtb.JavaCharStream:BeginToken()C
daikon.Quant:pairwiseBitwiseSubset([I[I)Z | STATEMENT | 149930 | stmt -> ;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Quant:eltsGtIndex([I)Z
daikon.Quant:eltsEqual([II)Z
daikon.Quant:eltsGTE([II)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.Quant:lexLT([I[I)Z
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.Quant:isReverse([I[I)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:noDups([I)Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.Token:newToken(I)Ljtb.Token;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
110 2 240 2 161 2 76 4 274 2 148 2 95 2 237 2 202 2 
29 2 258 2 286 6 113 6 188 2 290 2 273 2 265 2 208 6 127 2 294 2 
12 2 148 2 283 2 15 2 287 6 64 6 137 6 203 4 110 2 205 2 7 2 220 4 225 6 
330 2 213 6 281 10 39 4 0 8 148 6 191 29 84 4 97 2 262 2 173 16 339 2 126 10 178 10 101 10 180 8 226 8 46 16 228 8 271 2 346 13 53 16 249 10 112 4 110 6 187 2 141 26 92 2 91 4 328 6 
16 6 317 4 
185 2 
256 2 59 2 311 2 196 2 312 2 240 2 8 2 43 2 198 2 342 2 181 2 131 2 319 2 13 2 200 2 49 2 347 2 183 2 323 2 78 2 276 2 92 2 37 4 
330 2 213 4 281 16 1 8 282 6 148 4 261 6 40 6 172 4 191 54 193 2 96 6 173 32 195 2 341 2 126 16 178 16 101 16 226 6 46 32 107 4 228 18 296 4 346 22 247 4 300 2 53 32 184 4 301 2 249 6 250 4 138 2 112 2 110 4 353 6 56 6 141 48 328 4 57 4 
108 2 164 2 311 2 
38 2 105 2 30 10 47 2 150 2 248 2 85 22 153 2 219 2 140 2 125 2 277 2 102 2 70 2 
213 2 281 2 191 6 190 2 83 2 173 2 175 2 86 2 126 2 178 2 101 2 27 2 46 2 228 2 346 2 33 2 229 2 53 2 249 4 112 2 186 2 115 2 141 4 
46 8 281 4 296 4 320 2 346 4 53 8 191 16 84 2 96 6 173 8 56 6 141 12 126 4 178 4 101 4 143 2 57 4 
154 2 302 2 156 2 243 2 165 2 238 2 
280 2 169 2 259 2 215 2 285 2 124 2 31 2 159 2 185 2 254 2 
168 2 170 5 119 2 2 2 179 2 224 1 268 2 88 4 89 2 321 2 93 2 60 2 235 2 94 2 148 8 189 2 151 4 194 2 66 2 295 2 298 2 158 4 160 2 110 8 351 2 77 2 117 1 
110 2 260 2 
110 4 10 2 149 2 
147 2 
167 6 80 2 257 2 214 2 81 2 120 2 82 6 217 2 5 6 177 2 123 2 313 6 266 6 314 2 223 2 267 4 44 2 316 4 227 2 45 2 318 6 14 2 182 4 51 6 17 2 90 6 275 30 233 2 279 2 21 6 331 2 332 2 333 6 236 30 61 4 335 2 62 4 284 6 288 2 24 2 197 6 99 6 291 2 199 2 106 2 71 2 157 4 299 2 34 2 73 4 251 2 303 2 354 6 253 6 309 30 166 4 118 2 
162 1 32 2 41 2 218 2 
222 2 218 2 
58 2 324 2 311 2 72 2 91 2 278 2 218 2 
289 2 72 2 218 2 
121 2 72 2 218 2 
207 2 32 2 348 2 
72 2 218 2 
207 2 337 2 
20 2 218 2 
207 2 32 2 50 2 
145 2 32 2 269 2 
28 2 35 2 32 2 
144 2 206 2 32 2 
32 2 209 2 216 2 
246 2 207 2 
327 2 218 2 
241 2 269 2 
28 2 129 2 
206 2 230 2 
75 2 216 2 
207 2 9 2 
216 2 55 2 
206 2 336 2 
28 2 48 2 
308 2 269 2 
133 2 207 2 32 2 50 2 
133 2 207 2 32 2 50 2 242 2 
352 2 207 2 32 2 
207 2 32 2 192 2 
54 2 343 2 11 2 36 2 
58 2 132 2 252 2 311 2 
58 2 324 2 132 2 297 2 252 2 311 2 
58 2 146 2 311 2 72 2 91 2 218 2 
196 2 350 2 
58 2 311 2 91 2 116 2 
206 2 63 2 
338 2 216 2 
134 2 269 2 
28 2 306 2 
28 2 344 2 216 2 
87 2 28 2 216 2 
28 2 26 2 216 2 
28 2 216 2 211 2 
58 2 311 2 98 2 155 2 345 6 18 6 305 2 255 2 
334 2 207 2 
204 2 139 4 264 2 100 2 315 2 103 2 79 2 329 2 
32 2 244 2 
19 2 
168 2 60 2 170 4 235 2 119 2 94 2 148 8 189 2 151 4 194 2 66 2 174 2 179 2 268 2 295 2 88 4 298 2 89 2 321 2 158 4 160 2 110 8 351 2 77 2 93 2 
168 2 170 6 119 2 174 2 179 2 224 2 268 2 88 4 89 2 321 2 93 2 60 2 235 2 94 2 148 8 189 2 151 4 194 2 66 2 295 2 298 2 158 4 160 2 110 8 351 2 77 2 117 2 
168 2 170 5 119 2 174 2 179 2 224 1 268 2 88 4 89 2 321 2 93 2 60 2 235 2 94 2 148 8 189 2 151 4 194 2 66 2 295 2 298 2 158 4 160 2 110 8 351 2 77 2 117 1 
168 2 170 6 119 2 174 2 179 2 224 2 268 2 88 4 89 2 321 2 93 2 60 2 235 2 94 2 148 8 189 2 151 4 194 2 66 2 295 2 298 2 158 4 160 2 110 8 351 2 77 2 117 2 
168 2 170 5 119 2 174 2 179 2 224 1 268 2 88 4 89 2 321 2 93 2 60 2 235 2 94 2 148 8 189 2 151 4 66 2 194 2 295 2 298 2 158 4 160 2 110 8 351 2 77 2 117 1 
176 2 
152 2 25 2 22 2 310 2 42 2 239 2 
263 2 340 2 221 2 292 2 231 2 65 2 239 2 
110 2 148 2 77 2 201 2 135 2 307 2 3 2 194 2 
46 2 281 2 296 2 171 2 136 2 53 2 191 5 96 4 173 2 126 2 141 4 128 2 178 2 68 2 101 2 69 2 
245 2 148 1 23 2 122 2 322 2 4 2 110 1 111 2 74 2 272 2 232 2 304 1 67 2 114 2 163 2 293 4 210 2 234 7 
245 4 23 4 122 2 322 2 4 4 111 2 74 2 272 2 232 2 67 2 114 2 163 2 293 4 210 2 234 6 
245 8 148 1 23 8 122 2 322 2 4 8 110 1 111 2 74 2 272 2 232 8 304 1 67 2 114 2 163 6 293 4 210 2 234 10 
245 2 23 2 122 2 322 2 4 2 111 2 74 2 272 2 67 2 114 2 293 2 210 2 234 2 
170 3 6 2 224 1 88 2 89 2 52 2 325 2 326 2 60 2 94 2 148 6 151 2 104 2 109 1 349 2 110 6 355 2 117 1 212 1 
60 2 88 2 170 2 89 2 94 2 148 6 52 2 151 2 349 2 110 6 6 2 325 2 142 2 355 2 104 2 
270 2 60 2 88 2 170 3 89 2 94 2 148 6 52 2 151 2 349 2 110 6 6 2 325 2 224 1 355 2 117 1 104 2 
270 2 60 2 88 2 170 4 89 2 94 2 148 6 52 2 151 2 349 2 110 6 6 2 325 2 224 2 355 2 117 2 
130 2 
