#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V ERROR java.lang.NullPointerException 485 
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR utilMDE.Assert$AssertionException (39,480) (39,480) (47,303,358,416,508) (47,303,358,416,508) (47,303,358,416,508) 
daikon.test.inv.InvariantTester:test_prob_is_ge()V FAILED junit.framework.AssertionFailedError 
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.ArrayIndexOutOfBoundsException 76 91 604 12 660 590 331 420 178 665 327 219 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V FAILED junit.framework.AssertionFailedError (110,518) 372 
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V ERROR java.lang.IllegalArgumentException (300,663) (300,663) 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V ERROR java.lang.NullPointerException (595,666) (341,478) (341,478) 
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR utilMDE.Assert$AssertionException (39,480) (432,611) 403 281 34 321 387 330 633 (412,630) 356 (433,472) (412,630) 99 (433,472) 482 677 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR utilMDE.Assert$AssertionException (39,480) (432,611) 403 281 34 321 387 330 633 (412,630) 356 (433,472) (412,630) 99 (433,472) 482 677 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR utilMDE.Assert$AssertionException (39,480) (432,611) 403 281 34 321 387 330 633 (412,630) 356 (433,472) (412,630) 99 (433,472) 482 677 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR utilMDE.Assert$AssertionException (39,480) (432,611) 403 281 34 321 387 330 633 (412,630) 356 (433,472) (412,630) 99 (433,472) 482 677 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NullPointerException 57 (595,666) 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException 57 (595,666) (595,666) 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException 57 (595,666) 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 414 208 455 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 42 626 83 35 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 328 533 229 526 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 533 229 526 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 328 533 229 526 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 328 533 229 526 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:lt(DD)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.ArraysMDE:subarray([JII)[J
daikon.Quant:union([I[I)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quant:subsetOf([B[I)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.ArraysMDE:element_range([I)I
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:sum([[I)I
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.MathMDE:gcd(II)I
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.VarInfo:new_ppt()V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
utilMDE.Intern:intern([I)[I
utilMDE.Assert:assertTrue(Z)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ValueTuple:size()I
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:intersection([I[I)[I
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.Quant:lexEqual([I[I)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.Quant:concat([I[I)[I
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType; | STATEMENT | 24560 | stmt -> ;
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.ValueTuple:tuplemodHasModified(I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.SimpleLog.LongVal:LongVal(J)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I | CONDITION | 50578 | if (x) -> if (!x)
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:eq(DD)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | ASSIGN | 1057 | = null
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
utilMDE.LimitedSizeIntSet:size()I
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.Quant:noDups([I)Z
daikon.Quant:memberOf(D[F)Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsEqual([II)Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:eltwiseLT([I)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.Quant:eltsNotEqual([II)Z
daikon.VarInfoName.ElementsFinder:inPre()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.Quant:subsetOf([J[J)Z
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfo:relate_var()V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.Quant:setDiff([I[I)[I
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.MathMDE:gcd([I)I
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:min([I)I
daikon.Quant:eltsGTE([II)Z
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:memberOf(F[F)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarInfoAux:hashCode()I
daikon.Ppt:Ppt()V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaCharStream:BeginToken()C
jtb.JavaCharStream:FillBuff()V
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.Quant:eltsLT([II)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.Quant:lexGT([I[I)Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
jtb.JavaCharStream:readChar()C
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eq(II)Z
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.Quant:subsetOf([F[F)Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.WeakHasherMap:processQueue()V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.Debug:logOn()Z
daikon.Quant:eq(JJ)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.VarInfoName:hashCode()I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltwiseGT([I)Z
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:prob_is_ge(DD)D | CONSTANT | 6853 | 1 -> -1
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.ProglangType:baseIsScalar()Z
daikon.Quant:subsetOf([I[I)Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.WeakIdentityHashMap:indexFor(II)I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:lexGTE([I[I)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eq(FF)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:eltwiseLTE([I)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:memberOf(J[J)Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.Quant:gt(II)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair; | RETURN | 2847 | return null
daikon.PptSlice0:arity()I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.ArraysMDE:max([I)I
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.ArraysMDE:sum([I)I
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
jtb.Token:newToken(I)Ljtb.Token;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.Intern:internSubsequence([III)[I
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.PptName:isCombinedExitPoint()Z
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:InvMap()V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
utilMDE.MathMDE:pow_fast(II)I
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
jtb.JavaParser:jj_ntk()I
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName; | ASSIGN | 63682 | = null
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
utilMDE.Intern:intern([J)[J
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
jtb.JavaCharStream:getEndLine()I
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object; | ASSIGN | 13889 | = null
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:gte(II)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.ProglangType:isArray()Z
utilMDE.ArraysMDE:sum([D)D
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:sameLength([I[I)Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V | ASSIGN | 5075 | = null
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([D[F)Z
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.MathMDE:negate(I)I
daikon.PptSlice2:arity()I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.Quant:lt(II)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.Quant:memberOf(S[S)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.Invariant:getConfidence()D
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.PptSlice1:arity()I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
jtb.JavaCharStream:getEndColumn()I
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.ProglangType:isIntegral()Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaCharStream:getBeginLine()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1382 | if (x) -> if (!x)
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.Invariant:justified()Z
daikon.inv.Invariant:prob_and(DD)D
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:fn_identity(I)[I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.test.InvariantFormatTester:execute()Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Node:Node()V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.Invariant:logOn()Z
daikon.Quant:ne(II)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.Quant:slice([III)[I | RETURN | 160908 | return null
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.WeakHasherMap:size()I
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.Quant:eltwiseGTE([I)Z
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel; | RETURN | 571 | return null
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.Quant:eltsLtIndex([I)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.MathMDE:pow(II)I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
jtb.JavaCharStream:ReadByte()C
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 98882 | return null
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.test.TestQuant:removeAdjacentDups([I)[I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.ProglangType:isPseudoArray()Z
daikon.Quant:memberOf(F[D)Z
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 6369 | = null
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:pairwiseLT([I[I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.PptName:isEnterPoint()Z
daikon.Quant:pairwiseGT([I[I)Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.ProglangType:isScalar()Z
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Intern:intern([D)[D
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE:gcd(JJ)J
jtb.JavaCharStream:getBeginColumn()I
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.Invariants:Invariants()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.Quant:eltwiseEqual([I)Z
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.Quant:eltsGT([II)Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I | RETURN | 12820 | return null
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.MathMDE:modulus([I)[I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.Quant:lexLT([I[I)Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:subsetOf([D[D)Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:lexLTE([I[I)Z
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.Quant:eltsGtIndex([I)Z
daikon.Quant:memberOf(I[I)Z
daikon.Quant:lte(II)Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:sorted([I)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.Quant:subsetOf([F[D)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:eltsLTE([II)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.PptSlice1:num_samples()I
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String; | CONDITION | 281963 | if (x) -> if (!x)
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.diff.RootNode:RootNode()V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.ProglangType:dimensions()I
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.Quant:subsetOf([S[S)Z
utilMDE.Intern:numIntArrays()I
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.Quant:setEqual([I[I)Z
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
628 2 78 2 85 4 39 2 72 2 615 2 480 2 519 2 170 2 
638 4 485 2 334 2 622 2 659 4 124 6 73 2 571 2 490 2 276 2 
172 2 288 4 566 4 116 4 344 2 218 4 343 2 106 2 579 2 
559 2 394 2 38 6 80 16 270 8 39 6 272 2 585 26 631 8 177 10 6 2 491 4 333 6 496 10 543 10 295 2 525 4 646 8 185 4 28 2 162 12 480 6 51 10 555 16 263 16 96 29 623 4 188 8 389 10 128 2 
453 6 139 4 
679 2 
209 2 39 4 518 2 370 2 249 2 251 2 133 2 294 2 428 2 430 4 140 2 93 2 480 4 436 2 435 2 302 2 484 2 305 4 393 2 20 2 350 2 22 2 355 2 23 2 233 2 632 2 452 2 587 2 360 2 110 2 62 2 27 4 318 2 411 2 279 2 647 2 200 2 163 2 599 4 120 2 33 2 72 2 284 2 128 2 
394 2 606 6 146 6 38 4 174 6 670 4 80 32 270 6 39 4 540 6 585 48 177 16 371 4 310 2 150 2 333 4 496 16 43 6 543 16 456 4 256 2 434 4 457 2 184 4 185 2 646 18 480 4 162 22 164 4 119 6 201 2 510 8 554 4 51 6 555 32 263 32 96 54 389 16 392 2 
306 2 518 2 65 2 
536 2 191 2 583 10 4 2 29 2 196 2 637 2 110 2 9 22 466 2 45 2 483 2 100 2 345 2 
269 2 486 2 38 2 80 2 517 2 585 4 177 2 427 2 496 2 543 2 675 2 255 2 503 2 185 2 646 2 162 2 51 4 263 2 555 2 96 6 243 2 389 2 682 2 
525 2 434 4 606 6 146 6 80 8 585 12 162 4 177 4 164 4 601 2 263 8 555 8 96 16 496 4 543 4 498 2 389 4 
20 2 349 2 306 2 368 2 395 58 21 2 446 2 214 2 610 6 518 8 24 10 332 2 591 4 592 4 408 2 65 6 617 4 296 2 317 2 257 2 220 4 114 2 505 2 160 2 226 4 599 2 648 10 227 2 600 2 72 2 125 2 534 4 467 2 441 4 442 2 
68 2 88 2 382 2 324 2 679 2 612 2 493 2 169 2 377 2 75 2 
37 2 171 2 369 2 469 2 564 2 82 4 210 2 39 20 5 2 213 2 423 2 180 2 570 4 378 2 182 2 183 4 92 6 480 22 437 2 145 6 97 2 303 2 190 2 668 2 195 2 358 2 499 2 112 2 504 2 277 2 550 2 551 2 159 2 364 2 280 2 508 2 413 2 415 2 512 4 556 2 513 2 170 2 36 2 
202 2 
480 4 432 2 611 2 
569 2 
327 2 194 2 562 2 289 2 103 2 629 2 331 2 656 2 542 2 178 2 274 20 252 2 374 2 590 2 293 2 660 2 151 2 521 2 152 2 409 2 219 2 12 2 593 2 506 2 507 20 91 2 299 2 340 2 165 20 32 2 649 2 665 2 265 2 440 2 76 2 604 2 419 2 420 2 
168 2 176 1 357 2 678 2 
168 2 52 2 
520 2 620 2 168 2 48 2 518 2 372 2 491 2 
620 2 168 2 683 2 
620 2 168 2 206 2 
361 2 471 2 357 2 
620 2 168 2 
471 2 95 2 
168 2 104 2 
471 2 260 2 357 2 
541 2 357 2 347 2 
658 2 273 2 357 2 
547 2 621 2 357 2 
375 2 417 2 357 2 
574 2 471 2 
168 2 474 2 
347 2 101 2 
273 2 250 2 
199 2 621 2 
375 2 488 2 
471 2 311 2 
375 2 511 2 
619 2 621 2 
422 2 273 2 
502 2 347 2 
471 2 260 2 50 2 357 2 
471 2 459 2 260 2 50 2 357 2 
297 2 471 2 357 2 
636 2 471 2 357 2 
363 2 479 2 285 2 603 2 
90 2 173 2 79 4 539 2 607 2 528 2 142 2 107 4 366 2 438 2 264 2 640 2 9 6 674 2 10 2 245 2 181 2 381 2 
307 2 357 2 
53 2 586 2 518 2 372 2 
53 2 520 2 586 2 518 2 7 2 372 2 
620 2 168 2 115 2 518 2 372 2 491 2 
89 2 233 2 
72 2 476 2 518 2 372 2 
578 2 621 2 
375 2 134 2 
158 2 347 2 
655 2 273 2 
602 2 375 2 273 2 
375 2 614 2 273 2 
375 2 161 2 273 2 
375 2 221 2 273 2 
147 2 518 2 372 2 44 6 663 2 300 2 283 2 386 2 
262 2 471 2 
668 2 
247 2 82 4 5 2 613 2 180 2 335 2 87 2 182 2 183 4 92 4 529 3 261 2 437 2 532 2 538 2 195 2 353 2 447 2 451 4 362 3 645 2 548 2 112 2 277 2 551 6 550 2 364 2 460 2 117 2 280 2 463 2 204 2 465 8 367 2 36 2 558 2 37 2 469 6 287 2 564 2 39 26 210 2 41 2 213 2 570 4 378 2 572 2 662 3 477 2 141 2 480 26 383 2 664 2 384 4 145 6 481 2 401 2 60 2 499 2 236 2 237 2 500 5 238 2 67 4 676 2 504 2 157 2 159 2 509 2 413 6 415 2 512 4 513 2 170 2 
171 2 247 2 82 4 5 2 613 2 180 2 335 2 87 2 182 2 183 4 92 6 529 2 261 2 437 2 187 2 532 2 538 2 195 2 353 2 451 4 362 2 645 2 112 2 277 2 551 6 550 2 364 2 460 2 117 2 280 2 463 2 204 2 465 8 367 2 556 2 36 2 558 2 37 2 469 6 287 2 564 2 39 26 210 2 41 2 213 2 570 4 378 2 662 2 477 2 141 2 480 26 383 2 664 2 384 4 145 6 481 2 400 2 401 2 60 2 499 2 405 2 236 2 237 2 63 2 500 4 238 2 67 4 676 2 504 2 157 2 159 2 509 2 413 6 415 2 512 4 513 2 170 2 
166 2 
215 2 605 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 6 570 2 571 4 661 2 433 2 573 8 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 57 2 359 10 638 6 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 8 461 4 282 2 203 2 124 6 415 2 73 2 513 2 
669 2 449 2 653 2 57 2 234 2 473 2 359 8 425 4 253 2 638 4 216 2 495 2 659 6 571 4 661 2 11 2 276 2 573 8 154 2 501 2 136 2 315 2 478 2 258 2 298 2 480 4 598 8 461 2 15 2 203 2 622 4 666 2 228 2 124 6 341 2 73 2 625 2 
315 2 478 2 669 4 677 2 461 4 472 2 622 2 666 2 495 2 216 2 124 2 659 2 341 2 581 2 482 2 571 2 661 2 391 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 6 570 2 571 4 661 2 433 2 573 4 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 16 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 57 2 359 6 638 6 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 4 461 4 282 2 203 2 124 4 415 2 513 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 4 570 2 571 4 661 2 433 2 573 4 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 490 2 57 2 359 4 638 6 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 4 461 4 282 2 203 2 124 6 415 2 513 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 6 570 2 571 4 661 2 433 2 573 4 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 57 2 359 6 638 6 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 8 461 4 282 2 203 2 124 6 415 2 73 2 513 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 6 570 2 571 4 661 2 433 2 573 8 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 490 2 57 2 359 10 638 8 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 8 461 4 282 2 203 2 124 8 415 2 73 2 513 2 
326 2 37 2 564 2 82 2 39 6 653 2 472 2 473 2 253 4 216 2 659 6 570 2 571 4 661 2 433 2 573 8 11 4 182 2 478 2 258 2 480 12 298 4 145 4 15 2 666 2 622 4 228 2 341 2 581 4 482 2 625 2 99 2 391 2 669 4 630 2 449 2 308 2 489 2 57 2 359 10 638 6 642 2 495 2 546 2 154 2 276 2 501 2 315 2 277 2 159 2 677 2 598 8 461 4 282 2 203 2 124 6 415 2 73 2 513 2 
326 2 171 2 247 2 3 2 82 4 5 2 330 2 608 2 423 2 426 2 180 4 613 2 253 4 432 2 433 2 87 2 11 8 182 2 183 4 337 2 258 2 92 6 13 2 529 2 437 2 531 2 15 2 622 4 341 2 625 2 99 2 348 2 195 2 630 2 449 2 356 2 451 4 633 2 108 2 638 12 642 2 26 2 546 2 362 2 276 4 112 2 277 2 550 2 551 6 364 2 118 2 461 4 280 2 281 2 202 2 34 2 204 2 464 2 203 2 124 8 465 4 556 2 36 2 558 2 560 2 37 2 287 2 469 8 39 20 210 2 564 2 470 2 653 2 213 2 657 2 472 2 473 2 569 2 216 2 659 4 570 4 378 2 571 4 661 2 46 2 478 2 225 4 298 6 480 32 145 6 666 2 228 2 387 2 581 4 482 2 391 2 390 2 54 2 669 4 55 2 490 4 57 2 401 2 589 2 495 2 403 2 499 2 237 2 500 2 312 4 154 2 501 2 315 2 676 2 504 2 321 2 159 2 412 2 677 2 598 2 241 2 509 2 167 2 413 6 415 2 512 4 513 2 170 2 
326 2 171 2 247 2 3 2 82 4 5 2 330 2 608 2 423 2 426 2 180 4 613 2 253 4 432 2 433 2 87 4 11 8 182 2 183 4 337 2 258 2 92 6 13 2 529 2 437 2 531 2 15 2 622 4 341 2 625 2 99 2 348 2 195 2 630 2 449 2 356 2 451 4 633 2 108 2 638 12 642 2 26 2 546 2 362 2 276 4 112 2 277 2 550 2 551 6 364 2 118 2 461 4 280 2 281 2 202 2 34 2 204 2 464 2 203 2 124 8 465 6 556 2 36 2 558 4 560 2 37 2 287 2 469 8 39 20 210 2 564 2 470 2 653 2 213 2 657 2 472 2 473 2 569 2 216 2 659 8 570 4 378 2 571 4 661 2 46 2 478 2 225 4 298 6 480 32 145 6 666 2 228 2 387 2 581 4 482 2 391 2 390 2 54 2 669 4 55 2 57 2 401 2 589 2 495 2 403 2 499 2 237 4 500 2 312 4 154 2 501 2 315 2 676 2 504 2 321 2 159 2 412 2 677 2 598 6 241 2 509 2 167 2 413 6 415 2 512 4 73 4 513 2 170 2 
326 2 171 2 247 2 3 2 82 4 5 2 330 2 608 2 423 2 426 2 180 4 613 2 253 4 432 2 433 2 87 4 11 8 182 2 183 4 337 2 258 2 92 6 13 2 529 2 437 2 531 2 15 2 622 4 341 2 625 2 99 2 348 2 195 2 630 2 449 2 356 2 451 4 633 2 108 2 359 4 638 12 642 2 26 2 546 2 362 2 276 4 112 2 277 2 550 2 551 6 364 2 118 2 461 4 280 2 281 2 202 2 34 2 204 2 464 2 203 2 124 8 465 6 556 2 36 2 558 4 560 2 37 2 287 2 469 8 39 20 210 2 564 2 470 2 653 2 213 2 657 2 472 2 473 2 569 2 216 2 659 8 570 4 378 2 571 4 661 2 573 4 46 2 478 2 225 4 298 6 480 32 145 6 666 2 228 2 387 2 581 4 482 2 391 2 390 2 54 2 669 4 55 2 57 2 401 2 589 2 495 2 403 2 499 2 237 4 500 2 312 4 154 2 501 2 315 2 676 2 504 2 321 2 159 2 412 2 677 2 598 6 241 2 509 2 167 2 413 6 415 2 512 4 73 4 513 2 170 2 
326 2 171 2 247 2 3 2 82 4 5 2 330 2 608 2 423 2 426 2 180 2 253 4 613 2 432 2 433 2 87 4 11 8 182 2 183 4 337 2 258 2 92 6 529 4 437 2 531 2 15 2 622 4 16 2 341 2 625 2 99 2 348 2 195 2 630 2 449 2 356 2 451 6 633 2 108 2 359 4 638 16 642 2 25 2 26 2 546 2 362 4 276 4 112 2 277 2 550 2 551 8 364 2 118 2 461 4 280 2 281 2 202 2 34 2 204 2 464 2 203 2 124 10 465 6 556 2 126 2 36 2 558 4 560 2 37 2 287 2 469 12 39 18 210 2 564 2 653 2 213 2 132 2 657 2 472 2 473 2 569 2 216 2 659 10 570 4 378 2 571 4 661 2 573 4 46 2 478 2 225 4 298 6 480 30 145 6 666 2 228 2 387 2 581 4 482 2 391 2 390 2 54 2 669 4 55 2 490 2 57 2 401 2 59 2 589 2 494 2 495 2 403 2 499 2 237 4 500 4 313 2 312 4 154 2 501 2 315 2 676 2 504 2 321 2 159 2 412 2 677 2 598 6 241 2 509 2 167 2 413 8 415 2 512 4 73 4 513 2 170 2 
669 2 449 2 653 2 57 2 473 2 359 4 253 2 638 4 495 2 216 2 659 6 571 4 546 2 661 2 11 2 573 4 276 2 154 2 501 2 315 2 478 2 258 2 298 2 480 4 598 6 461 2 15 2 203 2 666 2 622 4 228 2 124 6 341 2 73 2 625 2 
326 2 171 2 82 4 5 2 253 2 613 2 180 4 11 2 182 2 183 4 258 2 92 6 13 2 529 3 437 2 15 2 622 4 98 2 341 2 625 2 195 2 352 2 449 2 450 2 451 4 359 2 638 4 546 2 276 2 362 3 112 2 277 2 551 6 550 2 364 2 461 2 280 2 203 2 124 6 123 3 556 2 207 2 36 2 37 2 469 8 287 2 39 24 210 2 564 2 470 2 653 2 213 2 473 2 216 2 659 6 570 4 378 2 571 4 379 2 661 2 478 2 47 2 298 2 480 28 145 6 666 2 228 2 668 2 669 2 57 2 401 2 495 2 499 2 500 3 154 2 501 2 315 2 676 2 504 2 159 2 240 2 598 6 413 6 415 2 512 4 73 2 416 2 513 2 170 2 
473 2 653 2 444 2 
473 2 653 2 444 2 
171 2 247 2 82 4 5 2 613 2 180 4 253 2 431 2 87 4 11 4 182 2 183 4 92 6 339 2 186 2 94 2 437 2 622 4 189 2 195 2 449 2 359 2 638 10 454 2 276 4 112 2 277 2 551 2 550 2 278 2 364 2 461 2 280 2 124 10 465 4 556 2 36 2 558 4 37 2 286 2 469 2 287 2 564 2 39 16 210 2 470 2 653 2 213 2 130 2 473 2 216 2 659 8 570 4 378 2 571 4 573 2 141 4 298 2 480 24 49 2 145 6 666 2 387 2 669 2 398 2 490 2 57 2 401 4 497 2 499 2 237 4 500 2 312 2 66 2 315 2 504 2 159 2 598 6 413 2 415 2 512 4 73 4 513 2 170 2 
277 2 651 2 39 2 470 2 567 2 654 2 480 4 94 2 186 2 179 2 215 2 180 2 588 2 497 2 387 2 431 2 391 2 
171 2 1 2 247 2 82 4 5 2 613 2 180 2 253 2 87 4 11 4 182 2 183 4 92 6 339 2 94 2 437 2 622 4 189 2 195 2 449 2 359 2 638 10 454 2 276 4 112 2 277 2 551 2 550 2 278 4 364 2 461 2 280 2 124 10 465 4 556 2 36 2 558 4 37 2 286 2 469 2 287 2 564 2 39 14 210 2 653 2 213 2 130 2 473 2 216 2 659 8 570 4 378 2 571 4 573 2 141 4 298 2 480 20 49 2 145 6 666 2 669 2 398 2 490 2 57 2 401 4 497 2 499 2 237 4 500 4 312 2 66 2 315 2 504 2 595 2 159 2 598 6 413 2 415 2 512 4 73 4 513 2 170 2 
171 2 247 2 82 4 5 2 613 2 180 4 253 2 431 2 87 4 11 4 182 2 183 4 92 6 339 2 186 2 94 2 437 2 622 4 189 2 195 2 449 2 359 2 638 10 454 2 276 4 112 2 277 2 551 2 550 2 278 2 364 2 461 2 280 2 124 10 465 4 556 2 36 2 558 4 37 2 286 2 469 2 287 2 564 2 39 16 210 2 470 2 653 2 213 2 130 2 473 2 216 2 659 8 570 4 378 2 571 4 573 2 141 4 298 2 480 24 49 2 145 6 666 2 387 2 669 2 398 2 490 2 57 2 401 4 497 2 499 2 237 4 500 2 312 2 66 2 315 2 504 2 159 2 598 6 413 2 415 2 512 4 73 4 513 2 170 2 
171 1 82 4 424 2 180 2 182 2 618 2 183 2 92 3 529 2 14 2 531 2 18 2 537 2 448 2 198 2 451 4 644 2 362 2 455 2 112 2 277 2 551 6 550 2 458 1 553 2 364 2 118 2 556 1 36 2 208 2 37 2 469 8 287 2 39 18 210 2 564 2 213 2 568 2 131 2 570 4 378 2 46 2 222 2 480 24 144 2 145 6 390 2 671 2 149 1 401 2 58 2 589 2 61 4 404 2 499 2 406 2 500 2 316 2 676 2 69 2 504 2 156 2 159 2 167 2 413 6 415 2 414 2 512 2 513 2 170 2 
469 2 487 4 39 2 129 2 652 3 148 2 451 2 373 1 500 3 362 3 137 2 676 2 113 2 549 2 320 2 551 2 596 2 480 2 529 3 413 2 204 6 342 2 244 2 77 2 346 2 
469 2 487 4 39 2 129 2 652 2 148 2 451 2 500 2 362 2 137 2 676 2 113 2 549 2 320 2 551 2 596 2 480 2 529 2 413 2 204 6 342 2 244 2 77 2 346 2 
469 2 487 4 39 2 129 2 652 2 148 2 451 2 500 2 362 2 137 2 676 2 113 2 549 2 320 2 551 2 596 2 480 2 529 2 413 2 204 6 342 2 244 2 77 2 346 2 
469 2 80 2 563 2 39 4 211 4 329 2 177 2 333 2 616 2 527 2 480 10 577 4 530 3 263 2 96 6 301 3 342 2 389 2 267 3 443 2 268 2 445 2 351 6 270 4 354 2 585 4 672 4 673 4 496 2 543 2 500 3 362 3 314 2 676 2 30 2 555 2 205 2 127 2 650 4 246 2 
469 2 80 2 563 2 39 4 211 4 329 2 177 2 333 2 616 2 527 2 480 10 577 4 530 2 263 2 96 4 301 2 342 2 389 2 267 2 443 2 268 2 394 2 445 2 351 6 270 4 354 2 585 4 672 4 673 4 496 2 543 2 500 2 362 2 314 2 676 2 646 2 162 2 30 2 555 2 205 2 127 2 650 4 246 2 
469 2 80 2 563 2 39 4 211 4 329 2 177 2 333 2 616 2 527 2 480 10 577 4 530 2 263 2 96 4 301 2 342 2 389 2 267 2 443 2 268 2 394 2 445 2 351 6 270 4 354 2 585 4 672 4 673 4 496 2 543 2 500 2 362 2 314 2 676 2 646 2 162 2 30 2 555 2 205 2 127 2 650 4 246 2 
469 2 80 2 563 2 39 4 211 4 329 2 177 2 333 2 616 2 527 2 480 10 577 4 530 2 263 2 96 4 301 2 342 2 389 2 267 2 443 2 268 2 394 2 445 2 351 6 270 4 354 2 585 4 672 4 673 4 496 2 543 2 500 2 362 2 314 2 676 2 646 2 162 2 30 2 555 2 205 2 127 2 650 4 246 2 
469 2 80 2 563 2 39 4 211 4 329 2 177 2 333 2 616 2 527 2 480 10 577 4 530 2 263 2 96 4 301 2 342 2 389 2 267 2 443 2 268 2 394 4 445 2 351 6 270 4 354 2 585 4 672 4 673 4 496 2 543 2 500 2 362 2 314 2 676 2 646 4 162 4 30 2 555 2 205 2 127 2 650 4 246 2 
492 2 239 2 561 2 429 2 56 2 242 2 
594 2 8 2 60 2 56 2 223 2 230 2 627 2 
231 1 317 1 505 1 39 4 338 2 597 2 83 2 480 4 42 2 31 1 402 2 71 1 376 2 35 2 544 2 513 2 626 2 
394 4 146 4 396 2 80 6 39 6 270 4 175 2 585 12 177 6 333 2 496 6 543 6 545 2 456 2 411 2 646 4 480 6 224 2 162 4 164 2 119 4 365 2 510 2 439 2 555 6 263 6 96 15 389 6 484 2 418 2 
524 2 2 2 514 4 39 1 40 1 211 2 480 1 609 2 143 2 672 2 121 2 641 2 254 2 388 7 681 2 380 2 217 2 650 2 
524 2 2 4 514 4 211 2 609 4 143 2 672 2 121 2 641 2 254 2 388 6 681 2 380 4 217 2 650 2 
524 2 2 8 514 4 39 1 40 1 211 2 480 1 609 8 143 2 672 2 121 2 641 6 254 8 388 10 681 2 380 8 217 2 650 2 
524 2 2 2 514 2 211 2 609 2 143 2 672 2 121 2 388 2 681 2 380 2 217 2 650 2 
0 2 171 4 328 2 81 2 248 1 522 2 523 4 183 10 526 2 92 16 266 2 533 2 17 1 19 2 193 1 634 4 635 2 109 2 643 2 275 2 462 2 122 2 556 4 557 2 468 2 39 26 210 6 290 2 291 2 292 4 378 6 138 2 575 1 576 2 480 28 385 2 580 2 229 2 667 2 582 1 304 1 232 1 584 2 399 4 309 2 235 2 407 2 410 4 319 2 504 4 70 2 323 2 512 8 684 2 
171 1 193 2 584 2 39 12 210 2 565 2 109 2 111 2 378 2 135 2 522 2 410 6 155 2 183 4 504 2 526 2 92 7 323 2 480 12 462 2 533 2 535 2 229 2 512 4 556 1 667 2 
0 4 171 6 468 2 328 2 421 2 515 2 81 2 565 2 210 4 39 32 212 2 516 2 290 2 248 2 291 2 292 6 84 4 86 2 378 4 475 2 522 2 336 2 523 6 138 2 183 12 526 2 92 24 576 2 480 34 259 2 385 2 266 2 533 2 229 2 667 2 19 2 192 2 584 2 271 2 397 2 399 6 197 2 105 2 309 2 634 2 635 2 639 4 643 2 407 2 275 2 153 2 64 2 410 14 504 2 322 2 323 2 552 2 462 2 680 4 512 10 74 2 556 6 557 2 325 2 
171 4 193 2 410 4 328 2 183 4 526 2 504 2 565 2 210 2 39 12 92 10 323 2 480 12 462 2 533 2 229 2 624 2 378 2 512 4 667 2 556 4 522 2 
102 2 
