#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError (141,633) 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.NullPointerException 784 528 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.NullPointerException 210 868 716 518 503 569 12 401 631 656 409 878 788 328 1039 814 1031 666 432 898 824 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V ERROR java.lang.NullPointerException 167 3 (455,484) (216,355) (216,355) 
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V ERROR java.lang.NullPointerException 167 3 (455,484) (216,355) (216,355) 
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException 167 3 (455,484) (216,355) (216,355) 
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException 34 (417,563) 982 (541,680) (417,563) 1040 (541,680) 638 945 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NullPointerException 167 3 (455,484) 
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NullPointerException 167 3 (455,484) (455,484) 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NullPointerException 167 3 (455,484) 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 522 759 251 643 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 706 179 724 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 1021 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 1021 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 1021 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 1021 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode; | CONDITION | 26193 | if (x) -> if (!x)
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:gt(II)Z
jtb.JavaParser:jj_3R_97()Z
jtb.syntaxtree.Literal:Literal(Ljtb.syntaxtree.NodeChoice;)V
jtb.JavaParser:jj_3R_118()Z
jtb.JavaParser:InclusiveOrExpression()Ljtb.syntaxtree.InclusiveOrExpression;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.Quant:memberOf(F[F)Z
daikon.PptSlice1:num_samples()I
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_and(DDD)D
jtb.JavaParser:jj_3R_162()Z
jtb.JavaParser:jj_3R_133()Z
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eq(FF)Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.EltLowerBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptName:isEnterPoint()Z
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:lt(DD)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.unary.sequence.EltOneOf:add_modified([JI)Ldaikon.inv.InvariantStatus;
jtb.syntaxtree.Type:Type(Ljtb.syntaxtree.NodeChoice;)V
jtb.syntaxtree.UnaryExpressionNotPlusMinus:UnaryExpressionNotPlusMinus(Ljtb.syntaxtree.NodeChoice;)V
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.MathMDE:negate(I)I
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
jtb.JavaParser:jj_3_3()Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.Quant:pairwiseLTE([I[I)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:jj_3_25()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.Quantify:quantify([Ldaikon.VarInfo;)[Ldaikon.Quantify.QuantifyReturn;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltUpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 3742 | return null
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:subsetOf([F[F)Z
daikon.inv.unary.sequence.EltUpperBound:EltUpperBound(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([F[D)Z
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.Quant:pairwiseGTE([I[I)Z
jtb.JavaParser:jj_3R_117()Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
jtb.syntaxtree.ReferenceType:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.EltLowerBound:format_esc()Ljava.lang.String;
daikon.ProglangType:isIntegral()Z
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
jtb.JavaParser:jj_3_14()Z
daikon.VarInfo:get_ioa_quantify(Ldaikon.VarInfo;)Ldaikon.Quantify.IOAQuantification;
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:isPointer()Z
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.Quantify.SimplifyQuantification:get_arr_vars_indexed(I)Ljava.lang.String;
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.inv.unary.scalar.Modulus:enabled()Z
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
daikon.Quant:lte(II)Z
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
jtb.JavaParser:jj_2_12(I)Z
daikon.diff.RootNode:RootNode()V
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:esc_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.VarInfo:java_name()Ljava.lang.String;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
utilMDE.WeakHasherMap.EntrySet:size()I
jtb.JavaParser:jj_3R_60()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:jj_2_15(I)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.sequence.EltOneOf:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_3R_73()Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
jtb.JavaParser:jj_3R_89()Z
jtb.JavaParser:jj_3R_68()Z
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.simplify.LemmaStack:noticeInt(J)V
daikon.Quantify.SimplifyQuantification:SimplifyQuantification(Ljava.util.EnumSet;[Ldaikon.VarInfo;)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.PptSlice1:arity()I
daikon.Quant:eq(JJ)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.VarInfo:is_direct_non_slice_array()Z
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:getToken(I)Ljtb.Token;
jtb.JavaParser:jj_3R_88()Z
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
jtb.JavaParser:jj_3R_114()Z
daikon.VarInfo:domainTypeIOA()Ljava.lang.String;
daikon.Quant:eltsLTE([II)Z
daikon.inv.unary.sequence.EltOneOf:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
jtb.JavaParser:jj_3R_54()Z
jtb.JavaParser:UnaryExpressionNotPlusMinus()Ljtb.syntaxtree.UnaryExpressionNotPlusMinus;
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
jtb.JavaParser:ResultType()Ljtb.syntaxtree.ResultType;
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.Diff:findNormalPpt(Ldaikon.PptMap;Ldaikon.PptTopLevel;)Ljava.util.List;
jtb.JavaParser:jj_3_20()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.ProglangType:baseIsScalar()Z
daikon.Quantify.FreeVar:simplify_name()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaParser:jj_3R_61()Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
jtb.JavaParser:jj_2_35(I)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.Quant:eltsLT([II)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.unary.sequence.EltOneOf:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quantify.IOAQuantification:IOAQuantification([Ldaikon.VarInfo;)V
daikon.Quant:eltwiseLT([I)Z
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
jtb.syntaxtree.TypeParameter:TypeParameter(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;)V
daikon.Quantify.Constant:Constant(I)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.PptSlice0:arity()I
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:updateResults()V
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltNonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
daikon.ProglangType:dimensions()I
daikon.inv.Invariant:justified()Z
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.VarInfo:simplify_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
jtb.JavaParser:ShiftExpression()Ljtb.syntaxtree.ShiftExpression; | ASSIGN | 68700 | = null
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.VarInfo:get_lower_bound()Ldaikon.Quantify.Term;
daikon.inv.unary.sequence.EltLowerBound:format_simplify()Ljava.lang.String;
daikon.ProglangType:base()Ljava.lang.String;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.syntaxtree.PrimaryPrefix:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
jtb.syntaxtree.PostfixExpression:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I | OPERATOR | 41870 | != -> >=
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_3R_116()Z
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.Quant:lexNotEqual([I[I)Z
daikon.ProglangType:baseIsIntegral()Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quantify.IOAQuantification:getQuantifierExp()Ljava.lang.String;
daikon.Debug:logOn()Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.VarInfoAux:hashCode()I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.Assert:assertTrue(Z)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.Quant:subsetOf([D[F)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
jtb.JavaParser:PrimaryExpression()Ljtb.syntaxtree.PrimaryExpression;
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.inv.Invariant:prob_or(DD)D
jtb.JavaCharStream:readChar()C
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
jtb.syntaxtree.NullLiteral:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfo:simplify_quantify(Ljava.util.EnumSet;[Ldaikon.VarInfo;)[Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaCharStream:getEndLine()I
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.Quant:eltsEqualIndex([I)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.Quantify.QuantifyReturn:QuantifyReturn(Ldaikon.VarInfo;)V
daikon.Quantify.Term:esc_name()Ljava.lang.String;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eq(DD)Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.Quantify.IOAQuantification:getVarIndexedString(I)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.unary.sequence.EltUpperBound:format_esc()Ljava.lang.String;
jtb.JavaParser:TypeBound()Ljtb.syntaxtree.TypeBound;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.Quant:eltsNotEqual([II)Z
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.UnaryExpressionNotPlusMinus:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:jj_3R_163()Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Quant:lt(II)Z
daikon.Quant:memberOf(F[D)Z
daikon.Quantify.Term:ioa_name()Ljava.lang.String;
jtb.syntaxtree.NodeToken:trimSpecials()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.Quant:lexEqual([I[I)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.EltOneOf:format_daikon()Ljava.lang.String;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.inv.unary.sequence.EltOneOf:is_hashcode()Z
daikon.inv.Invariant:isWorthPrinting()Z
daikon.Quantify.ESCQuantification:ESCQuantification(Ljava.util.EnumSet;[Ldaikon.VarInfo;)V
jtb.JavaParser:jj_3R_126()Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
jtb.JavaParser:jj_3R_81()Z
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.JavaParser:jj_3R_121()Z
jtb.syntaxtree.TypeBound:TypeBound(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.ClassOrInterfaceType;Ljtb.syntaxtree.NodeListOptional;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.ProglangType:elementType()Ldaikon.ProglangType;
jtb.JavaParser:BlockStatement()Ljtb.syntaxtree.BlockStatement;
jtb.syntaxtree.FormalParameters:FormalParameters(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
jtb.JavaParser:jj_3_36()Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:gcd_differences([I)I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoName:hashCode()I
jtb.JavaCharStream:backup(I)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z | STATEMENT | 8020 | stmt -> ;
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.ArraysMDE:concat([I[I)[I
jtb.JavaParser:jj_3_35()Z
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
jtb.syntaxtree.ResultType:ResultType(Ljtb.syntaxtree.NodeChoice;)V
jtb.JavaParser:NullLiteral()Ljtb.syntaxtree.NullLiteral;
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
jtb.JavaParser:jj_3R_50()Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.VarInfo:isDerived()Z
jtb.syntaxtree.Modifiers:Modifiers(Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
jtb.JavaCharStream:getBeginLine()I
jtb.JavaParser:jj_3_13()Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
jtb.syntaxtree.UnaryExpression:UnaryExpression(Ljtb.syntaxtree.NodeChoice;)V
daikon.VarInfo:get_array_var()Ldaikon.VarInfo;
daikon.Quant:eltsEqual([II)Z
jtb.JavaParser:jj_3R_53()Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.inv.ValueSet:ValueSet(I)V
utilMDE.OrderedPairIterator:hasNext()Z
daikon.Quant:sameLength([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:internSubsequence([JII)[J
jtb.JavaParser:jj_3R_115()Z
utilMDE.LimitedSizeIntSet:size()I
jtb.syntaxtree.NullLiteral:NullLiteral(Ljtb.syntaxtree.NodeToken;)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.Quant:memberOf(D[F)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
daikon.Quant:intersection([I[I)[I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:format_ioa()Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
jtb.JavaParser:jj_3R_63()Z
daikon.Quant:memberOf(J[J)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.VarInfo:get_all_simple_names()Ljava.util.List;
jtb.syntaxtree.Type:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:gcd([I)I
jtb.JavaParser:ConditionalAndExpression()Ljtb.syntaxtree.ConditionalAndExpression;
daikon.Quant:memberOf(S[S)Z
daikon.inv.unary.sequence.EltUpperBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:lexLTE([I[I)Z
daikon.Quantify.Length:Length(Ldaikon.VarInfo;I)V
jtb.JavaParser:Expression()Ljtb.syntaxtree.Expression;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.Quantify.Term:name_with_offset(Ljava.lang.String;I)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.PptName:isCombinedExitPoint()Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V | ASSIGN | 2121 | = null
daikon.inv.Invariant:logDetail()Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.inv.OutputFormat:toString()Ljava.lang.String;
daikon.Quant:subsetOf([J[J)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaParser:UnaryExpression()Ljtb.syntaxtree.UnaryExpression;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
jtb.syntaxtree.AdditiveExpression:AdditiveExpression(Ljtb.syntaxtree.MultiplicativeExpression;Ljtb.syntaxtree.NodeListOptional;)V
daikon.Quant:subsetOf([I[I)Z
jtb.JavaParser:ClassOrInterfaceDeclaration(I)Ljtb.syntaxtree.ClassOrInterfaceDeclaration;
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.VarInfo:relate_var()V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:pairwiseLT([I[I)Z
jtb.JavaParser:jj_3R_72()Z
jtb.JavaParser:jj_3R_58()Z
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
jtb.JavaParser:jj_3R_67()Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.syntaxtree.MethodDeclarator:MethodDeclarator(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.FormalParameters;Ljtb.syntaxtree.NodeListOptional;)V
jtb.JavaParser:PrimaryPrefix()Ljtb.syntaxtree.PrimaryPrefix;
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
jtb.syntaxtree.TypeParameter:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.VarInfo:name()Ljava.lang.String;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariants:Invariants()V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:jj_3R_75()Z
jtb.syntaxtree.TypeBound:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:TypeParameter()Ljtb.syntaxtree.TypeParameter;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:MultiplicativeExpression()Ljtb.syntaxtree.MultiplicativeExpression;
daikon.ProglangType:isPointerFileRep()Z
daikon.Quant:pairwiseDivides([I[I)Z
jtb.JavaParser:jj_3_28()Z
jtb.JavaParser:jj_3_19()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
jtb.JavaParser:jj_3R_123()Z
daikon.Quantify.Constant:name()Ljava.lang.String;
jtb.JavaParser:jj_3_10()Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap:size()I
jtb.syntaxtree.FormalParameters:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaParser:jj_3R_48()Z
jtb.JavaParser:jj_2_21(I)Z
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quantify.SimplifyQuantification:get_quantification()Ljava.lang.String;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:mod_positive(JJ)J
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.MultiplicativeExpression:MultiplicativeExpression(Ljtb.syntaxtree.UnaryExpression;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.sequence.EltOneOf:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:FormalParameters()Ljtb.syntaxtree.FormalParameters;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:AndExpression()Ljtb.syntaxtree.AndExpression;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.sequence.EltUpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
jtb.JavaParser:jj_3_21()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.EltOneOf:subarray_rep()Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
jtb.JavaParser:EqualityExpression()Ljtb.syntaxtree.EqualityExpression;
utilMDE.Intern:intern([J)[J
daikon.Quant:eltsGtIndex([I)Z
jtb.JavaParser:jj_3R_77()Z
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
jtb.JavaParser:jj_3R_119()Z
utilMDE.ArraysMDE:subarray([JII)[J
jtb.JavaParser:jj_3_18()Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.inv.Invariant:prob_is_ge(DD)D
jtb.JavaParser:Type()Ljtb.syntaxtree.Type;
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quantify.Term:simplify_name()Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
jtb.JavaParser:jj_3_1()Z
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.ProglangType:baseIsFloat()Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
jtb.JavaParser:jj_2_25(I)Z
jtb.JavaParser:jj_3_16()Z
daikon.Quant:subsetOf([B[I)Z
jtb.JavaParser:jj_3_4()Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 3450 | return null
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.unary.sequence.EltUpperBound:format_daikon()Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:format_ioa()Ljava.lang.String;
jtb.JavaParser:Literal()Ljtb.syntaxtree.Literal;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:jj_3_29()Z
daikon.diff.InvMap:InvMap()V
jtb.JavaParser:jj_ntk()I
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
jtb.JavaParser:ExclusiveOrExpression()Ljtb.syntaxtree.ExclusiveOrExpression;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
jtb.JavaParser:jj_3R_56()Z
daikon.Quant:concat([I[I)[I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.unary.sequence.EltOneOf:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:isFloat()Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
jtb.JavaCharStream:FillBuff()V
jtb.syntaxtree.MultiplicativeExpression:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.JavaParser:jj_3_30()Z
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.Ppt:Ppt()V
daikon.inv.unary.sequence.EltUpperBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_3R_74()Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:eq(II)Z
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
jtb.JavaParser:MethodDeclarator()Ljtb.syntaxtree.MethodDeclarator;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo; | CONDITION | 3097 | if (x) -> if (!x)
daikon.ProglangType:isPseudoArray()Z
jtb.JavaCharStream:getEndColumn()I
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.Quantify:get_flags(Z)Ljava.util.EnumSet;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
jtb.JavaCharStream:ReadByte()C
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.Quant:lexGT([I[I)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.inv.unary.sequence.EltOneOf:format_simplify()Ljava.lang.String;
daikon.Quant:isReverse([I[I)Z
jtb.JavaParser:jj_2_36(I)Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.unary.sequence.EltNonZero:format_esc()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:jj_2_14(I)Z
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
jtb.JavaParser:jj_3R_52()Z
daikon.VarInfo:get_base_array()Ldaikon.VarInfo;
daikon.Quant:gte(II)Z
daikon.Quant:setEqual([I[I)Z
jtb.JavaParser:ConditionalOrExpression()Ljtb.syntaxtree.ConditionalOrExpression;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:subsetOf([D[D)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quantify.ESCQuantification:bld_quant(Ldaikon.VarInfo;Ldaikon.Quantify.Term;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.test.InvariantFormatTester:execute()Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double; | RETURN | 17435 | return null
daikon.Quant:subsetOf([S[S)Z
jtb.JavaParser:jj_3R_76()Z
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
jtb.JavaParser:ConditionalExpression()Ljtb.syntaxtree.ConditionalExpression;
jtb.JavaParser:jj_3R_47()Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd(JJ)J
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.Quantify.IOAQuantification:getFreeVar(I)Ldaikon.Quantify.Term;
jtb.JavaParser:jj_3R_124()Z
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:ClassOrInterfaceBody(Z)Ljtb.syntaxtree.ClassOrInterfaceBody;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.EltNonZero:EltNonZero(Ldaikon.PptSlice;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.EltNonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.JavaParser:jj_3_12()Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.sequence.EltOneOf:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quantify.IOAQuantification:IOAQuantification(Ldaikon.VarInfo;)V
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.VarInfo:esc_quantify(Z[Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:jj_3_15()Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.OrderedPairIterator:setnext1()V
jtb.JavaParser:jj_3_27()Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
jtb.JavaParser:ClassOrInterfaceType()Ljtb.syntaxtree.ClassOrInterfaceType;
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.VarInfo:get_upper_bound()Ldaikon.Quantify.Term;
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
jtb.syntaxtree.ClassOrInterfaceType:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
jtb.syntaxtree.UnaryExpression:setParent(Ljtb.syntaxtree.Node;)V
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
jtb.JavaParser:jj_3R_85()Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
jtb.JavaCharStream:BeginToken()C
daikon.inv.unary.scalar.Positive:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
daikon.PptSlice2:arity()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
jtb.JavaParser:jj_3_5()Z
daikon.Ppt:indexOf(Ljava.lang.String;)I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:InstanceOfExpression()Ljtb.syntaxtree.InstanceOfExpression;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.VarInfo:get_base_array_hashcode()Ldaikon.VarInfo;
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.Invariant:logOn()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quantify.ESCQuantification:get_arr_vars_indexed(I)Ljava.lang.String;
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.syntaxtree.TypeParameters:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.ProglangType:isArray()Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
jtb.JavaParser:jj_3R_86()Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
jtb.JavaParser:jj_2_18(I)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.MathMDE:pow_fast(II)I
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.VarInfo:isPrestate()Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.EltOneOf:format_esc()Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.Ppt:find_var_by_name(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.test.FormatTestCase:passes()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.Quant:memberOf(I[I)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.Quantify.IOAQuantification:getFreeVarName(I)Ljava.lang.String;
daikon.Quantify.SimplifyQuantification:get_closer()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
utilMDE.MathMDE:gcd(II)I
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.Quant:eltsGTE([II)Z
daikon.Quant:union([I[I)[I
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
jtb.JavaParser:jj_3R_135()Z
jtb.JavaParser:jj_2_5(I)Z
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
jtb.JavaParser:jj_2_13(I)Z
jtb.JavaParser:jj_3R_55()Z
utilMDE.ArraysMDE:element_range([I)I
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.MathMDE:pow(II)I
jtb.syntaxtree.TypeParameters:TypeParameters(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.TypeParameter;Ljtb.syntaxtree.NodeListOptional;Ljtb.syntaxtree.NodeToken;)V
jtb.JavaParser:Statement()Ljtb.syntaxtree.Statement;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:ReferenceType()Ljtb.syntaxtree.ReferenceType;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
jtb.JavaParser:jj_3_22()Z
daikon.ProglangType:isScalar()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
jtb.syntaxtree.Literal:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple; | RETURN | 10267 | return null
daikon.VarInfo:new_ppt()V
utilMDE.MathMDE:modulus([I)[I
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.Quantify.FreeVar:name()Ljava.lang.String;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.Modifiers:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:jj_3R_161()Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
jtb.JavaParser:MethodDeclaration(I)Ljtb.syntaxtree.MethodDeclaration;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:eltwiseGT([I)Z
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_3R_96()Z
daikon.Quant:ne(II)Z
jtb.JavaParser:jj_3R_122()Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
jtb.JavaParser:jj_3R_80()Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
jtb.JavaParser:jj_2_1(I)Z
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.FuzzyFloat:gt(DD)Z
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern:numIntArrays()I
daikon.inv.unary.sequence.EltNonZero:enabled()Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.Quantify.IOAQuantification:getClosingExp()Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.PptSlice0:initInvariantsSeen()V
jtb.JavaParser:jj_2_16(I)Z
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.Quant:noDups([I)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.inv.unary.sequence.EltNonZero:is_pointer()Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.unary.sequence.EltNonZero:format_daikon()Ljava.lang.String;
jtb.JavaParser:RelationalExpression()Ljtb.syntaxtree.RelationalExpression;
jtb.JavaParser:jj_2_4(I)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
jtb.JavaParser:jj_3R_49()Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.unary.sequence.EltOneOf:sort_rep()V
jtb.JavaCharStream:getBeginColumn()I
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:ReturnStatement()Ljtb.syntaxtree.ReturnStatement;
daikon.diff.Node:Node()V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_scan_token(I)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.unary.sequence.EltUpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quantify.ESCQuantification:get_quantification()Ljava.lang.String;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.sequence.EltNonZero:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.VarInfo:apply_subscript(Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.Quantify.Length:simplify_name()Ljava.lang.String;
jtb.JavaParser:PostfixExpression()Ljtb.syntaxtree.PostfixExpression;
daikon.inv.unary.sequence.EltOneOf:enabled()Z
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.Debug:logDetail()Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.syntaxtree.ReferenceType:ReferenceType(Ljtb.syntaxtree.NodeChoice;)V
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.unary.UpperBoundCore:wouldChange(J)Z
jtb.syntaxtree.ClassOrInterfaceType:ClassOrInterfaceType(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.sequence.EltUpperBound:enabled()Z
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:TypeParameters()Ljtb.syntaxtree.TypeParameters;
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.VarInfo:isIOAArray()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.Invariant:prob_and(DD)D
daikon.Quant:lexGTE([I[I)Z
jtb.JavaParser:jj_3R_69()Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
jtb.syntaxtree.PrimaryExpression:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.Quant:eltsLteIndex([I)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
jtb.JavaParser:jj_2_3(I)Z
daikon.Quantify.IOAQuantification:getMembershipRestriction(I)Ljava.lang.String;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:jj_3R_87()Z
jtb.JavaParser:jj_3R_57()Z
jtb.JavaParser:jj_3R_120()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.Quantify.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.inv.unary.sequence.EltOneOf:is_boolean()Z
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.VarInfo:get_enclosing_var()Ldaikon.VarInfo;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeList:NodeList()V
utilMDE.ArraysMDE:max([I)I
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.unary.sequence.EltNonZero:format_ioa()Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:get_proto()Ldaikon.inv.Invariant;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
jtb.syntaxtree.PrimaryExpression:PrimaryExpression(Ljtb.syntaxtree.PrimaryPrefix;Ljtb.syntaxtree.NodeListOptional;)V
daikon.Quant:eltsGT([II)Z
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.PrimaryPrefix:PrimaryPrefix(Ljtb.syntaxtree.NodeChoice;)V
daikon.Quant:setDiff([I[I)[I
utilMDE.MathMDE:sign(I)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.Quant:slice([III)[I
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.unary.sequence.EltNonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:min_max([I)[I | RETURN | 7061 | return null
daikon.inv.unary.sequence.EltOneOf:EltOneOf(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.Intern:intern([I)[I
daikon.Quant:lexLT([I[I)Z
utilMDE.Intern:internSubsequence([III)[I
daikon.inv.unary.sequence.EltNonZero:format_simplify()Ljava.lang.String;
jtb.JavaParser:jj_3R_51()Z
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:jj_3R_134()Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
jtb.syntaxtree.PostfixExpression:PostfixExpression(Ljtb.syntaxtree.PrimaryExpression;Ljtb.syntaxtree.NodeOptional;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
jtb.JavaParser:jj_3R_125()Z
utilMDE.ArraysMDE:min([I)I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParser:AdditiveExpression()Ljtb.syntaxtree.AdditiveExpression;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.Quant:eltwiseLTE([I)Z
jtb.JavaParser:jj_3R_148()Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V | ASSIGN | 1551 | = null
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:ClassOrInterfaceBodyDeclaration(Z)Ljtb.syntaxtree.ClassOrInterfaceBodyDeclaration;
daikon.Quantify.Length:esc_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
jtb.JavaParser:jj_3R_62()Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.Quant:eltwiseNotEqual([I)Z
jtb.JavaParser:Block()Ljtb.syntaxtree.Block;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
jtb.JavaParser:jj_2_10(I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
249 2 996 2 636 2 19 2 245 2 661 2 393 2 504 2 376 4 
242 2 243 2 689 6 701 2 857 6 71 2 896 2 370 2 934 2 221 2 427 6 
308 6 19 2 245 2 746 6 585 4 45 2 771 4 465 2 1037 6 169 2 131 2 134 2 288 6 
884 28 851 26 855 8 583 2 331 10 270 2 519 6 831 2 588 16 142 4 171 16 341 10 525 2 800 16 904 4 836 4 568 10 245 6 19 6 343 12 910 4 374 2 176 8 29 2 347 10 576 10 578 8 1001 6 1003 2 881 8 
887 6 974 4 
262 2 
1014 2 996 2 998 2 970 2 141 2 
884 37 851 35 822 3 266 4 512 8 855 12 68 2 7 2 485 6 980 6 331 6 270 2 519 4 588 24 237 1 142 2 171 24 341 11 800 24 469 2 495 5 568 11 19 4 245 4 662 6 343 15 347 11 576 11 578 6 256 4 1001 4 644 4 287 4 
191 2 141 2 240 2 
1 2 87 2 1008 2 890 22 924 10 602 2 633 2 60 2 957 2 843 2 796 2 639 2 973 2 35 2 
884 6 389 2 851 4 855 2 552 2 481 2 483 2 111 2 331 4 705 2 588 2 620 2 142 2 171 2 341 2 800 2 568 2 343 2 347 2 576 2 98 2 1001 2 849 2 
884 16 851 12 266 4 568 4 20 2 719 2 485 6 343 4 910 2 980 6 347 4 576 4 588 8 287 4 171 8 341 4 800 8 
223 2 191 4 42 2 784 2 786 2 785 2 141 6 332 2 745 2 517 2 400 2 755 2 337 4 591 2 240 2 528 2 533 2 989 2 147 2 90 2 906 14 91 2 803 2 769 10 998 2 217 2 36 4 
651 2 516 2 703 2 931 2 117 2 145 2 279 2 126 2 972 2 262 2 
776 2 650 2 923 3 510 3 264 3 265 1 392 2 513 2 393 2 395 2 927 2 789 2 791 2 794 2 795 2 930 4 405 2 275 2 658 2 146 1 17 2 18 2 413 1 802 2 281 2 19 34 21 2 282 2 415 2 804 2 27 2 28 24 540 2 31 2 154 2 284 2 425 2 159 2 668 3 547 2 821 2 550 2 671 2 823 2 434 2 435 2 948 6 297 6 438 16 825 1 826 8 954 32 443 3 303 1 686 2 445 2 835 2 306 2 566 2 172 16 310 2 174 2 691 2 840 2 58 2 178 2 967 2 454 2 577 2 971 2 184 2 456 2 63 2 847 4 65 2 69 2 193 2 700 2 859 2 460 12 462 2 196 2 464 4 198 5 586 2 199 2 985 2 338 2 711 2 339 4 79 2 80 1 863 2 594 6 86 16 717 1 718 2 597 2 870 4 93 1 601 2 603 8 726 1 212 1 733 16 1000 3 352 2 353 2 737 2 224 2 226 6 480 2 739 4 358 2 742 2 363 2 232 2 486 2 617 2 1015 1 618 3 369 2 234 1 1016 4 114 3 236 32 757 1 489 1 760 3 239 2 121 2 1023 1 497 1 245 32 626 8 123 3 125 2 632 4 635 3 1033 24 1036 2 772 2 255 2 384 2 773 2 1042 2 922 3 
529 2 19 2 
939 2 19 4 22 2 
258 2 
509 8 508 2 777 4 778 2 6 4 780 26 781 2 783 4 782 4 9 6 268 2 10 2 787 2 788 2 518 2 11 8 790 2 271 48 521 2 793 2 798 2 12 2 524 8 799 8 13 48 526 2 530 2 534 14 23 4 24 4 537 4 808 4 538 4 809 4 542 2 814 2 286 2 543 4 38 2 545 2 548 2 291 2 549 36 292 2 820 22 39 2 295 4 824 2 556 2 827 6 557 16 44 2 558 2 829 8 832 2 301 2 302 2 834 4 560 26 52 2 569 2 570 4 571 2 572 4 841 2 579 20 318 2 845 46 320 2 324 2 323 8 325 48 328 2 853 48 329 2 856 22 330 2 860 4 72 10 587 14 589 2 590 2 82 8 340 48 592 2 84 2 866 20 88 8 868 2 596 2 869 2 871 4 92 2 600 2 344 26 874 48 605 48 346 2 350 2 349 2 878 2 882 192 354 4 610 146 357 4 360 48 105 2 361 8 110 2 364 2 112 2 616 2 367 4 898 2 900 2 116 2 623 4 122 2 372 28 627 4 375 2 631 2 377 2 129 2 914 22 380 2 130 6 916 2 920 4 387 2 646 8 390 4 135 20 653 2 396 14 928 2 399 2 401 2 656 2 657 4 409 2 660 2 150 4 151 2 421 2 664 2 941 10 155 2 160 4 161 2 428 2 667 36 666 2 163 2 430 2 164 2 432 2 944 2 672 14 951 2 440 2 677 6 441 4 168 2 682 2 960 4 959 2 685 2 961 8 447 2 690 2 449 2 450 2 175 4 692 4 177 2 693 14 969 2 182 4 189 2 697 4 699 2 458 4 194 16 702 4 197 2 983 2 466 2 707 48 467 2 468 2 712 24 987 2 713 2 470 2 990 2 715 42 716 2 473 2 210 2 474 2 730 2 477 8 736 2 1005 4 225 2 738 2 479 6 1007 4 227 2 228 48 1010 2 743 48 482 2 230 8 1013 2 1017 2 490 4 1020 6 491 2 498 2 501 2 1029 146 247 48 1030 18 1031 2 503 2 770 36 252 2 1034 2 1039 2 259 146 1041 2 
553 1 598 2 758 2 371 2 
676 2 598 2 
66 2 904 2 383 2 141 2 598 2 342 2 761 2 
598 2 761 2 630 2 
431 2 598 2 761 2 
828 2 371 2 615 2 
598 2 761 2 
828 2 366 2 
290 2 598 2 
828 2 46 2 371 2 
371 2 439 2 629 2 
50 2 8 2 371 2 
103 2 202 2 371 2 
298 2 371 2 81 2 
828 2 929 2 
1038 2 598 2 
186 2 629 2 
1019 2 8 2 
103 2 816 2 
16 2 298 2 
828 2 274 2 
298 2 505 2 
103 2 520 2 
8 2 949 2 
728 2 629 2 
828 2 46 2 309 2 371 2 
828 2 46 2 309 2 235 2 371 2 
828 2 472 2 371 2 
981 2 828 2 371 2 
883 2 613 2 938 2 335 2 
573 2 141 2 342 2 345 2 
66 2 573 2 775 2 141 2 342 2 345 2 
904 2 988 2 141 2 598 2 342 2 761 2 
933 2 862 2 
904 2 995 2 141 2 342 2 
103 2 984 2 
298 2 774 2 
180 2 629 2 
157 2 8 2 
298 2 8 2 1002 2 
298 2 8 2 407 2 
298 2 612 2 8 2 
940 2 298 2 8 2 
137 6 41 2 362 2 141 2 276 2 124 6 342 2 734 2 
828 2 319 2 
14 2 388 2 890 6 280 4 139 2 26 2 807 2 250 2 128 2 379 2 402 2 299 2 61 2 424 4 76 2 637 2 544 2 645 2 
1027 2 371 2 
967 2 
138 2 513 2 392 2 393 2 140 2 267 2 789 2 794 6 930 2 406 2 410 2 18 2 802 2 19 26 415 2 804 2 810 2 812 2 154 2 159 2 821 2 823 2 671 4 435 2 948 4 297 2 826 2 954 4 170 2 306 2 310 2 691 2 57 2 58 2 971 2 456 2 65 2 193 2 859 2 460 8 704 2 464 4 586 2 985 2 986 2 339 4 863 2 594 6 86 6 870 4 991 4 93 2 737 2 226 2 739 4 229 2 363 2 232 2 617 2 1015 2 369 2 752 2 1016 2 236 6 619 2 239 2 121 2 1026 4 245 26 908 2 632 2 913 2 255 2 773 2 
138 2 392 2 513 2 393 2 140 2 267 2 395 2 789 2 794 6 930 2 275 2 410 2 18 2 802 2 19 26 415 2 804 2 536 2 810 2 812 2 154 2 159 2 821 2 823 2 671 4 435 2 948 6 297 2 826 2 954 4 170 2 306 2 567 2 310 2 691 2 57 2 58 2 844 2 971 2 456 2 65 2 193 2 859 2 460 8 704 2 464 4 586 2 985 2 986 2 339 4 863 2 594 6 86 6 870 4 991 4 93 2 737 2 226 2 739 4 229 2 363 2 232 2 617 2 1015 2 369 2 752 2 1016 2 236 6 619 2 239 2 121 2 1026 4 245 26 125 2 632 2 255 2 773 2 
386 2 
937 2 527 2 
648 2 3 2 513 2 193 2 857 6 70 2 71 4 464 2 985 2 273 2 655 2 411 2 18 2 594 4 19 12 414 2 95 2 96 2 33 2 541 2 216 2 879 4 427 6 289 2 818 2 355 2 739 2 945 2 106 4 484 2 363 2 231 2 678 4 953 8 680 2 895 2 955 2 559 2 370 4 563 2 762 8 119 2 902 4 564 2 1022 2 493 2 242 2 243 2 244 2 689 6 245 6 58 2 912 4 254 2 255 2 638 2 1040 2 581 10 694 2 64 4 
648 2 3 2 513 2 193 2 857 8 70 2 71 4 464 2 985 2 273 2 655 2 934 2 411 2 18 2 594 4 19 12 721 4 95 2 96 2 541 2 216 2 879 4 427 8 289 2 818 2 739 2 355 2 945 2 106 4 484 2 363 2 231 2 678 4 953 8 680 2 895 2 955 2 559 2 370 4 563 2 762 8 119 2 902 4 564 2 1022 2 493 2 242 2 243 2 244 2 245 6 689 6 58 2 912 4 254 2 255 2 638 2 1040 2 642 2 581 10 188 2 694 2 64 4 
648 2 355 2 945 2 106 4 689 2 484 2 70 2 231 2 96 2 71 2 541 2 559 2 216 2 370 2 638 2 879 4 427 2 902 2 
648 2 3 2 513 2 193 2 857 6 70 2 71 4 464 2 985 2 273 2 655 2 934 2 411 2 18 2 594 4 19 12 414 2 95 2 96 2 33 2 541 2 216 2 879 4 427 6 289 2 818 2 355 2 739 2 945 2 106 4 484 2 363 2 231 2 678 4 953 4 680 2 895 2 955 2 559 2 370 4 563 2 762 4 119 2 902 4 564 2 1022 2 493 2 243 2 244 2 689 4 245 6 58 2 912 4 254 2 255 2 638 2 1040 2 581 6 694 2 64 4 
818 2 648 2 3 2 355 2 106 2 484 2 857 4 231 2 678 2 71 2 953 4 167 2 896 2 895 2 955 2 559 2 370 2 762 4 564 2 411 2 493 2 243 2 244 2 19 4 689 4 96 2 912 2 33 2 254 2 216 2 879 2 427 2 581 4 694 2 289 2 
648 2 3 2 513 2 193 2 857 6 70 2 71 4 464 2 985 2 273 2 655 2 411 2 18 2 594 4 19 12 414 2 95 2 96 2 33 2 541 2 216 2 879 4 427 6 289 2 818 2 355 2 739 2 945 2 106 4 484 2 363 2 231 2 678 4 953 4 680 2 895 2 955 2 559 2 370 4 563 2 762 8 119 2 902 4 564 2 1022 2 493 2 242 2 243 2 244 2 689 6 245 6 58 2 912 4 254 2 255 2 638 2 1040 2 581 6 694 2 64 4 
818 2 648 2 3 2 355 2 106 2 484 2 857 6 231 2 678 2 71 4 953 8 167 2 896 2 895 2 955 2 559 2 370 4 762 8 564 2 411 2 493 2 242 2 243 2 244 2 19 4 689 8 414 2 96 2 912 2 33 2 254 2 216 2 879 2 427 6 581 8 694 2 64 2 289 2 
648 2 3 2 513 2 193 2 857 6 70 2 71 4 464 2 985 2 273 2 655 2 411 2 18 2 594 4 19 12 414 2 95 2 96 2 33 2 541 2 216 2 879 4 427 6 289 2 818 2 355 2 739 2 945 2 106 4 484 2 363 2 231 2 678 4 953 8 680 2 895 2 955 2 559 2 370 4 563 2 762 8 119 2 902 4 564 2 1022 2 493 2 242 2 243 2 244 2 689 6 245 6 58 2 912 4 254 2 255 2 638 2 1040 2 581 10 694 2 64 4 
818 2 648 2 3 2 355 2 106 2 484 2 857 4 460 2 231 2 678 2 71 2 167 2 896 2 895 2 955 2 1016 2 559 2 930 2 370 2 762 2 564 2 411 2 493 2 243 2 244 2 19 4 689 4 632 2 96 2 912 2 33 2 254 2 731 2 216 2 879 2 427 2 694 2 289 2 
507 6 0 2 3 2 513 2 789 2 794 6 273 2 275 2 529 6 532 6 531 6 15 6 18 2 802 2 19 46 804 2 30 1 810 2 33 2 541 2 813 2 34 2 289 2 818 2 821 2 823 2 297 2 826 2 830 6 559 2 563 2 48 6 564 2 49 2 306 2 837 2 58 2 316 2 842 6 581 2 64 6 857 12 70 2 71 4 861 2 586 2 74 2 77 6 339 4 864 2 83 7 594 6 86 6 870 4 95 2 96 2 348 1 877 2 879 4 100 1 355 2 104 1 106 4 359 2 363 2 895 2 369 2 370 4 902 4 119 2 911 2 632 4 912 4 638 2 641 6 921 2 648 2 136 1 138 4 392 2 393 2 140 2 394 2 395 2 397 6 930 4 655 4 411 2 936 1 415 2 417 2 418 2 939 6 159 2 426 2 427 8 945 2 435 2 674 2 948 6 947 2 678 8 954 2 680 2 955 2 444 1 446 2 689 8 965 8 691 2 451 2 968 2 453 2 694 2 696 2 457 1 192 4 978 7 193 2 459 1 460 6 704 2 464 4 982 2 985 2 207 4 991 4 725 10 476 2 729 2 731 2 216 2 219 6 737 2 226 2 739 4 484 2 231 2 1012 6 487 2 1016 4 236 8 1018 2 239 12 762 6 1022 2 493 2 242 4 243 4 244 2 245 24 499 6 254 2 1035 2 255 2 773 2 258 6 1040 2 
0 2 507 6 648 2 3 2 138 4 392 2 513 2 393 2 394 2 140 2 395 2 397 6 789 2 794 6 273 2 930 4 655 4 275 2 529 6 15 6 531 6 532 6 411 2 18 2 802 2 19 46 415 2 804 2 418 2 417 2 939 6 810 2 33 2 541 2 813 2 159 2 426 2 34 2 427 8 289 2 818 2 821 2 945 2 823 2 435 2 674 2 947 2 948 6 297 2 826 2 678 8 953 4 680 2 954 2 830 6 955 2 559 2 48 6 563 2 564 2 446 2 49 2 306 2 837 2 689 8 965 8 691 2 451 2 58 2 316 2 968 2 842 6 453 2 581 6 694 2 64 6 696 2 192 4 193 2 857 12 70 2 460 6 861 2 704 2 71 4 464 4 982 2 586 2 74 2 985 2 77 6 339 4 864 2 86 6 594 6 207 4 870 4 991 4 95 2 725 10 96 2 476 2 729 2 731 2 877 2 216 2 219 6 879 4 737 2 226 2 355 2 739 4 359 2 106 4 484 2 363 2 231 2 1012 6 487 2 369 2 895 2 1016 4 1018 2 236 8 370 4 239 12 762 6 119 2 902 4 1022 2 493 2 242 4 243 4 244 2 245 24 499 6 911 2 632 4 912 4 1035 2 254 2 255 2 258 6 773 2 638 2 641 6 1040 2 921 2 
0 2 507 6 648 2 3 2 138 4 513 2 392 2 393 2 394 2 140 2 395 2 397 6 789 2 794 8 273 2 930 4 655 2 934 2 275 2 529 6 15 6 531 6 532 6 411 2 18 2 802 2 19 44 415 2 805 2 804 2 418 2 417 2 939 6 810 2 33 2 541 2 813 2 159 2 426 2 34 2 427 10 289 2 818 2 821 2 945 2 823 2 436 2 435 2 947 2 948 6 297 4 826 2 678 8 953 4 680 2 954 4 830 6 955 2 559 2 48 6 563 2 564 2 446 2 49 2 51 2 306 2 837 2 689 10 965 8 691 2 451 2 58 2 316 2 968 2 842 6 453 2 581 4 694 2 64 6 696 2 192 4 193 2 857 16 70 2 460 6 861 2 704 2 71 4 464 4 982 2 586 2 74 2 985 2 77 6 339 4 864 2 86 8 594 6 207 4 208 2 870 4 991 6 725 8 96 2 476 2 729 2 731 2 877 2 216 2 219 6 879 4 737 2 226 4 355 2 739 4 359 2 106 4 484 2 363 2 231 2 1012 6 487 2 369 2 896 2 895 2 1016 4 1018 2 754 2 236 12 370 4 239 10 762 6 902 4 493 2 242 4 243 4 244 2 245 22 499 6 246 2 911 2 632 4 912 4 1035 2 254 2 255 2 258 6 773 2 638 2 641 6 1040 2 921 2 
818 2 648 2 3 2 355 2 106 2 484 2 857 4 231 2 678 2 71 4 953 4 895 2 955 2 559 2 370 4 762 6 564 2 411 2 493 2 242 2 243 2 244 2 19 4 689 6 96 2 912 2 33 2 254 2 216 2 879 2 581 4 427 6 694 2 64 2 289 2 
648 2 3 2 138 2 392 2 513 2 393 2 140 2 395 2 789 2 273 2 794 6 275 2 411 2 18 2 802 2 19 28 415 2 804 2 810 2 33 2 159 2 427 6 289 2 818 2 819 2 823 2 435 2 674 2 948 6 297 3 678 2 954 3 955 2 559 2 684 2 564 2 306 2 689 6 174 2 691 2 58 2 967 2 581 2 694 2 64 2 193 2 700 2 857 4 71 4 464 4 586 2 985 2 336 2 339 4 594 6 86 6 597 2 870 4 991 4 211 2 993 3 725 2 96 2 216 2 879 2 737 2 226 3 739 4 355 2 106 2 484 2 363 2 231 2 751 2 369 2 895 2 370 4 236 8 239 4 762 6 493 2 242 2 243 2 244 2 245 24 912 2 254 2 255 2 773 2 
411 2 493 2 652 2 
411 2 493 2 652 2 
3 2 5 2 138 4 392 2 513 2 393 2 140 2 395 2 794 2 930 4 934 2 275 2 411 2 18 2 802 2 19 24 415 2 804 2 810 2 153 2 812 4 815 2 159 2 427 10 818 2 821 2 823 2 435 2 948 6 678 4 953 4 954 2 167 2 559 2 565 2 306 2 687 2 689 12 691 2 58 2 580 2 581 4 64 4 67 2 192 2 193 2 857 14 460 4 71 4 73 2 464 4 586 2 985 2 339 4 594 6 86 2 207 2 870 4 725 2 723 2 96 2 879 2 737 2 609 2 739 4 106 2 484 2 363 2 749 2 369 2 896 4 1016 4 236 2 370 4 239 4 762 6 493 2 242 4 243 4 245 16 499 2 907 2 632 4 912 2 255 2 773 2 
4 2 207 2 937 2 245 2 19 4 499 2 193 2 70 2 725 2 749 2 73 2 321 2 580 2 34 2 426 2 239 2 305 2 
3 2 5 2 138 4 392 2 513 2 393 2 140 2 395 2 794 2 930 4 934 2 275 2 411 2 18 2 802 2 19 20 415 2 804 2 810 2 153 2 812 4 815 2 159 2 427 10 818 2 821 2 823 2 435 2 948 6 678 4 953 4 954 4 167 2 559 2 565 2 306 2 53 2 687 2 689 12 691 2 58 2 455 2 580 2 581 4 64 4 67 2 192 2 193 2 857 14 460 4 71 4 464 4 586 2 985 2 339 4 594 6 86 2 870 4 723 2 96 2 879 2 737 2 609 2 739 4 106 2 484 2 363 2 749 2 369 2 896 4 1016 4 236 2 370 4 239 2 762 6 493 2 242 4 243 4 245 14 907 4 632 4 912 2 255 2 773 2 
3 2 5 2 138 4 392 2 513 2 393 2 140 2 395 2 794 2 930 4 934 2 275 2 411 2 18 2 802 2 19 24 415 2 804 2 810 2 153 2 812 4 815 2 159 2 427 10 818 2 821 2 823 2 435 2 948 6 678 4 953 4 954 2 167 2 559 2 565 2 306 2 687 2 689 12 691 2 58 2 580 2 581 4 64 4 67 2 192 2 193 2 857 14 460 4 71 4 73 2 464 4 586 2 985 2 339 4 594 6 86 2 207 2 870 4 725 2 723 2 96 2 879 2 737 2 609 2 739 4 106 2 484 2 363 2 749 2 369 2 896 4 1016 4 236 2 370 4 239 4 762 6 493 2 242 4 243 4 245 16 499 2 907 2 632 4 912 2 255 2 773 2 
2 2 263 24 779 2 511 2 266 4 513 2 514 2 7 2 267 2 269 6 515 2 789 2 519 4 272 1 792 2 522 2 794 14 275 6 797 2 277 12 800 8 278 12 18 2 802 2 535 6 19 64 25 34 805 2 806 30 539 4 283 4 32 2 811 2 810 2 285 2 37 2 546 2 821 4 293 2 40 2 823 4 554 2 555 2 297 16 826 26 300 18 833 2 304 18 562 2 51 2 306 2 54 12 837 2 55 2 56 2 568 4 838 2 313 2 312 2 839 2 57 20 58 2 59 2 315 8 574 10 317 6 575 2 576 4 578 6 846 2 62 3 326 2 327 18 850 2 851 12 852 6 855 4 68 4 584 4 858 2 333 2 334 2 588 8 336 2 75 2 339 6 341 4 865 8 593 20 867 2 89 6 85 2 86 14 594 6 595 2 870 6 599 2 93 2 343 6 94 4 873 10 604 2 606 2 347 4 877 2 876 2 608 6 97 2 351 2 880 2 99 6 885 76 884 14 102 4 101 2 356 48 888 2 359 2 889 6 107 4 108 6 614 2 891 2 892 56 109 20 363 2 893 12 365 12 894 4 369 4 897 2 899 6 619 2 115 2 621 2 901 2 118 2 624 2 120 2 903 3 905 2 625 4 628 12 909 2 373 2 127 2 634 2 378 2 382 2 381 6 917 2 385 2 919 2 640 6 132 14 133 6 643 2 649 28 647 2 138 2 391 2 393 4 395 6 926 2 398 12 403 2 404 18 932 6 143 2 408 12 144 2 410 2 412 6 659 2 148 2 415 2 149 2 416 2 152 4 420 6 419 2 422 2 663 4 156 6 423 4 943 4 158 2 665 4 162 2 670 2 669 3 433 2 435 2 436 4 948 14 675 2 437 2 950 18 165 2 166 4 952 4 679 2 681 6 954 28 442 2 956 2 683 6 684 2 170 2 171 8 446 4 963 18 172 6 448 2 173 6 964 8 966 2 691 2 452 2 183 2 185 6 187 4 190 12 695 12 698 12 975 2 976 2 193 2 460 70 463 4 195 2 704 46 464 4 200 2 201 4 985 2 986 2 708 2 710 2 709 10 204 2 714 2 205 2 471 4 206 18 208 2 720 2 209 6 991 12 992 2 722 12 211 2 993 2 727 6 994 2 997 2 729 2 213 12 214 2 215 6 999 3 733 20 735 2 220 32 1004 2 222 3 478 12 737 4 226 28 1006 2 740 2 739 4 741 2 229 2 744 10 485 6 1011 2 748 18 487 2 747 2 1015 2 750 2 751 2 488 54 752 2 233 2 236 40 753 2 754 2 238 6 756 2 759 2 239 2 764 6 763 8 765 3 494 6 766 20 241 2 1024 2 1025 2 496 6 245 34 1028 2 500 2 246 2 248 2 768 14 502 2 1032 6 251 2 253 2 1035 2 257 2 255 2 773 4 261 4 506 2 
546 2 226 2 741 2 744 2 297 2 789 2 704 6 954 2 897 2 442 2 794 2 236 2 709 4 765 2 492 2 86 2 55 2 448 2 245 2 19 2 991 2 992 2 502 2 574 2 
546 2 226 2 741 2 744 2 297 2 789 2 704 6 954 2 897 2 442 2 794 2 236 2 709 4 765 2 492 2 86 2 55 2 448 2 245 2 19 2 991 2 992 2 502 2 574 2 
546 2 226 2 741 2 744 2 297 2 789 2 704 6 954 2 897 2 442 2 794 2 236 2 709 4 765 2 492 2 86 2 55 2 448 2 245 2 19 2 991 2 992 2 502 2 574 2 
851 4 698 3 855 1 789 2 519 2 270 1 588 2 404 4 203 2 341 2 800 2 206 4 19 10 343 2 604 2 420 2 347 2 607 4 733 2 884 6 886 2 817 2 226 3 294 2 1009 2 893 3 950 4 488 6 954 3 897 2 236 2 622 2 171 2 688 2 172 2 568 2 245 4 767 3 576 2 915 2 578 4 848 2 327 4 
884 4 851 4 817 2 886 2 226 2 698 2 294 2 855 2 1009 2 893 2 950 4 789 2 270 2 519 2 954 2 488 6 897 2 588 2 404 4 236 2 203 2 622 2 171 2 341 2 800 2 688 2 206 4 172 2 568 2 19 10 245 4 343 2 767 2 604 2 420 2 347 2 607 4 915 2 576 2 578 4 733 2 848 2 327 4 
884 4 851 4 817 2 886 2 226 2 698 2 294 2 855 2 1009 2 893 2 950 4 789 2 270 2 519 2 954 2 488 6 897 2 588 2 404 4 236 2 203 2 622 2 171 2 341 2 800 2 688 2 206 4 172 2 568 2 19 10 245 4 343 2 767 2 604 2 420 2 347 2 607 4 915 2 576 2 578 4 733 2 848 2 327 4 
884 4 851 4 817 2 886 2 226 2 698 2 294 2 855 2 1009 2 893 2 950 4 789 2 270 2 519 2 954 2 488 6 897 2 588 2 404 4 236 2 203 2 622 2 171 2 341 2 800 2 688 2 206 4 172 2 568 2 19 10 245 4 343 2 767 2 604 2 420 2 347 2 607 4 915 2 576 2 578 4 733 2 848 2 327 4 
884 4 851 4 817 2 886 2 226 2 698 2 294 2 855 4 1009 2 893 2 950 4 789 2 270 4 519 2 954 2 488 6 897 2 588 2 404 4 236 2 203 2 622 2 171 2 341 2 800 2 688 2 206 4 172 2 568 2 19 10 245 4 343 4 767 2 604 2 420 2 347 2 607 4 915 2 576 2 578 4 733 2 848 2 327 4 
962 2 611 2 659 2 654 2 561 2 260 2 
57 2 962 2 673 2 946 2 429 2 113 2 935 2 
801 2 18 2 245 2 19 2 925 2 786 1 745 1 724 2 875 2 179 2 732 1 918 1 706 2 523 1 582 2 
884 15 851 12 822 1 266 2 68 1 512 2 855 6 485 4 979 2 519 2 270 4 368 2 588 6 958 2 47 2 171 6 562 2 341 6 800 6 307 2 495 4 568 6 19 6 245 6 311 2 838 2 343 6 347 6 576 6 256 2 578 4 187 2 
854 2 206 2 977 2 296 2 314 2 950 2 43 2 475 2 942 3 404 2 78 2 218 2 322 2 
551 1 854 2 206 2 19 1 245 1 977 2 296 2 872 2 314 2 950 2 43 4 475 2 942 6 181 2 404 2 78 2 218 2 322 2 
854 4 206 2 977 4 296 2 872 2 314 4 950 2 43 4 475 2 942 6 181 2 404 2 78 2 218 2 322 2 
551 1 854 8 206 2 19 1 245 1 977 8 296 2 872 8 314 8 950 2 43 4 475 2 942 10 181 6 404 2 78 2 218 2 322 2 
1021 2 
1021 2 
1021 2 
1021 2 
461 2 
