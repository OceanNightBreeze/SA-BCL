#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NullPointerException 
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V ERROR java.lang.NullPointerException (244,821) (244,821) 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 266 546 654 167 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.NullPointerException 56 593 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V FAILED junit.framework.AssertionFailedError 649 443 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (510,853) (510,853) 741 186 355 443 
daikon.test.VarInfoNameTest:testParse()V PASSED
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 628 186 355 443 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:indexOf([ZZ)I
jtb.JavaParser:jj_3R_48()Z
daikon.Quant:pairwiseGTE([I[I)Z
daikon.VarInfo:relate_var()V
jtb.syntaxtree.ClassOrInterfaceType:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName.NodeFinder:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:lexEqual([I[I)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.Intern:internSubsequence([JII)[J
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
jtb.JavaCharStream:backup(I)V
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.ProglangType:isScalar()Z
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I | CONSTANT | 43258 | 32 -> 33
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Poststate:Poststate(Ldaikon.VarInfoName;)V
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.Field:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.NodeFinder:visitField(Ldaikon.VarInfoName.Field;)Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.Quant:subsetOf([F[D)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoName.NodeFinder:NodeFinder(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.VarInfoAux:hashCode()I
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.Intern:internSubsequence([III)[I
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker; | ASSIGN | 1095 | = null
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
jtb.JavaParser:UnaryExpressionNotPlusMinus()Ljtb.syntaxtree.UnaryExpressionNotPlusMinus;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:ReferenceType()Ljtb.syntaxtree.ReferenceType;
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;ZZZZ)[Ljava.lang.String;
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
utilMDE.WeakHasherMap.EntrySet:size()I
jtb.JavaParser:jj_3_14()Z
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.UtilMDE:join([Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
jtb.ParseException:getMessage()Ljava.lang.String;
jtb.JavaParser:AdditiveExpression()Ljtb.syntaxtree.AdditiveExpression;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
jtb.JavaParser:jj_3R_50()Z
utilMDE.MathMDE:gcd(II)I
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaParser:jj_2_35(I)Z
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:enabled()Z
jtb.syntaxtree.ClassOrInterfaceType:ClassOrInterfaceType(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeListOptional;)V
jtb.JavaCharStream:getBeginColumn()I
daikon.Quant:lt(II)Z
daikon.Quant:subsetOf([B[I)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.Quant:memberOf(D[F)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
jtb.JavaParser:jj_3R_49()Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.UtilMDE:joinLines([Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
daikon.Quant:gt(II)Z
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.Poststate:repr_impl()Ljava.lang.String;
jtb.JavaParser:jj_3R_133()Z
daikon.VarInfoName.Slice:getUpperBound()Ldaikon.VarInfoName;
daikon.Quant:eq(DD)Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.test.VarInfoNameDriver.QuantifySimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
jtb.JavaParser:jj_3_13()Z
jtb.JavaParser:jj_3R_119()Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
jtb.JavaParser:MethodDeclarator()Ljtb.syntaxtree.MethodDeclarator;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([F[F)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.Debug:logOn()Z
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:eltwiseGT([I)Z
daikon.test.InvariantFormatTester:execute()Z
jtb.JavaParser:TypeBound()Ljtb.syntaxtree.TypeBound;
daikon.ProglangType:isArray()Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
jtb.JavaParser:ClassOrInterfaceBodyDeclaration(Z)Ljtb.syntaxtree.ClassOrInterfaceBodyDeclaration;
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.Intern:intern([J)[J
utilMDE.TestUtilMDE.1InternTest:test(Z)V
jtb.JavaParser:jj_3R_117()Z
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
jtb.JavaParser:jj_ntk()I
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfoName:applyPoststate()Ldaikon.VarInfoName;
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper.FreeVar:simplify_name_impl(Z)Ljava.lang.String;
jtb.syntaxtree.ResultType:ResultType(Ljtb.syntaxtree.NodeChoice;)V
jtb.JavaParser:CastExpression()Ljtb.syntaxtree.CastExpression;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.ProglangType:dimensions()I
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.inv.Invariant:justified()Z
daikon.VarInfoName:esc_name()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
jtb.JavaParser:jj_3R_118()Z
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParser:ClassOrInterfaceBody(Z)Ljtb.syntaxtree.ClassOrInterfaceBody;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.Quant:lexGT([I[I)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
jtb.JavaParser:jj_3R_58()Z
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
jtb.JavaParser:jj_3R_148()Z
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.VarInfoName.NodeFinder:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ldaikon.VarInfoName;
daikon.inv.Invariant:prob_and(DD)D
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.Quant:eltsLteIndex([I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
jtb.JavaParser:jj_3R_63()Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 10199 | = null
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
jtb.syntaxtree.TypeParameters:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.Quant:eltwiseLT([I)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.Invariant:prob_and(DDD)D
daikon.Quant:eltsGteIndex([I)Z
jtb.JavaParser:jj_2_16(I)Z
daikon.Quant:eltsEqual([II)Z
daikon.PptSlice2:arity()I
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:gte(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Ppt:Ppt()V
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
utilMDE.MathMDE:pow(II)I
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfoName.TypeOf:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName.Field:esc_name_impl()Ljava.lang.String;
jtb.JavaParser:ClassOrInterfaceDeclaration(I)Ljtb.syntaxtree.ClassOrInterfaceDeclaration;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
jtb.JavaParser:jj_scan_token(I)Z
daikon.inv.Invariant:logOn()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.Quant:union([I[I)[I
jtb.JavaParser:jj_3R_122()Z
jtb.JavaParser:MethodDeclaration(I)Ljtb.syntaxtree.MethodDeclaration;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
jtb.JavaParser:jj_3_10()Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
jtb.JavaParser:ConditionalAndExpression()Ljtb.syntaxtree.ConditionalAndExpression;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarInfoName.Replacer:visitField(Ldaikon.VarInfoName.Field;)Ldaikon.VarInfoName;
daikon.PptSlice0:initInvariantsSeen()V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaParser:jj_3R_60()Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
jtb.JavaParser:jj_3R_97()Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
jtb.syntaxtree.ReferenceType:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
jtb.Token:newToken(I)Ljtb.Token;
daikon.VarInfoName.QuantHelper:quant_var_initial_state(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParser:jj_3R_52()Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.QuantHelper:quant_execution_condition(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.Quant:eltsLTE([II)Z
daikon.Quant:eltsLT([II)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:lexLT([I[I)Z | CONDITION | 170646 | if (x) -> if (!x)
jtb.JavaParser:AndExpression()Ljtb.syntaxtree.AndExpression;
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:eltwiseLTE([I)Z
daikon.VarInfoName.Elements:getUpperBound()Ldaikon.VarInfoName;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.diff.InvMap:InvMap()V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.VarInfoName.Slice:getLowerBound()Ldaikon.VarInfoName;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
jtb.JavaParser:jj_3_1()Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
jtb.JavaParser:jj_3R_68()Z
daikon.Quant:eltsGTE([II)Z
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:memberOf(F[F)Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.VarInfoName.Add:amount()Ljava.lang.String;
jtb.syntaxtree.TypeBound:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParser:TypeParameters()Ljtb.syntaxtree.TypeParameters;
jtb.JavaParser:jj_3R_47()Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarInfoName.Replacer:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ldaikon.VarInfoName;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:memberOf(S[S)Z
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
jtb.JavaCharStream:BeginToken()C
jtb.JavaParser:TypeParameter()Ljtb.syntaxtree.TypeParameter;
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltwiseGTE([I)Z
utilMDE.Intern:numIntArrays()I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.VarInfoName.TypeOf:simplify_name_impl(Z)Ljava.lang.String;
jtb.JavaParser:ReturnStatement()Ljtb.syntaxtree.ReturnStatement;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
daikon.Quant:pairwiseLT([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.PptSlice1:arity()I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
jtb.JavaParser:jj_3R_116()Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
jtb.JavaParser:jj_2_14(I)Z
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:lte(II)Z
jtb.JavaParser:jj_3_21()Z
utilMDE.ArraysMDE:noDuplicates([J)Z
jtb.syntaxtree.NodeList:NodeList()V
utilMDE.ArraysMDE:sum([D)D
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:jj_2_13(I)Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_2_36(I)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
jtb.JavaCharStream:getEndColumn()I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
jtb.JavaParser:jj_3R_62()Z
jtb.JavaParser:EqualityExpression()Ljtb.syntaxtree.EqualityExpression;
daikon.VarInfoName.QuantHelper:quant_element_conditions(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.NodeFinder:inPre()Z
jtb.JavaParser:jj_3R_69()Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
jtb.JavaParser:BlockStatement()Ljtb.syntaxtree.BlockStatement;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.ProglangType:baseIsScalar()Z
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
jtb.JavaParser:ConditionalExpression()Ljtb.syntaxtree.ConditionalExpression;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:memberOf(I[I)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([I[I)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
jtb.JavaParser:jj_3R_86()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.VarInfoName:applyDecrement()Ldaikon.VarInfoName;
jtb.JavaParser:jj_3R_85()Z
daikon.Quant:setDiff([I[I)[I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.Quant:noDups([I)Z
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.Invariants:Invariants()V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan; | RETURN | 1528 | return null
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
jtb.JavaParser:jj_3_36()Z
daikon.ProglangType:isIntegral()Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
jtb.JavaParser:FormalParameters()Ljtb.syntaxtree.FormalParameters; | RETURN | 38282 | return null
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String; | CONDITION | 3378 | if (x) -> if (!x)
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
jtb.JavaParser:jj_3_35()Z
jtb.JavaParser:jj_2_24(I)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
jtb.JavaParser:InclusiveOrExpression()Ljtb.syntaxtree.InclusiveOrExpression;
utilMDE.MathMDE:gcd(JJ)J
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.Assert:assertTrue(Z)V
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Replacer:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
jtb.JavaParser:jj_3_12()Z
jtb.JavaParser:ConditionalOrExpression()Ljtb.syntaxtree.ConditionalOrExpression;
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String; | RETURN | 30997 | return null
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
jtb.JavaParser:jj_3_3()Z
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
jtb.JavaParser:jj_3R_96()Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:jj_3R_55()Z
jtb.JavaParser:jj_3R_120()Z
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
jtb.syntaxtree.TypeBound:TypeBound(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.ClassOrInterfaceType;Ljtb.syntaxtree.NodeListOptional;)V
daikon.VarInfoName.QuantHelper:quant_increment(Ldaikon.VarInfoName;ILdaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:passes()Z
jtb.JavaParser:jj_3R_56()Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.MathMDE:negate(I)I
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
jtb.JavaParser:jj_2_4(I)Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
jtb.JavaParser:jj_3R_76()Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParser:Type()Ljtb.syntaxtree.Type;
daikon.VarInfoName.Elements:getLowerBound()Ldaikon.VarInfoName;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
jtb.JavaCharStream:ReadByte()C
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
jtb.JavaParser:jj_3_24()Z
daikon.diff.DetailedStatisticsVisitor:freq(II)D
jtb.JavaParser:jj_3R_163()Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.VarInfoName:hashCode()I
daikon.Quant:subsetOf([S[S)Z
jtb.JavaParser:jj_2_21(I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
jtb.JavaCharStream:getEndLine()I
daikon.VarInfoName:isLiteralConstant()Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.ArraysMDE:max([I)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.Quant:eltsGtIndex([I)Z
jtb.JavaParser:jj_3R_87()Z
jtb.JavaParser:jj_3R_161()Z
utilMDE.MathMDE:modulus([I)[I
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.ProglangType:baseIsIntegral()Z
utilMDE.LimitedSizeIntSet:add(I)V
jtb.JavaParser:jj_3R_81()Z
utilMDE.FuzzyFloat:gt(DD)Z
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:ne(II)Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_3_15()Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
jtb.JavaParser:jj_3R_134()Z
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.Quant:eq(II)Z
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
jtb.JavaParser:jj_3R_54()Z
daikon.PptSlice0:arity()I
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.VarInfoName.Poststate:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z | STATEMENT | 149930 | stmt -> ;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfo:name()Ljava.lang.String;
jtb.JavaParser:jj_2_15(I)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.VarInfoName.ElementsFinder:inPre()Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
jtb.JavaParser:jj_3R_51()Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.ArraysMDE:sum([[D)D
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
jtb.JavaParser:UnaryExpression()Ljtb.syntaxtree.UnaryExpression;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName:inPrestateContext(Ldaikon.VarInfoName;)Z
daikon.Quant:slice([III)[I
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
jtb.JavaParser:ResultType()Ljtb.syntaxtree.ResultType;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.JavaParser:Statement()Ljtb.syntaxtree.Statement;
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:concat([I[I)[I
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.Quant:sameLength([I[I)Z
jtb.JavaParser:jj_3R_114()Z
daikon.inv.Invariant:getConfidence()D
utilMDE.WeakHasherMap:size()I
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfoName.Replacer:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.VarInfoName.AbstractVisitor:visitField(Ldaikon.VarInfoName.Field;)Ljava.lang.Object;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
jtb.JavaParser:jj_3_5()Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.ProglangType:isPseudoArray()Z
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
jtb.JavaParser:jj_3R_88()Z
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
utilMDE.MathMDE:sign(I)I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:new_ppt()V
jtb.syntaxtree.MethodDeclarator:MethodDeclarator(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.FormalParameters;Ljtb.syntaxtree.NodeListOptional;)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
jtb.JavaParser:MultiplicativeExpression()Ljtb.syntaxtree.MultiplicativeExpression;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
jtb.JavaParser:jj_3R_121()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I | CONSTANT | 65761 | 0 -> 1
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.inv.Invariant:prob_or(DD)D
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | CONSTANT | 4201 | 0 -> -1
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
jtb.JavaParser:ShiftExpression()Ljtb.syntaxtree.ShiftExpression;
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
jtb.JavaParser:Expression()Ljtb.syntaxtree.Expression;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:intern([I)[I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
jtb.syntaxtree.Modifiers:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.ArraysMDE:sorted([I)Z
jtb.syntaxtree.Type:Type(Ljtb.syntaxtree.NodeChoice;)V
daikon.VarInfoName.Prestate:esc_name_impl()Ljava.lang.String;
jtb.JavaCharStream:getBeginLine()I
daikon.VarInfoName.TypeOf:esc_name_impl()Ljava.lang.String;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:memberOf(J[J)Z
jtb.syntaxtree.Modifiers:Modifiers(Ljtb.syntaxtree.NodeListOptional;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.MathMDE:nonmodulus_strict([I)[I
jtb.JavaParser:jj_3R_53()Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
jtb.JavaParser:InstanceOfExpression()Ljtb.syntaxtree.InstanceOfExpression;
daikon.Quant:memberOf(F[D)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.VarInfoName.AbstractVisitor:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ljava.lang.Object;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.diff.InvMap:toString()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:intersection([I[I)[I
jtb.JavaCharStream:FillBuff()V
jtb.syntaxtree.Type:setParent(Ljtb.syntaxtree.Node;)V
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.Quant:eltwiseEqual([I)Z
jtb.JavaParser:jj_3R_61()Z
daikon.inv.Invariant:format()Ljava.lang.String;
jtb.syntaxtree.TypeParameter:TypeParameter(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;)V
jtb.JavaParser:jj_3R_123()Z
jtb.syntaxtree.ReferenceType:ReferenceType(Ljtb.syntaxtree.NodeChoice;)V
daikon.VarInfoName:name()Ljava.lang.String;
daikon.Quant:eltsEqualIndex([I)Z
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
jtb.JavaParser:jj_3R_57()Z
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
jtb.JavaParser:ClassOrInterfaceType()Ljtb.syntaxtree.ClassOrInterfaceType;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:isSubset([D[D)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltsGT([II)Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
jtb.JavaParser:jj_2_3(I)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.FuzzyFloat:gte(DD)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I | ASSIGN | 184000 | = null
jtb.syntaxtree.TypeParameter:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.test.VarInfoNameDriver.PostPreConverter:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseGT([I[I)Z
jtb.JavaParser:Block()Ljtb.syntaxtree.Block;
jtb.JavaParser:RelationalExpression()Ljtb.syntaxtree.RelationalExpression; | STATEMENT | 68469 | stmt -> ;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.RootNode:RootNode()V
daikon.Quant:eq(FF)Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.Quant:eltsLtIndex([I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.PostPreConverter:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName;
daikon.Quant:subsetOf([D[D)Z
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
jtb.JavaParser:jj_2_5(I)Z
daikon.Quant:lexLTE([I[I)Z
utilMDE.ArraysMDE:min([I)I
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern:internStrings([Ljava.lang.String;)V
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParser:jj_2_1(I)Z
jtb.JavaParser:jj_3R_89()Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.OrderedPairIterator:hasNext()Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
jtb.JavaParser:jj_2_12(I)Z
jtb.JavaParser:ExclusiveOrExpression()Ljtb.syntaxtree.ExclusiveOrExpression;
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.Quant:setEqual([I[I)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.MathMDE:gcd([I)I
jtb.JavaParser:jj_3_16()Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.diff.Node:Node()V
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:subsetOf([D[F)Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:jj_3R_135()Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.ArraysMDE:subarray([III)[I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
jtb.JavaParser:jj_3R_162()Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.Quant:eq(JJ)Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
jtb.JavaParser:jj_3_4()Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.Quant:pairwiseDivides([I[I)Z
jtb.syntaxtree.TypeParameters:TypeParameters(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.TypeParameter;Ljtb.syntaxtree.NodeListOptional;Ljtb.syntaxtree.NodeToken;)V
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.Intern:intern([D)[D
jtb.JavaParser:jj_3R_75()Z | CONDITION | 195384 | if (x) -> if (!x)
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.VarInfoName.NodeFinder:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.ArraysMDE:sum([I)I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
jtb.JavaCharStream:readChar()C
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.VarInfoName.Field:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
jtb.JavaParser:jj_3_22()Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.Quant:lexGTE([I[I)Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.VarInfoName.NodeFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
jtb.JavaParser:jj_2_10(I)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
853 2 620 2 510 2 19 2 472 2 473 2 222 4 429 2 852 2 
143 2 214 2 923 2 368 2 1 6 534 6 830 2 863 2 337 2 609 6 858 2 
398 4 809 6 494 2 383 2 373 2 853 2 284 6 78 2 669 6 510 2 772 2 886 6 348 4 
30 30 847 16 258 12 261 2 413 10 916 10 853 6 299 2 784 4 329 2 301 16 807 10 12 4 499 2 18 2 893 4 602 10 48 10 50 4 55 2 141 16 175 6 285 8 510 6 114 2 254 8 147 26 206 8 747 6 845 8 
614 6 311 4 
273 2 
30 6 690 2 847 2 258 2 382 2 694 2 413 2 916 2 301 2 633 2 12 2 807 4 786 2 602 2 48 2 435 2 76 2 141 2 176 2 254 2 147 4 869 2 747 2 
637 6 30 14 847 8 258 5 602 4 48 4 804 2 509 2 413 4 710 6 141 8 916 4 784 2 155 4 301 8 147 12 45 4 
322 2 657 2 875 2 150 2 717 2 2 2 553 2 554 2 721 2 212 2 233 4 624 2 39 4 477 4 272 10 564 14 762 2 732 2 276 2 925 4 642 2 532 2 433 4 278 2 220 4 606 2 770 2 371 4 899 4 173 4 198 62 144 2 865 4 119 4 583 4 208 6 227 4 85 10 909 8 749 2 
91 2 695 2 558 2 698 2 366 2 273 2 425 2 571 2 440 2 779 2 
86 2 408 2 323 2 2 2 261 2 915 2 879 2 557 2 473 2 880 2 755 2 419 2 300 2 672 2 806 2 631 2 365 4 598 2 334 2 733 2 17 2 338 2 453 2 434 2 220 2 342 2 932 2 173 4 575 4 611 2 541 2 612 2 818 2 844 2 406 2 465 2 909 2 
88 2 30 54 411 6 446 2 847 32 258 22 64 6 92 6 413 16 328 4 916 16 853 4 155 4 301 32 330 4 12 2 807 6 499 2 829 8 45 4 637 6 678 4 602 16 48 16 459 4 141 32 315 2 710 6 175 4 285 6 905 2 510 4 907 4 201 2 147 48 254 18 747 4 616 6 25 2 
208 2 909 2 732 2 
820 2 71 2 704 2 165 2 107 2 622 2 484 2 96 2 559 22 249 10 818 2 82 2 62 2 548 2 
585 2 350 2 587 1 588 1 719 2 590 4 5 2 728 2 364 2 127 2 596 1 366 1 14 2 478 4 479 2 480 2 240 2 599 2 19 2 601 1 135 2 483 6 140 2 374 6 610 3 744 1 745 1 746 2 490 1 149 4 27 2 619 12 849 1 259 11 31 2 623 2 151 1 153 6 386 2 853 32 40 2 629 1 156 2 630 2 498 2 274 6 161 1 636 2 396 11 505 2 47 1 169 6 57 1 510 30 778 1 655 3 653 2 874 2 780 2 184 1 662 2 666 3 670 2 188 2 787 2 427 2 887 2 428 1 890 2 891 2 192 2 535 2 895 3 438 2 681 2 683 2 684 2 321 1 93 4 695 1 97 2 562 2 449 6 332 6 100 6 920 2 451 2 922 5 924 2 570 1 221 17 572 2 111 2 814 2 112 2 113 2 934 2 345 1 346 3 937 2 229 4 
735 2 
853 2 454 2 
853 4 224 2 236 2 
467 2 468 46 470 4 720 2 232 2 3 4 722 2 235 4 6 4 475 2 238 4 729 8 11 2 482 2 738 2 247 14 20 46 487 2 743 2 748 22 29 48 256 24 751 4 750 2 756 2 758 46 497 2 496 2 269 20 43 2 765 4 502 2 53 16 282 2 771 4 287 176 775 2 513 6 63 2 291 8 292 2 514 2 515 12 294 6 519 146 297 2 523 2 305 2 68 2 526 6 529 4 307 6 530 8 310 2 789 2 790 2 73 28 312 46 314 4 77 8 791 34 793 4 80 2 544 2 795 2 81 2 547 4 796 8 84 4 797 2 90 38 325 2 801 4 94 46 803 4 556 2 98 2 99 2 561 8 333 24 102 4 566 2 103 46 340 4 811 16 110 4 574 146 578 2 817 2 580 4 121 46 351 4 352 20 353 6 356 2 823 2 822 4 361 2 592 2 362 2 363 4 827 2 828 2 594 46 130 4 835 2 605 4 604 2 139 2 840 4 145 8 378 46 146 8 379 2 842 2 615 34 148 2 621 2 385 2 855 4 856 2 389 14 392 8 162 2 395 4 638 2 641 2 401 4 644 46 168 2 645 2 860 2 861 2 402 2 172 2 646 4 647 2 177 8 179 24 405 2 652 4 872 2 656 8 407 2 410 4 876 4 412 2 663 2 185 8 416 46 668 4 187 2 420 2 421 2 883 14 674 2 424 10 675 2 888 4 430 20 190 2 191 2 896 4 436 2 900 2 901 22 902 36 904 2 199 8 682 2 439 46 908 2 204 2 685 2 209 10 688 2 689 4 692 2 919 146 215 4 452 2 702 2 706 2 926 2 219 10 707 14 218 6 708 2 456 10 930 2 935 2 463 20 228 2 714 2 
648 2 691 2 24 2 33 1 
648 2 617 2 
788 2 648 2 893 2 271 2 877 2 458 2 909 2 
648 2 458 2 871 2 
648 2 461 2 458 2 
550 2 632 2 691 2 
648 2 458 2 
239 2 632 2 
648 2 635 2 
613 2 632 2 691 2 
691 2 255 2 388 2 
125 2 691 2 914 2 
691 2 826 2 404 2 
104 2 691 2 4 2 
792 2 632 2 
648 2 540 2 
255 2 234 2 
125 2 335 2 
166 2 404 2 
104 2 381 2 
799 2 632 2 
104 2 237 2 
603 2 404 2 
125 2 226 2 
834 2 255 2 
613 2 632 2 10 2 691 2 
126 2 613 2 632 2 10 2 691 2 
903 2 632 2 691 2 
632 2 691 2 867 2 
912 2 486 2 67 2 918 2 
271 2 552 2 909 2 687 2 
271 2 290 2 877 2 552 2 909 2 687 2 
648 2 893 2 271 2 471 2 458 2 909 2 
476 2 612 2 
893 2 271 2 909 2 680 2 
810 2 404 2 
104 2 354 2 
319 2 255 2 
125 2 318 2 
324 2 
104 2 125 2 843 2 
104 2 125 2 211 2 
104 2 125 2 929 2 
821 6 244 2 327 2 359 2 271 2 909 2 
632 2 660 2 
105 2 108 2 152 2 358 2 898 2 839 2 591 2 559 6 376 2 202 2 885 2 884 4 776 2 832 2 764 2 44 2 132 4 528 2 
691 2 618 2 
814 2 
350 2 719 2 123 1 357 2 590 4 5 2 726 2 728 2 127 2 14 2 478 4 479 2 367 2 242 2 19 2 135 2 837 2 483 6 243 2 140 2 374 2 744 2 26 2 149 4 27 6 619 6 623 2 386 2 753 2 853 26 625 4 627 2 156 2 498 2 274 6 390 2 766 2 397 2 163 2 505 2 400 2 57 2 174 4 510 26 870 2 653 2 780 2 662 8 670 2 303 2 890 2 308 2 72 2 681 2 317 2 79 1 684 2 794 2 207 2 444 2 551 4 93 4 562 2 917 2 332 2 100 4 101 2 565 2 451 2 703 2 221 4 931 2 113 2 934 2 120 2 937 2 
350 2 122 2 719 2 357 2 590 4 5 2 726 2 728 2 127 2 14 2 478 4 15 2 479 2 367 2 242 2 19 2 135 2 483 6 243 2 140 2 374 2 744 2 26 2 149 4 27 6 619 6 623 2 386 2 753 2 853 26 625 4 156 2 498 2 274 6 390 2 766 2 397 2 505 2 400 2 57 2 174 4 510 26 870 2 653 2 874 2 780 2 661 2 662 8 670 2 303 2 890 2 308 2 72 2 538 2 681 2 317 2 684 2 794 2 207 2 444 2 551 4 93 4 562 2 917 2 332 2 100 6 920 2 101 2 565 2 451 2 703 2 221 4 931 2 113 2 934 2 120 2 937 2 
579 2 
432 2 117 2 
727 2 462 2 74 2 
727 2 462 2 74 2 
350 2 1 12 719 2 357 2 590 4 5 2 727 6 9 2 728 2 14 4 478 4 597 2 831 2 479 2 367 2 833 4 481 2 600 2 133 2 19 2 368 4 836 2 135 2 483 2 140 2 485 4 608 2 609 16 143 4 489 2 375 2 149 4 27 2 619 2 623 2 850 2 386 4 853 24 154 2 156 4 498 2 274 6 390 6 857 2 858 4 505 4 507 6 52 2 768 2 54 2 863 4 510 16 288 2 289 2 868 2 653 2 874 2 780 2 662 4 518 2 878 2 65 2 670 2 881 4 785 2 671 6 890 2 531 2 534 12 194 4 537 4 196 2 74 4 539 2 681 2 200 2 684 2 320 2 794 4 205 2 89 2 93 4 693 2 95 4 214 4 562 2 100 6 920 2 565 4 451 2 923 4 339 2 221 2 341 4 113 2 816 2 934 2 462 2 115 2 116 4 711 2 936 2 713 2 937 2 
531 2 257 2 432 2 133 2 533 2 134 2 693 2 196 2 403 2 343 2 853 4 816 2 8 2 510 2 156 2 288 2 653 2 
350 2 1 12 719 2 357 2 590 4 723 2 5 2 727 6 9 2 728 2 14 4 478 4 597 2 831 2 479 2 367 2 833 4 481 2 600 2 133 2 19 2 368 4 836 2 135 2 483 2 140 2 485 4 608 2 609 16 143 4 489 2 149 4 27 2 619 2 623 2 850 2 386 4 853 24 154 2 156 2 498 2 274 6 390 6 858 4 505 4 507 6 52 2 768 4 863 4 283 2 510 16 289 2 868 2 653 2 874 2 780 2 516 2 662 4 518 2 878 2 65 2 881 4 670 2 785 2 671 6 673 2 890 2 531 2 534 12 194 4 537 4 74 4 539 2 681 2 684 2 320 2 794 4 205 2 89 2 93 4 693 2 95 4 213 2 214 4 562 2 100 6 920 2 565 4 451 2 923 4 339 2 221 4 457 2 341 4 113 2 816 2 934 2 462 2 115 2 116 4 711 2 936 2 713 4 937 2 
350 2 1 12 231 2 719 2 357 2 590 4 5 2 727 6 9 2 728 2 14 4 478 4 597 2 831 2 479 2 367 2 833 4 481 2 600 2 133 2 19 2 368 4 836 2 135 2 483 2 140 2 485 4 608 2 609 16 143 4 489 2 149 4 27 2 619 2 623 2 850 2 386 4 853 24 154 2 156 4 498 2 274 6 390 6 763 2 858 4 505 4 507 6 52 2 768 2 863 4 283 2 510 16 288 2 289 2 868 2 653 2 874 2 780 2 183 2 662 4 518 2 878 2 65 2 670 2 881 4 785 2 671 6 304 2 890 2 531 2 534 12 194 4 537 4 196 2 74 4 539 2 681 2 684 2 320 2 794 4 205 2 89 2 93 4 693 2 95 4 214 4 562 2 100 6 920 2 565 4 451 2 923 4 339 2 221 2 341 4 344 2 113 2 816 2 934 2 462 2 115 2 116 4 711 2 936 2 713 4 937 2 
0 1 350 2 586 2 716 2 718 2 719 2 590 2 5 2 127 2 478 4 479 2 367 2 19 2 602 2 135 2 369 2 483 6 140 2 141 2 374 2 488 2 253 2 380 2 147 4 23 2 149 4 27 6 30 6 619 8 847 2 623 2 262 2 754 2 266 2 853 26 156 2 498 2 760 1 274 6 761 2 390 2 391 2 45 2 501 2 639 2 504 2 48 2 49 2 51 2 167 2 170 2 510 20 864 2 650 2 651 2 61 2 653 2 654 2 780 2 781 2 413 2 295 2 782 2 298 2 301 2 525 2 426 2 306 6 889 2 431 2 892 2 676 2 677 2 195 2 681 2 684 2 546 2 83 4 551 4 93 2 555 1 916 2 562 2 332 2 100 2 451 2 699 2 569 2 221 2 109 2 710 4 113 2 934 2 118 2 
619 2 551 2 492 4 659 2 752 2 520 2 853 2 268 2 917 6 332 3 127 2 331 2 731 2 483 2 737 2 221 3 897 2 372 2 374 3 59 2 815 3 510 2 27 2 491 2 
619 2 551 2 492 4 659 2 752 2 520 2 853 2 268 2 917 6 332 2 127 2 331 2 731 2 483 2 737 2 221 2 897 2 372 2 374 2 59 2 815 2 510 2 27 2 491 2 
619 2 551 2 492 4 659 2 752 2 520 2 853 2 268 2 917 6 332 2 127 2 331 2 731 2 483 2 737 2 221 2 897 2 372 2 374 2 59 2 815 2 510 2 27 2 491 2 
413 2 301 2 882 2 127 2 193 4 309 3 602 2 607 2 740 3 141 2 374 3 542 2 543 6 841 2 147 4 619 2 30 5 847 2 913 2 805 2 853 10 916 2 626 4 560 2 854 2 449 2 277 4 48 2 927 2 279 4 221 3 169 2 709 2 171 3 175 2 59 2 285 4 510 4 938 2 181 4 
413 2 301 2 882 2 127 2 193 4 309 2 602 2 607 2 740 2 141 2 374 2 542 2 543 6 841 2 147 4 254 2 619 2 30 4 847 2 258 2 913 2 805 2 853 10 916 2 626 4 560 2 854 2 449 2 499 2 277 4 48 2 927 2 279 4 221 2 169 2 709 2 171 2 175 2 59 2 285 4 510 4 938 2 181 4 
413 2 301 2 882 2 127 2 193 4 309 2 602 2 607 2 740 2 141 2 374 2 542 2 543 6 841 2 147 4 254 2 619 2 30 4 847 2 258 2 913 2 805 2 853 10 916 2 626 4 560 2 854 2 449 2 499 2 277 4 48 2 927 2 279 4 221 2 169 2 709 2 171 2 175 2 59 2 285 4 510 4 938 2 181 4 
413 2 301 2 882 2 127 2 193 4 309 2 602 2 607 2 740 2 141 2 374 2 542 2 543 6 841 2 147 4 254 2 619 2 30 4 847 2 258 2 913 2 805 2 853 10 916 2 626 4 560 2 854 2 449 2 499 2 277 4 48 2 927 2 279 4 221 2 169 2 709 2 171 2 175 2 59 2 285 4 510 4 938 2 181 4 
413 2 301 2 882 2 127 2 193 4 309 2 602 2 607 2 740 2 141 2 374 2 542 2 543 6 841 2 147 4 254 4 619 2 30 4 847 2 258 4 913 2 805 2 853 10 916 2 626 4 560 2 854 2 449 2 499 4 277 4 48 2 927 2 279 4 221 2 169 2 709 2 171 2 175 2 59 2 285 4 510 4 938 2 181 4 
58 2 503 2 136 2 442 2 138 2 734 2 
293 2 703 2 730 2 442 2 664 2 34 2 417 2 
106 2 278 1 623 2 212 1 75 2 414 2 56 2 593 2 853 4 510 4 581 1 22 2 808 2 393 1 527 1 
30 12 411 4 846 2 446 1 847 6 258 6 413 5 782 2 853 6 916 5 301 6 829 2 499 4 391 2 733 2 45 2 501 2 399 2 894 2 678 2 602 5 48 5 862 2 710 3 141 6 742 2 175 2 285 4 510 6 147 11 254 6 25 1 
873 2 217 2 241 2 193 2 279 2 137 2 415 2 474 2 37 7 853 1 418 1 510 1 773 2 577 2 267 4 712 2 584 2 181 2 
873 4 217 2 241 2 193 2 279 2 137 4 474 2 415 2 37 6 773 2 577 2 267 4 712 2 584 4 181 2 
873 8 217 6 241 2 193 2 279 2 137 8 474 8 415 2 37 10 853 1 418 1 510 1 773 2 577 2 267 4 712 2 584 8 181 2 
873 2 241 2 193 2 279 2 137 2 415 2 37 2 773 2 577 2 267 2 712 2 584 2 181 2 
715 2 355 2 469 4 124 4 590 44 360 6 724 4 7 8 595 4 128 8 13 10 16 4 131 4 736 2 135 2 246 1 739 16 741 4 21 4 251 4 377 10 28 2 848 10 851 6 35 11 263 4 265 8 264 10 495 4 387 4 757 4 853 78 498 6 270 2 157 10 158 4 500 4 159 24 394 2 634 4 275 24 164 10 46 4 767 4 640 4 859 4 643 4 508 16 769 32 286 8 510 70 774 16 649 2 512 4 866 2 60 2 777 2 180 4 874 26 409 4 665 6 521 4 296 4 66 24 667 4 186 2 422 2 522 4 524 4 423 4 70 2 536 4 313 4 679 4 197 30 437 2 316 4 906 8 441 2 203 2 545 4 686 4 443 2 210 2 549 4 798 16 800 2 447 4 910 4 93 36 696 2 697 8 100 102 450 4 920 28 216 14 451 6 336 4 568 4 705 6 928 10 455 2 812 4 573 8 225 2 460 4 576 2 582 2 347 8 349 4 
874 4 701 2 798 4 230 2 355 2 135 2 93 4 590 4 741 2 853 12 225 2 186 2 510 12 270 2 498 2 203 2 100 10 866 2 920 4 777 2 443 2 210 2 451 2 
715 2 589 22 469 6 355 2 824 2 124 6 360 8 590 112 825 2 724 4 129 4 16 4 736 2 838 8 135 8 370 8 142 2 741 10 21 6 250 2 251 10 252 24 377 16 28 2 848 16 260 24 851 5 384 4 35 16 263 8 36 4 495 6 265 16 38 10 387 10 853 150 759 4 498 14 41 4 42 12 157 16 158 6 500 6 160 2 159 124 275 92 46 6 164 18 767 4 640 6 859 6 506 8 643 4 280 26 281 4 286 42 510 134 774 42 511 2 178 2 649 2 866 8 777 5 180 4 658 4 182 4 409 6 874 58 521 6 665 10 296 6 66 84 667 6 783 26 186 2 302 18 522 6 524 10 423 6 69 2 189 2 536 6 313 4 679 6 197 34 437 4 316 4 203 2 545 4 686 4 443 2 210 8 549 4 445 10 87 11 798 28 447 6 448 24 93 88 911 24 326 10 802 4 696 2 563 4 100 248 450 6 920 58 921 90 216 12 451 14 336 6 567 6 700 90 568 6 705 36 812 4 223 6 813 4 573 24 933 24 225 8 576 4 460 4 819 2 347 50 464 2 466 8 
874 6 798 8 848 2 355 2 493 2 93 6 517 2 32 2 590 6 521 2 667 2 853 14 186 2 628 2 498 2 270 2 100 18 157 2 920 6 159 2 451 2 568 2 135 2 245 2 248 2 225 2 510 14 377 2 203 2 866 2 443 2 777 2 210 2 
725 2 
