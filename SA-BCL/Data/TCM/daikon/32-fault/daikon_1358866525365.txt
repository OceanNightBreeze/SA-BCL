#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V ERROR java.lang.ArrayIndexOutOfBoundsException 315 
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.NullPointerException 336 279 187 
utilMDE.TestUtilMDE:testOptions()V ERROR utilMDE.Options$ArgException 393 
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 231 171 39 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.diff.XorVisitorTester:testXor()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 
daikon.test.InvariantFormatTester:testFormats()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 211 267 216 91 207 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 222 237 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 229 117 269 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.Error 259 229 117 269 
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (79,221) (79,221) 62 229 117 269 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (79,221) 239 229 117 269 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.MathMDE:missing_numbers([I)[I
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quant:eltsGTE([II)Z
utilMDE.MathMDE:gcd(II)I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Quant:ne(II)Z
daikon.Quant:concat([I[I)[I
daikon.Quant:intersection([I[I)[I
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.Quant:memberOf(F[F)Z
daikon.Quant:lexLTE([I[I)Z
utilMDE.FuzzyFloat:indexOf([DD)I
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.Quant:eltsGteIndex([I)Z
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:lte(II)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.Quant:union([I[I)[I
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.Quant:lexLT([I[I)Z | STATEMENT | 170908 | stmt -> ;
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.Quant:subsetOf([S[S)Z
jtb.JavaCharStream:ReadByte()C
daikon.Quant:eq(JJ)Z
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.Quant:noDups([I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.OrderedPairIterator:hasNext()Z
daikon.Quant:subsetOf([B[I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
jtb.JavaCharStream:BeginToken()C
utilMDE.MathMDE:sign(I)I
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.FuzzyFloat:lt(DD)Z
utilMDE.MathMDE:pow(II)I
daikon.Quant:slice([III)[I
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:setnext2()V
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.ArraysMDE:sum([I)I
utilMDE.LimitedSizeIntSet:size()I
daikon.Ppt:Ppt()V
utilMDE.WeakHasherMap:processQueue()V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:setEqual([I[I)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([ZZ)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.Quant:memberOf(J[J)Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object; | RETURN | 32728 | return null
daikon.Quant:eltsLtIndex([I)Z
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
jtb.JavaCharStream:getEndColumn()I
daikon.Quant:lt(II)Z
utilMDE.ArraysMDE:max([I)I
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:eltwiseLTE([I)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.ArraysMDE:element_range([I)I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseNotEqual([I[I)Z
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V | CONDITION | 10865 | if (x) -> if (!x)
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.VarInfoName:hashCode()I
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
utilMDE.ArraysMDE:concat([I[I)[I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.MathMDE:pow_fast(II)I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.Intern:numIntArrays()I
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.Quant:gte(II)Z
daikon.Quant:subsetOf([I[I)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltwiseEqual([I)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.MathMDE:negate(I)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
jtb.JavaParser:jj_ntk()I
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:memberOf(D[F)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.Quant:eltwiseGT([I)Z
utilMDE.Intern:internSubsequence([III)[I
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.Quant:subsetOf([F[F)Z
daikon.Quant:subsetOf([D[D)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsEqual([II)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.Options.ArgException:ArgException(Ljava.lang.String;)V
utilMDE.MathMDE:nonmodulus_strict([I)[I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.ModBitTracker:ModBitTracker(I)V | OPERATOR | 2283 | >= -> ==
utilMDE.Intern:intern([D)[D
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:eltsLT([II)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.Quant:isReverse([I[I)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.inv.Invariant:prob_and(DD)D
utilMDE.ArraysMDE:subarray([JII)[J
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:memberOf(S[S)Z
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.Invariant:prob_or(DD)D
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | CONSTANT | 10778 | 3 -> 0
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
utilMDE.Assert:assertTrue(Z)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.Quant:sameLength([I[I)Z
jtb.JavaCharStream:backup(I)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | CONDITION | 65850 | if (x) -> if (!x)
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.Quant:gt(II)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap:size()I
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.Quant:eltwiseLT([I)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.PptSlice0:arity()I
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:eltsLteIndex([I)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.ArraysMDE:min([I)I
utilMDE.Intern:intern([J)[J
daikon.Quant:lexGTE([I[I)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.VarInfoAux:hashCode()I
daikon.inv.Invariant:prob_is_ge(DD)D
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.ProglangType:dimensions()I
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.MathMDE:gcd(JJ)J
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.Quant:eltsGT([II)Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:subsetOf([D[F)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.Invariants:Invariants()V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName; | RETURN | 4209 | return null
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.MathMDE:modulus([I)[I
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.Quant:memberOf(F[D)Z
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:pairwiseGT([I[I)Z
daikon.Quant:eq(II)Z
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.Quant:eltsNotEqual([II)Z
utilMDE.MathMDE:gcd([I)I
daikon.Quant:setDiff([I[I)[I
daikon.Quant:eq(DD)Z
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object; | RETURN | 62299 | return null
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:lexGT([I[I)Z
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.Intern:internSubsequence([JII)[J
jtb.JavaCharStream:readChar()C
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
jtb.JavaCharStream:getEndLine()I
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltwiseGTE([I)Z
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.Quant:subsetOf([F[D)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
jtb.JavaCharStream:FillBuff()V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.Quant:pairwiseGTE([I[I)Z
daikon.Quant:lexEqual([I[I)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Intern:intern([I)[I
daikon.Quant:pairwiseEqual([I[I)Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.Quant:memberOf(I[I)Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:sum([D)D
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I | CONSTANT | 11181 | 1 -> 0
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eq(FF)Z
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltsGtIndex([I)Z
utilMDE.MathMDE:mod_positive(II)I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:eltsLTE([II)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
140 2 264 2 337 2 79 2 151 2 221 2 65 4 105 2 73 2 
145 2 314 2 18 2 77 6 31 2 48 2 260 2 24 2 377 2 61 6 304 6 
104 2 225 2 388 2 6 2 157 2 315 2 74 2 
161 8 213 4 310 2 79 6 166 16 143 29 234 26 167 10 262 6 340 2 169 12 192 10 399 8 176 2 373 16 221 6 346 8 88 4 243 4 380 8 224 2 276 16 202 2 67 10 385 4 72 10 358 2 284 10 159 2 362 6 
131 4 250 6 
392 2 
110 2 113 2 50 2 261 2 168 2 170 2 219 2 266 2 372 2 118 2 374 2 221 4 120 2 375 2 177 2 64 2 16 2 224 2 133 4 71 2 73 2 76 2 288 2 78 4 79 4 81 2 83 2 294 4 194 2 197 2 342 2 147 2 40 2 352 2 205 2 252 2 412 2 356 2 306 2 254 2 103 2 209 2 256 4 361 2 
213 2 30 2 165 4 310 2 79 4 190 4 166 32 143 54 167 16 234 48 262 4 169 22 218 2 235 2 192 16 296 4 370 8 399 6 373 32 58 6 221 4 122 4 345 6 404 6 346 18 180 4 244 2 181 2 245 6 276 32 93 2 246 4 67 16 354 6 102 6 72 6 284 16 230 4 362 4 
134 2 391 2 168 2 
15 2 408 2 16 2 3 22 312 2 321 2 313 10 54 2 326 2 38 2 389 2 149 2 242 2 406 2 
213 2 166 2 143 6 167 2 234 4 169 2 192 2 236 2 373 2 346 2 223 2 298 2 350 2 276 2 152 2 67 2 69 2 355 2 414 2 72 4 46 2 284 2 362 2 
75 2 88 2 276 8 246 4 166 8 143 16 234 12 167 4 67 4 354 6 169 4 174 2 192 4 373 8 58 6 122 4 284 4 
27 2 187 2 258 36 2 2 164 2 336 2 366 2 5 10 292 2 32 2 52 2 168 6 294 2 55 2 120 2 86 6 403 4 124 2 150 2 274 2 320 2 384 2 279 2 99 2 305 2 42 2 45 2 134 2 332 2 390 2 391 4 136 2 285 4 
398 2 393 2 127 2 186 2 405 2 
311 2 116 2 221 8 267 2 273 4 66 4 383 2 280 2 135 4 138 2 141 2 189 2 79 8 295 2 148 2 87 2 407 4 299 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
271 2 79 2 
201 2 79 4 293 2 
212 2 
309 2 0 2 188 2 231 2 367 2 82 2 51 2 84 2 341 6 171 2 265 2 401 2 35 6 343 2 121 2 39 2 316 6 379 2 272 2 319 2 353 2 323 2 228 2 22 2 156 2 108 2 
227 2 328 2 126 2 396 1 
328 2 200 2 
243 2 11 2 328 2 365 2 106 2 184 2 168 2 
70 2 328 2 365 2 
155 2 328 2 365 2 
227 2 9 2 198 2 
328 2 365 2 
9 2 182 2 
328 2 331 2 
227 2 9 2 363 2 
227 2 339 2 154 2 
172 2 227 2 233 2 
227 2 21 2 327 2 
109 2 227 2 359 2 
9 2 160 2 
163 2 328 2 
249 2 154 2 
112 2 233 2 
175 2 21 2 
109 2 347 2 
214 2 9 2 
109 2 19 2 
402 2 21 2 
233 2 255 2 
100 2 154 2 
227 2 9 2 363 2 360 2 
227 2 1 2 9 2 363 2 360 2 
227 2 9 2 17 2 
227 2 90 2 9 2 
351 2 248 2 115 2 130 2 
10 2 184 2 168 2 137 2 
10 2 106 2 184 2 168 2 137 2 26 2 
243 2 328 2 365 2 184 2 333 2 168 2 
44 2 147 2 
243 2 56 2 184 2 168 2 
287 2 21 2 
109 2 4 2 
196 2 154 2 
413 2 233 2 
109 2 28 2 233 2 
109 2 14 2 233 2 
109 2 338 2 233 2 
109 2 263 2 233 2 
168 2 238 2 318 6 251 6 184 2 210 2 286 2 139 2 
9 2 303 2 
13 2 178 2 179 2 349 2 3 6 289 2 111 4 49 2 96 2 34 2 206 2 173 2 400 2 36 2 325 2 208 2 334 4 308 2 
227 2 282 2 
68 2 
311 2 116 2 221 8 267 2 273 4 66 4 383 2 280 2 135 4 138 2 141 2 79 8 189 2 295 2 148 2 87 2 407 4 94 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
311 2 116 2 221 8 267 2 273 6 66 4 383 2 280 2 135 4 138 2 141 2 189 2 79 8 290 2 295 2 344 2 148 2 87 2 407 4 94 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
63 2 12 2 382 2 
63 2 12 2 382 2 
311 2 116 2 221 8 267 2 273 5 66 4 383 2 280 2 135 4 138 2 141 2 189 2 79 8 290 1 295 2 344 1 148 2 87 2 407 4 94 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
311 2 116 2 221 8 267 2 273 6 66 4 383 2 280 2 135 4 138 2 141 2 189 2 79 8 290 2 295 2 344 2 148 2 87 2 407 4 94 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
311 2 116 2 221 8 267 2 273 5 66 4 383 2 280 2 135 4 138 2 141 2 79 8 189 2 290 1 295 2 344 1 148 2 87 2 407 4 94 2 409 2 95 2 203 2 302 2 410 2 253 2 211 2 
311 2 364 1 216 2 371 1 221 8 267 2 270 2 273 3 275 2 381 2 277 2 183 2 66 4 226 2 280 2 135 2 141 2 189 2 79 12 80 2 290 1 397 2 295 2 398 1 344 1 87 2 148 2 241 2 405 1 407 2 89 2 91 2 247 2 409 2 301 2 95 2 302 2 203 2 153 2 97 2 253 2 207 2 47 2 211 2 
98 2 281 2 23 2 376 2 123 2 378 2 
193 2 185 2 92 2 395 2 330 2 33 2 378 2 
8 2 237 2 311 2 79 2 189 2 221 2 222 2 107 2 
79 6 142 2 166 6 143 17 234 12 167 6 262 2 192 6 370 2 399 4 373 6 342 2 221 6 199 2 60 2 404 4 317 2 276 6 246 2 67 6 128 2 354 4 329 2 284 6 230 2 25 2 361 2 
257 2 162 4 79 1 300 7 291 2 278 2 114 2 369 2 7 2 411 2 297 2 132 2 20 2 221 1 283 2 268 2 240 1 158 2 
257 2 162 4 300 6 291 2 278 2 114 2 369 2 7 2 411 2 297 4 132 4 20 2 283 4 268 2 158 2 
257 2 162 4 79 1 300 10 291 2 278 2 114 8 369 6 7 2 411 2 297 8 132 8 20 2 221 1 283 8 268 2 240 1 158 2 
257 2 162 2 300 2 291 2 278 2 7 2 411 2 297 2 132 2 20 2 283 2 268 2 158 2 
368 1 217 2 53 2 117 2 220 2 119 1 221 8 59 2 269 2 125 2 273 4 322 2 129 2 229 2 135 2 141 2 79 8 290 2 191 2 144 2 344 2 87 2 407 2 302 2 101 2 43 2 357 2 
141 2 29 2 259 2 335 2 394 2 79 12 290 2 232 2 85 2 117 2 146 2 57 2 220 2 37 2 221 12 344 2 87 2 269 2 407 4 125 2 273 8 302 2 41 2 204 2 386 2 357 8 229 2 387 2 135 4 307 2 
141 2 29 2 335 2 311 2 79 12 215 2 290 4 232 2 117 2 146 2 221 12 344 4 87 2 269 2 407 4 125 2 62 2 273 10 302 2 386 2 357 4 229 2 387 2 135 4 307 2 
141 2 29 2 335 2 311 2 79 14 290 4 232 2 117 2 195 2 220 2 146 2 221 12 344 4 87 2 239 2 269 2 407 4 125 2 273 12 348 2 302 2 386 2 357 4 229 2 387 2 135 4 307 2 
324 2 
