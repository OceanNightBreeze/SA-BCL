#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V ERROR java.lang.NullPointerException 
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR java.lang.NullPointerException 446 (152,688) 135 (109,230) (152,688) 329 (109,230) 631 712 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException 446 (152,688) 135 (109,230) (152,688) 329 (109,230) 631 712 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException 446 (152,688) 135 (109,230) (152,688) 329 (109,230) 631 712 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException 446 (152,688) 135 (109,230) (152,688) 329 (109,230) 631 712 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V ERROR java.lang.reflect.InvocationTargetException 
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 629 266 668 628 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 770 246 21 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 770 246 21 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 770 246 21 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 770 246 21 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | RETURN | 3087 | return null
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([D)D
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:gte(II)Z
utilMDE.MathMDE:mod_positive(JJ)J
daikon.PptSlice0.ImplicationWrapper:hashCode()I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.Quant:eq(DD)Z
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.Quant:memberOf(I[I)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.ProglangType:baseIsScalar()Z
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
jtb.JavaCharStream:backup(I)V
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaCharStream:BeginToken()C
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.Quant:union([I[I)[I | RETURN | 152296 | return null
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.FuzzyFloat:gte(DD)Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([I[I)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:new_ppt()V
daikon.Quant:eq(FF)Z
utilMDE.MathMDE:negate(I)I
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:pow(II)I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.PptName:isEnterPoint()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:enabled()Z
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
utilMDE.Intern:intern([I)[I
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I | CONDITION | 69793 | if (x) -> if (!x)
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I | CONSTANT | 11084 | 108 -> 1
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.Quant:eltwiseLTE([I)Z
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.ModBitTracker:num_samples()I
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE:concat([I[I)[I
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.PptSlice1:arity()I
utilMDE.Intern:intern([D)[D
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.VarInfoAux:hashCode()I
daikon.Quant:concat([I[I)[I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.ModBitTracker:ModBitTracker(I)V
utilMDE.OrderedPairIterator:setnext1()V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.ValueTuple:isMissing(I)Z
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
jtb.ParseException:getMessage()Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.ValueTuple:size()I
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.Quant:noDups([I)Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.simplify.LemmaStack:noticeInt(J)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaCharStream:ReadByte()C
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:eltwiseLT([I)Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:esc_name()Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I | OPERATOR | 12584 | &= -> >>>=
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariant:logDetail()Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.Quant:memberOf(J[J)Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.VarInfo:ioa_name()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:intern([J)[J
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.Invariant:prob_or(DD)D
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.OrderedPairIterator:hasNext()Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.filter.InvariantFilter:InvariantFilter()V
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.Quant:lexGT([I[I)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.ProglangType:isPseudoArray()Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.Quant:eltsGtIndex([I)Z
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.diff.InvMap:InvMap()V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfo:name()Ljava.lang.String;
daikon.Quant:setEqual([I[I)Z
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.ArraysMDE:max([I)I
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.ProglangType:isArray()Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.JavaParser:jj_scan_token(I)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
utilMDE.FuzzyFloat:lt(DD)Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.SimpleLog:SimpleLog(Z)V
jtb.JavaParser:jj_2_16(I)Z
daikon.inv.Invariant:logOn()Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.test.FormatTestCase:passes()Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:slice([III)[I
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.ProglangType:baseIsFloat()Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.ModBitTracker:split(I)I
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.Quant:intersection([I[I)[I
daikon.Quant:eltsGteIndex([I)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Debug:logDetail()Z
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
utilMDE.ArraysMDE:min([I)I
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.Invariants:Invariants()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I | CONDITION | 18003 | if (x) -> if (!x)
daikon.Quant:lte(II)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:noDuplicates([I)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Quant:eltsNotEqual([II)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:sum([[D)D
daikon.Quant:memberOf(F[F)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.Quant:isReverse([I[I)Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.VarInfoName:hashCode()I
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:eq(JJ)Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.Quant:subsetOf([F[D)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.PptName:isCombinedExitPoint()Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
utilMDE.WeakHasherMap:size()I
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:lexEqual([I[I)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.Debug:logOn()Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:Name()Ljtb.syntaxtree.Name; | RETURN | 55834 | return null
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.PptSlice1:num_samples()I
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.Ppt:Ppt()V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.PptSlice0:arity()I
jtb.JavaCharStream:readChar()C
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:subsetOf([I[I)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.VarInfo:relate_var()V
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:getEndLine()I
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.PptSlice2:arity()I
daikon.Quant:pairwiseGT([I[I)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I | ASSIGN | 5636 | = null
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Assert:assertTrue(Z)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.diff.Node:Node(LutilMDE.Pair;)V
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.Invariant:getConfidence()D
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
jtb.JavaCharStream:getEndColumn()I
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.ModBitTracker:num_sets()I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.Quant:eltsGT([II)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lexLT([I[I)Z
daikon.Quant:eltsLT([II)Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltwiseNotEqual([I)Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:subsetOf([F[F)Z
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
jtb.JavaCharStream:getBeginColumn()I
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sum([I)I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.Quant:sameLength([I[I)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE:min_max([I)[I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.MathMDE:sign(I)I | CONSTANT | 2622 | 0 -> -1
daikon.ProglangType:isScalar()Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.Quant:gt(II)Z
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:element_range([I)I
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonModulus:updateResults()V
daikon.inv.Invariant:justified()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.Quant:subsetOf([D[F)Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.Quant:eltsGTE([II)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
jtb.JavaParser:jj_ntk()I
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.Quant:eq(II)Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.RootNode:RootNode()V
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.test.InvariantFormatTester:execute()Z
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:lexLTE([I[I)Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:subsetOf([D[D)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.ModBitTracker:num_vars()I
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:lexGTE([I[I)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.Node:add(Ljava.lang.Object;)V
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.diff.Node:Node()V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.Intern:numIntArrays()I
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:memberOf(F[D)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
jtb.JavaCharStream:getBeginLine()I
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:processQueue()V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.Quant:lt(II)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.Intern:internSubsequence([III)[I
utilMDE.Intern:internSubsequence([JII)[J
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.ProglangType:baseIsIntegral()Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.Quant:eltsLTE([II)Z
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.ProglangType:isIntegral()Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:ne(II)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.filter.ParentFilter:ParentFilter()V
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant:isWorthPrinting()Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:subsetOf([B[I)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.ArraysMDE:fn_is_permutation([I)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd(JJ)J
daikon.ProglangType:isFloat()Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.ProglangType:dimensions()I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.Quant:subsetOf([S[S)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:ne(DD)Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
jtb.JavaCharStream:FillBuff()V
daikon.Quant:setDiff([I[I)[I
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
jtb.JavaParser:jj_3_16()Z
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.Quant:memberOf(S[S)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([J[J)Z
daikon.inv.OutputFormat:toString()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseGT([I)Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V | ASSIGN | 1007 | = null
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.Quant:eltsEqual([II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.inv.Invariant:prob_and(DD)D

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
140 2 170 2 759 2 508 4 450 2 364 2 201 2 295 2 391 2 
702 2 401 2 193 2 307 2 107 6 184 2 343 2 11 2 318 6 444 6 255 2 
297 2 170 2 450 2 315 6 489 4 650 2 674 2 507 2 328 6 459 4 640 6 419 6 496 2 
258 8 441 4 490 4 491 29 648 10 64 10 698 4 408 16 758 10 145 26 189 6 678 10 280 2 683 2 684 2 474 2 70 2 170 6 284 16 450 6 217 12 368 4 689 2 528 16 79 6 396 8 435 8 694 8 746 10 235 2 
42 4 513 6 
725 2 
0 2 724 2 161 2 540 2 6 2 7 4 324 2 470 2 623 4 146 2 241 2 17 2 582 2 47 2 48 2 70 2 78 2 364 2 715 2 268 2 287 2 526 2 454 2 394 2 556 2 558 2 636 2 82 2 560 2 157 2 645 2 319 2 463 2 538 4 464 2 
490 2 64 16 648 16 671 4 491 54 571 2 573 4 408 32 758 16 14 2 677 2 145 48 678 16 189 4 332 4 495 8 310 2 95 4 474 2 170 4 72 4 284 32 450 4 217 22 604 6 662 6 434 6 768 6 528 32 198 2 79 4 396 6 346 2 589 4 347 4 232 6 694 18 746 6 646 6 
169 2 268 2 755 2 
143 2 714 2 540 2 736 10 290 22 127 2 457 2 596 2 251 2 559 2 679 2 471 2 44 2 185 2 
60 2 301 2 490 2 64 2 648 2 491 6 383 2 675 2 408 2 758 2 145 4 678 2 284 2 217 2 586 2 291 2 528 2 371 2 506 2 665 2 79 2 694 2 746 4 
72 4 284 8 217 4 604 6 64 4 491 16 648 4 662 6 368 2 528 8 408 8 758 4 731 2 145 12 678 4 347 4 283 2 
543 2 52 2 483 2 
298 2 725 2 730 2 260 2 148 2 175 2 664 2 395 2 202 2 610 2 
380 16 187 2 106 2 5 2 572 2 10 2 188 2 386 1 387 2 578 2 581 2 19 16 583 24 192 2 390 2 391 2 20 2 585 2 195 2 25 2 476 2 477 2 196 2 587 3 288 2 289 1 588 24 31 1 479 2 692 2 691 4 693 32 398 2 590 2 399 2 117 3 118 1 402 2 120 2 592 4 486 2 593 3 405 2 699 2 37 2 302 2 701 16 305 6 306 4 494 2 40 1 409 6 707 8 308 1 210 2 211 3 412 2 598 2 709 2 497 2 498 1 601 2 602 2 49 2 500 2 50 2 218 2 414 2 134 1 503 1 136 2 608 2 718 4 55 2 720 2 233 12 612 2 421 2 423 2 511 32 61 2 323 2 236 4 424 2 728 2 326 2 144 2 620 2 426 1 427 2 239 2 516 2 243 16 626 2 518 2 429 3 521 4 430 2 151 2 735 2 340 4 525 3 635 1 638 2 532 4 534 2 641 1 439 2 349 2 745 1 159 2 747 2 748 1 443 2 651 2 757 2 544 2 652 2 760 2 358 2 166 2 448 2 550 2 552 2 170 34 265 6 659 1 96 3 97 2 450 32 98 2 765 3 451 2 452 2 366 5 555 6 663 3 370 8 455 8 369 2 458 2 103 3 273 1 561 3 669 2 670 2 376 3 
170 2 65 2 
71 2 170 4 776 2 
191 2 
320 2 105 2 467 6 327 2 676 6 108 6 515 6 428 6 330 2 331 4 520 2 627 2 247 2 392 4 630 4 154 2 250 2 529 32 741 6 742 2 293 4 397 2 33 2 84 6 32 6 348 2 296 2 158 6 400 2 34 6 121 4 751 2 488 2 88 2 492 4 406 6 753 2 303 6 126 2 128 2 447 6 654 2 261 2 312 6 413 32 171 2 603 2 767 2 138 2 771 6 461 2 375 4 774 2 422 6 142 32 
530 2 531 1 173 2 621 2 
253 2 621 2 
633 2 385 2 441 2 16 2 281 2 268 2 621 2 
16 2 234 2 621 2 
16 2 418 2 621 2 
530 2 705 2 338 2 
16 2 621 2 
705 2 773 2 
321 2 621 2 
530 2 705 2 717 2 
530 2 257 2 8 2 
530 2 363 2 547 2 
530 2 313 2 431 2 
530 2 681 2 655 2 
705 2 551 2 
487 2 621 2 
153 2 8 2 
87 2 547 2 
313 2 766 2 
425 2 681 2 
705 2 595 2 
681 2 282 2 
313 2 223 2 
708 2 547 2 
615 2 8 2 
530 2 373 2 705 2 717 2 
530 2 373 2 705 2 717 2 661 2 
530 2 705 2 101 2 
530 2 226 2 705 2 
539 2 205 2 576 2 180 2 
763 4 352 2 501 2 734 2 174 2 570 2 51 2 325 2 756 2 290 6 607 2 356 2 13 4 666 2 637 2 667 2 721 2 591 2 
530 2 333 2 
385 2 268 2 100 2 92 2 
36 2 
385 2 441 2 743 2 16 2 268 2 621 2 
132 2 319 2 
385 2 441 2 272 2 268 2 
478 2 313 2 
597 2 681 2 
8 2 481 2 
696 2 547 2 
480 2 547 2 681 2 
632 2 547 2 681 2 
547 2 212 2 681 2 
647 2 547 2 681 2 
542 2 164 6 385 2 732 6 710 2 268 2 453 2 482 2 
705 2 62 2 
578 2 
106 2 187 2 10 2 387 2 581 2 391 2 22 2 195 2 25 2 476 2 477 2 113 2 27 4 692 2 693 6 592 4 299 2 302 2 701 6 305 2 306 4 494 2 409 6 412 2 598 2 498 2 499 2 601 2 602 2 50 2 414 2 716 2 225 2 718 2 233 8 421 2 612 2 511 4 323 2 236 2 326 2 728 4 239 2 516 2 518 2 150 2 521 2 735 2 340 4 532 4 533 2 534 2 643 2 349 2 749 2 752 2 443 2 544 6 652 2 359 4 550 2 168 2 94 2 762 2 265 4 170 26 97 2 450 26 555 2 455 2 273 2 669 2 276 2 563 2 
106 2 187 2 10 2 387 2 581 2 391 2 22 2 195 2 25 2 476 2 477 2 113 2 27 4 692 2 693 6 592 4 299 2 302 2 701 6 305 2 703 2 306 4 494 2 409 6 412 2 598 2 498 2 499 2 601 2 602 2 500 1 50 2 414 2 220 2 716 2 718 2 233 8 421 2 612 2 511 4 323 2 236 2 326 2 728 4 620 2 239 2 516 2 334 2 518 2 150 2 521 2 735 2 340 4 532 4 534 2 643 2 349 2 749 2 752 2 443 2 544 6 652 2 359 4 550 2 168 2 94 2 762 2 265 5 170 26 97 2 450 26 451 1 555 2 455 2 273 2 669 2 563 2 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 6 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 10 688 2 343 2 28 2 30 2 692 2 255 2 351 2 592 2 300 8 123 2 649 4 38 2 444 6 306 2 706 8 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 6 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 379 2 106 2 3 2 323 2 567 2 107 6 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 10 688 2 343 2 28 2 30 2 692 2 744 4 440 2 255 2 351 2 401 2 592 2 300 8 353 2 123 2 649 4 38 2 444 8 306 2 706 8 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 450 6 219 2 415 2 605 2 318 8 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 658 2 712 2 193 2 567 2 107 2 631 2 415 2 318 2 38 2 190 2 271 2 229 2 230 2 57 2 625 4 656 4 184 2 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 4 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 6 688 2 343 2 28 2 30 2 692 2 351 2 401 2 592 2 300 4 123 2 649 4 38 2 444 6 306 2 706 4 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 6 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 6 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 6 688 2 343 2 28 2 30 2 692 2 351 2 592 2 300 4 123 2 649 4 38 2 444 6 702 2 306 2 706 4 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 4 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 6 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 6 688 2 343 2 28 2 30 2 692 2 255 2 351 2 592 2 300 4 123 2 649 4 38 2 444 6 306 2 706 8 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 6 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 8 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 10 688 2 343 2 28 2 30 2 692 2 255 2 351 2 592 2 300 8 123 2 649 4 38 2 444 8 702 2 306 2 706 8 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 6 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
1 2 379 2 106 2 3 2 323 2 567 2 63 2 107 6 326 2 619 2 109 2 329 2 190 2 579 2 581 2 625 4 337 2 193 4 685 2 631 2 738 10 688 2 343 2 28 2 30 2 692 2 255 2 351 2 592 2 300 8 123 2 649 4 38 2 444 6 306 2 706 8 409 4 412 2 550 2 656 4 45 4 658 2 131 2 712 2 170 12 361 2 450 6 219 2 415 2 605 2 318 6 53 2 769 2 460 4 271 2 229 2 230 2 231 2 57 4 184 4 
377 4 1 2 466 7 565 2 186 2 379 2 3 2 106 2 567 2 107 8 575 2 12 2 109 2 387 10 190 2 579 2 580 2 581 2 191 4 584 2 391 2 22 2 193 4 195 2 285 2 685 2 286 4 25 2 197 2 688 2 27 4 114 2 28 2 30 2 116 1 692 2 200 7 693 8 695 4 592 4 123 2 404 4 302 2 407 1 701 6 38 2 305 2 702 4 306 4 494 2 706 2 409 6 41 2 43 4 410 4 412 2 45 4 598 2 499 2 712 2 713 1 500 2 50 2 414 2 219 2 221 2 415 2 416 8 135 2 605 2 504 1 224 2 318 4 228 2 53 2 56 2 718 2 229 2 719 2 230 2 611 4 233 4 231 2 57 4 612 2 421 2 722 4 510 2 511 2 323 2 236 2 63 2 326 2 514 2 65 4 619 2 622 4 329 2 66 4 516 2 335 1 244 2 625 4 336 2 337 2 74 4 521 2 77 2 249 4 152 2 735 2 631 2 340 4 343 4 155 2 634 1 532 4 534 2 438 2 643 2 160 2 254 1 85 2 351 2 86 1 649 6 443 2 444 12 544 6 652 2 93 2 446 2 656 4 550 2 262 8 94 2 658 2 170 40 265 6 97 2 450 22 660 4 365 2 451 2 555 2 455 2 456 2 102 2 460 8 271 2 462 1 184 4 776 4 465 4 
377 4 1 2 565 2 186 2 379 2 3 2 106 2 567 2 107 8 575 2 12 2 109 2 387 10 190 2 579 2 580 2 581 2 191 4 584 2 391 2 22 2 193 4 195 2 285 2 685 2 286 4 25 2 197 2 688 2 27 4 114 2 28 2 30 2 692 2 693 8 695 4 592 4 123 2 404 4 302 2 701 6 38 2 305 2 306 4 494 2 706 6 409 6 41 2 43 4 410 4 412 2 45 4 598 2 499 2 712 2 500 2 50 2 414 2 219 2 221 2 415 2 416 8 135 2 605 2 224 2 318 8 228 2 53 2 56 2 718 4 229 2 719 2 230 2 611 4 233 6 231 2 57 4 612 2 421 2 722 4 510 2 511 2 323 2 236 4 63 2 326 2 514 2 65 4 619 2 622 4 329 2 66 4 516 2 244 2 625 4 336 2 337 2 74 4 521 4 77 2 249 4 152 2 735 2 631 2 340 4 343 4 155 2 532 4 534 2 438 2 643 2 160 2 255 4 85 2 351 2 649 6 443 2 444 12 544 6 652 2 93 2 446 2 656 4 550 2 262 8 94 2 658 2 170 40 265 6 97 2 450 22 660 4 365 2 451 2 555 2 455 2 456 2 102 2 460 8 271 2 184 4 776 4 465 4 
377 4 1 2 565 2 186 2 379 2 3 2 106 2 567 2 107 8 575 2 12 2 109 2 387 10 190 2 579 2 580 2 581 2 191 4 584 2 391 2 22 2 193 4 195 2 285 2 685 2 286 4 25 2 197 2 688 2 27 4 114 2 28 2 30 2 692 2 693 8 695 4 592 4 300 4 123 2 404 4 302 2 701 6 38 2 305 2 306 4 494 2 706 6 409 6 41 2 43 4 410 4 412 2 598 2 45 4 499 2 712 2 500 2 50 2 414 2 219 2 221 2 415 2 416 8 135 2 605 2 224 2 318 8 228 2 53 2 56 2 718 4 229 2 719 2 230 2 611 4 233 6 231 2 57 4 612 2 421 2 722 4 510 2 511 2 323 2 236 4 63 2 326 2 514 2 65 4 619 2 622 4 329 2 66 4 516 2 244 2 625 4 336 2 337 2 74 4 521 4 77 2 249 4 152 2 735 2 631 2 340 4 738 4 343 4 155 2 532 4 534 2 438 2 643 2 160 2 255 4 85 2 351 2 649 6 443 2 444 12 544 6 652 2 93 2 446 2 656 4 550 2 262 8 94 2 658 2 170 40 265 6 97 2 450 22 660 4 365 2 451 2 555 2 455 2 456 2 102 2 460 8 271 2 184 4 776 4 465 4 
377 4 1 2 565 2 186 2 379 2 106 2 3 2 567 2 107 10 575 2 12 2 109 2 387 8 190 2 579 2 580 2 581 2 191 4 584 2 391 2 22 2 193 4 195 2 285 2 685 2 286 4 25 2 197 2 688 2 27 6 114 2 28 2 30 2 692 2 693 12 695 4 401 2 592 4 300 4 697 2 123 2 404 4 302 2 125 2 701 8 38 2 305 4 702 2 306 4 494 2 706 6 409 6 41 2 43 4 410 4 412 2 598 2 45 4 499 2 712 2 500 2 50 2 414 2 219 2 221 2 415 2 416 8 135 2 605 2 606 2 224 2 318 10 228 2 53 2 718 4 229 2 719 2 230 2 611 4 233 6 231 2 57 4 612 2 421 2 722 4 510 2 511 4 323 2 236 4 63 2 326 2 514 2 65 4 619 2 622 4 329 2 66 4 516 2 244 2 625 4 519 2 336 2 69 2 337 2 74 4 521 4 77 2 249 4 152 2 735 2 631 2 340 4 738 4 343 4 155 2 532 4 534 2 438 2 643 2 160 2 255 4 85 2 351 2 649 6 443 2 444 16 544 8 652 2 93 2 446 2 549 2 656 4 550 2 262 6 94 2 658 2 170 38 265 6 97 2 450 20 660 4 365 2 451 2 555 4 455 2 456 2 102 2 460 8 271 2 184 4 776 4 465 4 
351 2 379 2 300 4 123 2 567 2 63 2 107 6 649 2 619 2 444 4 38 2 706 6 190 2 579 2 45 2 625 2 656 2 658 2 170 4 337 2 193 4 219 2 415 2 605 2 738 4 343 2 318 6 28 2 53 2 460 2 229 2 271 2 231 2 184 4 255 2 
379 2 3 2 106 2 567 2 107 6 578 2 387 4 190 2 579 2 581 2 472 2 192 2 391 2 193 4 195 2 25 2 393 3 27 4 28 2 692 2 693 8 592 4 123 2 302 2 701 6 38 2 39 2 305 3 306 4 494 2 409 6 706 6 412 2 45 2 598 2 499 2 500 2 50 2 219 2 415 2 605 2 318 6 53 2 56 2 229 2 720 2 231 2 421 2 612 2 511 3 61 2 323 2 63 2 326 2 619 2 516 2 625 2 337 2 735 2 340 4 524 2 738 2 343 2 532 4 534 2 643 2 255 2 351 2 649 2 443 2 444 4 544 6 652 2 656 2 550 2 262 2 657 2 658 2 94 2 449 2 170 28 265 6 97 2 450 24 451 2 555 3 460 2 271 2 184 4 
351 2 28 2 2 2 
351 2 28 2 2 2 
565 2 2 2 106 2 567 2 107 12 12 2 109 2 387 4 579 2 581 2 391 2 193 4 195 2 685 4 25 2 690 2 28 4 115 2 30 2 692 2 693 2 484 2 119 2 401 4 592 4 300 4 302 2 701 2 702 4 704 2 306 4 494 2 409 6 706 6 412 2 213 2 598 2 45 2 499 2 131 2 500 2 50 2 414 4 135 2 417 4 318 12 228 2 718 4 229 4 230 2 233 4 231 2 57 4 421 2 722 2 613 2 511 2 614 2 323 2 236 4 237 2 238 2 326 2 329 2 516 2 67 2 624 2 625 2 521 4 339 2 735 2 631 2 340 4 738 6 343 4 80 2 532 4 252 2 534 2 643 2 536 2 749 4 255 4 351 6 750 4 649 4 91 2 443 2 444 16 544 2 652 2 550 2 656 2 262 2 94 6 658 2 265 6 170 24 97 2 450 16 451 2 460 4 184 4 465 2 
1 2 355 2 446 2 267 2 599 2 
2 2 106 2 567 2 107 12 12 2 109 2 387 2 579 2 581 2 391 2 193 4 195 2 685 4 25 2 28 4 30 4 692 2 693 2 294 2 484 4 119 2 401 4 592 4 300 4 302 2 701 2 702 4 306 4 494 2 409 6 706 6 412 2 45 2 598 2 499 2 131 2 500 2 50 2 414 4 135 2 417 4 318 12 228 2 718 4 229 4 230 2 233 4 231 2 57 4 421 2 722 2 613 2 511 4 614 2 323 2 236 4 237 2 238 2 326 2 329 2 516 2 67 2 624 2 625 2 521 4 339 2 735 2 631 2 340 4 738 6 343 4 80 2 532 4 252 2 534 2 437 2 643 2 536 2 749 4 255 4 351 6 750 4 259 2 649 4 91 2 443 2 444 16 544 2 652 2 445 2 550 2 656 2 263 2 94 6 658 2 265 6 170 24 97 2 450 16 451 2 769 2 460 4 184 4 465 2 
565 2 2 2 106 2 567 2 107 12 12 2 109 2 387 4 579 2 581 2 391 2 193 4 195 2 685 4 25 2 687 2 28 4 30 4 292 2 692 2 693 2 484 2 119 2 401 4 592 4 300 4 302 2 304 2 701 2 702 4 306 4 494 2 409 6 706 6 411 2 412 2 598 2 45 2 499 2 131 2 500 2 50 2 414 4 135 2 417 4 318 12 228 2 718 4 229 4 230 2 233 4 231 2 57 4 421 2 722 2 613 2 511 2 614 2 323 2 236 4 237 2 238 2 326 2 329 2 516 2 67 2 624 2 625 2 521 4 339 2 735 2 631 2 340 4 738 6 343 4 80 2 532 4 252 2 534 2 643 2 536 2 749 4 255 4 351 6 750 4 649 4 91 2 443 2 444 16 544 2 652 2 550 2 656 2 262 2 761 2 94 6 658 2 265 6 170 24 97 2 450 16 451 2 769 2 460 4 184 4 465 2 
381 14 468 2 106 2 4 4 382 2 672 2 673 2 384 2 9 6 677 4 15 4 678 2 387 2 111 6 581 2 472 2 682 2 584 2 388 2 391 2 22 10 284 4 112 2 195 2 25 2 393 2 26 2 27 8 692 2 693 16 694 4 35 14 299 6 592 4 491 8 594 6 493 2 700 2 302 2 408 4 701 10 305 6 39 2 208 4 306 4 409 6 129 2 412 2 598 2 46 2 314 6 500 2 217 4 50 2 133 2 414 4 604 6 316 2 137 4 317 2 139 2 227 2 141 2 233 22 421 2 612 2 511 6 726 2 727 4 323 2 64 2 326 2 617 2 618 2 145 6 516 2 68 2 242 2 517 2 244 2 149 2 245 4 628 2 75 2 76 6 733 2 77 2 629 2 735 2 737 2 523 2 340 2 341 2 524 2 342 24 432 2 528 4 155 2 344 2 532 2 345 2 156 6 535 4 347 4 642 2 643 2 85 2 162 4 648 2 754 2 541 2 354 2 163 2 758 2 544 10 652 2 546 2 548 1 550 2 449 2 94 2 170 28 265 4 764 4 553 2 450 22 266 2 554 4 176 2 451 2 177 8 367 2 555 6 99 2 269 2 455 10 456 2 178 4 102 2 557 2 179 2 181 6 270 2 274 2 668 2 374 2 275 4 775 2 564 4 
511 3 616 2 701 2 305 3 544 2 167 2 600 4 214 2 170 2 22 6 23 3 450 2 475 2 24 2 555 3 505 2 27 2 199 2 54 2 609 2 693 2 83 2 612 2 58 2 
511 2 616 2 701 2 305 2 544 2 167 2 600 4 214 2 170 2 22 6 23 2 450 2 475 2 24 2 555 2 505 2 27 2 199 2 54 2 609 2 693 2 83 2 612 2 58 2 
511 2 616 2 701 2 305 2 544 2 167 2 600 4 214 2 170 2 22 6 23 2 450 2 475 2 24 2 555 2 505 2 27 2 199 2 54 2 609 2 693 2 83 2 612 2 58 2 
511 3 616 2 64 2 729 4 145 4 189 2 678 2 243 2 19 2 248 3 284 2 686 3 433 2 527 3 528 2 396 4 81 4 693 2 203 4 537 4 204 4 122 2 491 6 648 2 442 2 90 2 408 2 305 3 758 2 357 2 653 6 545 2 711 2 170 10 450 4 215 2 362 2 216 2 612 2 104 2 
511 2 616 2 64 2 729 4 145 4 189 2 678 2 243 2 19 2 474 2 248 2 284 2 686 2 433 2 527 2 528 2 396 4 81 4 693 2 694 2 203 4 537 4 204 4 122 2 491 4 648 2 442 2 90 2 408 2 305 2 758 2 357 2 653 6 545 2 711 2 170 10 450 4 215 2 362 2 216 2 217 2 612 2 104 2 
511 2 616 2 64 2 729 4 145 4 189 2 678 2 243 2 19 2 474 2 248 2 284 2 686 2 433 2 527 2 528 2 396 4 81 4 693 2 694 2 203 4 537 4 204 4 122 2 491 4 648 2 442 2 90 2 408 2 305 2 758 2 357 2 653 6 545 2 711 2 170 10 450 4 215 2 362 2 216 2 217 2 612 2 104 2 
511 2 616 2 64 2 729 4 145 4 189 2 678 2 243 2 19 2 474 2 248 2 284 2 686 2 433 2 527 2 528 2 396 4 81 4 693 2 694 2 203 4 537 4 204 4 122 2 491 4 648 2 442 2 90 2 408 2 305 2 758 2 357 2 653 6 545 2 711 2 170 10 450 4 215 2 362 2 216 2 217 2 612 2 104 2 
511 2 616 2 64 2 729 4 145 4 189 2 678 2 243 2 19 2 474 4 248 2 284 2 686 2 433 2 527 2 528 2 396 4 81 4 693 2 694 4 203 4 537 4 204 4 122 2 491 4 648 2 442 2 90 2 408 2 305 2 758 2 357 2 653 6 545 2 711 2 170 10 450 4 215 2 362 2 216 2 217 4 612 2 104 2 
726 2 172 2 240 2 183 2 473 2 256 2 
299 2 566 2 436 2 147 2 562 2 473 2 574 2 
59 1 278 2 378 2 695 2 485 1 403 1 322 2 106 2 568 2 512 2 89 2 124 2 469 2 207 2 18 1 680 1 130 2 389 2 170 10 194 2 450 8 522 2 502 2 372 2 740 2 644 2 
569 2 491 16 648 6 64 6 617 2 408 6 758 6 110 2 165 2 145 12 678 6 189 2 332 2 495 2 264 2 474 2 170 6 284 6 450 6 217 4 604 4 554 2 341 2 768 4 528 6 29 2 396 4 347 2 694 2 350 2 
360 2 73 2 279 3 222 2 206 2 739 2 729 2 81 2 209 2 772 2 277 2 509 2 537 2 
723 1 360 2 170 1 73 4 450 1 279 6 222 2 206 2 739 2 729 2 81 2 209 2 309 2 772 2 420 2 277 2 509 2 537 2 
360 2 73 4 279 6 222 4 206 2 739 4 729 2 81 2 209 4 309 2 420 2 772 2 277 2 509 2 537 2 
723 1 360 2 170 1 73 4 450 1 279 10 222 8 206 2 739 8 729 2 81 2 209 8 309 6 420 8 772 2 277 2 509 2 537 2 
577 1 246 2 21 2 25 2 735 2 340 2 532 2 639 1 302 2 311 2 170 4 265 4 500 2 450 4 451 2 770 2 
265 2 170 4 21 2 532 2 770 2 450 4 25 2 735 2 340 2 302 2 246 2 311 2 
265 2 170 4 21 2 532 2 770 2 450 4 25 2 735 2 340 2 302 2 246 2 311 2 
21 2 170 4 265 4 500 2 450 4 25 2 735 2 340 2 451 2 302 2 532 2 770 2 246 2 311 2 
182 2 
