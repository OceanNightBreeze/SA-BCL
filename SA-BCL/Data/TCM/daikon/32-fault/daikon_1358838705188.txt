#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testHasher()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError (186,629) 
utilMDE.TestUtilMDE:testOptions()V ERROR utilMDE.Options$ArgException 191 475 
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V ERROR java.lang.ArrayIndexOutOfBoundsException 208 
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NullPointerException 310 135 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NullPointerException 310 135 
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR java.lang.NullPointerException 310 762 (81,117) 747 (350,611) (81,117) 590 (350,611) 776 529 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR java.lang.NullPointerException 310 762 (81,117) 747 (350,611) (81,117) 590 (350,611) 776 529 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR java.lang.NullPointerException 310 762 (81,117) 747 (350,611) (81,117) 590 (350,611) 776 529 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 768 523 633 10 245 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 97 498 484 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.Error 108 97 498 484 
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (109,506) (109,506) 504 97 498 484 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (109,506) 641 97 498 484 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.ValueTuple:isMissing(I)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I | CONSTANT | 21933 | 99 -> 1
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I | CONDITION | 9296 | while (x) -> while (!x)
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:memberOf(F[D)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:setEqual([I[I)Z | CONDITION | 155109 | if (x) -> if (!x)
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.Quant:memberOf(I[I)Z
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.Quant:eltsEqual([II)Z
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:element_range([I)I
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
utilMDE.Options.ArgException:ArgException(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.inv.unary.LowerBoundCore:computeProbability()D
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.MathMDE:gcd(JJ)J
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.PptSlice0:initInvariantsSeen()V
daikon.VarInfo:new_ppt()V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.inv.Invariant:prob_and(DD)D
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ProglangType:isArray()Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:jj_2_16(I)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.ProglangType:dimensions()I
utilMDE.MathMDE:mod_positive(II)I
daikon.Quant:eltsGtIndex([I)Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.RootNode:RootNode()V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.Quant:pairwiseEqual([I[I)Z
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
utilMDE.Assert:assertTrue(Z)V
utilMDE.Intern:numIntArrays()I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice2:arity()I
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:ne(II)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Node:Node()V
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:size()I
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.ValueTuple:size()I
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:subarray([III)[I
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.Quant:pairwiseDivides([I[I)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.Quant:eq(JJ)Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
jtb.JavaParser:jj_scan_token(I)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:logOn()Z
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:noDups([I)Z
daikon.Quant:pairwiseGT([I[I)Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.Quant:memberOf(D[F)Z
daikon.Debug:logOn()Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:gt(II)Z
daikon.Quant:subsetOf([F[F)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.Quant:eltwiseLT([I)Z
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.Debug:logDetail()Z
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set; | RETURN | 94892 | return null
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object; | RETURN | 20497 | return null
daikon.inv.ValueSet:ValueSet(I)V
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.Quant:union([I[I)[I
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.Quant:eltwiseGTE([I)Z | CONDITION | 177183 | if (x) -> if (!x)
utilMDE.ArraysMDE:min_max([I)[I
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:sum([I)I
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Intern:internSubsequence([III)[I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.ArraysMDE:isSubset([D[D)Z
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:gte(II)Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.PptName:isCombinedExitPoint()Z
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName:name()Ljava.lang.String;
daikon.Quant:eq(FF)Z
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.Quant:setDiff([I[I)[I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
utilMDE.MathMDE:negate(I)I
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.Quant:lexGTE([I[I)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.ProglangType:baseIsScalar()Z
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.Quant:eltsGT([II)Z
utilMDE.Intern:intern([J)[J
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.inv.Invariant:isWorthPrinting()Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:memberOf(F[F)Z
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.EntrySet:size()I | STATEMENT | 15721 | stmt -> ;
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.Quant:eq(DD)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z | ASSIGN | 37692 | = null
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
utilMDE.MathMDE:gcd([I)I
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.PptSlice1:num_samples()I
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.Ppt:Ppt()V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.Quant:concat([I[I)[I
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:eltsLteIndex([I)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.MathMDE:pow_fast(II)I
daikon.PptSlice1:arity()I
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.ModBitTracker:split(I)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.Quant:pairwiseGTE([I[I)Z
daikon.Quant:subsetOf([J[J)Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
jtb.JavaParser:jj_3_16()Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.Quant:lt(II)Z
daikon.ModBitTracker:num_vars()I
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:subsetOf([D[F)Z
daikon.Quant:lte(II)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.ProglangType:baseIsIntegral()Z
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.ProglangType:isIntegral()Z
daikon.VarInfo:relate_var()V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.Quant:memberOf(S[S)Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.MathMDE:gcd_differences([I)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.VarInfoName:hashCode()I
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
utilMDE.ArraysMDE:sorted([I)Z
jtb.ParseException:getMessage()Ljava.lang.String;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.InvMap:InvMap()V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE:max([I)I
utilMDE.MathMDE:modulus([I)[I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:subsetOf([B[I)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
jtb.JavaCharStream:getBeginColumn()I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.Invariant:logDetail()Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltsLT([II)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:memberOf(J[J)Z
daikon.diff.DetailedStatisticsVisitor:freq(II)D
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String; | CONDITION | 14923 | if (x) -> if (!x)
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.PptSlice0:arity()I
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:prob_and(DDD)D
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.Quant:lexGT([I[I)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:pairwiseLTE([I[I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String; | RETURN | 17948 | return null
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ProglangType:isScalar()Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
jtb.JavaCharStream:backup(I)V
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eltsGTE([II)Z
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.Intern:intern([D)[D
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.Quant:subsetOf([I[I)Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.diff.Node:children()Ljava.util.Iterator;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.Quant:eltsLTE([II)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.inv.Invariant:prob_or(DD)D
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.VarInfoName:toString()Ljava.lang.String;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lexNotEqual([I[I)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
jtb.JavaCharStream:getBeginLine()I
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.filter.InvariantFilter:InvariantFilter()V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.filter.ParentFilter:ParentFilter()V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:FillBuff()V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
utilMDE.ArraysMDE:sum([[D)D
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object; | RETURN | 62299 | return null
jtb.JavaCharStream:readChar()C
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.Quant:intersection([I[I)[I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | CONDITION | 4095 | if (x) -> if (!x)
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.Quant:eltsNotEqual([II)Z
jtb.JavaCharStream:getEndColumn()I
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:subsetOf([S[S)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.inv.Invariant:justified()Z
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.ProglangType:isPseudoArray()Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String; | STATEMENT | 3418 | stmt -> ;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.ModBitTracker:num_sets()I
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltwiseLTE([I)Z
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:eq(II)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase; | ASSIGN | 18743 | = null
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.MathMDE:pow(II)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([D[D)Z
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern([I)[I
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.Invariants:Invariants()V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.Quant:eltwiseEqual([I)Z
daikon.Quant:sameLength([I[I)Z
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.PptName:isEnterPoint()Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I | CONDITION | 18003 | if (x) -> if (!x)
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Invariant:getConfidence()D
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:subarray([JII)[J
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaCharStream:BeginToken()C
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.MathMDE:gcd(II)I
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.Quant:lexLTE([I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.Quant:subsetOf([F[D)Z
daikon.Quant:eltsGteIndex([I)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.Quant:lexLT([I[I)Z
daikon.ModBitTracker:num_samples()I
daikon.inv.unary.scalar.UpperBound:enabled()Z
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaCharStream:ReadByte()C
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:eltwiseGT([I)Z
jtb.JavaParser:jj_ntk()I
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaCharStream:getEndLine()I
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.Quant:slice([III)[I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.Quant:lexEqual([I[I)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
jtb.Token:newToken(I)Ljtb.Token;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo; | ASSIGN | 22517 | = null
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I | CONSTANT | 43258 | 32 -> 33
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.MathMDE:sign(I)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([I[I)I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
521 2 490 2 506 2 554 2 171 2 393 4 625 2 109 2 779 2 
288 2 410 6 740 2 235 2 213 2 83 2 240 2 363 2 538 2 99 6 217 6 
506 2 692 6 109 2 722 6 566 6 683 2 212 2 317 6 603 2 376 2 614 4 459 4 491 2 
716 4 109 6 725 2 362 10 675 12 556 26 525 10 749 2 133 4 88 4 64 30 580 2 137 4 220 2 506 6 755 16 609 8 657 6 272 6 300 8 326 16 276 16 196 10 400 8 594 2 254 10 279 8 198 2 738 10 688 2 
111 6 636 4 
431 2 
105 2 126 2 622 2 110 2 130 2 456 2 362 4 296 2 671 2 525 2 556 4 64 6 755 2 657 2 326 2 276 2 196 2 254 2 225 2 738 2 
367 2 755 8 120 6 326 8 398 2 276 8 784 6 196 4 254 4 778 4 675 5 525 4 556 12 133 2 738 4 64 14 422 4 
412 4 693 8 340 2 477 2 437 2 316 2 575 2 772 2 262 2 236 2 238 14 186 6 85 2 218 2 582 2 18 2 140 2 93 2 274 2 782 2 171 2 642 2 570 4 
191 2 475 2 270 2 767 2 193 2 612 2 146 2 431 2 62 2 596 2 55 2 
411 4 207 2 545 2 109 4 209 4 315 2 59 2 649 2 215 2 7 2 607 2 749 2 652 2 505 2 506 4 324 2 425 2 564 2 468 2 20 2 171 2 331 2 76 2 228 2 664 2 229 2 289 2 35 2 436 2 383 2 237 4 342 4 438 2 186 2 673 2 442 2 629 2 192 2 631 2 586 2 44 2 148 2 493 2 786 2 
31 8 79 2 519 4 109 4 233 2 362 6 778 4 525 16 556 48 675 22 88 2 64 54 751 2 527 4 422 4 506 4 755 32 45 6 657 4 120 6 272 4 326 32 300 16 276 32 509 2 196 16 784 6 254 16 400 6 147 2 401 6 303 4 198 2 199 4 433 6 53 4 738 16 516 6 
186 2 570 2 236 2 
629 2 381 22 67 2 741 2 33 2 47 2 292 2 168 2 420 2 188 2 453 2 125 2 597 2 13 10 
691 2 311 2 599 24 106 2 4 2 109 32 499 2 696 1 501 2 414 4 415 2 112 2 113 2 605 2 318 2 606 4 114 2 8 1 321 6 219 1 423 3 506 34 116 2 608 6 705 1 222 2 119 2 428 3 508 2 327 1 613 2 330 4 22 2 332 2 511 2 123 32 513 2 124 1 334 1 619 2 515 2 717 2 129 3 231 2 623 2 39 2 239 2 524 1 344 1 441 2 243 2 729 2 135 2 526 2 346 2 528 3 347 2 138 2 42 2 630 2 43 3 139 2 46 2 634 2 252 3 536 2 734 4 51 2 637 2 50 1 638 5 52 2 452 2 737 1 640 2 742 2 643 2 644 1 646 3 359 3 743 1 455 2 155 4 61 2 158 8 160 2 162 2 461 2 66 6 656 2 269 16 463 16 560 2 68 8 369 2 69 2 562 2 370 2 563 2 70 2 465 4 756 2 374 2 659 4 169 1 375 2 277 3 75 16 280 1 281 2 763 2 472 2 764 6 474 2 179 2 478 2 181 1 773 2 774 2 293 2 385 2 294 2 482 2 187 2 579 2 779 2 487 3 298 2 90 2 391 32 676 2 677 2 392 2 585 2 396 16 681 8 397 2 592 12 593 4 98 2 304 24 405 2 200 2 687 3 407 3 102 2 310 2 
541 2 
506 2 37 2 
506 4 480 2 72 2 
690 12 259 10 600 4 313 2 3 12 497 2 601 2 210 6 549 12 457 6 157 4 6 2 748 2 63 2 503 2 320 10 9 2 557 2 366 4 559 6 426 2 273 2 427 8 372 2 565 40 709 4 71 10 275 2 759 2 568 40 761 12 278 2 713 2 176 10 26 2 432 6 618 6 473 4 335 8 517 8 435 2 230 4 518 12 769 18 180 4 720 6 80 4 723 40 241 2 727 12 483 2 131 2 728 12 578 12 731 4 627 12 679 4 141 2 680 2 449 12 534 2 95 2 735 12 257 16 404 2 540 8 202 2 103 4 308 10 
469 1 667 2 494 2 626 2 
250 2 626 2 
137 2 571 2 445 2 186 2 702 2 38 2 626 2 
36 2 38 2 
531 2 38 2 626 2 
667 2 100 2 115 2 
38 2 626 2 
40 2 115 2 
577 2 626 2 
667 2 107 2 115 2 
667 2 439 2 242 2 
667 2 510 2 183 2 
667 2 387 2 174 2 
667 2 354 2 379 2 
666 2 115 2 
206 2 626 2 
242 2 189 2 
617 2 183 2 
387 2 730 2 
208 2 
388 2 115 2 
708 2 379 2 
387 2 86 2 
325 2 183 2 
733 2 242 2 
746 2 667 2 107 2 115 2 
746 2 667 2 107 2 547 2 115 2 
667 2 142 2 115 2 
145 2 667 2 115 2 
232 2 19 2 182 2 539 2 
323 2 445 2 186 2 190 2 
323 2 445 2 186 2 702 2 190 2 205 2 
137 2 445 2 256 2 186 2 38 2 626 2 
173 2 673 2 
137 2 739 2 445 2 186 2 
387 2 271 2 
520 2 379 2 
242 2 460 2 
537 2 183 2 
710 2 379 2 183 2 
695 2 379 2 183 2 
183 2 379 2 496 2 
265 2 183 2 379 2 
647 6 186 2 132 2 322 6 246 2 163 2 445 2 143 2 
115 2 156 2 
248 2 381 6 178 2 17 2 645 2 707 2 587 2 466 2 184 2 591 2 386 2 23 2 440 2 284 2 406 2 355 4 150 2 309 4 
667 2 628 2 
452 2 
152 2 358 2 743 2 109 18 455 2 155 4 414 4 318 2 321 6 461 2 66 2 753 2 506 18 608 2 70 2 465 4 374 2 659 4 429 4 332 2 123 2 513 6 515 2 764 4 179 2 771 2 341 2 478 2 39 2 385 2 295 2 243 2 135 2 579 2 779 2 298 2 138 2 391 6 139 2 396 6 46 2 48 2 397 2 50 2 637 2 405 2 200 2 305 2 102 2 310 2 
152 2 358 2 743 2 109 18 455 2 155 4 414 4 415 1 318 2 321 6 461 2 66 2 753 2 506 18 608 2 70 2 465 4 374 2 659 4 429 4 332 2 123 2 513 6 515 2 764 5 179 2 771 2 341 2 478 2 39 2 385 2 294 1 295 2 243 2 135 2 579 2 779 2 298 2 138 2 391 6 139 2 396 6 46 2 48 2 397 2 50 2 637 2 405 2 200 2 305 2 102 2 310 2 
467 2 
290 2 333 2 
0 2 2 2 410 6 740 2 153 4 109 6 648 2 455 2 211 2 213 2 318 2 217 6 11 10 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 8 301 2 451 2 99 6 492 2 542 2 408 8 543 2 495 2 
0 2 2 2 410 8 740 2 153 4 109 6 648 2 455 2 211 2 213 2 318 2 217 6 11 10 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 243 2 576 2 89 4 579 2 298 2 529 2 390 2 584 2 348 4 533 4 46 2 590 2 350 2 253 2 783 2 96 8 301 2 538 2 451 2 99 8 492 2 542 2 408 8 543 2 495 2 
529 2 390 2 288 2 410 2 706 2 584 2 719 2 533 2 350 2 211 2 624 2 121 4 776 2 430 2 240 2 777 2 217 2 89 4 
0 2 2 2 410 6 153 4 109 6 648 2 455 2 211 2 213 2 318 2 217 4 11 6 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 4 301 2 538 2 451 2 99 6 492 2 542 2 408 4 543 2 495 2 
0 2 2 2 410 4 153 4 109 6 648 2 455 2 211 2 213 2 363 2 318 2 217 6 11 6 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 4 301 2 451 2 99 6 492 2 542 2 408 4 543 2 495 2 
0 2 2 2 410 6 740 2 153 4 109 6 648 2 455 2 211 2 213 2 318 2 217 6 11 6 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 8 301 2 451 2 99 6 492 2 542 2 408 4 543 2 495 2 
0 2 2 2 410 6 740 2 153 4 109 6 648 2 455 2 211 2 213 2 363 2 318 2 217 8 11 10 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 8 301 2 451 2 99 8 492 2 542 2 408 8 543 2 495 2 
0 2 2 2 410 6 740 2 153 4 109 6 648 2 455 2 211 2 213 2 318 2 217 6 11 10 321 4 506 12 655 2 507 4 706 2 611 2 610 2 465 2 659 2 121 4 170 2 430 2 286 2 77 2 715 4 665 2 288 4 719 2 478 2 81 2 624 2 776 2 240 4 777 2 672 2 243 2 576 2 89 4 579 2 298 2 244 2 529 2 390 2 584 2 533 4 46 2 590 2 350 2 96 8 301 2 451 2 99 6 492 2 542 2 408 8 543 2 495 2 
0 2 598 2 2 2 410 4 211 2 414 4 213 4 214 2 415 2 602 4 419 2 606 2 217 8 11 2 424 1 15 2 608 2 610 2 611 2 429 4 430 2 29 6 621 2 37 6 624 2 39 2 240 4 243 2 446 6 249 1 632 1 46 2 637 2 639 2 451 2 255 2 56 2 455 2 648 4 58 6 458 2 461 2 66 2 655 4 654 2 464 2 70 2 658 4 465 4 659 4 72 6 470 2 661 2 660 6 73 2 471 6 282 2 285 1 77 2 663 8 286 2 78 6 665 2 288 4 668 1 478 2 81 2 294 2 670 1 672 2 485 2 297 1 89 4 298 2 488 6 681 2 682 2 96 2 301 2 99 12 492 2 684 6 102 2 495 2 312 2 314 2 109 24 318 2 319 6 321 6 703 2 506 46 507 6 117 2 706 2 121 4 330 2 332 2 123 2 513 6 714 2 515 2 715 4 337 2 719 2 341 4 726 7 529 2 138 2 139 2 533 4 350 2 734 2 352 6 541 6 542 2 543 2 151 2 152 2 358 2 153 8 551 2 155 4 553 7 363 4 747 2 555 1 752 6 165 10 371 2 757 2 374 2 170 2 762 2 378 2 764 6 179 12 573 2 385 2 776 2 777 2 576 2 187 2 579 2 779 2 390 2 391 8 584 2 394 1 396 6 395 6 589 6 194 2 590 2 397 2 592 4 197 2 405 2 200 2 
312 2 2 2 410 8 314 2 109 24 211 2 213 4 414 4 214 2 602 4 415 2 419 2 318 2 700 2 606 4 319 6 217 8 321 6 703 2 506 46 15 2 507 6 608 2 117 2 706 2 611 2 610 2 429 4 121 4 330 4 430 2 332 2 123 2 714 2 513 6 29 6 515 2 715 4 337 2 621 2 719 2 37 6 341 4 39 2 624 2 240 4 243 2 529 2 138 2 446 6 139 2 533 4 46 2 350 2 734 4 637 2 639 2 255 2 352 6 451 2 541 6 542 2 543 2 151 2 152 2 740 4 358 2 56 2 153 8 648 2 455 2 58 6 551 2 155 4 458 2 747 2 461 2 66 2 752 6 654 2 655 2 464 2 165 10 70 2 371 2 658 4 465 4 757 2 374 2 659 4 72 6 470 2 660 6 661 2 170 2 73 2 569 2 762 2 471 6 282 2 663 8 378 2 77 2 764 6 78 6 288 4 665 2 179 12 573 2 478 2 81 2 385 2 776 2 294 2 777 2 672 2 576 2 485 2 187 2 89 4 579 2 779 2 298 2 390 2 488 6 391 8 584 2 395 6 396 6 194 2 589 6 590 2 681 2 397 2 682 2 96 6 592 6 301 2 197 2 405 2 99 12 200 2 492 2 684 6 102 2 495 2 310 2 
312 2 2 2 410 8 314 2 109 24 211 2 213 4 414 4 214 2 602 4 415 2 419 2 318 2 700 2 606 4 319 6 217 8 11 4 321 6 703 2 506 46 15 2 507 6 608 2 117 2 706 2 611 2 610 2 429 4 121 4 330 4 430 2 332 2 123 2 714 2 513 6 29 6 515 2 715 4 337 2 621 2 719 2 37 6 341 4 39 2 624 2 240 4 243 2 529 2 138 2 446 6 139 2 533 4 46 2 350 2 734 4 637 2 639 2 255 2 352 6 451 2 541 6 542 2 543 2 151 2 152 2 740 4 358 2 56 2 153 8 648 2 455 2 58 6 551 2 155 4 458 2 747 2 461 2 66 2 752 6 654 2 655 2 464 2 165 10 70 2 371 2 658 4 465 4 757 2 374 2 659 4 72 6 470 2 660 6 661 2 170 2 73 2 569 2 762 2 471 6 282 2 663 8 378 2 77 2 764 6 78 6 288 4 665 2 179 12 573 2 478 2 81 2 385 2 776 2 294 2 777 2 672 2 576 2 485 2 187 2 89 4 579 2 779 2 298 2 390 2 488 6 391 8 584 2 395 6 396 6 194 2 589 6 590 2 681 2 397 2 682 2 96 6 592 6 301 2 197 2 99 12 405 2 200 2 492 2 684 6 408 4 102 2 495 2 310 2 
312 2 2 2 410 10 314 2 109 22 211 2 213 4 414 4 214 2 602 4 415 2 419 2 318 2 700 2 606 4 319 6 217 10 11 4 321 6 703 2 506 44 15 2 507 6 608 4 117 2 706 2 611 2 610 2 429 6 121 4 330 4 430 2 712 2 332 2 123 4 714 2 513 8 29 6 515 2 715 4 337 2 621 2 719 2 37 6 341 4 39 2 624 2 240 4 243 2 443 2 529 2 138 2 446 6 139 2 533 4 46 2 350 2 734 4 637 2 639 2 538 2 255 2 352 6 451 2 541 6 542 2 543 2 151 2 152 2 740 4 358 2 56 2 153 8 648 2 455 2 58 6 551 2 155 4 458 2 363 2 747 2 461 2 66 4 752 6 654 2 655 2 754 2 464 2 165 8 70 2 658 4 465 4 757 2 374 2 659 4 72 6 470 2 660 6 661 2 170 2 73 2 569 2 762 2 471 6 282 2 663 8 378 2 77 2 764 6 78 6 288 4 665 2 476 2 179 10 573 2 478 2 81 2 385 2 776 2 294 2 777 2 672 2 576 2 485 2 187 2 89 4 579 2 779 2 298 2 390 2 488 6 391 12 584 2 395 6 396 8 194 2 589 6 590 2 489 2 681 2 397 2 682 2 96 6 592 6 301 2 197 2 99 16 405 2 200 2 492 2 684 6 686 2 408 4 102 2 495 2 310 2 
715 2 665 2 288 4 2 2 410 6 740 2 719 2 153 2 211 2 213 2 624 2 240 4 777 2 672 2 576 2 217 6 11 4 89 2 506 4 390 2 507 2 584 2 610 2 121 2 96 6 170 2 301 2 430 2 451 2 99 4 542 2 408 4 543 2 77 2 495 2 
2 2 410 6 694 2 109 24 211 2 213 2 414 4 415 2 318 2 217 6 321 6 11 2 12 3 506 28 507 2 608 3 610 2 508 2 121 2 429 4 430 2 616 2 332 2 123 3 513 6 515 2 715 2 620 2 719 2 341 2 39 2 624 2 240 4 243 2 729 2 138 2 139 2 46 2 634 2 637 2 451 2 452 2 542 2 543 2 152 2 740 2 546 2 358 2 153 2 455 2 155 4 60 2 461 2 66 3 165 2 70 2 371 2 465 4 374 2 659 4 170 2 77 2 764 6 288 4 665 2 179 4 478 2 385 2 294 2 777 2 672 2 576 2 89 2 579 2 779 2 298 2 390 2 391 8 584 2 396 6 397 2 96 6 301 2 99 4 405 2 492 2 200 2 102 2 495 2 
170 2 2 2 561 2 
170 2 2 2 561 2 
0 2 2 4 410 12 109 16 413 2 211 2 414 4 213 4 602 2 415 2 318 2 606 4 217 12 321 6 11 6 506 24 507 4 611 2 329 2 121 2 330 4 430 4 24 2 122 2 332 2 123 2 513 2 227 2 515 2 715 2 718 4 341 6 721 2 39 2 240 4 243 2 138 2 139 2 533 4 46 2 448 2 144 4 350 2 734 4 637 2 538 4 543 2 152 2 740 4 358 2 153 4 648 2 455 2 550 2 155 4 363 4 747 2 364 4 159 2 161 2 461 2 267 2 655 4 561 2 165 2 70 2 658 2 465 4 659 4 170 6 177 2 662 2 378 2 764 6 288 4 179 4 573 2 478 2 291 2 385 2 776 2 294 2 481 2 674 2 187 4 579 2 89 2 779 2 298 2 390 2 391 2 396 2 590 2 397 2 96 6 592 4 405 2 99 16 200 2 684 2 685 2 102 2 408 4 495 2 
506 4 290 2 128 2 706 2 179 2 165 2 34 2 109 2 478 2 470 2 724 2 602 2 762 2 685 2 684 2 227 2 161 2 
0 2 2 4 410 12 109 16 413 4 211 2 414 4 213 4 415 2 318 2 606 4 217 12 421 2 321 6 11 6 506 24 507 4 221 2 611 2 329 2 121 2 330 4 430 4 24 2 332 2 123 4 513 2 227 2 515 2 715 2 718 4 341 6 39 2 240 4 243 2 138 2 139 2 533 4 46 2 448 2 144 4 350 2 734 4 637 2 538 4 356 2 543 2 152 2 740 4 358 2 153 4 648 4 455 2 550 2 155 4 363 4 747 2 364 4 161 2 461 2 267 2 655 4 561 2 70 2 658 2 465 4 659 4 170 6 172 2 177 2 662 2 378 2 286 2 764 6 288 4 572 2 179 2 573 2 478 2 291 2 385 2 776 2 294 2 481 2 187 4 579 2 89 2 779 2 298 2 390 2 391 2 396 2 590 2 397 2 96 6 592 4 405 2 99 16 200 2 684 2 685 2 102 2 408 4 495 2 
0 2 2 4 410 12 109 16 413 2 211 2 414 4 213 4 602 2 415 2 318 2 606 4 217 12 321 6 11 6 506 24 507 4 611 2 329 2 121 2 330 4 430 4 24 2 332 2 123 2 513 2 227 2 515 2 715 2 718 4 341 6 39 2 240 4 243 2 138 2 139 2 533 4 46 2 448 2 144 4 350 2 734 4 637 2 538 4 543 2 152 2 740 4 358 2 153 4 648 4 455 2 550 2 155 4 363 4 747 2 364 4 161 2 461 2 267 2 655 4 561 2 165 2 70 2 658 2 465 4 659 4 170 6 74 2 177 2 662 2 378 2 286 2 764 6 288 4 179 4 573 2 478 2 291 2 385 2 776 2 294 2 481 2 185 2 187 4 579 2 89 2 779 2 298 2 390 2 391 2 396 2 588 2 780 2 590 2 397 2 96 6 592 4 302 2 405 2 99 16 200 2 684 2 685 2 102 2 408 4 495 2 
245 2 506 4 530 2 338 2 462 2 532 2 768 2 633 2 669 2 403 2 523 2 651 2 264 2 10 2 461 2 444 2 
336 2 151 6 339 1 109 2 479 2 416 2 216 2 66 3 506 2 608 3 391 2 368 2 396 2 374 2 328 2 429 2 760 4 402 2 123 3 101 3 283 2 513 2 28 2 258 2 434 2 
336 2 66 2 151 6 506 2 391 2 608 2 368 2 396 2 109 2 374 2 328 2 429 2 760 4 479 2 402 2 416 2 216 2 123 2 283 2 101 2 258 2 28 2 513 2 434 2 
336 2 66 2 151 6 506 2 391 2 608 2 368 2 396 2 109 2 374 2 328 2 429 2 760 4 479 2 402 2 416 2 216 2 123 2 283 2 101 2 258 2 28 2 513 2 434 2 
127 4 409 2 360 4 109 4 154 2 744 2 745 2 604 2 417 2 5 3 84 4 525 2 556 4 389 3 365 3 64 5 66 3 506 10 164 2 391 2 269 2 755 2 166 2 272 2 374 2 326 2 351 4 535 2 167 2 276 2 196 2 254 2 400 4 353 2 75 2 149 4 123 3 54 6 738 2 434 2 
409 2 109 4 360 4 154 2 744 2 745 2 604 2 5 2 417 2 556 4 365 2 64 4 66 2 506 10 164 2 755 2 269 2 166 2 272 2 374 2 326 2 276 2 167 2 75 2 123 2 434 2 127 4 84 4 675 2 525 2 389 2 391 2 300 2 535 2 351 4 196 2 400 4 254 2 353 2 198 2 149 4 54 6 738 2 
409 2 109 4 360 4 154 2 744 2 745 2 604 2 5 2 417 2 556 4 365 2 64 4 66 2 506 10 164 2 755 2 269 2 166 2 272 2 374 2 326 2 276 2 167 2 75 2 123 2 434 2 127 4 84 4 675 2 525 2 389 2 391 2 300 2 535 2 351 4 196 2 400 4 254 2 353 2 198 2 149 4 54 6 738 2 
409 2 109 4 360 4 154 2 744 2 745 2 604 2 5 2 417 2 556 4 365 2 64 4 66 2 506 10 164 2 755 2 269 2 166 2 272 2 374 2 326 2 276 2 167 2 75 2 123 2 434 2 127 4 84 4 675 2 525 2 389 2 391 2 300 2 535 2 351 4 196 2 400 4 254 2 353 2 198 2 149 4 54 6 738 2 
409 2 109 4 360 4 154 2 744 2 745 2 604 2 5 2 417 2 556 4 365 2 64 4 66 2 506 10 164 2 755 2 269 2 166 2 272 2 374 2 326 2 276 2 167 2 75 2 123 2 434 2 127 4 84 4 675 4 525 2 389 2 391 2 300 4 535 2 351 4 196 2 400 4 254 2 353 2 198 4 149 4 54 6 738 2 
65 2 522 2 699 2 447 2 357 2 450 2 
653 2 418 2 699 2 382 2 27 2 785 2 758 2 
380 2 1 2 30 2 109 8 770 1 340 1 548 2 234 2 552 2 384 1 318 2 345 1 701 2 134 2 732 2 506 10 268 2 704 2 299 2 349 2 660 2 711 2 615 2 642 1 203 2 204 2 
766 2 31 2 519 2 109 6 7 2 556 12 525 6 675 4 64 15 422 2 506 6 91 2 558 2 755 6 635 2 272 2 326 6 94 2 300 3 276 6 509 1 784 4 196 6 736 2 254 6 400 4 401 4 148 2 377 2 198 2 738 6 
765 2 506 1 266 7 260 2 127 2 16 2 583 2 109 1 360 2 500 2 781 4 775 2 82 2 399 2 84 2 226 2 87 1 750 2 
765 4 266 6 260 4 127 2 16 2 583 2 360 2 500 2 781 4 775 2 82 4 399 2 84 2 226 2 750 2 
765 8 506 1 266 10 260 8 127 2 16 2 583 2 109 1 360 2 500 6 781 4 775 2 82 8 399 2 84 2 226 8 87 1 750 2 
765 2 266 2 260 2 127 2 16 2 583 2 360 2 781 2 775 2 82 2 399 2 84 2 750 2 
454 1 261 2 498 2 109 20 57 2 155 6 414 6 415 4 361 2 263 2 698 2 502 2 461 4 14 2 506 20 118 1 223 2 224 2 21 2 567 4 25 2 175 2 332 4 514 1 764 12 32 2 574 2 294 4 343 2 484 2 486 1 581 2 41 2 247 4 138 4 251 2 195 2 49 1 97 2 595 1 201 1 307 2 
689 2 454 2 261 2 32 2 498 2 108 2 109 12 155 4 414 4 697 2 484 2 650 2 136 2 461 2 41 2 581 2 138 2 506 12 247 8 92 2 567 2 21 2 97 2 332 2 175 2 306 2 104 2 764 6 
261 2 498 2 109 12 155 4 414 4 415 4 294 4 697 2 484 2 504 2 461 2 41 2 138 2 506 12 247 4 373 2 567 2 21 2 97 2 332 2 175 2 306 2 104 2 287 2 764 10 
454 2 261 2 544 2 498 2 109 12 155 4 414 4 415 4 294 4 697 2 484 2 461 2 41 2 138 2 506 14 247 4 567 2 21 2 97 2 332 2 175 2 512 2 306 2 641 2 104 2 287 2 764 12 
678 2 
