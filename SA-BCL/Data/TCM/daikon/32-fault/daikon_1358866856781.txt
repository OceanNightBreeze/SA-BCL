#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError (126,308) 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V ERROR java.lang.ArithmeticException 264 170 341 3 
utilMDE.TestUtilMDE:testOptions()V ERROR java.lang.ClassCastException 
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NoClassDefFoundError 282 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 359 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 359 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NoClassDefFoundError 359 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 359 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 359 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 179 291 189 236 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NoClassDefFoundError 324 352 214 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NoClassDefFoundError 324 352 214 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NoClassDefFoundError 324 352 214 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NoClassDefFoundError 324 352 214 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
jtb.JavaCharStream:FillBuff()V
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsGteIndex([I)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.ValueTuple:size()I
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.Quant:lt(II)Z
daikon.Quant:concat([I[I)[I
daikon.ModBitTracker:num_samples()I
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.Quant:eltsLT([II)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
jtb.ParseException:getMessage()Ljava.lang.String;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V | CONDITION | 9913 | if (x) -> if (!x)
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.Quant:eltwiseLT([I)Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.ModBitTracker:ModBitTracker(I)V
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:pairwiseLT([I[I)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
utilMDE.Assert:assertTrue(Z)V
daikon.Quant:intersection([I[I)[I
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:lexEqual([I[I)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.Intern:intern([I)[I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.Quant:sameLength([I[I)Z
daikon.ValueTuple:isMissingNonsensical(I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.MathMDE:gcd(II)I
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:eltwiseGT([I)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.Quant:eltsEqualIndex([I)Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.Quant:eltsGtIndex([I)Z
daikon.Quant:subsetOf([B[I)Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:memberOf(S[S)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.ModBitTracker:num_vars()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:readChar()C
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.Quant:pairwiseGT([I[I)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.Quant:lexGTE([I[I)Z
utilMDE.ArraysMDE:max([I)I
daikon.Quant:eltsGTE([II)Z
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.Quant:setEqual([I[I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.ArraysMDE:sum([D)D
daikon.ValueTuple:tuplemodHasModified(I)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
jtb.JavaCharStream:ReadByte()C
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:ne(II)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.WeakHasherMap:processQueue()V
daikon.Quant:isReverse([I[I)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:eltsNotEqual([II)Z
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.Quant:eq(II)Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.WeakHasherMap:size()I
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.Quant:eltsLtIndex([I)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.inv.Invariant:prob_and(DD)D
jtb.JavaCharStream:getBeginColumn()I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:union([I[I)[I
daikon.Quant:setDiff([I[I)[I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.Quant:gte(II)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.Quant:lexLTE([I[I)Z
jtb.Token:newToken(I)Ljtb.Token;
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.ArraysMDE:sum([[I)I
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z | CONSTANT | 23955 | 1 -> 0
daikon.Quant:eltsGT([II)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
jtb.JavaCharStream:getEndLine()I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType; | ASSIGN | 24033 | = null
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.Quant:eltwiseGTE([I)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.MathMDE:missing_numbers([I)[I
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.MathMDE:pow(II)I
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:gt(II)Z
utilMDE.Intern:intern([J)[J
utilMDE.MathMDE:modulus([I)[I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.Intern:intern([D)[D
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.Quant:subsetOf([I[I)Z
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.ArraysMDE:sum([I)I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.Quant:lexLT([I[I)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.FuzzyFloat:eq(DD)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
jtb.JavaParser:jj_scan_token(I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd(JJ)J
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.ArraysMDE:sorted([I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.ArraysMDE:element_range([I)I
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:pairwiseNotEqual([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
jtb.JavaParser:jj_ntk()I
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.ModBitTracker:split(I)I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.Quant:lexGT([I[I)Z
utilMDE.ArraysMDE:min([I)I
daikon.Quant:memberOf(I[I)Z
utilMDE.FuzzyFloat:ne(DD)Z
daikon.ModBitTracker:num_sets()I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
jtb.JavaCharStream:getEndColumn()I
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.ProglangType:dimensions()I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.Quant:eltsEqual([II)Z | OPERATOR | 161601 | < -> >
utilMDE.MathMDE:mod_positive(II)I
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name; | CONSTANT | 55424 | 2 -> 1
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.ValueTuple:isMissing(I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
utilMDE.Intern:internSubsequence([JII)[J
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.Intern:internSubsequence([III)[I
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.Quant:eltsLteIndex([I)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z | CONDITION | 156850 | if (x) -> if (!x)
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object; | ASSIGN | 20429 | = null
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.LimitedSizeIntSet:size()I
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:gt(DD)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
jtb.JavaCharStream:getBeginLine()I
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.MathMDE:gcd_differences([I)I
jtb.JavaParser:jj_2_16(I)Z
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:slice([III)[I
daikon.Quant:subsetOf([S[S)Z
daikon.Quant:noDups([I)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.syntaxtree.NodeOptional:NodeOptional()V
jtb.JavaCharStream:BeginToken()C
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Quant:pairwiseDivides([I[I)Z
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I | OPERATOR | 12584 | &= -> >>>=
utilMDE.FuzzyFloat:lt(DD)Z
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
jtb.JavaParser:jj_3_16()Z
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
utilMDE.MathMDE:negate(I)I
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.Quant:eltwiseLTE([I)Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.ArraysMDE:fn_compose([I[I)[I | RETURN | 62242 | return null
utilMDE.Intern:numIntArrays()I
daikon.ValueTuple:isMissingFlow(I)Z
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:lte(II)Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.FuzzyFloat:indexOf([DD)I
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.MathMDE:gcd([I)I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.Quant:eltsLTE([II)Z
utilMDE.MathMDE:pow_fast(II)I
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
231 2 185 2 176 2 177 2 188 2 34 2 300 4 223 2 39 2 
150 2 205 6 376 2 294 2 107 2 382 2 193 2 318 2 319 2 301 6 104 6 
184 6 16 2 120 2 271 6 188 2 216 2 78 4 361 6 67 4 13 6 242 2 39 2 74 2 
358 10 283 2 215 26 188 6 113 10 195 6 338 2 159 2 70 8 261 16 47 4 198 4 48 6 240 2 73 16 322 8 369 10 39 6 119 2 224 4 142 16 79 8 83 29 174 10 146 10 279 2 256 8 148 12 111 4 281 2 
155 6 267 4 
339 2 
231 4 24 2 232 2 308 2 234 2 284 2 311 4 363 2 156 2 5 2 7 2 97 2 138 2 50 4 240 2 103 2 372 2 169 2 377 2 273 2 245 2 84 2 207 2 108 4 226 2 350 2 354 2 298 2 60 2 90 2 131 2 
213 6 132 6 358 18 283 2 215 46 188 4 113 18 65 4 136 4 195 4 6 4 261 28 70 18 32 4 287 2 11 6 48 4 265 2 73 28 201 4 322 6 369 18 39 4 142 28 293 4 41 4 83 52 143 4 209 2 174 18 43 2 295 8 44 2 146 6 297 2 148 21 299 6 129 6 111 2 
349 2 308 2 102 2 
330 2 168 2 217 22 247 10 123 2 126 2 22 2 200 2 147 2 289 2 304 2 257 2 367 2 130 2 
358 2 332 2 187 2 215 4 113 2 192 2 70 2 261 2 48 2 99 2 73 2 369 2 375 2 142 2 83 6 346 2 174 2 145 2 146 4 255 2 148 2 355 2 111 2 
213 6 358 4 215 12 113 4 142 8 65 4 66 2 83 16 4 2 174 4 261 8 32 4 198 2 299 6 148 4 73 8 369 4 
328 2 308 8 186 2 0 2 309 4 234 2 92 2 93 60 191 2 3 2 364 2 196 2 96 4 137 2 163 2 341 4 264 8 290 4 50 2 51 2 102 6 266 4 203 4 373 2 270 2 170 2 343 2 77 10 345 4 57 10 348 2 125 2 349 2 87 2 296 2 182 2 386 2 
28 2 380 2 383 2 
282 2 317 2 64 2 2 2 
188 2 25 2 
252 2 188 4 153 2 
105 2 
329 6 133 6 333 6 334 2 1 6 285 2 134 6 46 2 94 2 238 6 340 2 9 2 239 2 100 2 101 32 202 2 52 2 342 4 18 6 55 2 250 6 211 2 353 4 302 2 305 2 306 6 310 2 154 6 27 2 218 2 219 2 29 4 220 2 160 2 162 2 365 2 36 4 166 6 320 2 321 6 368 2 268 2 371 6 323 4 76 6 272 2 121 4 80 32 173 6 86 2 275 2 228 4 384 2 178 4 127 6 229 2 181 32 
237 2 53 2 206 1 128 2 
128 2 180 2 
325 2 224 2 308 2 40 2 128 2 362 2 246 2 
95 2 128 2 246 2 
204 2 128 2 246 2 
53 2 114 2 109 2 
128 2 246 2 
263 2 
128 2 116 2 
53 2 109 2 117 2 
53 2 161 2 37 2 
53 2 344 2 194 2 
53 2 360 2 85 2 
53 2 19 2 122 2 
251 2 109 2 
15 2 128 2 
30 2 161 2 
194 2 347 2 
360 2 59 2 
19 2 183 2 
109 2 62 2 
19 2 12 2 
68 2 360 2 
286 2 194 2 
161 2 149 2 
53 2 45 2 109 2 117 2 
53 2 327 2 45 2 109 2 117 2 
326 2 53 2 109 2 
53 2 378 2 109 2 
258 2 225 2 115 2 227 2 
308 2 10 2 362 2 20 2 
325 2 308 2 10 2 362 2 20 2 157 2 
158 2 224 2 308 2 128 2 362 2 246 2 
314 2 377 2 
224 2 308 2 312 2 362 2 
360 2 171 2 
19 2 91 2 
161 2 23 2 
385 2 194 2 
212 2 19 2 194 2 
19 2 165 2 194 2 
244 2 19 2 194 2 
19 2 89 2 194 2 
308 2 331 6 362 2 337 2 262 2 167 6 208 2 307 2 
230 2 109 2 
71 2 69 2 288 2 313 2 58 2 
53 2 249 2 
17 2 
359 2 317 2 64 2 2 2 
359 2 317 2 64 2 2 2 
197 2 33 2 379 2 
197 2 33 2 379 2 
359 2 317 2 64 2 2 2 
359 2 317 2 64 2 2 2 
359 2 317 2 64 2 2 2 
236 2 315 2 141 2 110 2 189 2 179 2 335 2 49 2 291 2 
199 2 72 2 172 2 164 2 42 2 222 2 
233 2 278 2 374 2 106 2 88 2 164 2 221 2 
188 10 152 2 191 1 235 2 135 2 8 2 98 1 366 2 35 2 139 2 241 2 370 1 14 2 39 8 243 2 75 2 54 2 248 2 276 2 277 2 21 2 144 1 280 2 356 2 386 1 357 2 
358 6 188 6 215 12 190 2 113 6 65 2 195 2 6 2 261 6 118 2 11 4 73 6 322 4 369 6 39 6 269 2 292 2 140 2 142 6 83 17 381 2 174 6 295 2 253 2 351 2 299 4 303 2 
151 2 188 1 112 2 81 2 82 2 259 2 56 2 124 2 274 7 210 2 260 2 31 1 316 2 254 2 38 4 61 2 387 2 39 1 
151 4 112 2 81 2 82 2 259 2 56 4 124 2 274 6 210 2 260 2 316 2 254 2 38 4 61 2 387 4 
151 8 188 1 112 2 81 2 82 2 259 2 56 8 124 2 274 10 210 2 260 6 31 1 316 8 254 2 38 4 61 2 387 8 39 1 
151 2 112 2 81 2 82 2 259 2 56 2 124 2 274 2 210 2 254 2 38 2 61 2 387 2 
188 2 336 2 352 2 63 1 214 2 39 2 324 2 175 1 
214 2 188 2 352 2 336 2 324 2 39 2 
214 2 188 2 352 2 336 2 324 2 39 2 
214 2 188 2 352 2 336 2 324 2 39 2 
26 2 
