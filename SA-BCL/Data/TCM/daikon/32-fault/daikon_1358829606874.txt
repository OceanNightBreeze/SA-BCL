#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testHasher()V ERROR java.lang.Error 
utilMDE.TestUtilMDE:testIntern()V ERROR java.lang.NullPointerException 352 (197,383) 382 (72,83,122,143,162,338) 65 
utilMDE.TestUtilMDE:testMathMDE()V FAILED junit.framework.AssertionFailedError (2,400) 
utilMDE.TestUtilMDE:testOptions()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testSequenceAndIndices()V ERROR utilMDE.Assert$AssertionException (234,345) (234,345) 
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NoClassDefFoundError 360 
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.NullPointerException 176 335 73 75 201 313 205 
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V ERROR java.lang.NoClassDefFoundError (210,310) (210,310) 
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 94 
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V ERROR java.lang.NoClassDefFoundError 94 
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V ERROR java.lang.NoClassDefFoundError 94 
daikon.test.diff.UnionVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 94 
daikon.test.diff.XorVisitorTester:testXor()V ERROR java.lang.NoClassDefFoundError 94 
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NoClassDefFoundError 106 180 157 160 
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V FAILED junit.framework.AssertionFailedError 225 
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V ERROR java.lang.NoClassDefFoundError (214,357) (214,357) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V ERROR java.lang.NoClassDefFoundError (214,357) (214,357) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V ERROR java.lang.NoClassDefFoundError (214,357) (214,357) 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V ERROR java.lang.NoClassDefFoundError (214,357) (214,357) 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 29 153 315 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 29 153 315 
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 29 153 315 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 29 153 315 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.Quant:setEqual([I[I)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.Quant:lt(II)Z
jtb.JavaCharStream:getBeginLine()I
utilMDE.MathMDE:gcd(JJ)J
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.VarInfoName:hashCode()I
daikon.Quant:gt(II)Z
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.Quant:pairwiseLTE([I[I)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
jtb.JavaParser:jj_3R_85()Z
utilMDE.ArraysMDE:indexOf([I[I)I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Quant:subsetOf([F[F)Z
jtb.JavaParser:jj_3R_50()Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
jtb.JavaParser:jj_2_14(I)Z
utilMDE.ArraysMDE:sum([[D)D
daikon.inv.OutputFormat:isJavaFamily()Z
jtb.JavaParser:jj_3R_57()Z
daikon.Quant:eltsGtIndex([I)Z
jtb.JavaCharStream:backup(I)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:memberOf(S[S)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.Intern:internSubsequence([III)[I | RETURN | 22902 | return null
utilMDE.ArraysMDE:sum([[I)I
daikon.Quant:eltsEqual([II)Z
jtb.JavaCharStream:getEndLine()I
daikon.Quant:slice([III)[I
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
jtb.JavaCharStream:BeginToken()C
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:TypeParameter()Ljtb.syntaxtree.TypeParameter;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
jtb.JavaParser:TypeParameters()Ljtb.syntaxtree.TypeParameters;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.ModBitTracker:num_sets()I
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.Quant:subsetOf([J[J)Z
daikon.Quant:eltsGTE([II)Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.Quant:subsetOf([I[I)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 2268 | = null
jtb.Token:newToken(I)Ljtb.Token;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
jtb.JavaParser:jj_2_16(I)Z
jtb.JavaParser:jj_3R_135()Z
daikon.Quant:eltsLT([II)Z
daikon.Quant:eq(DD)Z
daikon.Quant:eq(JJ)Z
jtb.JavaParser:jj_3R_51()Z
utilMDE.ArraysMDE:element_range([I)I
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
jtb.JavaParser:jj_scan_token(I)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.Quant:isReverse([I[I)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quant:memberOf(D[F)Z
jtb.JavaParser:jj_2_1(I)Z
utilMDE.MathMDE:gcd(II)I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D | OPERATOR | 36110 | * -> +
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.Quant:concat([I[I)[I
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.Quant:eltsLtIndex([I)Z
daikon.Quant:memberOf(J[J)Z
daikon.Quant:sameLength([I[I)Z
utilMDE.FuzzyFloat:gt(DD)Z
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltwiseLT([I)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:ne(II)Z
jtb.JavaCharStream:FillBuff()V
utilMDE.Intern:intern([I)[I
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParser:jj_3R_163()Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.inv.Invariant:prob_or(DD)D
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z | CONDITION | 7862 | if (x) -> if (!x)
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.SimpleLog:SimpleLog(Z)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.Quant:eltwiseGT([I)Z
daikon.test.InvariantFormatTester:execute()Z
jtb.JavaParser:jj_3_13()Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.Quant:lexNotEqual([I[I)Z
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.Quant:eq(II)Z
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.MathMDE:missing_numbers([I)[I
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:lte(II)Z
jtb.syntaxtree.NodeToken:trimSpecials()V
utilMDE.ArraysMDE:sum([I)I
utilMDE.ArraysMDE:min([I)I
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.Quant:lexGT([I[I)Z
jtb.JavaParser:ClassOrInterfaceType()Ljtb.syntaxtree.ClassOrInterfaceType; | ASSIGN | 47633 | = null
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.MathMDE:mod_positive(II)I
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.FuzzyFloat:indexOf([D[D)I
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.Quant:eq(FF)Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.Quant:eltwiseNotEqual([I)Z
daikon.Quant:subsetOf([B[I)Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey; | RETURN | 6660 | return null
daikon.ValueTuple:size()I
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.inv.Invariant:prob_and(DDD)D
jtb.JavaParser:ClassOrInterfaceDeclaration(I)Ljtb.syntaxtree.ClassOrInterfaceDeclaration;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:subsetOf([D[F)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z | CONDITION | 21420 | if (x) -> if (!x)
utilMDE.ArraysMDE:concat([I[I)[I
utilMDE.MathMDE:bitwiseComplement(I)I
jtb.JavaCharStream:readChar()C
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.Quant:eltwiseEqual([I)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.FuzzyFloat:lte(DD)Z
utilMDE.ArraysMDE:indexOf([II)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eltsGT([II)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.ValueTuple:isMissingFlow(I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.Quant:pairwiseLT([I[I)Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
jtb.JavaParser:jj_3R_54()Z
daikon.Quant:intersection([I[I)[I
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.Quant:eltsLteIndex([I)Z
jtb.JavaParser:jj_3_16()Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
jtb.JavaParser:jj_3R_69()Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I | ASSIGN | 2840 | = null
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
utilMDE.ArraysMDE:fn_inverse([II)[I
jtb.JavaParser:jj_3R_53()Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
jtb.JavaParser:jj_2_13(I)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.ModBitTracker:num_samples()I
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.ModBitTracker:num_vars()I
jtb.JavaParser:jj_3R_49()Z
utilMDE.OrderedPairIterator:setnext1()V
daikon.Quant:eltsLTE([II)Z
jtb.JavaCharStream:getBeginColumn()I
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaCharStream:getEndColumn()I
daikon.Quant:lexLTE([I[I)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParser:jj_3R_134()Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.Quant:setDiff([I[I)[I
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.Quant:union([I[I)[I
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
utilMDE.OrderedPairIterator:setnext2()V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsNotEqual([II)Z
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.Quant:memberOf(F[D)Z
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:subsetOf([F[D)Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.ArraysMDE:max([I)I
jtb.JavaCharStream:ReadByte()C
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
jtb.JavaParser:jj_3R_56()Z
jtb.JavaParser:jj_3_1()Z
jtb.syntaxtree.Modifiers:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.Modifiers:Modifiers(Ljtb.syntaxtree.NodeListOptional;)V
jtb.JavaParser:jj_3R_55()Z
jtb.JavaParser:jj_3R_52()Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
jtb.JavaParser:jj_3R_161()Z
utilMDE.MathMDE:negate(I)I
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
jtb.JavaParser:jj_3R_162()Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.ModBitTracker:ModBitTracker(I)V
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.ValueTuple:isMissing(I)Z
utilMDE.MathMDE:gcd([I)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.JavaParser:jj_ntk()I
utilMDE.ArraysMDE:sum([D)D
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.ValueTuple:tuplemodHasModified(I)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.ModBitTracker:split(I)I
utilMDE.WeakHasherMap:size()I
jtb.JavaParser:TypeBound()Ljtb.syntaxtree.TypeBound;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:eltsGteIndex([I)Z
utilMDE.WeakHasherMap:processQueue()V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.LimitedSizeIntSet:add(I)V
utilMDE.Assert:assertTrue(Z)V
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:subsetOf([D[D)Z
jtb.JavaParser:jj_3R_58()Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object; | ASSIGN | 13889 | = null
utilMDE.MathMDE:pow_fast(II)I
daikon.Quant:lexLT([I[I)Z
jtb.JavaParser:jj_3R_48()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.LimitedSizeIntSet:size()I
daikon.inv.Invariant:prob_is_ge(DD)D
jtb.syntaxtree.TypeParameter:TypeParameter(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.Quant:gte(II)Z
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.MathMDE:pow(II)I
daikon.inv.Invariant:prob_and(DD)D
daikon.Quant:noDups([I)Z
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.Quant:subsetOf([S[S)Z
jtb.JavaParser:jj_3R_47()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
jtb.JavaParser:jj_3R_133()Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:memberOf(F[F)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.Quant:eltwiseLTE([I)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.Quant:memberOf(I[I)Z
utilMDE.Intern:numIntArrays()I
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
jtb.JavaParser:jj_3_14()Z
daikon.Quant:lexEqual([I[I)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
380 2 382 2 202 4 383 2 149 2 352 2 112 2 334 2 247 2 155 2 179 2 121 2 395 2 215 2 397 2 341 2 297 2 197 2 140 2 143 2 
381 2 382 6 202 5 383 6 162 2 149 2 341 6 352 6 297 6 388 2 197 6 238 2 65 2 338 4 121 6 327 4 
293 2 367 2 319 2 185 2 206 2 152 2 354 2 400 4 372 2 70 2 389 2 167 2 233 2 208 2 228 2 119 6 7 2 
274 2 151 2 113 2 74 2 316 2 317 2 218 2 17 2 18 2 404 2 
87 2 2 2 52 2 359 2 10 2 57 2 58 2 217 4 102 2 264 2 24 2 166 2 27 2 324 2 168 2 379 4 328 2 171 2 172 2 173 2 329 2 275 2 332 2 282 2 336 2 234 4 233 2 123 2 38 2 124 2 127 2 187 2 190 2 343 2 400 2 401 2 345 4 347 2 196 2 299 2 405 2 240 4 84 2 349 4 
382 4 202 5 383 4 16 4 149 4 341 4 352 4 345 4 297 4 197 4 83 4 234 4 72 2 122 8 121 4 
400 2 228 2 7 2 
242 2 12 2 216 2 49 2 174 2 188 2 2 2 245 2 114 2 136 2 298 2 116 22 104 2 358 10 
9 2 11 2 345 2 284 2 233 2 234 2 361 4 85 2 344 2 
255 2 322 2 192 6 330 2 45 2 371 2 115 2 311 2 268 6 252 6 181 2 
267 2 103 4 402 4 138 4 28 2 303 2 353 2 108 2 69 4 
382 8 202 9 383 8 78 2 368 2 51 2 149 8 341 8 305 2 352 8 259 2 112 6 345 4 297 8 388 2 197 8 234 4 199 2 143 6 121 8 
158 4 386 6 
18 2 
147 2 
234 2 362 2 
373 2 234 4 200 2 
360 2 
203 4 90 26 205 2 306 14 304 2 92 26 4 26 309 10 209 82 313 2 95 2 96 4 97 2 320 6 321 10 220 16 101 2 222 4 323 10 223 4 23 2 25 2 226 2 26 2 107 2 109 36 31 2 231 4 33 26 335 2 37 2 35 10 118 2 120 24 126 82 40 2 131 8 235 2 42 26 132 28 44 8 236 2 237 2 346 4 239 2 142 2 241 2 144 20 145 2 146 2 351 2 50 10 148 10 150 2 246 2 356 2 249 2 156 2 251 2 54 26 254 26 363 2 56 26 365 12 59 4 256 6 257 26 161 2 61 26 260 2 63 12 269 2 270 4 375 2 377 2 378 6 170 2 272 2 277 20 176 2 387 2 177 4 278 6 281 26 178 20 283 82 286 2 285 2 71 10 287 2 391 2 73 2 289 2 288 2 75 2 290 2 291 2 292 2 398 2 189 4 296 2 403 2 201 2 406 14 
400 2 165 2 368 2 6 2 227 2 325 1 307 2 394 2 
165 2 0 2 394 2 
165 2 82 2 394 2 
135 2 141 2 111 2 
165 2 394 2 
53 2 141 2 
165 2 271 2 
81 2 135 2 141 2 
366 2 135 2 224 2 
21 2 135 2 14 2 
169 2 135 2 348 2 
86 2 135 2 3 2 
141 2 212 2 
165 2 193 2 
366 2 139 2 
14 2 392 2 
169 2 159 2 
3 2 67 2 
141 2 183 2 
340 2 3 2 
169 2 41 2 
230 2 14 2 
366 2 133 2 
81 2 135 2 141 2 399 2 
81 2 163 2 135 2 141 2 399 2 
135 2 64 2 141 2 
135 2 46 2 141 2 
273 2 15 2 128 2 164 2 
400 2 207 2 6 2 129 2 
400 2 207 2 266 2 6 2 129 2 307 2 
400 2 263 2 165 2 368 2 6 2 394 2 
328 2 374 2 
400 2 368 2 6 2 55 2 
169 2 219 2 
80 2 3 2 
366 2 98 2 
14 2 253 2 
355 2 14 2 3 2 
14 2 258 2 3 2 
14 2 175 2 3 2 
243 2 14 2 3 2 
310 2 210 2 
232 2 141 2 
30 2 350 2 48 2 204 2 79 4 191 2 276 2 99 4 194 2 100 2 20 2 279 2 134 2 116 6 337 2 117 2 390 2 376 2 
135 2 300 2 
165 2 135 2 369 2 
165 2 314 2 
295 2 
94 2 
94 2 
280 2 32 2 47 2 
280 2 32 2 47 2 
94 2 
94 2 
94 2 
93 2 160 2 294 2 180 2 157 2 106 2 8 2 68 2 326 2 
125 2 225 2 5 2 301 2 91 2 393 2 
154 2 39 2 88 2 60 2 110 2 301 2 62 2 
385 2 384 2 331 1 333 2 34 2 354 1 248 2 36 2 250 2 234 10 312 2 182 1 213 2 184 2 396 1 77 2 339 2 318 2 19 2 221 2 342 2 43 2 372 1 345 8 265 2 198 2 
214 2 357 2 
214 2 357 2 
214 2 357 2 
214 2 357 2 
302 2 244 3 89 2 1 2 308 1 153 2 211 3 315 2 13 4 261 3 262 1 22 1 105 4 29 2 229 1 234 8 76 1 186 1 130 2 195 1 345 8 137 6 
364 2 13 2 302 2 244 2 89 2 1 2 153 2 261 2 345 6 137 2 234 6 105 2 29 2 211 2 315 2 
13 2 302 2 66 2 244 2 89 2 1 2 153 2 261 2 345 6 137 2 234 6 105 2 29 2 211 2 315 2 
13 2 302 2 66 2 244 2 186 2 89 2 153 2 261 2 22 2 345 6 137 4 234 6 105 2 29 2 211 2 315 2 
370 2 
