#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V ERROR java.lang.NullPointerException 
utilMDE.TestUtilMDE:testArraysMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 418 
utilMDE.TestUtilMDE:testInternObject()V ERROR java.lang.IllegalArgumentException (338,381,398,441,500,575,633) 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR utilMDE.Assert$AssertionException (37,477) (37,477) 492 
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.NullPointerException 71 688 
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 15 413 210 64 22 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 298 659 467 206 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 298 659 467 206 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 298 659 467 206 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 298 659 467 206 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoAux:hashCode()I
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
utilMDE.ArraysMDE:subarray([JII)[J
daikon.ValueTuple:isMissingNonsensical(I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:lexGTE([I[I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarInfo:name()Ljava.lang.String;
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method; | ASSIGN | 38039 | = null
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
utilMDE.MathMDE:negate(I)I
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.test.InvariantFormatTester:execute()Z
daikon.Quant:eltsGTE([II)Z
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:size()I
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Quant:eltwiseLT([I)Z
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.Assert:assertTrue(Z)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
jtb.JavaCharStream:getEndColumn()I
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eltwiseGTE([I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.Quant:memberOf(F[D)Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.Invariants:Invariants()V
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.ProglangType:dimensions()I
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:FillBuff()V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:concat([I[I)[I
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.ProglangType:isIntegral()Z
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant:prob_or(DD)D
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.FuzzyFloat:ne(DD)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eq(II)Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.MathMDE:pow_fast(II)I
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:slice([III)[I
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.Quant:eltwiseLTE([I)Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.ProglangType:isPseudoArray()Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:eltsNotEqualIndex([I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.Invariant:justified()Z
utilMDE.OrderedPairIterator:setnext2()V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:memberOf(S[S)Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.ProglangType:isScalar()Z
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.ModBitTracker:ModBitTracker(I)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:lte(II)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.Quant:subsetOf([J[J)Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([D[D)Z
jtb.JavaParser:jj_3_16()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.Invariant:prob_and(DDD)D
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:sum([[I)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.ArraysMDE:min_max([I)[I
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
jtb.JavaCharStream:getBeginLine()I
utilMDE.ArraysMDE:sum([D)D
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.Debug:logDetail()Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.Quant:memberOf(I[I)Z
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.Quant:lexNotEqual([I[I)Z
daikon.Quant:eltsLtIndex([I)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.Quant:subsetOf([F[D)Z
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:lexEqual([I[I)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.OrderedPairIterator:hasNext()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:gte(II)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.ArraysMDE:sum([I)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.Quant:eltsGT([II)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.Intern:internSubsequence([III)[I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.Quant:memberOf(F[F)Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.ValueTuple:isMissing(I)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:eq(JJ)Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.Quant:lexGT([I[I)Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.unary.UpperBoundCore:calc_modulus()J
jtb.JavaCharStream:getBeginColumn()I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Quant:pairwiseLT([I[I)Z
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.ArraysMDE:min([I)I
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:enabled()Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.UpperBoundCore:computeConfidence()D
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.PptMap:asCollection()Ljava.util.Collection;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.Ppt:Ppt()V
daikon.Quant:eltsLteIndex([I)Z
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE:gcd(II)I
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.Quant:eltsLT([II)Z
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:sum([[D)D
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:max([I)I
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.WeakHasherMap:size()I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.inv.Invariant:logDetail()Z
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
jtb.JavaCharStream:ReadByte()C
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.MathMDE:modulus([I)[I
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.Quant:eltsLTE([II)Z
daikon.Quant:memberOf(D[F)Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:numIntArrays()I
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.ProglangType:baseIsIntegral()Z
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([F[F)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object; | CONDITION | 21221 | if (x) -> if (!x)
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.Quant:subsetOf([I[I)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.Quant:eltwiseGT([I)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.Quant:union([I[I)[I
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.ModBitTracker:num_sets()I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.Quant:setDiff([I[I)[I
daikon.VarInfo:relate_var()V
daikon.Quant:sameLength([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:gcd(JJ)J
daikon.Quant:pairwiseLTE([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eq(DD)Z
daikon.Quant:setEqual([I[I)Z
jtb.JavaCharStream:BeginToken()C
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.PptSlice0:arity()I
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
utilMDE.Intern:internSubsequence([JII)[J
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:readChar()C
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:subarray([III)[I
utilMDE.ArraysMDE:sorted([I)Z | CONSTANT | 53880 | 0 -> -1
daikon.diff.InvMap:InvMap()V
daikon.Quant:eltsEqual([II)Z
daikon.VarInfoName:hashCode()I
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.inv.Invariant:isWorthPrinting()Z
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.Quant:memberOf(J[J)Z
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.ModBitTracker:split(I)I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.ModBitTracker:num_samples()I
daikon.Quant:lt(II)Z
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaParser:jj_2_16(I)Z
daikon.diff.RootNode:RootNode()V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:intersection([I[I)[I
daikon.Quant:noDups([I)Z
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.Quant:subsetOf([B[I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:element_range([I)I
daikon.Quant:eq(FF)Z
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.Quant:pairwiseSquare([I[I)Z
daikon.inv.Invariant:logOn()Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.Quant:lexLTE([I[I)Z
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd_differences([I)I
daikon.Quant:eltsGtIndex([I)Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.PptSlice1:arity()I
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.PptSlice1:num_samples()I
jtb.JavaParser:jj_scan_token(I)Z
jtb.JavaCharStream:getEndLine()I
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.inv.Invariant:prob_and(DD)D
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V | ASSIGN | 10728 | = null
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.ValueTuple:isMissingFlow(I)Z
daikon.ModBitTracker:num_vars()I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.ValueTuple:size()I
jtb.JavaParser:jj_ntk()I
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.Quant:eltsGteIndex([I)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration; | RETURN | 7701 | return null
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.PptName:isCombinedExitPoint()Z
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Intern:intern([J)[J
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.Quant:gt(II)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.MathMDE:bitwiseComplement(I)I
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.VarInfo:new_ppt()V
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.Quant:concat([I[I)[I
jtb.JavaCharStream:backup(I)V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.Quant:subsetOf([D[F)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
jtb.Token:newToken(I)Ljtb.Token;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.FuzzyFloat:gte(DD)Z
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.Intern:intern([I)[I
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.ProglangType:baseIsScalar()Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.PptName:isEnterPoint()Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.PptSlice2:arity()I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.MathMDE:gcd([I)I
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:isArray()Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.Invariant:getConfidence()D
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.Quant:pairwiseGT([I[I)Z
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.Debug:logOn()Z
daikon.Quant:subsetOf([S[S)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:ne(II)Z
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.MathMDE:pow(II)I
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant; | RETURN | 2087 | return null
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.diff.Node:Node()V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.Quant:lexLT([I[I)Z
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.Quant:isReverse([I[I)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 2297 | = null
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
220 2 667 2 319 2 597 4 325 2 35 2 466 2 66 2 204 2 470 2 602 2 54 2 39 2 334 6 355 2 303 2 304 2 655 2 188 2 215 2 633 2 727 2 613 4 
334 14 485 2 220 4 319 4 692 2 52 2 215 8 381 4 35 5 727 8 500 4 613 12 284 6 204 4 384 6 602 8 470 4 
101 4 48 2 665 14 317 2 573 4 642 2 643 6 81 2 391 2 134 4 183 2 158 8 157 2 393 4 649 4 675 62 446 4 162 4 520 2 251 2 425 2 588 2 495 4 118 2 120 4 451 4 658 2 278 10 700 2 17 2 309 4 21 2 590 2 282 10 286 2 99 2 100 4 456 2 638 2 459 4 
705 2 24 2 516 2 
481 2 162 4 48 2 679 2 250 2 400 2 222 2 293 2 240 2 418 2 232 2 156 2 167 2 200 2 296 2 158 2 704 2 203 2 172 2 561 2 459 2 
219 2 220 4 193 6 319 4 441 8 35 4 66 2 204 4 37 4 602 6 470 4 334 11 398 4 215 6 338 2 477 4 727 6 500 2 613 10 384 4 
643 2 520 2 158 2 
208 2 650 2 397 2 628 2 91 10 163 2 691 2 699 22 497 2 166 2 297 2 673 2 25 2 273 2 
477 2 167 2 114 2 30 4 283 2 614 2 37 2 313 2 38 2 
695 2 128 6 415 2 86 2 469 6 10 2 194 2 528 2 6 6 125 2 26 2 
341 6 554 4 608 2 51 4 264 6 214 2 477 2 701 2 601 6 694 2 591 2 111 6 37 2 
484 8 220 10 319 10 575 6 417 4 597 10 692 4 8 2 35 12 371 2 66 8 204 10 67 2 37 6 602 16 470 10 334 29 355 4 654 2 213 2 215 16 477 6 403 2 633 6 232 2 727 16 97 4 613 26 549 8 407 8 
595 4 491 6 
472 2 
89 2 
657 2 477 2 
510 2 477 4 153 2 
259 2 176 2 556 2 640 2 7 2 178 2 84 8 270 8 14 2 272 1 651 2 563 1 16 1 653 2 275 6 378 2 566 2 656 2 279 2 477 32 568 1 382 1 190 4 572 2 289 2 291 3 388 2 192 1 104 6 489 4 670 8 392 2 109 1 581 2 394 11 298 2 37 30 490 1 396 2 492 2 114 2 494 1 587 2 117 2 681 2 305 2 123 2 405 2 683 2 685 2 503 1 592 2 593 2 411 1 596 2 416 3 129 2 50 2 224 1 599 2 600 2 324 2 511 2 327 2 133 2 135 2 328 2 421 4 333 16 336 6 230 1 522 1 143 2 144 2 145 2 61 4 62 4 707 2 708 2 346 2 709 1 65 3 438 1 241 2 352 3 160 1 248 1 630 2 449 2 357 2 358 2 450 6 722 2 544 2 165 11 72 2 635 2 636 5 364 2 173 3 639 8 458 1 257 17 
315 38 687 10 75 8 0 4 688 2 552 2 506 4 507 12 263 2 5 8 223 12 321 4 79 2 509 2 180 8 693 2 132 12 83 8 268 4 184 4 560 2 647 2 12 8 513 2 374 38 375 6 652 12 696 2 607 12 565 2 57 12 277 6 475 2 609 6 387 12 151 4 486 4 154 2 439 4 488 2 196 4 243 12 244 2 36 8 246 16 202 2 623 6 207 8 625 12 356 2 542 4 682 6 306 2 71 6 169 14 44 12 311 2 547 2 170 2 47 2 171 12 408 38 256 8 
179 2 294 2 94 2 444 2 158 2 31 2 620 1 417 2 
386 2 179 2 94 2 
179 2 94 2 340 2 
365 2 724 2 690 2 
179 2 94 2 
420 2 690 2 
94 2 401 2 
365 2 690 2 663 2 
365 2 245 2 201 2 
577 2 365 2 368 2 
137 2 365 2 676 2 
365 2 493 2 432 2 
126 2 690 2 
94 2 98 2 
201 2 32 2 
577 2 116 2 
137 2 345 2 
46 2 432 2 
690 2 543 2 
546 2 432 2 
137 2 496 2 
577 2 276 2 
182 2 201 2 
365 2 189 2 690 2 663 2 
365 2 189 2 181 2 690 2 663 2 
365 2 28 2 690 2 
365 2 690 2 463 2 
619 2 567 2 110 2 314 2 
690 2 720 2 
686 2 235 2 460 2 140 4 426 2 187 2 130 2 337 2 323 2 699 6 53 2 612 2 227 2 703 2 455 2 385 4 271 2 150 2 
365 2 576 2 
294 2 82 2 158 2 606 2 
294 2 350 2 82 2 158 2 606 2 31 2 
179 2 294 2 94 2 363 2 158 2 417 2 
445 2 361 2 
294 2 158 2 106 2 417 2 
137 2 211 2 
23 2 432 2 
201 2 287 2 
577 2 322 2 
577 2 717 2 432 2 
577 2 432 2 487 2 
577 2 238 2 432 2 
577 2 11 2 432 2 
218 6 105 2 294 2 199 6 158 2 610 2 168 2 548 2 
365 2 94 2 530 2 
94 2 124 2 
596 2 
176 2 177 2 178 2 84 6 269 2 14 8 651 2 275 6 378 2 93 2 476 2 566 2 279 2 477 26 568 2 190 4 290 2 102 4 666 2 104 2 669 2 197 4 392 2 298 2 37 26 395 2 492 2 114 2 587 2 117 2 681 2 305 2 42 2 217 2 501 2 685 2 406 2 503 2 592 2 593 2 316 2 508 2 599 2 133 6 135 2 328 2 421 4 514 2 515 2 517 2 333 6 335 2 336 2 611 2 616 2 61 4 62 4 237 2 346 2 155 2 241 2 443 2 629 2 630 2 447 4 448 2 449 2 70 2 721 2 450 4 72 2 364 2 257 4 550 2 
176 2 177 2 178 2 84 6 269 2 14 8 651 2 275 6 378 2 93 2 476 2 566 2 279 2 477 26 568 2 190 4 290 2 102 4 666 2 388 2 104 2 669 2 197 4 392 2 298 2 37 26 395 2 209 2 492 2 114 2 587 2 117 2 681 2 305 2 42 2 217 2 683 2 501 2 685 2 406 2 503 2 592 2 593 2 316 2 508 2 599 2 133 6 135 2 328 2 421 4 514 2 515 2 517 2 333 6 336 2 616 2 61 4 62 4 237 2 346 2 241 2 533 2 443 2 354 2 629 2 630 2 447 4 448 2 449 2 70 2 721 2 450 6 360 2 72 2 364 2 257 4 550 2 
622 2 302 2 
557 2 
551 2 258 4 594 2 461 2 128 6 415 2 6 6 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 6 330 2 648 4 695 2 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 8 716 8 677 4 69 2 117 2 122 2 726 10 454 2 125 4 
258 4 594 2 461 2 128 8 415 2 3 2 6 6 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 8 10 2 330 2 648 4 695 2 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 672 2 715 4 624 2 585 2 113 8 716 8 677 4 678 4 69 2 117 2 122 2 726 10 454 2 125 4 504 2 
585 2 594 2 128 2 194 2 6 2 598 2 440 4 523 2 419 2 621 2 578 2 226 2 267 2 571 2 454 2 715 4 125 2 624 2 
551 2 258 4 594 2 461 2 128 6 415 2 6 4 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 6 10 2 330 2 648 4 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 4 716 4 677 4 69 2 117 2 122 2 726 6 454 2 125 4 
551 2 258 4 594 2 461 2 128 4 415 2 6 6 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 86 2 469 6 330 2 648 4 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 4 716 4 677 4 69 2 117 2 122 2 726 6 454 2 125 4 
551 2 258 4 594 2 461 2 128 6 415 2 6 6 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 6 330 2 648 4 695 2 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 8 716 4 677 4 69 2 117 2 122 2 726 6 454 2 125 4 
551 2 258 4 594 2 461 2 128 6 415 2 6 8 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 8 86 2 330 2 648 4 695 2 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 8 716 8 677 4 69 2 117 2 122 2 726 10 454 2 125 4 
551 2 258 4 594 2 461 2 128 6 415 2 6 6 641 2 598 2 265 2 419 2 226 2 267 2 135 2 559 2 469 6 330 2 648 4 695 2 519 2 275 4 566 2 380 2 279 2 523 4 477 12 96 2 525 2 571 2 190 2 706 2 433 2 61 2 482 2 617 2 618 2 531 2 346 2 194 4 241 2 440 4 621 2 578 2 198 2 392 2 299 2 37 6 715 4 672 2 624 2 585 2 113 8 716 8 677 4 69 2 117 2 122 2 726 10 454 2 125 4 
174 2 555 2 176 2 6 8 178 2 558 1 559 4 14 4 564 2 378 2 566 2 380 2 18 2 20 6 571 2 190 4 388 2 194 4 578 2 390 2 197 4 198 2 392 2 579 6 205 6 37 24 395 2 585 2 587 2 592 2 593 2 594 2 412 2 415 4 49 2 598 2 225 1 419 2 599 2 226 2 421 4 603 6 228 2 422 1 56 1 424 2 604 2 605 6 60 2 433 2 61 4 62 4 617 2 436 1 618 2 239 2 241 2 440 4 621 2 443 2 442 6 624 2 630 2 448 2 69 2 449 2 632 6 450 6 72 2 253 2 73 1 454 2 457 2 74 7 257 2 76 1 258 6 461 2 641 2 464 10 265 2 267 2 84 6 86 4 469 12 85 6 87 1 648 4 651 2 473 2 89 6 275 6 92 2 93 2 657 6 279 2 477 46 96 2 660 2 661 2 288 2 482 2 104 2 292 2 295 2 298 2 299 4 672 2 300 2 113 2 674 6 492 2 677 8 114 2 117 2 681 2 305 2 122 2 308 2 310 2 683 2 499 2 501 4 685 12 125 4 127 4 128 4 505 6 508 2 510 6 326 2 133 6 135 2 328 2 330 2 332 4 333 8 519 2 336 2 523 4 524 2 525 2 702 8 527 6 339 2 706 2 346 2 531 2 348 2 532 2 351 7 713 1 715 4 540 6 718 6 719 2 726 2 545 2 364 2 
174 2 258 6 461 2 555 2 176 2 6 8 464 10 641 2 178 2 265 2 267 2 84 6 85 6 559 4 469 12 14 8 648 4 473 2 651 4 89 6 564 2 275 6 92 2 378 2 93 2 566 2 657 6 380 2 279 2 18 2 477 48 20 6 96 2 571 2 661 2 660 2 190 4 288 2 482 2 102 2 388 2 104 2 194 4 292 2 197 4 390 2 578 2 198 2 579 6 392 2 295 2 205 6 298 2 299 4 37 26 300 2 672 2 395 2 113 6 585 2 674 6 492 2 677 8 114 2 587 2 117 2 305 2 681 4 122 2 308 2 310 2 499 2 683 2 685 12 501 4 125 4 592 2 593 2 412 2 594 2 127 4 128 8 415 4 505 6 49 2 508 2 598 2 510 6 599 2 419 2 326 2 226 2 133 6 135 2 328 2 421 4 330 2 603 6 332 4 333 8 228 2 695 4 604 2 424 2 519 2 605 6 336 2 523 4 524 2 60 2 702 8 525 2 527 6 339 2 706 2 433 2 61 4 529 2 617 2 62 4 435 2 618 2 531 2 346 2 239 2 348 2 241 2 440 4 532 2 621 2 442 6 443 2 715 4 624 2 540 6 630 2 69 2 448 2 449 4 718 6 719 2 632 6 450 6 726 2 72 2 253 2 545 2 454 2 364 2 457 2 257 2 
174 2 258 6 461 2 555 2 176 2 6 8 464 10 641 2 178 2 265 2 267 2 84 6 85 6 559 4 469 12 14 8 648 4 473 2 651 4 89 6 564 2 275 6 92 2 378 2 93 2 566 2 657 6 380 2 279 2 18 2 477 48 20 6 96 2 571 2 661 2 660 2 190 4 288 2 482 2 102 2 388 2 104 2 194 4 292 2 197 4 390 2 578 2 198 2 579 6 392 2 295 2 205 6 298 2 299 4 37 26 300 2 672 2 395 2 113 6 585 2 674 6 492 2 677 8 114 2 587 2 117 2 681 4 305 2 122 2 308 2 310 2 499 2 683 2 685 12 501 4 125 4 592 2 593 2 412 2 594 2 127 4 128 8 415 4 505 6 49 2 508 2 598 2 510 6 599 2 419 2 326 2 226 2 133 6 135 2 328 2 421 4 330 2 603 6 332 4 333 8 228 2 695 4 604 2 424 2 519 2 605 6 336 2 523 4 524 2 60 2 702 8 525 2 527 6 339 2 706 2 433 2 61 4 529 2 617 2 62 4 435 2 618 2 531 2 346 2 239 2 348 2 241 2 440 4 532 2 621 2 442 6 443 2 715 4 624 2 540 6 716 4 630 2 69 2 448 2 449 4 718 6 719 2 632 6 450 6 72 2 726 6 253 2 545 2 454 2 364 2 457 2 257 2 
174 2 555 2 176 2 6 10 178 2 559 4 10 2 14 10 564 2 378 2 566 2 380 2 18 2 20 6 571 2 190 4 388 2 194 4 578 2 390 2 197 6 198 2 392 2 579 12 205 6 37 24 395 2 585 2 587 2 592 2 593 2 594 2 412 2 415 4 49 2 598 2 419 2 599 2 226 2 421 4 603 6 228 2 229 6 424 2 604 2 605 6 59 6 60 2 433 2 61 4 62 4 617 2 435 2 618 2 239 2 241 2 440 4 242 6 621 2 443 4 442 6 624 2 630 2 69 2 448 2 449 4 632 12 450 6 72 2 253 2 454 2 457 2 255 2 257 4 258 6 260 6 461 2 462 2 262 6 641 2 464 8 265 2 644 2 267 2 84 8 469 16 86 2 85 6 648 4 651 4 473 2 274 6 474 6 89 12 275 6 92 2 93 4 657 12 279 2 477 52 95 2 96 2 660 2 661 2 285 2 288 2 482 2 102 2 104 4 107 6 292 2 295 2 298 2 299 4 672 2 300 2 113 6 674 6 492 2 677 8 114 2 117 2 305 2 681 4 122 2 308 2 310 2 683 2 499 2 501 4 685 10 125 4 127 4 128 10 505 12 508 2 510 12 326 2 133 8 135 2 328 2 329 2 330 2 332 4 333 12 695 4 519 2 521 2 697 6 336 4 523 4 524 2 525 2 702 8 527 6 339 2 706 2 529 2 346 2 531 2 348 2 532 2 715 4 540 6 716 4 718 6 164 2 719 2 726 6 364 2 
258 2 594 2 617 2 461 2 128 6 415 2 194 4 6 6 641 2 265 2 440 2 419 2 621 2 578 2 267 2 469 4 648 2 330 2 672 2 715 2 113 6 585 2 695 2 716 4 677 2 380 2 122 2 477 4 726 4 96 2 571 2 525 2 706 2 433 2 125 4 
258 2 461 2 176 2 6 6 641 2 464 2 265 2 178 2 267 2 84 6 469 4 648 2 373 2 275 6 378 2 566 2 380 2 279 2 477 28 96 2 571 2 190 4 388 2 29 2 104 3 194 4 578 2 197 4 392 2 581 2 298 2 37 24 584 2 672 2 395 2 585 2 113 6 492 2 677 2 114 2 117 2 587 2 305 2 122 2 123 2 683 2 501 2 685 4 125 4 592 2 593 2 594 2 596 2 128 6 414 3 415 2 508 2 599 2 419 2 133 6 135 2 328 2 421 4 330 2 333 8 695 2 336 3 143 2 525 2 706 2 433 2 61 4 62 4 617 2 346 2 531 2 241 2 440 2 621 2 715 2 627 2 630 2 450 6 72 2 726 2 545 2 453 2 364 2 257 3 
380 2 96 2 437 2 
380 2 96 2 437 2 
258 4 176 2 6 12 464 2 178 2 265 2 84 2 559 4 646 4 469 16 86 4 10 4 14 4 648 2 471 2 651 4 377 2 275 6 378 2 566 2 380 6 279 2 477 24 96 4 280 2 479 2 190 4 27 4 483 2 388 2 194 4 578 2 198 2 392 2 582 2 298 2 299 2 37 16 583 2 395 2 113 6 674 2 677 4 114 2 587 2 117 2 681 4 305 2 589 2 122 2 216 2 499 2 683 2 501 6 685 4 125 4 592 2 593 2 127 2 128 12 415 4 508 2 599 2 419 4 326 2 133 2 135 2 328 2 421 4 332 2 333 2 695 4 519 2 427 2 523 4 60 2 146 2 148 2 615 2 61 4 236 2 62 4 344 2 346 2 437 2 241 2 440 2 621 2 715 2 624 2 247 2 716 4 68 2 629 4 630 2 69 2 448 4 449 4 450 6 72 2 726 6 454 2 364 2 257 2 
247 2 674 2 127 2 302 2 49 2 464 2 252 2 477 4 226 2 392 2 146 2 148 2 512 2 312 2 685 2 37 2 457 2 
258 4 176 2 6 12 178 2 265 2 84 2 559 4 646 4 469 16 86 4 10 4 13 2 14 4 648 2 471 2 651 4 275 6 378 2 566 2 380 6 279 2 477 24 96 4 280 2 190 4 27 4 483 2 388 2 194 4 578 2 198 2 392 2 671 2 298 2 299 4 37 16 583 2 395 2 113 6 674 2 301 2 677 4 114 2 680 2 587 2 117 2 681 4 305 2 589 4 122 2 43 2 216 2 499 2 683 2 501 6 685 2 125 4 592 2 593 2 128 12 415 4 508 2 599 2 419 4 326 2 133 2 135 2 328 2 421 4 332 2 333 2 695 4 519 2 427 2 523 4 60 2 146 2 148 2 61 4 236 2 62 4 344 2 618 2 346 2 437 2 241 2 440 2 621 2 715 2 624 2 247 2 716 4 68 2 629 4 630 2 69 2 448 4 449 4 450 6 72 2 726 6 454 2 364 2 257 4 
258 4 176 2 6 12 464 2 178 2 265 2 84 2 559 4 646 4 469 16 86 4 10 4 14 4 648 2 471 2 88 2 651 4 275 6 378 2 566 2 380 6 279 2 477 24 96 4 280 2 281 2 190 4 27 4 191 2 483 2 388 2 194 4 33 2 578 2 198 2 392 2 298 2 299 4 37 16 583 2 395 2 113 6 674 2 677 4 114 2 587 2 117 2 681 4 305 2 589 2 122 2 216 2 404 2 499 2 683 2 501 6 685 4 125 4 592 2 593 2 127 2 128 12 415 4 508 2 599 2 419 4 326 2 133 2 135 2 328 2 421 4 332 2 333 2 695 4 519 2 427 2 523 4 60 2 146 2 148 2 61 4 236 2 62 4 344 2 618 2 346 2 437 2 241 2 440 2 621 2 715 2 624 2 247 2 716 4 68 2 629 4 630 2 69 2 448 4 449 4 450 6 72 2 726 6 454 2 364 2 257 2 
2 2 261 2 176 2 178 2 468 2 84 6 470 2 15 2 186 2 90 2 275 6 566 2 279 2 477 26 19 2 381 2 22 2 660 2 284 4 190 4 104 2 668 4 390 2 197 4 392 2 204 2 298 2 112 1 37 20 492 2 115 2 586 6 114 2 210 2 117 2 587 2 215 2 45 2 501 2 685 2 593 2 410 2 220 2 413 2 319 2 320 2 508 2 599 2 133 6 135 2 421 2 602 2 333 8 334 6 228 2 139 2 336 2 231 2 524 2 613 4 434 2 61 4 234 2 62 2 346 2 64 2 347 2 349 1 348 2 241 2 532 2 711 2 537 2 714 2 626 2 630 2 450 2 359 2 723 2 72 2 727 2 452 2 254 2 364 2 637 2 257 2 
366 2 221 2 78 2 104 3 710 2 80 2 369 3 197 2 443 6 133 2 84 2 159 1 37 2 331 2 333 2 492 2 161 4 119 2 336 3 142 2 58 2 477 2 570 2 149 2 257 3 
366 2 221 2 78 2 104 2 710 2 80 2 369 2 197 2 443 6 133 2 84 2 37 2 331 2 333 2 492 2 161 4 119 2 336 2 142 2 58 2 477 2 570 2 149 2 257 2 
366 2 221 2 78 2 104 2 710 2 80 2 369 2 197 2 443 6 133 2 84 2 37 2 331 2 333 2 492 2 161 4 119 2 336 2 142 2 58 2 477 2 570 2 149 2 257 2 
689 4 664 2 77 2 63 4 220 2 342 4 343 2 318 2 319 2 575 2 108 4 670 2 645 2 204 2 37 4 372 2 470 2 602 2 331 2 333 2 562 2 334 5 40 3 492 2 518 6 55 4 336 3 379 2 121 2 215 2 477 10 478 3 727 2 362 2 147 2 613 4 430 3 549 4 639 2 257 3 
689 4 664 2 77 2 63 4 220 2 342 4 343 2 318 2 319 2 575 2 108 4 670 2 35 2 371 2 66 2 645 2 204 2 37 4 372 2 470 2 602 2 331 2 333 2 562 2 334 4 40 2 492 2 518 6 55 4 336 2 379 2 121 2 215 2 477 10 478 2 727 2 362 2 147 2 613 4 430 2 549 4 639 2 257 2 
689 4 664 2 77 2 63 4 220 2 342 4 343 2 318 2 319 2 575 2 108 4 670 2 35 2 371 2 66 2 645 2 204 2 37 4 372 2 470 2 602 2 331 2 333 2 562 2 334 4 40 2 492 2 518 6 55 4 336 2 379 2 121 2 215 2 477 10 478 2 727 2 362 2 147 2 613 4 430 2 549 4 639 2 257 2 
689 4 664 2 77 2 63 4 220 2 342 4 343 2 318 2 319 2 575 2 108 4 670 2 35 2 371 2 66 2 645 2 204 2 37 4 372 2 470 2 602 2 331 2 333 2 562 2 334 4 40 2 492 2 518 6 55 4 336 2 379 2 121 2 215 2 477 10 478 2 727 2 362 2 147 2 613 4 430 2 549 4 639 2 257 2 
689 4 664 2 77 2 63 4 220 2 342 4 343 2 318 2 319 2 575 2 108 4 670 2 35 4 371 4 66 4 645 2 204 2 37 4 372 2 470 2 602 2 331 2 333 2 562 2 334 4 40 2 492 2 518 6 55 4 336 2 379 2 121 2 215 2 477 10 478 2 727 2 362 2 147 2 613 4 430 2 549 4 639 2 257 2 
367 2 534 2 402 2 526 2 136 2 34 2 
409 2 195 2 402 2 498 2 152 2 684 2 550 2 
553 2 465 2 370 1 9 2 712 2 535 2 135 2 536 2 353 2 37 8 138 2 541 2 631 1 399 2 632 2 428 2 698 2 700 1 477 10 429 2 634 2 99 1 480 2 431 2 502 1 233 2 
1 2 219 1 220 6 193 4 574 2 319 6 575 2 441 2 35 5 371 2 66 3 204 6 37 6 602 6 470 6 539 2 423 2 334 15 398 2 307 2 215 6 477 6 19 2 727 6 381 2 452 2 613 12 662 2 284 4 549 4 434 2 
185 2 376 2 689 2 249 2 63 2 103 2 175 2 41 2 212 3 108 2 266 2 580 2 538 2 
185 2 376 2 689 2 249 2 63 2 103 4 175 2 41 2 4 1 212 6 141 2 477 1 108 2 266 2 131 2 580 2 37 1 538 2 
185 2 376 2 689 2 249 4 63 2 103 4 175 4 41 4 212 6 141 2 108 2 266 2 131 2 580 2 538 2 
185 2 376 2 689 2 249 8 63 2 103 4 175 8 41 8 4 1 212 10 141 8 477 1 108 2 266 2 131 6 580 2 37 1 538 2 
467 2 477 2 659 2 383 1 389 1 206 2 298 2 37 2 725 2 
477 2 725 2 659 2 467 2 298 2 206 2 37 2 
477 2 725 2 659 2 467 2 298 2 206 2 37 2 
477 2 725 2 659 2 467 2 298 2 206 2 37 2 
569 2 
