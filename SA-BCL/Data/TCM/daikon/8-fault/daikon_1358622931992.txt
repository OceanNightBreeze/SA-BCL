#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V ERROR java.lang.NullPointerException (286,668) 
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 609 803 132 810 823 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 87 253 148 396 745 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR java.lang.NullPointerException 510 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.UnsupportedOperationException 715 806 622 404 97 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.Error 535 622 404 97 
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (313,378) (313,378) 821 622 404 97 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (313,378) 71 622 404 97 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.VarInfoName:hashCode()I
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.Invariant:prob_or(DD)D
jtb.JavaCharStream:getEndLine()I
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:lexLT([I[I)Z
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.Invariant:format()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.Quant:eq(II)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.ValueTuple:isMissing(I)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.VarInfoAux:hashCode()I
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:union([I[I)[I
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method; | ASSIGN | 38039 | = null
daikon.Quant:subsetOf([B[I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
utilMDE.MathMDE:gcd_differences([I)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.Quant:subsetOf([D[F)Z
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
daikon.Quant:intersection([I[I)[I
jtb.Token:newToken(I)Ljtb.Token;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.ValueSet:ValueSet(I)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:noDups([I)Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
jtb.JavaParserTokenManager:MoreLexicalActions()V
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.Quant:eltsGTE([II)Z
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.ProglangType:isIntegral()Z
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.ModBitTracker:num_sets()I
utilMDE.LimitedSizeIntSet:add(I)V
daikon.Quant:eltsEqual([II)Z
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ModBitTracker:num_samples()I
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
utilMDE.MathMDE:negate(I)I
daikon.Quant:lt(II)Z
utilMDE.MathMDE:pow_fast(II)I
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.ArraysMDE:min([I)I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Quant:eltsGT([II)Z
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I | CONDITION | 488 | if (x) -> if (!x)
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.Quant:lexGTE([I[I)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
utilMDE.MathMDE:gcd(II)I
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:subsetOf([F[F)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
utilMDE.Intern:internSubsequence([III)[I
daikon.inv.Invariant:isWorthPrinting()Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.Quant:subsetOf([S[S)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.Debug:logDetail()Z
utilMDE.FuzzyFloat:gt(DD)Z
daikon.Quant:isReverse([I[I)Z
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
jtb.JavaCharStream:backup(I)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.PptSlice2:arity()I
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:sign(I)I
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:lexGT([I[I)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.ModBitTracker:split(I)I
daikon.Quant:eltsNotEqual([II)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.FuzzyFloat:gte(DD)Z
daikon.PptName:isEnterPoint()Z
utilMDE.FuzzyFloat:indexOf([DD)I
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.VarInfo:name()Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.Assert:assertTrue(Z)V
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.Invariant:prob_and(DD)D
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
jtb.JavaCharStream:getEndColumn()I
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:name()Ljava.lang.String;
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.Quant:subsetOf([D[D)Z
daikon.ProglangType:dimensions()I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.Quant:eltsGteIndex([I)Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:memberOf(F[F)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:concat([I[I)[I
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:computeConfidence()D
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
jtb.JavaParser:jj_ntk()I
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eq(JJ)Z
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:sum([I)I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ModBitTracker:num_vars()I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.Quant:lte(II)Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.Quant:eltwiseLT([I)Z
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
utilMDE.ArraysMDE:sum([D)D
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.Quant:eltsGtIndex([I)Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.inv.Invariant:logOn()Z
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.JavaCharStream:getBeginLine()I
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
jtb.JavaCharStream:FillBuff()V
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object; | RETURN | 62299 | return null
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.filter.InvariantFilters:InvariantFilters()V
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
utilMDE.Intern:intern([D)[D
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.ArraysMDE:fn_is_permutation([I)Z
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
utilMDE.MathMDE:gcd([I)I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Quant:gt(II)Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.Intern:numIntArrays()I
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.ArraysMDE:element_range([I)I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.diff.PrintAllVisitor:bufPrintln()V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String; | RETURN | 50824 | return null
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.ProglangType:isArray()Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.Quant:memberOf(F[D)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:fn_identity(I)[I
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
utilMDE.MathMDE:modulus([I)[I
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.Quant:eq(FF)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd(JJ)J
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.Quant:eltsLTE([II)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
utilMDE.OrderedPairIterator:setnext1()V
daikon.Quant:memberOf(S[S)Z
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
utilMDE.MathMDE:missing_numbers([I)[I
jtb.JavaCharStream:readChar()C
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.ArraysMDE:sum([[D)D
daikon.Quant:setDiff([I[I)[I
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.ProglangType:isPseudoArray()Z
daikon.Quant:eltwiseGTE([I)Z
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsScalar()Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.Quant:setEqual([I[I)Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.Quant:subsetOf([F[D)Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltwiseLTE([I)Z
daikon.Quant:concat([I[I)[I
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.Node:Node()V
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.Quant:eq(DD)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
utilMDE.WeakHasherMap:size()I
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
utilMDE.ArraysMDE:fn_inverse([II)[I
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.ValueTuple:isMissingFlow(I)Z
utilMDE.ArraysMDE:sorted([I)Z
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
jtb.JavaCharStream:ReadByte()C
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.Intern:internSubsequence([JII)[J
daikon.Debug:logOn()Z
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
utilMDE.Intern:intern([J)[J
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:max([I)I
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:getBeginColumn()I
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.RootNode:RootNode()V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.Quant:lexLTE([I[I)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([J[J)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lexEqual([I[I)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList; | ASSIGN | 61874 | = null
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:ne(II)Z
daikon.Ppt:Ppt()V
daikon.inv.unary.UpperBoundCore:calc_modulus()J
utilMDE.Intern:intern([I)[I
daikon.Quant:memberOf(D[F)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.Quant:gte(II)Z
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:BeginToken()C
daikon.inv.Invariant:justified()Z
daikon.VarInfoName.Elements:esc_name_impl()Ljava.lang.String;
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.diff.InvMap:toString()Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice0:arity()I
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.VarInfoName:esc_name()Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.Quant:eltwiseGT([I)Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.PptSlice1:num_samples()I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.OrderedPairIterator:setnext2()V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.Quant:pairwiseDivides([I[I)Z
daikon.VarInfo:new_ppt()V
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.PptName:isCombinedExitPoint()Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.ValueTuple:size()I
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.test.InvariantFormatTester:execute()Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([I[I)Z
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.Quant:slice([III)[I
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice1:arity()I
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:indexOf([II)I
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.inv.Invariants:Invariants()V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.Quant:memberOf(I[I)Z
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsLteIndex([I)Z
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.ProglangType:isScalar()Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.Quant:eltsLT([II)Z
daikon.Quant:memberOf(J[J)Z
daikon.Quant:eltwiseEqual([I)Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
utilMDE.OrderedPairIterator:hasNext()Z
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.Quant:sameLength([I[I)Z
daikon.inv.Invariant:logDetail()Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.diff.InvMap:InvMap()V
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
utilMDE.MathMDE:pow(II)I
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.ArraysMDE:sum([[I)I
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.config.Configuration:apply(Ljava.lang.String;)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
231 2 313 2 1 2 623 4 96 2 671 2 813 2 378 2 168 2 
726 6 695 2 528 2 8 6 552 6 488 2 419 2 792 2 42 2 273 2 572 2 
313 2 17 2 771 6 517 2 629 6 772 2 208 2 378 2 120 4 447 6 418 2 381 4 345 6 
141 10 186 10 313 6 525 26 618 2 144 16 63 10 117 16 390 4 414 10 67 12 248 2 45 8 649 29 398 2 799 8 652 2 677 6 378 6 681 4 358 4 716 10 277 4 632 6 177 2 84 16 464 2 467 8 86 8 468 2 
668 4 286 4 
749 2 
313 4 638 2 412 2 1 2 363 2 364 2 166 2 365 2 68 2 367 2 226 2 69 2 130 2 800 2 173 2 79 2 378 4 608 4 660 4 30 2 434 2 611 2 561 2 495 2 562 2 334 2 501 2 617 4 814 2 761 4 567 2 344 2 395 2 514 2 355 2 409 2 410 2 361 2 683 2 214 2 468 2 470 2 522 2 411 2 
186 16 141 16 333 8 313 4 525 48 144 32 62 4 63 16 117 32 414 6 531 4 318 4 707 6 67 22 598 4 147 6 643 6 10 2 649 54 398 2 798 2 543 6 799 18 352 4 677 4 429 6 802 2 656 2 376 4 378 4 698 2 716 16 358 2 632 4 84 32 463 4 754 6 777 2 86 6 
614 2 412 2 137 2 
299 2 458 2 300 2 500 10 266 2 173 2 302 2 720 2 54 2 259 2 673 2 230 22 263 2 46 2 
186 2 141 2 525 4 144 2 63 2 117 2 414 4 67 2 620 2 368 2 40 2 454 2 649 6 250 2 799 2 677 2 486 2 604 2 716 2 358 2 84 2 491 2 183 2 
543 6 186 4 141 4 525 12 144 8 352 4 63 4 390 2 117 8 376 4 67 4 716 4 382 2 643 6 41 2 84 8 649 16 
614 2 0 2 498 4 471 2 412 8 473 2 475 2 366 4 91 4 565 2 530 2 319 4 506 14 815 2 69 2 199 2 270 2 229 4 351 2 204 2 47 10 129 4 819 4 402 62 133 2 154 4 206 2 748 2 551 4 660 4 257 4 306 2 237 10 279 2 137 6 557 2 809 2 469 4 495 4 388 2 
36 2 444 2 207 2 749 2 702 2 703 2 370 2 451 2 12 2 648 2 
314 24 313 32 114 1 526 2 115 2 413 2 218 1 527 2 727 2 220 2 529 2 730 2 4 4 732 1 119 2 224 3 123 4 645 1 538 2 322 2 539 2 126 2 739 2 424 2 16 2 128 2 426 2 743 2 21 2 233 3 744 24 746 2 428 1 431 2 329 2 550 6 235 4 28 2 236 2 438 2 138 1 439 2 559 2 33 2 239 2 666 2 142 2 337 2 755 6 756 32 37 3 240 2 758 2 241 1 760 5 245 1 247 2 149 2 347 2 150 3 675 6 764 4 573 2 575 2 574 16 578 2 254 4 679 2 50 3 51 6 680 32 55 3 262 2 159 16 779 2 264 2 780 4 61 2 785 2 267 2 599 3 600 2 601 8 793 2 694 2 373 2 485 8 76 16 605 2 378 34 607 1 699 2 178 2 179 2 489 2 83 1 383 1 181 2 85 2 704 2 385 2 184 4 705 2 282 2 494 3 284 2 187 1 497 2 89 2 615 3 190 2 619 2 193 2 288 2 813 2 290 1 292 2 621 2 198 2 624 4 818 2 297 2 711 3 298 1 202 2 512 16 401 8 515 2 103 2 518 2 406 2 209 3 519 2 408 2 717 2 211 2 634 1 307 12 309 2 109 2 722 3 723 2 215 2 637 2 216 2 824 2 521 1 
90 2 378 2 
315 2 252 2 378 4 
14 2 
588 2 523 2 265 4 476 2 690 4 640 2 731 4 66 2 121 2 320 4 421 2 272 2 15 4 72 24 232 2 131 2 132 2 22 4 654 2 803 4 609 4 29 4 278 4 554 2 804 2 558 24 332 2 283 2 810 2 616 24 669 2 811 4 287 2 391 2 445 2 566 2 449 2 709 2 200 2 625 2 452 2 203 2 399 4 400 2 577 2 104 2 303 2 823 2 106 2 357 2 210 2 466 2 
163 2 20 1 794 2 44 2 
44 2 423 2 
479 2 681 2 412 2 769 2 44 2 105 2 658 2 
576 2 769 2 44 2 
750 2 769 2 44 2 
794 2 674 2 260 2 
769 2 44 2 
169 2 674 2 
294 2 44 2 
256 2 794 2 674 2 
684 2 794 2 291 2 
480 2 794 2 24 2 
180 2 794 2 386 2 
776 2 205 2 794 2 
789 2 674 2 
700 2 44 2 
389 2 684 2 
480 2 585 2 
721 2 386 2 
205 2 571 2 
734 2 674 2 
205 2 338 2 
386 2 416 2 
774 2 480 2 
684 2 13 2 
256 2 667 2 794 2 674 2 
256 2 667 2 225 2 794 2 674 2 
794 2 674 2 729 2 
794 2 674 2 222 2 
151 2 820 2 32 2 228 2 
251 2 88 2 2 2 516 2 579 2 678 2 594 4 581 2 340 2 553 2 244 2 788 2 359 2 537 2 662 4 330 2 230 6 98 2 
794 2 271 2 
412 2 346 2 586 2 658 2 
479 2 412 2 346 2 586 2 80 2 658 2 
681 2 563 2 412 2 769 2 44 2 658 2 
127 2 68 2 
681 2 412 2 757 2 658 2 
386 2 223 2 
205 2 156 2 
684 2 787 2 
480 2 548 2 
480 2 205 2 25 2 
659 2 480 2 205 2 
274 2 480 2 205 2 
480 2 234 2 205 2 
412 2 596 2 693 2 672 6 710 2 513 2 658 2 549 6 
134 2 674 2 
240 2 
110 2 313 26 115 2 639 4 529 2 220 2 728 2 730 2 4 4 123 2 322 2 422 2 539 2 424 2 743 2 21 2 329 2 550 4 235 4 28 2 236 2 665 2 439 2 33 2 755 2 756 6 759 2 146 2 568 2 149 2 347 2 675 6 764 4 578 2 254 2 679 2 51 2 680 4 584 2 465 2 58 2 159 6 779 6 161 2 61 2 477 2 601 2 378 26 176 2 699 2 178 2 179 2 85 2 492 2 184 4 705 2 706 2 284 2 619 2 193 2 813 2 290 2 393 2 292 2 624 2 202 2 518 2 103 2 211 2 634 2 635 4 307 8 309 4 723 2 
110 2 313 26 115 2 639 4 220 2 529 2 728 2 730 2 4 4 123 2 322 2 422 2 539 2 424 2 743 2 21 2 329 2 550 6 235 4 28 2 236 2 31 2 665 2 439 2 33 2 337 2 755 2 756 6 759 2 146 2 149 2 347 2 675 6 764 4 575 2 578 2 254 2 679 2 51 2 680 4 584 2 465 2 58 2 159 6 779 6 161 2 61 2 477 2 478 2 601 2 378 26 176 2 699 2 178 2 179 2 85 2 184 4 705 2 496 2 284 2 619 2 193 2 813 2 290 2 393 2 292 2 624 2 202 2 518 2 103 2 211 2 634 2 635 4 307 8 309 4 723 2 216 2 
593 2 
243 2 369 2 
781 4 726 6 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 6 733 2 122 8 419 4 790 2 646 2 792 4 227 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 6 235 2 487 10 136 2 436 4 556 2 33 2 612 8 140 2 188 2 189 2 193 2 446 2 763 2 42 2 455 2 675 4 764 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
781 4 313 6 726 8 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 118 2 417 2 8 8 122 8 790 2 419 4 646 2 792 4 227 2 273 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 235 2 552 6 487 10 136 2 436 4 556 2 33 2 612 8 140 2 188 2 189 2 193 2 446 2 763 2 42 2 455 2 675 4 764 2 202 2 459 4 511 2 770 2 518 2 103 2 153 2 356 2 582 2 360 2 685 2 160 4 
188 2 781 2 726 2 164 2 591 4 801 2 3 2 595 2 786 2 657 4 6 2 118 2 417 2 552 2 419 2 792 2 556 2 227 2 
781 4 726 6 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 6 733 2 122 4 419 4 790 2 646 2 792 4 227 2 273 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 4 235 2 487 6 136 2 436 4 556 2 33 2 612 4 140 2 188 2 189 2 193 2 446 2 763 2 455 2 675 4 764 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
781 4 726 4 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 6 733 2 122 4 419 4 790 2 646 2 792 4 227 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 6 235 2 487 6 136 2 436 4 556 2 33 2 612 4 140 2 188 2 189 2 193 2 446 2 763 2 455 2 675 4 764 2 572 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
781 4 726 6 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 6 733 2 122 4 419 4 790 2 646 2 792 4 227 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 6 235 2 487 6 136 2 436 4 556 2 33 2 612 8 140 2 188 2 189 2 193 2 446 2 763 2 42 2 455 2 675 4 764 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
781 4 726 6 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 8 733 2 122 8 419 4 790 2 646 2 792 4 227 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 8 235 2 487 10 136 2 436 4 556 2 33 2 612 8 140 2 188 2 189 2 193 2 446 2 763 2 42 2 455 2 675 4 764 2 572 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
781 4 726 6 313 6 164 2 113 2 591 4 165 2 528 2 3 2 529 2 595 2 786 2 5 4 6 2 417 2 118 2 8 6 733 2 122 8 419 4 790 2 646 2 792 4 227 2 372 2 324 2 801 2 23 2 657 4 696 2 378 12 699 2 552 6 235 2 487 10 136 2 436 4 556 2 33 2 612 8 140 2 188 2 189 2 193 2 446 2 763 2 42 2 455 2 675 4 764 2 202 2 459 4 511 2 770 2 518 2 301 2 103 2 153 2 582 2 360 2 
639 4 220 2 3 2 4 4 5 4 417 2 6 2 8 12 419 4 646 2 227 2 422 2 14 6 651 2 23 2 657 4 26 1 235 4 432 10 28 2 236 2 436 6 665 2 33 2 35 6 242 7 446 2 450 1 455 2 675 6 249 2 457 1 459 8 48 6 254 2 51 2 680 2 258 2 59 2 60 1 691 4 268 1 70 2 696 2 699 2 487 2 280 7 85 2 705 2 499 2 502 2 90 6 504 2 292 2 93 2 94 2 295 2 713 2 511 2 518 2 103 2 301 2 719 1 718 1 305 6 307 4 520 2 723 2 724 6 313 24 726 4 315 6 524 2 113 2 115 2 528 4 529 2 728 2 730 2 118 2 534 2 123 2 321 2 544 6 324 2 743 2 545 2 328 6 329 2 550 6 552 8 751 6 136 4 556 2 140 2 337 2 755 2 756 8 759 4 763 2 569 1 149 2 347 2 349 8 764 4 572 4 770 2 578 2 153 2 155 2 354 6 582 2 360 4 157 6 159 6 778 6 779 6 162 2 781 4 164 2 591 4 783 2 782 2 165 2 784 2 786 2 595 2 790 2 792 4 601 2 602 6 170 1 795 2 171 2 372 2 797 2 374 2 801 2 378 46 379 6 182 2 184 4 185 6 612 2 188 2 189 2 619 12 193 2 194 2 813 2 195 2 624 2 394 4 202 2 403 2 822 2 631 2 211 2 216 2 
524 2 315 6 726 8 313 26 113 2 639 4 115 2 528 4 3 2 728 2 220 2 529 2 730 2 4 4 5 4 6 2 534 2 118 2 417 2 8 12 123 4 419 4 321 2 646 2 227 2 422 2 14 6 544 6 324 2 651 2 743 2 545 2 23 2 655 2 657 4 328 6 329 2 432 10 552 8 550 6 235 4 751 6 28 2 136 4 236 2 436 6 556 2 665 2 33 2 140 2 35 6 755 2 337 2 756 8 446 2 759 4 763 2 42 4 149 2 455 2 347 2 249 2 349 8 675 6 764 4 459 8 770 2 578 2 48 6 354 6 155 2 254 4 153 2 51 2 680 2 582 2 360 4 157 6 258 2 59 2 778 6 159 6 779 6 781 4 162 2 689 2 164 2 591 4 782 2 783 2 165 2 691 4 784 2 595 2 786 2 790 2 601 2 792 4 70 2 602 6 795 2 171 2 372 2 797 2 374 2 801 2 696 2 379 6 378 48 699 2 487 2 85 2 182 2 185 6 184 4 705 2 612 6 499 2 188 2 189 2 502 2 619 12 90 6 193 2 194 2 504 2 813 2 195 2 292 2 93 2 94 2 295 2 624 4 394 4 202 2 713 2 511 2 403 2 301 2 103 2 518 2 822 2 631 2 305 6 211 2 307 8 520 2 309 2 723 2 724 6 216 2 
524 2 315 6 726 8 313 26 113 2 639 4 115 2 528 4 3 2 728 2 220 2 529 2 730 2 4 4 5 4 6 2 534 2 118 2 417 2 8 12 122 4 123 4 419 4 321 2 646 2 227 2 422 2 14 6 544 6 324 2 651 2 743 2 545 2 23 2 655 2 657 4 328 6 329 2 432 10 552 8 550 6 235 4 751 6 28 2 136 4 236 2 436 6 556 2 665 2 33 2 140 2 35 6 755 2 337 2 756 8 446 2 759 4 763 2 42 4 149 2 455 2 347 2 249 2 349 8 675 6 764 4 459 8 770 2 578 2 48 6 354 6 155 2 254 4 153 2 51 2 680 2 582 2 360 4 157 6 258 2 59 2 778 6 159 6 779 6 781 4 162 2 689 2 164 2 591 4 782 2 783 2 165 2 691 4 784 2 595 2 786 2 790 2 601 2 792 4 70 2 602 6 795 2 171 2 372 2 797 2 374 2 801 2 696 2 379 6 378 48 699 2 487 6 85 2 182 2 185 6 184 4 705 2 612 6 499 2 188 2 189 2 502 2 619 12 90 6 193 2 194 2 504 2 813 2 195 2 292 2 93 2 94 2 295 2 624 4 394 4 202 2 713 2 511 2 403 2 301 2 103 2 518 2 822 2 631 2 305 6 211 2 307 8 520 2 309 2 723 2 724 6 216 2 
639 6 220 2 3 2 221 2 4 4 5 4 417 2 6 2 8 16 419 4 646 2 227 2 422 4 14 12 425 2 651 2 23 2 655 2 657 4 235 4 432 8 28 2 236 2 238 2 436 6 665 2 33 2 35 6 446 2 42 4 455 2 675 6 249 2 459 8 676 6 48 6 254 4 462 6 51 4 680 4 258 2 59 2 689 2 64 2 691 4 70 2 273 2 696 2 699 2 487 6 701 6 85 2 281 6 705 2 499 2 502 2 90 12 504 2 292 2 708 2 93 2 94 2 295 2 713 2 511 2 518 2 103 2 301 2 304 2 305 12 307 10 520 2 309 2 723 2 724 12 313 24 726 10 315 12 524 2 113 2 115 2 528 4 529 2 728 2 730 2 118 2 122 4 123 4 321 2 544 6 324 2 743 2 545 2 328 12 329 2 550 6 552 10 751 6 136 4 556 2 140 2 337 2 755 4 145 6 756 12 759 4 763 2 149 2 347 2 349 8 764 4 350 6 572 2 770 2 578 2 153 2 155 2 354 6 582 2 360 4 157 6 159 8 778 6 779 8 162 2 781 4 164 2 591 4 783 2 782 2 165 2 592 6 784 2 786 2 595 2 790 2 792 4 601 4 602 6 795 2 171 2 372 2 797 2 374 2 801 2 378 52 379 6 182 2 184 4 185 6 612 6 188 2 189 2 619 10 193 2 194 2 812 2 813 2 195 2 197 6 624 4 394 4 202 2 628 2 403 2 822 2 631 2 633 6 211 2 216 2 
140 2 188 2 726 6 189 2 164 2 113 2 591 2 165 2 528 2 786 2 5 2 446 2 118 2 417 2 8 4 122 4 790 2 419 4 763 2 792 4 227 2 42 2 459 2 324 2 770 2 801 2 301 2 153 2 657 2 378 4 552 6 487 4 582 2 436 2 612 6 
726 6 313 24 113 2 526 2 115 2 639 4 528 2 220 2 529 2 728 2 730 2 4 4 5 2 417 2 534 2 118 2 8 4 419 4 227 2 324 2 743 2 657 2 329 2 552 6 235 4 550 6 432 2 236 2 436 2 437 3 665 2 559 2 33 2 140 2 337 2 755 3 670 2 756 8 240 2 446 2 759 2 763 2 42 2 149 2 347 2 675 6 764 4 459 2 770 2 578 2 153 2 51 3 680 3 582 2 262 2 159 6 779 6 164 2 591 2 165 2 786 2 790 2 792 4 603 2 77 2 801 2 696 2 378 28 699 2 487 2 85 2 184 4 705 2 612 6 188 2 189 2 619 4 193 2 813 2 292 2 201 2 202 2 301 2 103 2 518 2 211 2 310 2 723 2 216 2 
140 2 442 2 763 2 
140 2 442 2 763 2 
313 16 726 12 115 2 528 4 3 2 220 2 529 2 728 2 730 2 4 4 5 2 417 2 8 16 122 4 123 4 419 4 646 2 544 2 743 2 18 2 657 2 329 2 432 2 550 6 235 4 552 12 28 4 136 2 236 2 436 4 665 2 33 2 140 6 143 2 442 2 337 2 756 2 446 2 759 6 246 2 763 4 42 4 149 2 347 2 675 6 764 4 572 4 459 4 578 2 254 4 255 2 680 2 360 4 57 4 159 2 779 2 687 2 781 4 591 2 165 2 691 2 595 2 786 2 483 2 792 4 273 4 484 2 372 2 73 2 801 4 174 2 175 2 697 2 378 24 176 4 699 2 487 6 384 2 805 2 184 4 705 2 612 6 191 2 619 4 193 2 813 2 195 2 196 2 292 2 295 2 508 2 624 4 394 2 202 2 713 2 511 2 102 4 518 2 103 2 211 2 307 4 308 2 723 2 216 2 
544 2 217 2 143 2 524 2 313 2 316 2 619 2 691 2 597 2 378 4 196 2 6 2 699 2 369 2 432 2 321 2 805 2 
313 16 726 12 115 2 528 4 3 2 220 2 529 2 728 2 641 2 730 2 4 4 5 2 417 2 8 16 122 4 123 4 419 4 646 2 544 2 743 2 18 2 657 2 329 2 550 6 235 4 552 12 28 4 136 4 236 2 436 4 665 2 33 2 140 6 143 2 442 2 337 2 756 2 341 2 446 2 759 6 246 2 763 4 42 4 149 2 455 2 347 2 675 6 764 4 572 4 459 4 578 2 254 4 255 2 680 4 360 4 583 2 57 4 159 2 779 2 687 2 781 4 472 2 591 2 165 2 595 2 786 2 483 4 792 4 273 4 372 2 73 2 801 4 174 2 697 2 378 24 176 4 699 2 487 6 384 2 805 2 184 4 705 2 612 6 619 2 193 2 813 2 195 2 196 2 292 2 295 2 508 2 624 4 394 2 202 2 397 2 713 2 511 2 102 4 518 2 103 2 211 2 307 4 723 2 216 2 
313 16 726 12 115 2 528 4 3 2 220 2 529 2 728 2 730 2 4 4 5 2 417 2 8 16 122 4 123 4 419 4 646 2 544 2 323 2 743 2 18 2 657 2 329 2 432 2 550 6 235 4 552 12 28 4 136 4 236 2 436 4 665 2 33 2 440 2 140 6 143 2 442 2 337 2 756 2 446 2 759 6 246 2 763 4 42 4 149 2 455 2 347 2 675 6 764 4 572 4 459 4 578 2 254 4 255 2 680 2 360 4 57 4 159 2 779 2 687 2 781 4 590 2 591 2 165 2 691 2 595 2 786 2 483 2 792 4 273 4 372 2 73 2 801 4 174 2 697 2 378 24 176 4 699 2 487 6 82 2 384 2 805 2 184 4 705 2 612 6 619 4 193 2 813 2 195 2 196 2 292 2 295 2 508 2 624 4 394 2 202 2 713 2 511 2 102 4 518 2 103 2 108 2 211 2 307 4 723 2 216 2 
313 20 525 4 115 2 639 4 117 2 220 2 529 2 728 2 415 2 730 2 4 2 536 2 11 2 125 2 540 2 738 2 542 2 649 6 650 2 543 4 743 2 545 2 745 2 653 2 329 2 235 4 550 3 661 2 435 1 753 6 663 4 33 2 141 2 144 2 337 1 755 2 756 8 759 2 148 2 347 2 675 6 348 2 764 4 765 2 768 2 152 2 253 2 578 2 49 2 51 2 680 2 682 2 56 2 158 2 261 2 159 6 779 6 162 2 783 2 782 2 63 2 481 1 70 2 797 2 376 2 378 26 81 2 699 2 84 2 85 2 493 2 87 2 184 2 186 2 619 2 193 2 813 2 292 2 509 2 202 2 396 2 510 2 103 2 518 2 716 2 723 2 216 1 312 2 
313 2 755 3 639 2 443 2 756 2 192 2 219 2 65 2 38 2 626 2 422 6 767 2 19 2 627 2 101 1 405 2 461 4 378 2 51 3 680 3 212 2 85 2 587 3 159 2 779 2 
313 2 755 2 639 2 443 2 756 2 192 2 219 2 65 2 38 2 626 2 422 6 767 2 19 2 627 2 405 2 461 4 378 2 51 2 680 2 212 2 85 2 587 2 159 2 779 2 
313 2 755 2 639 2 443 2 756 2 192 2 219 2 65 2 38 2 626 2 422 6 767 2 19 2 627 2 405 2 461 4 378 2 51 2 680 2 212 2 85 2 587 2 159 2 779 2 
186 2 141 2 335 3 112 2 313 4 525 4 144 2 63 2 756 2 317 2 117 2 38 2 342 4 507 2 269 2 570 2 649 6 99 2 574 2 512 2 353 4 430 2 606 2 378 10 107 3 52 3 51 3 680 3 773 2 716 2 27 4 632 2 380 2 84 2 555 4 85 2 86 4 613 2 387 6 331 4 
313 4 112 2 525 4 63 2 117 2 317 2 67 2 269 2 649 4 799 2 430 2 606 2 378 10 27 4 380 2 84 2 85 2 555 4 86 4 387 6 613 2 331 4 141 2 186 2 335 2 144 2 756 2 38 2 507 2 342 4 570 2 398 2 574 2 99 2 512 2 353 4 51 2 52 2 107 2 680 2 716 2 773 2 632 2 
313 4 112 2 525 4 63 2 117 2 317 2 67 2 269 2 649 4 799 2 430 2 606 2 378 10 27 4 380 2 84 2 85 2 555 4 86 4 387 6 613 2 331 4 141 2 186 2 335 2 144 2 756 2 38 2 507 2 342 4 570 2 398 2 574 2 99 2 512 2 353 4 51 2 52 2 107 2 680 2 716 2 773 2 632 2 
313 4 112 2 525 4 63 2 117 2 317 2 67 2 269 2 649 4 799 2 430 2 606 2 378 10 27 4 380 2 84 2 85 2 555 4 86 4 387 6 613 2 331 4 141 2 186 2 335 2 144 2 756 2 38 2 507 2 342 4 570 2 398 2 574 2 99 2 512 2 353 4 51 2 52 2 107 2 680 2 716 2 773 2 632 2 
313 4 112 2 525 4 63 2 117 2 317 2 67 4 269 2 649 4 799 4 430 2 606 2 378 10 27 4 380 2 84 2 85 2 555 4 86 4 387 6 613 2 331 4 141 2 186 2 335 2 144 2 756 2 38 2 507 2 342 4 570 2 398 4 574 2 99 2 512 2 353 4 51 2 52 2 107 2 680 2 716 2 773 2 632 2 
644 2 546 2 817 2 135 2 124 2 34 2 
737 2 752 2 135 2 630 2 393 2 92 2 686 2 
313 8 167 2 392 2 293 2 9 2 95 2 735 2 343 2 796 2 712 1 460 2 741 2 172 2 547 2 375 2 747 1 206 1 327 2 378 10 53 2 610 2 305 2 490 1 636 2 809 1 33 2 
186 2 141 2 543 4 510 2 525 4 144 2 63 2 117 2 503 2 376 2 67 1 716 2 84 2 125 2 650 2 649 5 
313 1 714 2 427 2 336 2 275 2 353 2 378 1 505 2 533 4 7 1 27 2 448 7 816 2 213 2 371 2 766 2 725 2 331 2 
427 2 714 4 336 2 275 4 353 2 505 4 533 4 27 2 448 6 816 2 213 2 371 2 766 2 725 2 331 2 
313 1 427 2 714 8 336 2 275 8 353 2 378 1 505 8 533 4 7 1 27 2 448 10 816 2 213 8 371 6 766 2 725 2 331 2 
427 2 714 2 336 2 275 2 353 2 505 2 533 2 27 2 448 2 816 2 766 2 725 2 331 2 
111 2 313 20 220 4 4 6 642 2 736 2 420 2 541 1 326 4 433 2 550 16 664 2 560 2 139 2 337 4 564 2 39 1 762 2 453 4 43 2 347 4 456 1 578 4 580 2 688 1 589 2 362 1 474 2 692 2 482 1 75 2 377 2 78 1 378 20 276 2 806 2 807 2 808 2 184 6 285 2 622 2 296 2 97 2 100 2 404 2 715 4 407 2 216 4 311 2 
688 2 111 2 313 12 116 2 220 2 339 2 4 4 535 2 622 2 420 2 296 2 453 2 97 2 347 2 647 2 742 2 74 2 325 2 75 2 578 2 404 2 580 2 326 8 378 12 550 6 184 4 139 2 441 2 
313 12 337 4 289 2 220 2 4 4 622 2 296 2 453 2 97 2 347 2 647 2 74 2 75 2 578 2 404 2 580 2 326 4 821 2 378 12 550 10 775 2 184 4 216 4 139 2 441 2 
688 2 313 12 337 4 289 2 220 2 4 4 532 2 622 2 296 2 453 2 97 2 347 2 71 2 647 2 740 2 74 2 75 2 578 2 404 2 580 2 326 4 378 14 550 12 184 4 216 4 139 2 441 2 
791 2 
