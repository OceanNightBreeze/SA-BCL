#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V FAILED junit.framework.AssertionFailedError 
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 558 18 176 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V ERROR utilMDE.Assert$AssertionException (45,371) (45,371) (46,190,297,317,323,418,494,685,764,857) 651 
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR utilMDE.Assert$AssertionException (45,371) 71 656 260 723 
daikon.test.VarInfoNameTest:testJML()V ERROR utilMDE.Assert$AssertionException (45,371) 71 656 260 723 
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (45,371) 71 656 260 723 
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (45,371) 71 656 260 723 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.Invariants:Invariants()V
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.FuzzyFloat:eq(DD)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
daikon.Quant:gte(II)Z
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.Quant:sameLength([I[I)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.Quant:intersection([I[I)[I
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarInfoName:simplify_name()Ljava.lang.String;
utilMDE.FuzzyFloat:gte(DD)Z
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
utilMDE.Assert:assertTrue(Z)V
utilMDE.Intern:intern([I)[I
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE:mod_positive(II)I
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.VarInfoName:name()Ljava.lang.String;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([II)I
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.Quant:setDiff([I[I)[I
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.PptSlice1:num_samples()I
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName; | ASSIGN | 63729 | = null
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z | CONDITION | 156850 | if (x) -> if (!x)
utilMDE.LimitedSizeIntSet:add(I)V
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.unary.UpperBoundCore:computeProbability()D
utilMDE.Intern:numIntArrays()I
daikon.inv.Invariant:logOn()Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.Quant:slice([III)[I
daikon.VarInfoName:java_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Invariant:justified()Z
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quant:concat([I[I)[I
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:getConfidence()D
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.ArraysMDE:isSubset([D[D)Z | OPERATOR | 63684 | < -> >
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.Debug:logDetail()Z
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:lte(II)Z
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
jtb.JavaParser:jj_scan_token(I)Z
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:concat([I[I)[I
daikon.ValueTuple:size()I
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.Simple:ioa_name_impl()Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:eltsEqual([II)Z
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.VarInfo:name()Ljava.lang.String;
daikon.test.InvariantFormatTester:execute()Z
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.Positive:enabled()Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaParser:jj_2_16(I)Z
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.MathMDE:pow(II)I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.Quant:eltwiseEqual([I)Z
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:jj_3_16()Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.PptSlice0:arity()I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.ModBitTracker:num_sets()I
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.Quant:eltsGtIndex([I)Z
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.Quant:union([I[I)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsGT([II)Z
daikon.Quant:subsetOf([S[S)Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.Quant:ne(II)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.Quant:setEqual([I[I)Z
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
utilMDE.MathMDE:modulus([I)[I
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
daikon.test.TestQuant:assert_arrays_equals([I[I)V
jtb.JavaCharStream:FillBuff()V
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I | CONSTANT | 14318 | 112 -> 0
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseLT([I)Z
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.ProglangType:isPointerFileRep()Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:baseIsFloat()Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.unary.LowerBoundCore:computeConfidence()D
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
utilMDE.ArraysMDE:sum([[D)D
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:isScalar()Z
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sum([[I)I
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.OrderedPairIterator:hasNext()Z
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.FuzzyFloat:gt(DD)Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
utilMDE.Intern:internSubsequence([III)[I
daikon.VarInfoName.Simple:dbc_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:calc_range()J
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.VarInfoName.Elements:java_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfoName.Add:name_impl()Ljava.lang.String;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:noDups([I)Z
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.Quant:pairwiseLTE([I[I)Z
jtb.JavaCharStream:getEndColumn()I
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
jtb.JavaCharStream:getEndLine()I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:lexGT([I[I)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:max([I)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
utilMDE.Intern:internSubsequence([JII)[J
daikon.VarInfoName:dbc_name(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:sorted([I)Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
jtb.syntaxtree.NodeToken:trimSpecials()V
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.ArraysMDE:isSubarray([I[II)Z
jtb.JavaParserTokenManager:MoreLexicalActions()V
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.ProglangType:dimensions()I
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:hashCode()I
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltwiseGT([I)Z
daikon.VarInfoName.Simple:isLiteralConstant()Z
utilMDE.MathMDE:mod_positive(JJ)J
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParser:jj_ntk()I
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.inv.filter.ObviousFilter:ObviousFilter()V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:isWorthPrinting()Z
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.LimitedSizeIntSet:size()I
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.Quant:eltsLtIndex([I)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:subsetOf([I[I)Z
jtb.JavaCharStream:ReadByte()C
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:format_esc()Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice0:initInvariantsSeen()V
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
jtb.JavaCharStream:readChar()C
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.MathMDE:missing_numbers([I)[I
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:memberOf(S[S)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.Quant:subsetOf([J[J)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
utilMDE.WeakHasherMap:size()I
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.ValueTuple:isMissing(I)Z
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.diff.RootNode:RootNode()V
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.Quant:lexNotEqual([I[I)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.ProglangType:baseIsScalar()Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.test.FormatTestCase:passes()Z
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
jtb.JavaCharStream:BeginToken()C
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.VarInfo:new_ppt()V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:sum([I)I
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.VarInfo:isPointer()Z
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.ArraysMDE:subarray([III)[I
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.MathMDE:gcd(II)I
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
utilMDE.FuzzyFloat:indexOf([D[D)I
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:eq(II)Z
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.Quant:eltsNotEqual([II)Z
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.PptSlice2:arity()I
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.PptName:isEnterPoint()Z
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.Quant:lt(II)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.simplify.LemmaStack:noticeInt(J)V
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.FuzzyFloat:FuzzyFloat()V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.Node:Node()V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.Quant:memberOf(I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Debug:logOn()Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.Quant:gt(II)Z
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.Quant:lexEqual([I[I)Z
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
daikon.Ppt:Ppt()V
daikon.ModBitTracker:ModBitTracker(I)V
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
daikon.VarInfoName.ElementsFinder:inPre()Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.NonModulus:enabled()Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.ProglangType:isPseudoArray()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.ProglangType:isIntegral()Z
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.inv.unary.sequence.EltLowerBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.PptSlice1:arity()I
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:jml_name()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.UpperBoundCore:calc_range()J
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
daikon.VarInfoName.Simple:java_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:pairwiseGT([I[I)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.ProglangType:isFloat()Z
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.VarInfo:relate_var()V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.Intern:intern([J)[J
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:getBeginColumn()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.Intern:internStrings([Ljava.lang.String;)V | CONDITION | 534 | if (x) -> if (!x)
utilMDE.MathMDE:gcd(JJ)J
utilMDE.ArraysMDE:min_max([I)[I
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptName:isCombinedExitPoint()Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:sum([D)D
daikon.VarInfoName:ioa_name()Ljava.lang.String;
utilMDE.MathMDE:gcd([I)I
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
utilMDE.ArraysMDE:min([I)I
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfo:esc_quantify(Z[Ldaikon.VarInfo;)[Ljava.lang.String;
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.inv.Invariant:prob_and(DD)D
daikon.ValueTuple:isMissingNonsensical(I)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.ProglangType:isArray()Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.ModBitTracker:split(I)I
utilMDE.MathMDE:negate(I)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltsGTE([II)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfo:dbc_name()Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:eltsLT([II)Z
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Intern:intern([D)[D
jtb.JavaParserTokenManager:jjStopAtPos(II)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
jtb.JavaCharStream:getBeginLine()I
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.Quant:lexLT([I[I)Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.diff.InvMap:InvMap()V
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.ValueTuple:isMissingFlow(I)Z
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.Quant:subsetOf([B[I)Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.ModBitTracker:num_samples()I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.Modulus:enabled()Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName.Add:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:updateResults()V
utilMDE.WeakHasherMap:processQueue()V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.VarInfo:esc_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:hashCode()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.ModBitTracker:num_vars()I
daikon.inv.Invariant:logDetail()Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.Quant:eltsLTE([II)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant:prob_or(DD)D
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.Quant:eltwiseNotEqual([I)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName:ioaFormatVar(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.Quant:eltwiseLTE([I)Z
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.VarInfoName.Add:amount()Ljava.lang.String;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.WeakHasherMap.WeakKey:hashCode()I

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
516 2 172 2 184 2 538 2 77 2 816 2 45 2 371 2 471 4 
613 2 60 2 241 2 62 6 431 6 451 6 809 2 194 2 350 2 66 2 304 2 
212 2 913 2 339 2 594 6 45 2 871 2 371 2 87 6 648 6 72 4 193 2 678 6 901 4 
98 12 398 10 1 2 341 4 199 10 624 16 371 6 488 2 661 8 284 16 433 10 636 2 755 8 318 2 143 16 919 8 644 26 764 6 612 10 45 6 579 4 894 10 46 6 446 4 48 4 390 2 221 8 422 2 617 2 957 29 
437 4 737 6 
101 2 
480 2 123 2 482 2 63 2 343 2 887 4 793 2 106 2 538 2 491 2 569 2 376 2 539 2 827 2 891 2 802 2 574 2 294 2 545 2 805 2 953 2 392 2 422 2 707 2 301 2 272 2 118 2 56 4 364 2 776 4 929 2 278 2 
98 22 398 6 685 4 199 16 341 2 624 32 935 6 371 4 7 2 661 18 857 4 284 32 433 16 375 2 317 4 494 8 287 6 143 32 323 4 214 2 670 6 644 48 612 16 764 4 45 4 894 16 418 4 190 2 46 4 297 4 704 6 221 6 242 6 617 2 20 6 708 2 681 4 957 54 844 2 
757 2 545 2 650 2 
307 2 592 2 639 2 731 2 28 2 781 2 186 2 43 2 851 2 4 22 421 10 876 2 90 2 665 2 
98 2 398 4 199 2 341 2 624 2 534 2 661 2 284 2 519 2 942 2 433 2 862 2 143 2 265 2 383 2 644 4 950 2 84 2 612 2 894 2 46 2 957 6 589 2 
98 4 143 8 670 6 199 4 624 8 644 12 612 4 418 4 894 4 446 2 297 4 68 2 284 8 704 6 433 4 209 2 957 16 
425 2 249 2 593 2 531 4 782 2 129 4 232 2 751 4 537 4 312 4 940 4 518 2 313 4 254 10 795 2 569 2 724 4 757 6 183 2 262 4 145 2 380 2 185 2 949 2 545 8 419 2 388 4 582 10 614 62 51 14 839 2 328 2 272 4 877 2 274 2 650 2 810 2 742 4 776 4 97 2 
879 2 337 2 202 2 101 2 859 2 699 2 947 2 379 2 765 2 928 2 
2 4 711 2 368 2 852 2 127 4 712 16 5 2 371 34 370 6 133 2 490 2 136 2 137 2 138 1 11 2 259 1 725 5 495 2 377 2 602 2 12 2 730 2 378 1 14 2 733 2 867 2 611 4 384 2 610 2 869 2 149 4 267 1 270 3 271 3 275 24 740 2 154 2 743 2 396 3 21 2 158 24 504 2 507 16 747 3 163 2 164 4 25 8 26 2 27 2 399 2 510 4 881 1 170 2 884 2 886 2 515 2 632 2 516 2 404 3 175 12 32 2 177 2 408 8 35 2 181 2 182 3 524 3 637 2 41 2 291 2 762 2 45 32 189 2 897 4 53 12 55 1 299 2 300 3 778 2 527 1 302 3 655 2 198 2 779 1 427 3 428 2 532 2 903 2 201 2 69 6 70 2 73 2 75 2 207 2 910 2 911 2 435 4 667 1 81 2 912 2 82 32 801 2 439 2 440 2 673 1 549 2 677 2 86 2 447 2 551 2 553 16 452 2 811 3 680 2 812 1 224 2 226 1 557 2 335 2 814 2 931 2 932 3 345 2 344 2 822 1 347 2 461 2 826 16 696 6 697 2 828 2 829 1 464 2 465 2 572 2 355 2 466 32 468 2 358 1 836 2 584 2 114 2 472 1 115 2 840 2 586 6 956 2 244 1 842 8 
693 2 371 2 
508 2 807 2 371 4 
939 2 
424 2 479 6 658 8 783 2 853 2 128 6 904 2 130 2 487 30 907 2 858 4 74 2 432 2 139 2 257 2 142 2 261 6 603 6 916 2 606 6 866 6 920 2 217 4 219 2 874 30 499 30 501 2 616 2 618 6 682 2 454 2 156 6 506 2 559 2 230 2 627 2 563 6 103 6 405 6 348 2 825 4 521 2 571 2 180 2 352 6 945 2 638 2 415 6 761 2 417 2 525 2 767 6 191 2 768 2 192 2 898 2 360 8 706 6 770 6 771 2 423 2 474 2 245 4 363 6 529 6 
24 2 599 2 649 1 477 2 
599 2 332 2 
599 2 256 2 917 2 545 2 666 2 36 2 579 2 
236 2 599 2 666 2 
599 2 666 2 486 2 
24 2 628 2 227 2 
599 2 666 2 
173 2 227 2 
599 2 607 2 
24 2 797 2 227 2 
24 2 9 2 485 2 
24 2 687 2 351 2 
24 2 134 2 756 2 
24 2 634 2 306 2 
187 2 227 2 
599 2 943 2 
9 2 264 2 
687 2 952 2 
134 2 448 2 
716 2 634 2 
588 2 227 2 
647 2 634 2 
134 2 204 2 
288 2 687 2 
481 2 9 2 
24 2 690 2 797 2 227 2 
24 2 690 2 797 2 227 2 550 2 
342 2 24 2 227 2 
24 2 227 2 590 2 
105 2 909 2 286 2 235 2 
526 2 875 2 223 2 76 2 522 2 
24 2 581 2 
111 2 146 2 256 2 545 2 
111 2 146 2 256 2 917 2 545 2 218 2 
599 2 61 2 256 2 545 2 666 2 579 2 
343 2 340 2 
91 2 256 2 545 2 579 2 
134 2 222 2 
847 2 634 2 
9 2 854 2 
930 2 687 2 
634 2 687 2 868 2 
634 2 687 2 787 2 
367 2 687 2 634 2 
410 2 687 2 634 2 
104 6 315 2 256 2 353 6 833 2 545 2 502 2 119 2 
872 2 227 2 
549 2 
2 4 711 2 127 4 712 6 5 2 371 26 370 2 131 2 856 2 138 2 860 2 11 2 495 2 604 2 12 2 730 2 732 2 14 2 381 2 611 2 869 2 149 4 389 2 152 2 154 2 26 2 510 2 170 2 884 2 516 2 175 8 32 2 177 2 35 2 290 2 291 6 762 2 45 26 897 2 53 8 900 4 527 4 778 2 198 2 201 2 311 2 69 4 73 2 435 4 81 2 82 6 669 2 801 2 322 2 439 2 440 2 677 2 330 2 333 4 94 2 557 2 931 4 344 2 347 2 824 2 697 2 696 6 828 2 572 2 466 4 468 2 578 2 584 2 586 2 244 2 842 2 
2 4 711 2 368 2 127 4 712 6 5 2 371 26 370 2 131 2 856 2 717 2 138 2 860 2 11 2 495 2 12 2 730 2 732 2 733 2 14 2 381 2 611 2 869 2 149 4 389 2 152 2 154 2 26 2 510 2 170 2 884 2 516 2 175 8 32 2 177 2 888 2 35 2 290 2 291 6 762 2 45 26 897 2 53 8 900 4 527 2 778 2 198 2 201 2 311 2 69 6 73 2 207 2 435 4 81 2 82 6 801 2 322 2 439 2 440 2 443 2 677 2 330 2 333 4 557 2 931 4 344 2 347 2 824 2 696 6 697 2 828 2 572 2 466 4 468 2 578 2 584 2 586 2 244 2 842 2 
334 2 
914 2 908 2 
591 2 198 2 2 2 62 6 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 6 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 10 923 2 809 2 451 6 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 697 2 696 4 760 2 293 2 45 6 241 2 955 2 54 8 899 4 709 2 57 8 304 4 845 2 120 2 
591 2 198 2 2 2 62 8 127 2 597 2 786 4 66 4 371 12 664 4 73 2 431 6 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 88 2 269 10 923 2 809 2 451 8 739 2 503 2 157 2 397 2 556 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 517 4 108 2 350 2 697 2 696 4 760 2 293 2 45 6 241 2 54 8 955 2 899 4 709 2 57 8 304 4 845 2 120 2 
591 2 279 2 509 2 62 2 457 2 625 2 546 4 786 2 870 2 66 2 821 2 664 4 955 2 431 2 739 2 304 2 157 2 845 2 
591 2 198 2 2 2 62 6 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 4 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 6 923 2 809 2 451 6 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 350 2 697 2 696 4 760 2 293 2 45 6 955 2 54 4 899 4 709 2 57 4 304 4 845 2 120 2 
591 2 198 2 2 2 62 4 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 6 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 6 923 2 809 2 451 6 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 697 2 696 4 760 2 293 2 45 6 955 2 54 4 899 4 194 2 709 2 57 4 304 4 845 2 120 2 
591 2 198 2 2 2 62 6 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 6 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 6 923 2 809 2 451 6 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 697 2 696 4 760 2 293 2 45 6 241 2 955 2 54 4 899 4 709 2 57 8 304 4 845 2 120 2 
591 2 198 2 2 2 62 6 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 8 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 10 923 2 809 2 451 8 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 697 2 696 4 760 2 293 2 45 6 241 2 955 2 54 8 899 4 194 2 709 2 57 8 304 4 845 2 120 2 
591 2 198 2 2 2 62 6 127 2 597 2 786 4 66 4 371 12 790 2 664 4 73 2 431 6 11 2 799 2 81 2 801 2 542 4 864 4 544 2 734 2 546 4 382 2 870 2 869 2 386 2 269 10 923 2 809 2 451 6 739 2 503 2 157 2 397 2 556 2 621 2 279 2 509 2 457 2 625 2 100 2 169 2 933 2 562 2 402 2 821 2 697 2 696 4 760 2 293 2 45 6 241 2 955 2 54 8 899 4 709 2 57 8 304 4 845 2 120 2 
2 4 251 7 712 6 5 2 713 7 714 2 11 2 722 2 728 2 12 2 732 4 734 2 736 2 269 2 19 6 273 6 739 2 503 2 745 6 26 2 279 2 509 2 510 2 516 2 753 6 32 2 285 2 34 2 35 2 760 2 291 6 293 2 762 2 295 2 763 6 45 24 53 4 57 2 304 4 59 1 62 4 64 6 66 4 786 4 536 1 69 6 73 2 78 2 799 2 81 2 82 8 320 6 801 2 542 6 544 2 546 4 85 10 807 6 809 4 93 4 556 2 813 1 557 2 100 2 562 2 819 4 821 2 344 2 349 1 828 2 831 2 832 2 572 2 573 2 586 2 116 6 587 6 842 2 365 1 120 2 845 2 591 2 121 6 124 2 125 2 368 2 127 4 369 2 597 2 371 46 370 2 131 2 856 2 600 1 140 6 863 8 864 4 382 2 608 2 611 2 869 2 870 2 149 4 386 4 389 2 154 2 878 2 619 2 397 2 157 2 621 2 625 2 170 2 884 2 169 4 402 2 630 2 403 2 175 4 409 1 896 2 897 2 899 8 900 4 194 4 197 2 198 2 659 6 203 2 664 4 431 8 207 2 435 4 211 2 439 2 440 2 675 2 677 12 922 2 923 2 451 12 679 2 926 2 457 2 458 1 933 2 934 2 460 1 939 6 693 6 462 2 697 2 696 6 234 6 466 2 238 2 955 2 473 2 709 2 247 2 
121 6 591 2 124 2 2 4 125 2 368 2 369 2 127 4 712 6 597 2 5 2 370 2 371 48 714 2 131 2 856 2 11 2 722 2 140 6 863 8 728 2 12 2 732 4 864 4 734 2 608 2 382 2 611 4 870 2 869 2 148 2 149 4 736 2 386 4 389 2 269 2 19 6 273 6 739 2 154 2 878 2 503 2 619 2 157 2 397 2 745 6 621 2 279 2 26 2 509 2 510 4 625 2 169 4 884 2 170 2 402 2 630 2 516 2 403 2 753 6 175 8 32 2 285 2 34 2 35 2 760 2 291 6 293 2 762 2 763 6 295 2 45 26 896 2 897 4 53 8 899 8 900 4 57 6 304 4 197 2 198 2 62 8 659 6 64 6 786 4 66 4 203 2 69 6 664 4 73 2 431 8 207 2 435 4 78 2 799 2 81 2 211 2 320 6 82 8 801 2 542 6 439 2 440 2 544 2 546 4 85 10 675 2 677 12 922 2 807 6 923 2 451 12 809 4 679 2 926 2 93 4 556 2 557 2 457 2 931 2 100 2 933 2 562 2 934 2 819 4 821 2 344 2 939 6 462 2 693 6 234 6 696 6 697 2 828 2 832 2 831 2 572 2 573 2 238 2 466 2 241 4 586 2 473 2 955 2 116 6 587 6 246 2 842 2 709 2 247 2 845 2 120 2 
121 6 591 2 124 2 2 4 125 2 368 2 369 2 127 4 712 6 597 2 5 2 370 2 371 48 714 2 131 2 856 2 11 2 722 2 140 6 863 8 728 2 12 2 732 4 864 4 734 2 608 2 382 2 611 4 870 2 869 2 148 2 149 4 736 2 386 4 389 2 269 6 19 6 273 6 739 2 154 2 878 2 503 2 619 2 157 2 397 2 745 6 621 2 279 2 26 2 509 2 510 4 625 2 169 4 884 2 170 2 402 2 630 2 516 2 403 2 753 6 175 8 32 2 285 2 34 2 35 2 760 2 291 6 293 2 762 2 763 6 295 2 45 26 896 2 897 4 53 8 54 4 899 8 900 4 57 6 304 4 197 2 198 2 62 8 659 6 64 6 786 4 66 4 203 2 69 6 664 4 73 2 431 8 207 2 435 4 78 2 799 2 81 2 211 2 320 6 82 8 801 2 542 6 439 2 440 2 544 2 546 4 85 10 675 2 677 12 922 2 807 6 923 2 451 12 809 4 679 2 926 2 93 4 556 2 557 2 457 2 931 2 100 2 933 2 562 2 934 2 819 4 821 2 344 2 939 6 462 2 693 6 234 6 697 2 696 6 828 2 832 2 831 2 572 2 573 2 238 2 466 2 241 4 586 2 473 2 955 2 116 6 587 6 246 2 842 2 709 2 247 2 845 2 120 2 
2 4 712 8 5 2 714 2 11 2 722 2 728 2 12 2 263 2 732 4 734 2 736 2 269 6 19 6 273 6 739 2 503 2 744 6 745 6 26 2 279 2 509 2 510 4 750 6 514 2 516 2 753 6 32 2 285 2 34 2 35 2 760 2 291 8 293 2 762 2 295 2 763 12 45 24 53 10 54 4 57 6 304 4 62 10 64 12 66 4 786 4 69 6 73 2 798 6 78 2 799 2 81 2 82 12 320 6 801 2 83 6 542 6 544 2 546 4 324 6 85 8 807 12 809 4 93 4 556 2 557 2 100 2 562 2 819 4 821 2 344 2 350 2 828 2 831 2 572 2 573 2 586 4 116 6 587 6 842 4 120 2 845 2 591 2 121 6 124 2 125 2 368 2 127 4 369 2 597 2 371 52 370 4 131 2 856 2 372 2 140 6 863 8 864 4 608 2 382 2 611 4 869 2 870 2 148 2 149 4 386 4 389 4 154 2 878 2 619 2 397 2 157 2 621 2 165 2 625 2 170 2 884 2 169 4 402 2 630 2 631 2 403 2 175 10 896 2 897 4 899 8 900 6 194 2 653 2 197 2 198 2 659 12 203 2 664 4 431 10 207 2 435 4 211 2 439 2 440 2 445 2 675 2 677 10 220 6 922 2 923 2 451 16 679 2 926 2 927 2 455 6 457 2 459 6 931 2 933 2 934 2 939 12 693 12 462 2 696 6 697 2 234 6 700 6 466 4 238 2 241 4 955 2 473 2 246 2 709 2 247 2 
621 2 509 2 62 6 457 2 625 2 100 2 597 2 562 2 66 4 371 4 821 2 664 2 431 6 799 2 760 2 542 2 864 2 293 2 734 2 382 2 546 2 870 2 241 2 269 4 54 4 923 2 955 2 899 2 451 4 809 2 503 2 57 6 304 4 157 2 120 2 
2 4 368 2 127 4 712 6 597 2 5 2 371 28 370 3 131 2 132 2 856 2 137 2 11 2 864 2 732 2 605 2 734 2 382 2 869 2 870 2 149 4 387 3 269 2 154 2 503 2 397 2 157 2 621 2 163 2 26 2 749 2 509 2 625 2 170 2 884 2 629 2 516 2 32 2 35 2 760 2 291 6 293 2 762 2 45 24 899 2 900 4 57 6 304 4 198 2 62 6 66 4 69 6 664 2 73 2 431 6 207 2 435 4 799 2 81 2 82 8 801 2 542 2 439 2 440 2 546 2 85 2 549 2 677 4 923 2 451 4 809 2 680 2 557 2 457 2 100 2 562 2 821 2 344 2 696 6 697 2 828 2 832 2 572 2 466 3 703 2 241 2 955 2 586 3 120 2 
734 2 785 2 799 2 
734 2 785 2 799 2 
591 2 2 4 368 2 369 2 127 4 712 2 5 2 371 24 131 2 856 2 718 2 11 2 12 4 732 6 864 2 734 4 382 2 611 4 869 2 870 4 149 4 386 4 269 6 154 2 746 2 279 2 26 2 509 2 510 4 169 2 170 2 884 2 516 2 175 4 32 2 179 2 34 2 35 2 39 2 290 4 291 2 762 2 45 16 897 4 53 4 54 4 899 4 194 4 57 6 777 2 527 2 304 4 198 2 62 12 785 2 786 4 66 4 203 2 69 6 664 2 791 2 73 2 431 12 207 2 435 4 799 6 540 2 81 2 82 2 801 2 542 4 543 4 441 2 440 2 544 2 546 2 85 2 677 4 552 2 809 4 451 16 93 2 683 2 96 2 557 2 560 2 933 2 562 2 819 2 344 2 350 4 696 6 697 2 463 2 828 2 946 2 572 2 466 2 702 2 576 4 470 2 241 4 955 2 116 2 243 2 709 2 
198 2 914 2 642 2 560 2 85 2 45 2 470 2 934 2 630 2 371 4 677 2 50 2 116 2 179 2 739 2 93 2 303 2 
591 2 2 4 368 2 369 2 127 4 712 2 5 2 371 24 131 2 715 2 856 2 718 2 720 2 11 2 12 4 864 2 732 6 734 4 382 2 611 4 869 2 870 4 149 4 386 4 151 2 269 6 154 2 746 2 279 2 26 2 509 2 510 4 29 2 169 4 170 2 884 2 402 2 516 2 175 4 32 2 179 2 34 2 35 2 39 2 290 4 291 2 762 2 45 16 897 4 53 4 54 4 899 4 194 4 57 6 777 2 527 1 304 4 198 2 62 12 785 2 786 4 66 4 203 2 69 6 664 2 791 2 73 2 431 12 207 2 435 4 799 6 540 2 81 2 82 2 801 2 542 4 915 2 543 4 440 2 544 2 546 2 677 2 809 4 451 16 96 2 557 2 560 2 933 2 562 2 819 2 344 2 350 4 696 6 697 2 463 2 828 2 946 4 572 2 466 4 576 4 470 2 241 4 955 2 116 2 243 2 709 2 
591 2 2 4 250 2 368 2 369 2 127 4 712 2 5 2 371 24 131 2 856 2 718 2 11 2 861 2 12 4 732 6 864 2 734 4 382 2 611 4 869 2 870 4 149 4 386 4 269 6 154 2 746 2 279 2 26 2 509 2 510 4 169 4 170 2 884 2 402 2 516 2 175 4 32 2 179 2 34 2 35 2 39 2 412 2 290 4 291 2 762 2 45 16 897 4 53 4 54 4 899 4 194 4 57 6 777 2 527 1 304 4 198 2 62 12 785 2 786 4 66 4 203 2 67 2 69 6 664 2 791 2 73 2 431 12 207 2 435 4 799 6 540 2 81 2 82 2 801 2 542 4 543 4 440 2 544 2 546 2 85 2 677 4 809 4 451 16 93 2 96 2 557 2 560 2 933 2 562 2 819 2 344 2 350 4 696 6 697 2 463 2 828 2 944 2 946 2 572 2 466 2 576 4 470 2 241 4 955 2 116 2 243 2 709 2 
248 2 2 4 484 2 712 14 252 2 5 2 6 2 489 10 253 2 255 2 719 2 493 2 11 2 726 2 12 4 262 2 263 2 13 2 732 2 735 2 15 2 266 4 16 4 268 4 498 2 18 2 738 2 741 12 742 2 505 2 22 10 26 2 748 2 749 2 280 2 512 2 513 2 281 2 282 2 283 2 516 4 751 2 284 8 32 2 754 2 33 2 35 6 37 2 38 2 289 2 759 4 40 2 42 16 291 14 292 2 762 2 44 2 295 2 45 44 764 4 297 4 49 2 53 26 773 3 58 2 775 2 527 1 528 2 780 2 308 6 530 6 784 24 65 2 311 2 535 4 788 2 69 20 71 2 792 2 312 2 73 2 314 2 794 14 796 2 81 2 319 2 82 28 800 3 321 2 322 2 801 2 547 4 548 2 804 2 325 2 806 14 326 2 553 4 329 2 89 3 330 2 92 16 555 2 557 4 98 6 558 2 338 2 561 3 818 2 820 1 344 2 346 2 565 4 823 2 824 2 107 10 566 2 826 4 570 4 828 6 831 4 572 2 575 4 356 2 577 4 578 2 835 2 580 2 837 2 586 16 585 2 361 2 117 2 841 12 842 20 843 2 844 4 122 2 846 2 850 12 368 4 127 4 129 2 595 12 855 2 370 19 371 56 856 2 372 2 135 2 374 2 138 2 860 14 601 2 143 8 144 2 605 2 381 2 612 4 869 2 149 10 387 2 389 46 152 2 391 12 153 2 615 2 393 2 154 2 878 2 160 2 161 2 622 2 162 2 165 2 401 2 882 2 624 8 167 2 168 16 885 2 884 4 170 2 629 2 631 2 174 2 403 2 407 4 175 24 176 2 178 2 413 2 414 4 640 2 643 10 644 12 893 4 188 2 894 4 190 2 420 2 900 12 651 2 195 2 653 2 654 2 197 2 198 2 199 4 429 14 660 2 661 4 662 4 663 16 205 2 430 4 207 4 433 4 435 12 668 2 213 3 436 2 438 2 439 2 918 2 440 2 670 6 442 2 671 4 215 16 444 2 445 2 216 4 675 2 677 2 449 2 450 6 221 6 927 2 684 2 936 10 937 2 941 2 691 2 692 2 695 2 697 2 696 6 694 2 698 12 237 6 948 2 466 19 703 2 467 2 239 2 240 2 473 2 244 2 957 16 478 6 
846 2 712 2 817 2 370 2 371 2 489 2 936 2 691 2 107 4 289 2 82 2 439 2 466 2 291 2 735 2 45 2 420 2 389 6 586 2 153 2 900 2 773 2 843 2 555 2 
846 2 712 2 817 2 370 2 371 2 489 2 936 2 691 2 107 4 289 2 82 2 439 2 466 2 291 2 735 2 45 2 420 2 389 6 586 2 153 2 900 2 773 2 843 2 555 2 
846 2 712 2 817 2 370 2 371 2 489 2 936 2 691 2 107 4 289 2 82 2 439 2 466 2 291 2 735 2 45 2 420 2 389 6 586 2 153 2 900 2 773 2 843 2 555 2 
0 2 846 2 426 4 308 6 849 4 199 2 623 2 902 4 624 2 561 3 905 2 370 3 371 10 373 2 284 2 565 2 433 2 826 2 523 3 800 3 82 2 143 2 439 2 466 3 834 2 672 4 644 4 766 2 612 2 45 4 764 2 894 2 553 2 221 4 705 2 327 2 394 4 395 2 475 2 957 6 
0 2 846 2 426 4 308 6 199 2 849 4 902 4 905 2 371 10 370 2 661 2 373 2 433 2 82 2 800 2 143 2 439 2 672 4 612 2 553 2 221 4 327 2 617 2 395 2 394 4 98 2 623 2 624 2 561 2 284 2 565 2 826 2 523 2 466 2 834 2 644 4 764 2 45 4 766 2 894 2 705 2 475 2 957 4 
0 2 846 2 426 4 308 6 199 2 849 4 902 4 905 2 371 10 370 2 661 2 373 2 433 2 82 2 800 2 143 2 439 2 672 4 612 2 553 2 221 4 327 2 617 2 395 2 394 4 98 2 623 2 624 2 561 2 284 2 565 2 826 2 523 2 466 2 834 2 644 4 764 2 45 4 766 2 894 2 705 2 475 2 957 4 
0 2 846 2 426 4 308 6 199 2 849 4 902 4 905 2 371 10 370 2 661 2 373 2 433 2 82 2 800 2 143 2 439 2 672 4 612 2 553 2 221 4 327 2 617 2 395 2 394 4 98 2 623 2 624 2 561 2 284 2 565 2 826 2 523 2 466 2 834 2 644 4 764 2 45 4 766 2 894 2 705 2 475 2 957 4 
0 2 846 2 426 4 308 6 199 2 849 4 902 4 905 2 371 10 370 2 661 4 373 2 433 2 82 2 800 2 143 2 439 2 672 4 612 2 553 2 221 4 327 2 617 4 395 2 394 4 98 4 623 2 624 2 561 2 284 2 565 2 826 2 523 2 466 2 834 2 644 4 764 2 45 4 766 2 894 2 705 2 475 2 957 4 
752 2 686 2 309 2 3 2 924 2 775 2 
938 2 309 2 229 2 860 2 357 2 95 2 359 2 
710 2 228 2 880 2 200 2 483 1 626 2 688 2 171 1 371 10 689 2 564 1 697 2 183 1 541 2 185 1 763 2 45 8 147 2 385 2 895 2 873 2 838 2 921 2 808 2 362 2 225 2 
98 4 684 2 685 2 99 2 199 6 624 6 935 4 371 2 661 2 598 2 284 6 633 2 407 2 316 2 433 6 494 2 321 2 143 6 670 4 644 12 45 2 612 6 764 2 894 6 297 2 676 2 221 4 617 2 651 2 774 2 957 16 
109 2 426 2 865 2 657 2 848 2 849 2 511 2 416 2 672 2 609 2 45 1 371 1 52 2 31 2 520 7 925 1 554 2 79 4 
109 2 426 2 865 4 657 2 848 2 849 2 511 2 672 2 416 4 609 2 52 4 31 2 520 6 554 2 79 4 
109 6 426 2 865 8 657 2 848 2 849 2 511 8 672 2 416 8 609 2 45 1 371 1 52 8 31 2 520 10 925 1 554 2 79 4 
426 2 865 2 657 2 848 2 849 2 672 2 416 2 609 2 52 2 31 2 520 2 554 2 79 2 
248 1 368 4 595 2 371 30 6 2 135 2 723 2 260 2 144 1 15 2 149 8 498 1 505 2 622 2 883 1 168 2 283 2 174 2 33 2 635 2 35 6 38 2 42 2 292 2 45 26 47 1 53 4 195 2 780 2 656 2 65 2 535 4 788 2 69 18 71 2 207 4 435 10 208 2 321 2 438 2 548 2 449 1 326 2 453 2 557 4 456 2 815 2 941 2 570 4 692 2 828 6 575 4 356 2 580 2 837 2 117 2 478 6 
656 2 366 2 368 2 126 2 596 2 533 4 371 44 788 2 6 4 906 2 789 2 69 40 71 2 8 2 206 2 207 2 492 2 434 4 721 2 10 2 723 2 435 18 258 2 208 2 210 2 80 2 260 2 321 2 727 2 729 2 496 2 497 2 803 2 149 18 17 2 500 2 331 2 155 2 276 2 277 2 159 2 505 2 557 2 336 2 280 4 400 2 231 2 283 2 30 2 174 2 233 2 406 2 568 2 567 2 33 2 692 4 35 2 889 2 828 2 890 2 830 2 698 6 354 2 411 2 112 4 292 2 892 2 469 2 113 2 45 42 951 2 296 2 298 2 646 2 583 2 769 2 954 6 53 32 476 2 652 2 527 2 196 2 478 4 
780 2 656 2 368 4 126 2 65 2 535 6 371 36 788 2 6 4 69 24 71 2 135 2 207 4 721 2 723 2 435 12 208 2 260 2 141 2 321 2 438 2 15 2 548 2 149 10 674 2 150 2 326 2 453 2 620 2 505 2 159 2 23 4 557 2 622 2 166 2 883 2 102 2 283 1 174 2 941 4 33 3 570 2 692 4 635 2 35 4 828 4 38 2 758 2 110 2 701 2 292 2 641 2 575 6 356 2 45 32 469 2 951 2 580 2 645 4 298 2 769 2 53 15 117 2 772 4 527 1 195 2 305 2 478 8 
557 2 656 2 368 4 371 14 6 2 788 2 69 12 174 2 71 2 207 4 692 2 35 2 435 4 828 2 723 2 208 2 260 2 321 2 292 2 45 12 149 4 803 2 53 4 527 2 478 2 159 2 505 2 
310 2 
