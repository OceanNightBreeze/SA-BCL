#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR jtb.TokenMgrError 687 30 671 7 552 799 100 288 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs1()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs2()V PASSED
daikon.test.diff.DiffTester:testInvs1Invs3()V PASSED
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR utilMDE.Assert$AssertionException (459,753) (459,753) 789 517 431 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR java.lang.NullPointerException 427 18 478 714 
daikon.test.VarInfoNameTest:testSubscript()V ERROR java.lang.NullPointerException 427 18 478 714 
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 427 18 478 714 
daikon.test.VarInfoNameTest:testJML()V ERROR java.lang.NullPointerException 427 18 478 714 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:sorted([I)Z
daikon.inv.filter.InvariantFilters:shouldKeepPropFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.Quant:eltsGTE([II)Z
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
jtb.JavaParser:jj_3_1()Z
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.MathMDE:sign(I)I
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.diff.Node:Node()V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.OrderedPairIterator:hasNext()Z
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
jtb.JavaParser:jj_scan_token(I)Z
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.ProglangType:isArray()Z
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.VarInfo:new_ppt()V
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.PrintAllVisitor:bufPrintln()V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:subsetOf([F[F)Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
jtb.syntaxtree.NodeChoice:NodeChoice(Ljtb.syntaxtree.Node;I)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:max([I)I
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
jtb.JavaParser:jj_3_16()Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:lt(DD)Z
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_2()I
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
utilMDE.Intern.SequenceAndIndices:hashCode()I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.VarInfoAux:hashCode()I
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.UpperBound:computeConfidence()D
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.LowerBound:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:eltsLT([II)Z
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
jtb.JavaParser:TypeDeclaration()Ljtb.syntaxtree.TypeDeclaration;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.inv.unary.scalar.NonModulus:enabled()Z
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.VarInfoName:hashCode()I
daikon.inv.Invariant:prob_and(DD)D
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.ValueTuple:size()I
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([I[I)Z
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.Quant:memberOf(I[I)Z
daikon.Quant:eq(JJ)Z
utilMDE.MathMDE:modulus([I)[I
daikon.Quant:pairwiseLT([I[I)Z
daikon.Quant:eltsGT([II)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:fn_is_total([I)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParser:jj_ntk()I
utilMDE.WeakHasherMap:processQueue()V
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
jtb.JavaCharStream:backup(I)V
daikon.inv.Invariant:prob_and(DDD)D
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.diff.InvMap:toString()Ljava.lang.String;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I | CONSTANT | 20467 | 32 -> 1
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.ArraysMDE:isSubarray([I[II)Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.MathMDE:negate(I)I
daikon.inv.unary.LowerBoundCore:isSameFormula(Ldaikon.inv.unary.LowerBoundCore;)Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.PptTopLevel.CondIterator:hasNext()Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:logDetail()Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
jtb.JavaCharStream:readChar()C
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant:isWorthPrinting()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.Quant:eltwiseEqual([I)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice1:arity()I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.Quant:pairwiseGT([I[I)Z
daikon.PptName:isCombinedExitPoint()Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
utilMDE.ArraysMDE:noDuplicates([J)Z
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.Quant:memberOf(J[J)Z
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
utilMDE.ArraysMDE:fn_compose([I[I)[I
utilMDE.MathMDE:gcd(JJ)J
daikon.inv.filter.InvariantFilters:defaultFilters()Ldaikon.inv.filter.InvariantFilters;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
utilMDE.Intern:numIntArrays()I
daikon.inv.Invariants:Invariants()V
daikon.inv.filter.DerivedParameterFilter:DerivedParameterFilter()V
daikon.inv.unary.UpperBoundCore:prob_is_ge(DD)D
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.ArraysMDE:subarray([III)[I
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
jtb.JavaCharStream:GetSuffix(I)[C
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.diff.InvMap:InvMap()V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
jtb.JavaCharStream:getEndLine()I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.Quant:eltwiseGTE([I)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.inv.filter.InvariantFilter:InvariantFilter(Z)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
utilMDE.ArraysMDE:sum([[I)I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:lexLT([I[I)Z
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.LowerBoundCore:calc_modulus()J
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
utilMDE.WeakHasherMap:size()I
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.ProglangType:isScalar()Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.PptSlice0:arity()I
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 2297 | = null
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.filter.InvariantFilters:shouldKeepVarFilters(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.UpperBoundCore:calc_range()J
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.Quant:eltsLTE([II)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:elementType()Ldaikon.ProglangType;
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.unary.UpperBoundCore:prob_and(DD)D
utilMDE.ArraysMDE:sum([I)I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.filter.InvariantFilters:addPropertyFilter(Ldaikon.inv.filter.InvariantFilter;)V
daikon.diff.RootNode:RootNode()V
jtb.JavaCharStream:FillBuff()V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.ValueTuple:isMissing(I)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.ValueTuple:isMissingFlow(I)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.ModBitTracker:num_vars()I
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
daikon.diff.PrintAllVisitor:printPrintability(Ldaikon.inv.Invariant;)V
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.filter.InvariantFilters:shouldKeep(Ldaikon.inv.Invariant;)Ldaikon.inv.filter.InvariantFilter;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd([I)I
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.Quant:eq(FF)Z
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:concat([I[I)[I
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.filter.InvariantFilter:shouldDiscard(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.Quant:eltwiseLTE([I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
jtb.Token:newToken(I)Ljtb.Token;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.MathMDE:gcd(II)I
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.UpperBoundCore:calc_modulus()J
daikon.Quant:memberOf(D[F)Z
utilMDE.MathMDE:pow(II)I
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.ProglangType:baseIsScalar()Z
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.OutputFormat:isJavaFamily()Z
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.Quant:eltsNotEqual([II)Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
utilMDE.MathMDE:pow_fast(II)I
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:memberOf(S[S)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.Quant:sameLength([I[I)Z
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.Node:children()Ljava.util.Iterator;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.Quant:lexGTE([I[I)Z
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.unary.scalar.LowerBound:isInteresting()Z
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.inv.filter.DerivedVariableFilter:DerivedVariableFilter()V
utilMDE.OrderedPairIterator:setnext2()V
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.filter.SimplifyFilter:SimplifyFilter(Ldaikon.inv.filter.InvariantFilters;)V
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.ValueSet:ValueSet(I)V
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.ModBitTracker:num_sets()I
daikon.test.InvariantFormatTester:execute()Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.inv.filter.InvariantFilter:InvariantFilter()V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.inv.unary.UpperBoundCore:calc_avg_samples_per_val(JD)D
utilMDE.ArraysMDE:sum([D)D
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eq(DD)Z
utilMDE.Intern:internSubsequence([III)[I
daikon.Quant:subsetOf([S[S)Z
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.Quant:lt(II)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:fn_inverse([II)[I
daikon.Quant:subsetOf([J[J)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.PptMap:asCollection()Ljava.util.Collection;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:sum([[D)D
utilMDE.MathMDE:mod_positive(II)I
daikon.PptSlice2:arity()I
daikon.Quant:noDups([I)Z
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
jtb.JavaCharStream:BeginToken()C
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.inv.unary.LowerBoundCore:computeConfidence()D
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:setDiff([I[I)[I
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.Debug:logDetail()Z
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:isSubset([D[D)Z
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
jtb.TokenMgrError:TokenMgrError(Ljava.lang.String;I)V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.Quant:subsetOf([D[D)Z
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.PptName:isEnterPoint()Z
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
utilMDE.LimitedSizeIntSet:size()I
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:intersection([I[I)[I
jtb.JavaCharStream:ReadByte()C
daikon.diff.Node:add(Ljava.lang.Object;)V
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.inv.filter.InvariantFilters:InvariantFilters()V
daikon.Quant:lexEqual([I[I)Z
daikon.ModBitTracker:ModBitTracker(I)V
jtb.TokenMgrError:LexicalError(ZIIILjava.lang.String;C)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
jtb.JavaCharStream:getBeginColumn()I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.PptSlice1:num_samples()I
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.Quant:eltsLtIndex([I)Z
utilMDE.FuzzyFloat:gt(DD)Z
jtb.JavaParser:jj_2_1(I)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
jtb.TokenMgrError:TokenMgrError(ZIIILjava.lang.String;CI)V
daikon.inv.unary.scalar.UpperBound:isInteresting()Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.ProglangType:dimensions()I
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:memberOf(F[F)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.Quant:subsetOf([F[D)Z
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE:indexOf([II)I
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Ppt:Ppt()V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:isPseudoArray()Z
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:ne(II)Z
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eltsGteIndex([I)Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([B[I)Z
jtb.TokenMgrError:addEscapes(Ljava.lang.String;)Ljava.lang.String;
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:eq(DD)Z
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.Invariant:justified()Z
daikon.Quant:lexLTE([I[I)Z
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
jtb.JavaCharStream:getBeginLine()I
daikon.Quant:eltsGtIndex([I)Z
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.ProglangType:baseIsIntegral()Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.OrderedPairIterator:setnext1()V
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.filter.UnjustifiedFilter:shouldDiscardInvariant(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.Invariant:getConfidence()D
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.Quant:gte(II)Z
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.Quant:eq(II)Z
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.Quant:pairwiseSquare([I[I)Z
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.filter.ObviousFilter:ObviousFilter()V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
jtb.JavaParser:jj_3R_47()Z
daikon.inv.filter.ParentFilter:ParentFilter()V
daikon.Quant:lexGT([I[I)Z
jtb.JavaParser:jj_2_16(I)Z
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.syntaxtree.NodeChoice:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.ModBitTracker:split(I)I
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
utilMDE.FuzzyFloat:isSubset([D[D)Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
utilMDE.FuzzyFloat:gte(DD)Z
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.Invariant:logOn()Z
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.UpperBoundCore:computeProbability()D
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.inv.filter.OnlyConstantVariablesFilter:OnlyConstantVariablesFilter()V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.Quant:lte(II)Z
daikon.Debug:logOn()Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern:intern([I)[I
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.Quant:pairwiseEqual([I[I)Z
daikon.Quant:pairwiseGTE([I[I)Z
jtb.JavaCharStream:getEndColumn()I
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
utilMDE.Intern:intern([J)[J
daikon.Quant:memberOf(F[D)Z
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.ArraysMDE:concat([I[I)[I
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice; | RETURN | 38854 | return null
daikon.Quant:eltwiseGT([I)Z
daikon.inv.unary.UpperBoundCore:prob_or(DD)D
daikon.Quant:setEqual([I[I)Z
daikon.ProglangType:isIntegral()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.ValueTuple:isMissingNonsensical(I)Z
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Assert:assertTrue(Z)V
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:union([I[I)[I
daikon.ModBitTracker:num_samples()I
daikon.Quant:isReverse([I[I)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.filter.UnjustifiedFilter:UnjustifiedFilter()V
daikon.Quant:gt(II)Z
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
daikon.Quant:subsetOf([D[F)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
utilMDE.MathMDE:gcd_differences([I)I
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.Intern:intern([D)[D
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.Quant:eltwiseLT([I)Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.ArraysMDE:min_max([I)[I
daikon.inv.unary.UpperBoundCore:computeConfidence()D
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltsEqual([II)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quant:slice([III)[I
jtb.JavaCharStream:UpdateLineColumn(C)V
jtb.JavaParser:Modifiers()Ljtb.syntaxtree.Modifiers;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
518 4 654 2 640 2 753 2 649 2 162 2 106 2 459 2 385 2 
19 2 710 2 793 2 644 6 523 2 402 6 318 2 16 2 38 2 660 6 35 2 
691 6 753 2 782 2 459 2 375 2 452 4 286 6 696 6 143 2 405 2 700 4 278 2 689 6 
733 6 648 29 342 26 25 10 553 2 249 10 149 2 459 6 275 8 463 4 528 2 301 12 628 16 156 8 530 16 404 4 717 16 82 8 409 10 446 2 83 2 130 2 753 6 236 4 510 10 20 4 726 6 167 2 168 8 145 10 
781 4 703 6 
569 2 
732 2 1 2 692 2 494 2 252 2 495 2 558 2 306 2 610 2 443 2 385 2 388 2 258 2 753 4 14 2 702 2 163 2 564 2 67 2 454 4 315 2 167 2 212 2 621 2 221 2 459 4 175 2 585 4 464 2 225 2 122 2 177 4 403 2 587 2 467 2 634 2 786 4 724 2 87 2 186 2 796 2 641 2 141 2 193 2 
733 4 648 54 25 16 342 48 249 16 174 4 374 6 196 4 197 6 459 4 607 2 300 6 53 6 628 32 301 22 156 6 530 32 329 4 774 4 717 32 386 2 409 16 130 2 614 2 753 4 635 4 474 4 184 2 510 6 20 2 726 4 264 2 140 4 566 8 168 18 289 6 268 6 361 2 145 16 
293 2 14 2 142 2 
690 2 551 2 750 2 429 2 410 2 65 2 160 10 506 2 564 2 377 2 154 2 620 22 698 2 73 2 
118 2 648 6 341 2 25 2 342 4 249 2 75 2 372 2 301 2 628 2 530 2 230 2 717 2 409 2 778 2 259 2 510 4 511 2 20 2 726 2 168 2 270 2 145 2 
409 4 648 16 25 4 342 12 174 4 249 4 374 6 474 4 538 2 301 4 628 8 404 2 125 2 530 8 268 6 717 8 145 4 
247 4 293 6 735 4 172 2 49 4 583 10 348 2 464 4 435 4 768 4 31 2 353 4 676 2 366 2 383 2 468 14 777 4 590 2 751 2 62 2 182 2 12 2 682 2 786 4 14 8 282 4 357 10 618 2 480 2 137 2 483 2 794 4 210 2 704 62 336 2 641 2 142 2 169 4 548 2 191 4 
228 2 328 2 718 2 612 2 472 2 132 2 209 2 569 2 337 2 708 2 
194 24 93 4 603 4 373 2 101 3 605 2 103 2 6 2 302 1 381 2 497 1 206 1 701 2 613 3 108 2 8 3 11 2 615 24 505 2 312 6 313 2 314 2 112 1 512 2 619 4 213 8 394 2 116 4 320 2 622 2 119 2 623 2 120 2 400 2 715 4 627 2 527 3 123 3 124 1 32 2 33 16 229 1 406 2 127 2 231 4 632 2 533 2 633 2 535 2 536 2 412 2 722 2 414 3 723 2 133 2 36 2 541 2 638 2 639 2 418 2 420 2 423 2 239 2 42 6 335 2 43 2 642 32 545 6 242 2 547 2 427 2 246 2 339 2 147 2 432 2 148 2 344 2 150 2 346 2 50 2 739 2 52 2 438 3 439 2 254 2 744 16 652 2 58 2 748 1 561 2 753 32 63 2 563 12 161 2 162 2 754 1 358 2 66 2 263 2 164 3 165 2 360 2 567 8 69 5 573 3 576 2 269 1 72 2 271 2 760 1 579 3 272 2 669 1 670 2 458 2 362 2 459 34 764 1 363 16 769 2 586 1 675 4 277 2 678 2 588 6 469 2 679 2 179 32 589 2 680 2 592 2 84 2 591 4 368 2 279 2 473 2 281 1 788 8 595 2 370 16 85 1 684 3 371 2 790 1 482 3 486 2 192 2 
459 2 111 2 
153 2 459 4 117 2 
296 2 
45 2 340 4 46 4 646 4 47 8 248 14 552 2 100 2 493 10 250 2 554 2 102 6 200 6 152 20 697 10 56 2 699 2 384 2 500 2 653 2 7 2 747 8 354 12 158 4 61 2 655 6 449 2 562 2 390 2 617 2 311 4 755 2 572 2 664 18 667 8 71 4 395 12 577 2 24 4 220 4 521 52 322 10 671 2 461 4 624 10 584 2 176 2 30 6 674 4 79 2 630 12 34 8 681 2 235 6 183 2 416 2 594 4 542 2 477 14 685 14 40 2 422 8 421 4 187 52 795 12 88 10 544 12 727 2 798 52 687 14 288 2 241 2 728 2 487 18 90 10 489 8 799 2 144 4 731 14 
663 2 316 2 351 1 391 2 
663 2 501 2 
663 2 520 2 14 2 21 2 236 2 556 2 135 2 
663 2 743 2 135 2 
663 2 135 2 128 2 
759 2 391 2 599 2 
663 2 135 2 
792 2 599 2 
663 2 379 2 
391 2 729 2 599 2 
138 2 391 2 661 2 
408 2 762 2 391 2 
202 2 721 2 391 2 
391 2 450 2 730 2 
195 2 599 2 
663 2 428 2 
784 2 661 2 
762 2 352 2 
741 2 721 2 
450 2 251 2 
380 2 599 2 
608 2 450 2 
721 2 631 2 
762 2 104 2 
550 2 661 2 
391 2 540 2 729 2 599 2 
391 2 540 2 729 2 171 2 599 2 
113 2 391 2 599 2 
391 2 666 2 599 2 
338 2 74 2 647 2 490 2 
445 4 502 2 447 2 734 2 389 2 616 2 345 2 198 2 222 2 766 2 136 2 455 4 620 6 365 2 570 2 107 2 575 2 57 2 
391 2 37 2 
347 2 736 2 14 2 21 2 
347 2 736 2 14 2 21 2 757 2 556 2 
663 2 14 2 21 2 485 2 236 2 135 2 
470 2 692 2 
14 2 21 2 797 2 236 2 
139 2 721 2 
5 2 450 2 
97 2 661 2 
762 2 287 2 
762 2 260 2 450 2 
626 2 762 2 450 2 
673 2 762 2 450 2 
762 2 397 2 450 2 
23 6 76 2 51 2 524 2 14 2 369 2 68 6 21 2 
665 2 599 2 
133 2 
93 2 376 2 199 2 103 2 298 2 6 2 609 2 204 2 108 2 505 2 312 2 313 2 314 2 619 2 116 4 119 2 120 2 713 4 26 2 715 2 32 2 406 2 231 4 632 2 533 2 332 4 633 2 535 4 412 2 722 2 723 2 415 2 541 2 36 2 638 2 417 2 42 4 43 2 642 6 545 2 427 2 643 2 339 2 148 2 150 2 344 2 52 2 439 2 744 6 753 26 262 2 161 2 162 2 563 8 451 2 453 2 272 6 763 2 670 2 458 2 362 2 459 26 462 2 769 2 675 4 81 2 677 2 588 6 179 4 591 4 279 2 788 2 85 2 790 2 
93 2 98 2 295 2 376 2 199 2 103 2 6 2 609 2 108 2 505 2 312 2 313 2 314 2 619 2 116 4 119 2 120 2 713 4 26 2 715 2 32 2 406 2 231 4 632 2 533 2 332 4 633 2 535 4 412 2 722 2 723 2 541 2 36 2 638 2 417 2 42 5 43 2 642 6 545 2 427 2 643 2 339 2 148 2 150 2 344 2 50 1 52 2 439 2 744 6 58 2 752 2 753 26 262 2 161 2 162 2 563 8 451 2 453 2 272 6 763 2 670 2 458 2 362 2 459 26 462 2 769 2 675 4 81 2 677 2 588 6 179 4 591 4 279 2 473 1 788 2 85 2 790 2 
78 2 
514 2 772 2 
219 2 644 2 398 2 15 4 310 4 738 2 19 2 276 2 240 2 318 2 402 2 393 2 214 2 457 2 44 2 244 2 775 2 776 2 
644 4 343 2 492 2 99 2 693 6 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 4 9 2 753 6 15 4 310 4 509 2 565 2 17 2 313 2 660 6 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 670 2 323 2 459 12 276 2 402 6 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 4 38 2 793 2 424 2 686 2 240 2 44 2 244 2 
644 6 343 2 492 2 99 2 693 6 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 4 9 2 753 6 15 4 310 4 509 2 565 2 17 2 313 2 660 6 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 523 2 670 2 323 2 459 12 276 2 402 4 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 4 793 2 424 2 686 2 240 2 44 2 244 2 
644 6 343 2 492 2 99 2 693 6 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 8 9 2 753 6 15 4 310 4 16 2 509 2 565 2 17 2 313 2 660 6 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 670 2 323 2 459 12 276 2 402 6 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 4 793 2 424 2 686 2 240 2 44 2 244 2 
644 8 343 2 492 2 99 2 693 10 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 8 9 2 753 6 15 4 310 4 16 2 509 2 565 2 17 2 313 2 660 8 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 523 2 670 2 323 2 459 12 276 2 402 6 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 8 793 2 424 2 686 2 240 2 44 2 244 2 
644 6 343 2 492 2 99 2 693 10 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 8 9 2 753 6 15 4 310 4 16 2 509 2 565 2 17 2 313 2 660 6 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 670 2 323 2 459 12 276 2 402 6 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 8 793 2 424 2 686 2 240 2 44 2 244 2 
601 6 2 2 199 4 4 6 201 2 6 2 9 4 15 4 17 2 19 4 619 2 214 2 393 4 215 8 217 6 218 2 219 2 398 2 399 2 26 2 625 4 401 1 402 4 629 2 227 2 407 1 231 4 632 2 232 1 412 2 638 2 424 2 42 6 240 2 43 2 642 8 44 2 427 2 244 2 245 6 643 2 644 8 645 6 650 2 50 2 433 7 52 2 436 2 54 2 439 2 441 4 255 7 55 2 60 2 657 6 658 6 453 2 660 12 457 2 267 6 668 1 272 6 273 2 274 2 670 2 458 2 459 46 460 6 672 1 276 2 675 4 465 2 471 2 279 2 473 2 476 2 283 2 481 6 686 2 488 2 93 2 294 2 492 2 99 4 296 6 693 2 498 2 499 2 309 1 503 2 310 4 509 2 312 2 313 2 111 6 515 2 705 2 318 4 116 4 709 10 117 6 711 8 119 2 522 6 523 4 323 2 715 2 525 2 529 6 327 2 531 2 719 1 331 2 533 2 332 4 129 2 720 4 537 6 722 12 723 2 539 1 134 2 333 2 541 2 545 2 546 6 549 2 339 2 343 2 148 2 344 2 738 2 151 2 349 2 744 6 753 24 161 2 563 4 162 2 565 2 568 2 170 2 761 1 362 2 769 2 588 6 776 2 775 2 179 2 780 2 591 4 785 2 596 2 788 2 185 2 791 2 793 4 598 2 190 2 
93 4 96 2 601 6 294 2 2 2 492 2 99 4 693 2 296 6 199 4 4 6 201 2 6 2 499 2 498 2 9 4 503 2 15 4 16 4 310 4 312 2 509 2 17 2 111 6 313 2 19 4 515 2 705 2 619 4 318 4 393 4 214 2 215 8 217 6 116 4 117 6 709 10 218 2 219 2 119 2 711 8 398 2 522 6 399 2 323 2 26 2 625 4 715 4 525 2 629 2 402 8 227 2 529 6 327 2 531 2 231 4 331 2 632 2 533 2 332 4 535 2 129 2 720 4 537 6 722 12 412 2 723 2 134 2 333 2 541 2 638 2 424 2 240 2 42 6 43 2 545 2 642 8 546 6 44 2 244 2 427 2 245 6 549 2 643 2 339 2 644 8 645 6 343 2 650 2 148 2 344 2 50 2 738 2 151 2 349 2 52 2 436 2 54 2 439 2 441 4 744 6 55 2 60 6 753 26 162 2 563 8 161 2 658 6 657 6 565 2 453 2 660 12 568 2 457 2 267 6 170 2 273 2 272 6 173 2 274 2 670 2 362 2 458 2 460 6 459 48 769 2 276 2 465 2 675 4 775 2 776 2 588 6 179 2 780 2 471 2 591 4 279 2 785 2 473 2 476 2 283 2 788 2 596 2 185 2 481 6 791 2 793 4 686 2 598 2 488 2 190 2 
93 4 96 2 601 6 294 2 2 2 492 2 99 4 296 6 693 6 199 4 4 6 201 2 6 2 499 2 498 2 9 4 503 2 15 4 16 4 310 4 312 2 509 2 17 2 111 6 313 2 19 4 515 2 705 2 619 4 318 4 393 4 214 2 215 8 217 6 116 4 117 6 709 10 218 2 219 2 119 2 711 8 398 2 522 6 399 2 323 2 26 2 625 4 715 4 525 2 629 2 402 8 227 2 529 6 327 2 531 2 231 4 331 2 632 2 533 2 332 4 535 2 129 2 720 4 537 6 722 12 412 2 723 2 134 2 333 2 541 2 638 2 424 2 240 2 42 6 43 2 545 2 642 8 546 6 44 2 244 2 427 2 245 6 549 2 339 2 643 2 644 8 645 6 343 2 650 2 148 2 344 2 50 2 738 2 151 2 349 2 52 2 436 2 54 2 439 2 441 4 744 6 55 2 60 6 753 26 162 2 563 8 161 2 658 6 657 6 565 2 453 2 660 12 568 2 457 2 267 6 170 2 273 2 272 6 173 2 274 2 670 2 362 2 458 2 460 6 459 48 769 2 276 2 465 2 675 4 775 2 776 2 588 6 179 2 780 2 471 2 591 4 279 2 785 2 473 2 476 2 283 2 788 2 596 2 185 2 481 6 479 4 791 2 793 4 686 2 598 2 488 2 190 2 
601 12 2 2 199 4 4 6 201 2 6 2 9 4 15 4 16 4 17 2 19 4 619 4 214 2 393 4 215 8 217 6 218 2 219 2 398 2 399 2 26 4 625 4 402 10 629 2 227 2 231 4 632 2 234 2 233 6 412 2 638 2 38 2 424 2 42 6 240 2 43 2 642 12 44 2 427 2 244 2 245 6 643 2 644 10 645 12 650 2 50 2 651 2 52 2 436 2 54 2 439 2 441 4 55 2 442 6 444 2 60 6 657 6 658 6 453 2 660 16 457 2 267 6 272 8 273 2 274 2 670 2 458 2 459 52 460 6 276 2 675 4 465 2 471 2 279 2 473 2 476 2 283 2 284 6 479 4 481 6 686 2 488 2 92 6 93 4 96 2 294 2 492 2 99 4 693 6 296 12 305 6 499 2 498 2 110 2 310 4 509 2 312 4 313 2 111 12 515 2 705 2 318 4 707 2 116 4 117 12 709 8 711 8 119 2 712 6 522 6 523 2 321 2 323 2 715 4 525 2 529 6 327 2 531 2 331 2 533 2 332 6 535 2 129 2 720 4 537 6 722 10 723 2 134 2 333 2 541 2 545 4 546 12 549 2 339 2 343 2 148 2 344 2 555 2 738 2 151 2 349 2 742 6 744 8 753 24 161 2 563 10 162 2 565 2 359 2 568 2 170 2 173 2 362 2 769 2 364 6 588 6 776 2 775 2 179 4 780 2 591 4 785 2 596 2 788 4 787 6 185 2 791 2 793 4 598 2 190 2 
644 6 711 2 522 2 492 2 274 2 693 4 459 4 738 2 151 2 201 2 276 2 55 2 402 6 776 2 60 6 720 2 785 2 15 2 16 2 596 2 134 2 310 2 509 2 17 2 660 4 479 4 19 4 793 2 515 2 240 2 318 4 214 2 457 2 244 2 218 2 
492 2 373 2 693 2 199 2 201 2 6 2 504 3 503 2 15 2 16 2 310 2 509 2 312 3 17 2 313 2 19 4 114 2 515 2 318 4 214 2 116 4 709 2 218 2 711 2 119 2 522 2 325 2 402 6 231 4 632 2 533 2 332 4 720 2 412 2 722 4 723 2 133 2 134 2 541 2 638 2 240 2 42 6 43 2 642 8 545 3 426 2 427 2 244 2 643 2 339 2 644 6 148 2 432 2 50 2 738 2 151 2 52 2 439 2 55 2 744 6 60 6 753 24 161 2 162 2 659 2 453 2 660 4 568 2 457 2 272 6 274 2 670 2 362 2 458 2 459 28 769 2 276 2 675 4 588 6 776 2 179 3 589 2 591 4 279 2 785 2 473 2 596 2 793 2 597 2 
644 6 343 2 492 2 99 2 693 10 148 2 738 2 151 2 201 2 203 2 6 2 55 2 60 8 9 2 753 6 15 4 310 4 16 2 509 2 565 2 17 2 313 2 660 6 19 4 515 2 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 670 2 323 2 459 12 276 2 402 6 775 2 776 2 588 4 231 2 533 2 591 2 720 4 279 2 785 2 134 2 596 2 541 2 479 8 793 2 424 2 686 2 240 2 44 2 244 2 
644 6 343 2 492 2 99 2 693 10 148 2 738 2 151 2 201 2 6 2 55 2 60 8 9 2 753 6 15 4 310 4 16 2 509 2 565 2 17 2 313 2 660 8 19 4 568 2 318 4 393 4 214 2 457 2 218 2 219 2 711 4 398 2 274 2 522 4 670 2 323 2 582 2 459 12 276 2 402 8 775 2 776 2 588 4 231 2 533 2 591 2 181 4 720 4 279 2 785 2 134 2 596 2 541 2 479 8 38 2 237 2 793 2 424 2 686 2 240 2 44 2 244 2 
201 2 64 2 55 2 
201 2 64 2 55 2 
95 2 93 4 294 2 99 2 693 6 199 6 201 6 6 2 308 2 9 4 15 2 310 2 16 4 509 2 313 2 19 4 619 4 318 4 393 4 214 2 216 2 116 4 709 2 219 2 119 2 711 4 522 4 523 4 323 2 625 2 715 4 223 2 402 12 231 4 632 2 533 2 131 2 720 2 413 2 637 4 412 2 722 4 541 2 638 2 38 4 238 2 543 2 42 6 240 2 43 2 642 2 427 2 244 4 643 2 339 2 644 12 343 2 48 2 148 2 344 4 50 2 52 2 155 2 439 2 441 2 440 2 744 2 55 4 157 2 257 2 60 6 753 16 64 2 563 4 262 4 161 2 162 2 657 2 756 4 453 2 660 16 273 2 272 2 670 2 458 2 362 2 459 24 769 2 675 4 773 2 775 2 588 6 179 2 780 2 591 4 279 2 473 2 785 2 479 4 285 2 793 4 686 2 290 2 688 2 
491 2 95 2 129 2 602 2 753 2 398 2 279 2 722 2 657 2 459 4 625 2 285 2 543 2 770 2 772 2 499 2 709 2 
95 2 93 4 294 2 99 4 693 6 3 2 199 6 201 6 6 2 207 2 308 2 9 4 10 2 15 2 310 2 16 4 509 2 313 2 19 4 392 2 619 4 318 4 393 4 214 2 216 2 116 4 219 2 711 4 119 2 522 4 523 4 323 2 715 4 402 12 231 4 632 2 533 2 720 2 637 4 412 2 722 2 541 2 638 2 38 4 238 4 543 2 42 6 240 2 43 2 642 2 427 2 244 4 643 2 339 2 644 12 343 2 48 2 148 2 344 4 50 2 52 2 155 2 439 2 441 2 440 2 744 2 55 4 257 2 60 6 753 16 64 2 563 4 262 4 161 2 162 2 657 2 565 2 756 4 453 2 660 16 273 2 272 2 670 2 458 2 362 2 459 24 769 2 675 4 773 2 775 2 588 6 179 4 780 2 591 4 279 2 473 2 785 2 479 4 285 2 793 4 686 2 484 2 290 2 688 2 
95 2 93 4 294 2 99 4 693 6 199 6 496 2 201 6 6 2 308 2 9 4 15 2 310 2 16 4 208 2 509 2 313 2 19 4 619 4 318 4 393 4 214 2 216 2 116 4 709 2 219 2 119 2 711 4 522 4 523 4 323 2 625 2 715 4 402 12 231 4 632 2 533 2 720 2 637 4 412 2 722 4 541 2 638 2 38 4 238 2 543 2 41 2 42 6 240 2 43 2 642 2 427 2 244 4 643 2 339 2 644 12 343 2 48 2 148 2 344 4 50 2 434 2 52 2 155 2 439 2 441 2 440 2 744 2 55 4 257 2 60 6 753 16 64 2 563 4 262 4 161 2 162 2 657 2 565 2 756 4 453 2 660 16 456 2 273 2 272 2 670 2 458 2 362 2 459 24 769 2 675 4 773 2 775 2 588 6 179 2 780 2 591 4 279 2 473 2 785 2 479 4 285 2 793 4 686 2 290 2 688 2 
339 2 292 2 94 1 431 2 148 2 604 2 740 2 52 2 439 2 695 2 6 2 744 2 307 2 356 2 753 12 162 2 313 2 166 2 115 2 706 2 70 2 116 2 517 2 119 2 272 2 670 2 458 2 459 16 77 2 27 2 28 1 675 2 178 2 466 2 330 2 588 4 231 2 533 2 534 2 591 2 279 2 412 2 541 2 789 2 638 2 42 2 43 2 642 2 89 2 427 2 
519 2 0 2 272 2 459 2 26 6 350 3 105 4 744 2 304 1 716 2 611 2 367 2 179 3 355 2 332 2 753 2 448 2 723 2 508 2 312 3 725 2 189 2 545 3 642 2 22 2 
355 2 332 2 519 2 0 2 448 2 753 2 272 2 723 2 26 6 508 2 459 2 312 2 350 2 725 2 105 4 189 2 744 2 642 2 545 2 716 2 22 2 611 2 367 2 179 2 
355 2 332 2 519 2 0 2 448 2 753 2 272 2 723 2 26 6 508 2 459 2 312 2 350 2 725 2 105 4 189 2 744 2 642 2 545 2 716 2 22 2 611 2 367 2 179 2 
733 2 648 6 25 2 342 4 249 2 459 10 297 2 299 4 326 2 224 4 253 2 628 2 80 2 156 4 256 3 33 2 126 3 530 2 559 4 717 2 179 3 409 2 355 2 656 2 753 4 411 3 13 2 723 2 593 2 370 2 86 2 39 2 513 2 425 4 265 4 642 2 545 3 574 2 145 2 600 6 
733 2 648 4 25 2 342 4 249 2 459 10 297 2 299 4 326 2 224 4 253 2 301 2 628 2 80 2 156 4 256 2 33 2 126 2 530 2 559 4 717 2 179 2 409 2 355 2 130 2 656 2 753 4 411 2 13 2 723 2 593 2 370 2 86 2 39 2 513 2 425 4 265 4 168 2 642 2 545 2 574 2 145 2 600 6 
733 2 648 4 25 2 342 4 249 2 459 10 297 2 299 4 326 2 224 4 253 2 301 2 628 2 80 2 156 4 256 2 33 2 126 2 530 2 559 4 717 2 179 2 409 2 355 2 130 2 656 2 753 4 411 2 13 2 723 2 593 2 370 2 86 2 39 2 513 2 425 4 265 4 168 2 642 2 545 2 574 2 145 2 600 6 
733 2 648 4 25 2 342 4 249 2 459 10 297 2 299 4 326 2 224 4 253 2 301 2 628 2 80 2 156 4 256 2 33 2 126 2 530 2 559 4 717 2 179 2 409 2 355 2 130 2 656 2 753 4 411 2 13 2 723 2 593 2 370 2 86 2 39 2 513 2 425 4 265 4 168 2 642 2 545 2 574 2 145 2 600 6 
733 2 648 4 25 2 342 4 249 2 459 10 297 2 299 4 326 2 224 4 253 2 301 4 628 2 80 2 156 4 256 2 33 2 126 2 530 2 559 4 717 2 179 2 409 2 355 2 130 4 656 2 753 4 411 2 13 2 723 2 593 2 370 2 86 2 39 2 513 2 425 4 265 4 168 4 642 2 545 2 574 2 145 2 600 6 
291 2 91 2 783 2 516 2 475 2 226 2 
91 2 437 2 211 2 557 2 334 2 745 2 376 2 
578 1 396 2 645 2 580 2 146 2 430 2 324 2 459 10 765 2 121 2 771 1 382 2 366 1 746 2 383 1 560 2 387 1 753 8 159 2 683 2 541 2 317 2 266 2 243 2 319 2 758 2 
733 2 648 16 342 12 25 6 174 2 249 6 374 4 196 2 581 2 459 6 300 4 628 6 301 3 403 2 156 4 530 6 717 6 205 2 59 2 532 2 409 6 634 2 130 2 261 2 753 6 636 2 507 2 566 2 168 2 145 6 
180 4 779 2 749 2 753 1 737 7 459 1 606 2 694 2 767 2 224 2 419 1 29 2 526 2 188 2 265 2 303 2 571 2 559 2 
180 4 749 2 779 4 737 6 606 2 694 2 767 4 224 2 29 4 526 2 188 2 265 2 303 2 571 2 559 2 
180 4 749 2 779 8 753 1 737 10 459 1 606 6 694 8 767 8 224 2 419 1 29 8 526 2 188 2 265 2 303 2 571 2 559 2 
180 2 749 2 779 2 737 2 767 2 224 2 29 2 526 2 188 2 265 2 303 2 571 2 559 2 
753 2 109 1 18 2 662 1 714 2 459 2 280 2 478 2 427 2 
18 2 753 2 280 2 714 2 459 2 427 2 478 2 
18 2 753 2 280 2 714 2 459 2 427 2 478 2 
18 2 753 2 280 2 714 2 459 2 427 2 478 2 
378 2 
