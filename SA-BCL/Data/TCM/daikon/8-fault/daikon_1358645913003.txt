#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V ERROR java.lang.NullPointerException (223,327,363,539,745) (223,327,363,539,745) (223,327,363,539,745) (223,327,363,539,745) (223,327,363,539,745) 
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.NullPointerException 209 90 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.RuntimeException 257 353 142 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V PASSED
daikon.test.VarInfoNameTest:testSubscript()V PASSED
daikon.test.VarInfoNameTest:testParse()V PASSED
daikon.test.VarInfoNameTest:testJML()V ERROR utilMDE.Assert$AssertionException (736,749) (736,749) 77 479 60 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.VarInfoName.Replacer:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | RETURN | 66339 | return null
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;ZZZZ)[Ljava.lang.String;
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.Quant:ne(II)Z
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:sorted([I)Z
utilMDE.OrderedPairIterator:setnext2()V
jtb.JavaCharStream:FillBuff()V
daikon.Quant:subsetOf([F[F)Z
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName.Replacer:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | CONSTANT | 9166 | 3 -> 0
daikon.Quant:subsetOf([B[I)Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.VarInfoName.Field:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
daikon.VarInfoName.Poststate:Poststate(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:sameLength([I[I)Z
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.ArraysMDE:noDuplicates([D)Z
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.ModBitTracker:ModBitTracker(I)V
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName:applyDecrement()Ldaikon.VarInfoName;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.PptSlice1:arity()I
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.MathMDE:gcd(II)I
daikon.VarInfoName.NodeFinder:visitField(Ldaikon.VarInfoName.Field;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:gte(DD)Z
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
jtb.JavaCharStream:BeginToken()C | CONSTANT | 4375 | 0 -> 1
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.VarInfoName.QuantHelper:quant_var_initial_state(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:toString([Ljava.lang.Object;)Ljava.lang.String;
utilMDE.OrderedPairIterator:hasNext()Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([D)D
utilMDE.TestUtilMDE:lsis_test(I)V
daikon.Quant:eltwiseGT([I)Z
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:subsetOf([J[J)Z
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:subsetOf([D[F)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
daikon.VarInfoName.AbstractVisitor:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ljava.lang.Object;
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.ProglangType:baseIsScalar()Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.VarInfoName:hashCode()I
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.test.InvariantFormatTester:execute()Z
utilMDE.WeakIdentityHashMap:indexFor(II)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.ModBitTracker:num_sets()I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
daikon.PptSlice0:arity()I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaCharStream:getEndLine()I
daikon.Quant:slice([III)[I
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
utilMDE.MathMDE:pow(II)I
daikon.Quant:subsetOf([I[I)Z
utilMDE.ArraysMDE:sum([I)I
daikon.Quant:intersection([I[I)[I
daikon.ValueTuple:size()I
daikon.VarInfoName:isLiteralConstant()Z
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.Quant:concat([I[I)[I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.VarInfoName.Elements:getUpperBound()Ldaikon.VarInfoName;
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.ArraysMDE:fn_compose([I[I)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.inv.Invariant:logOn()Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.Quant:lexGTE([I[I)Z
daikon.VarInfoName:name()Ljava.lang.String;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.VarInfoName.QuantHelper:quant_execution_condition(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.Quant:setDiff([I[I)[I
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.Quant:memberOf(F[D)Z
utilMDE.ArraysMDE:fn_identity(I)[I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.diff.InvMap:toString()Ljava.lang.String;
jtb.JavaParser:jj_ntk()I
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.test.VarInfoNameDriver.PostPreConverter:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.Invariant:prob_and(DDD)D
daikon.VarInfoName.Add:amount()Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitField(Ldaikon.VarInfoName.Field;)Ljava.lang.Object;
daikon.Quant:eltwiseLT([I)Z
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.ModBitTracker:split(I)I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.ValueSet:ValueSet(I)V
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltsLtIndex([I)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.VarInfoName.TypeOf:esc_name_impl()Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.test.FormatTestCase:passes()Z
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat; | CONDITION | 1730 | if (x) -> if (!x)
daikon.Quant:isReverse([I[I)Z
daikon.PptName:PptName(Ljava.lang.String;)V
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
jtb.Token:newToken(I)Ljtb.Token;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.TypeOf:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.Quant:memberOf(I[I)Z
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:eltsEqual([II)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.VarInfoName:applyPoststate()Ldaikon.VarInfoName;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.MathMDE:negate(I)I
daikon.VarInfoName.NodeFinder:NodeFinder(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:eq(FF)Z
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.Quant:eltwiseLTE([I)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:sum([[D)D
daikon.ProglangType:isIntegral()Z
daikon.Quant:lexNotEqual([I[I)Z
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:relate_var()V
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.FuzzyFloat:ne(DD)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.Quant:pairwiseLT([I[I)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.Quant:eltsLteIndex([I)Z
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.PptSlice0:initInvariantsSeen()V
daikon.VarInfoName.NodeFinder:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
daikon.VarInfoName.QuantHelper.FreeVar:simplify_name_impl(Z)Ljava.lang.String;
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.Quant:memberOf(F[F)Z
daikon.Quant:eq(II)Z
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
daikon.Quant:lexLT([I[I)Z
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.Quant:lexEqual([I[I)Z
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.Invariant:prob_or(DD)D
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.VarInfo:new_ppt()V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
utilMDE.ArraysMDE:isSubset([D[D)Z
utilMDE.ArraysMDE:subarray([JII)[J
daikon.inv.Invariant:prob_and(DD)D
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.NodeFinder:inPre()Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
utilMDE.WeakHasherMap:size()I
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:lexLTE([I[I)Z
daikon.VarInfoName.Elements:getLowerBound()Ldaikon.VarInfoName;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
daikon.PptSlice2:arity()I
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:gte(II)Z
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.Quant:memberOf(S[S)Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaCharStream:getBeginLine()I
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.ProglangType:isScalar()Z
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
jtb.JavaCharStream:getBeginColumn()I
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.VarInfoName.Slice:getLowerBound()Ldaikon.VarInfoName;
daikon.Quant:memberOf(J[J)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.VarInfoName.Field:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:eltsLTE([II)Z
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.Prestate:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName.Replacer:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ldaikon.VarInfoName;
daikon.Quant:noDups([I)Z
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.inv.Invariants:Invariants()V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
jtb.JavaCharStream:getEndColumn()I
daikon.inv.Invariant:justified()Z
utilMDE.ArraysMDE:indexOf([I[I)I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.VarInfoName.NodeFinder:visitTypeOf(Ldaikon.VarInfoName.TypeOf;)Ldaikon.VarInfoName;
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
utilMDE.ArraysMDE:toString([Ljava.lang.Object;Z)Ljava.lang.String;
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.VarInfoName.Poststate:name_impl()Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.test.VarInfoNameDriver.QuantifySimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:eltwiseNotEqual([I)Z
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
utilMDE.WeakHasherMap:processQueue()V
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.Quant:lte(II)Z
daikon.Quant:lt(II)Z
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.TypeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Replacer:visitField(Ldaikon.VarInfoName.Field;)Ldaikon.VarInfoName;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
utilMDE.LimitedSizeIntSet:size()I
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.inv.unary.scalar.NonZero:enabled()Z
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.Quant:setEqual([I[I)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern:numIntArrays()I
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltwiseEqual([I)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ValueTuple:isMissing(I)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.NodeFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
utilMDE.ArraysMDE:sum([[I)I
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.Quant:subsetOf([D[D)Z
daikon.VarInfoName.Slice:getUpperBound()Ldaikon.VarInfoName;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.MathMDE:sign(I)I
utilMDE.ArraysMDE:element_range([I)I
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.MathMDE:modulus([I)[I
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.Ppt:Ppt()V
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.VarInfoName:inPrestateContext(Ldaikon.VarInfoName;)Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltsGtIndex([I)Z
daikon.VarInfoName.QuantHelper:quant_increment(Ldaikon.VarInfoName;ILdaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:baseIsIntegral()Z
utilMDE.ArraysMDE:max([I)I
daikon.Debug:logOn()Z
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.Quant:eltsLT([II)Z
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.RootNode:RootNode()V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.Invariant:getConfidence()D
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.Quant:eltwiseGTE([I)Z
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaCharStream:readChar()C
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.Options.OptionInfo:argument_required()Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE:concat([I[I)[I
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
jtb.JavaCharStream:ReadByte()C
daikon.test.TestQuant:assert_arrays_equals([I[I)V
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.VarInfoName.Field:esc_name_impl()Ljava.lang.String;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.Quant:gt(II)Z
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.Quant:subsetOf([S[S)Z
daikon.ProglangType:isArray()Z
daikon.VarInfoName.ElementsFinder:inPre()Z
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.OrderedPairIterator:setnext1()V
utilMDE.MathMDE:pow_fast(II)I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
utilMDE.ArraysMDE:indexOf([II)I
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.UtilMDE:joinLines([Ljava.lang.Object;)Ljava.lang.String;
jtb.JavaCharStream:backup(I)V
daikon.Quant:lexGT([I[I)Z
utilMDE.UtilMDE:join([Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfo:name()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.VarInfoName.PostPreConverter:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName;
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.diff.Node:Node()V
daikon.ModBitTracker:num_samples()I
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.diff.InvMap:InvMap()V
daikon.Quant:eltsGT([II)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.ModBitTracker:num_vars()I
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:eq(JJ)Z
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.Quant:eq(DD)Z
utilMDE.Intern:intern([D)[D
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.ProglangType:dimensions()I
daikon.VarInfoName.QuantHelper:quant_element_conditions(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:pairwiseGT([I[I)Z
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Node:add(Ljava.lang.Object;)V
utilMDE.FuzzyFloat:lte(DD)Z
daikon.Quant:union([I[I)[I
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:subsetOf([F[D)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
utilMDE.Assert:assertTrue(Z)V
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:add(I)V
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V | ASSIGN | 10356 | = null
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
utilMDE.MathMDE:nonmodulus_strict([I)[I
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoAux:hashCode()I
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.MathMDE:gcd([I)I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
utilMDE.MathMDE:mod_positive(II)I
daikon.VarInfoName.Poststate:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
utilMDE.MathMDE:gcd(JJ)J
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.Quant:eltsGTE([II)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
utilMDE.Intern:intern([I)[I
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:min([I)I
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.Quant:eltsNotEqual([II)Z
utilMDE.Intern:internSubsequence([III)[I
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.ProglangType:isPseudoArray()Z
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.Quant:pairwiseEqual([I[I)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.Intern:intern([J)[J
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.VarInfoName.NodeFinder:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
517 4 112 2 741 2 113 2 319 2 749 2 544 2 102 2 736 2 
25 6 56 2 638 2 642 6 206 2 592 6 789 2 628 2 576 2 394 2 94 2 
400 6 672 4 143 6 611 2 283 6 254 2 61 4 355 6 687 2 749 2 447 2 695 2 736 2 
777 6 752 8 785 2 759 2 760 2 136 8 645 8 531 4 510 26 262 2 157 10 734 10 115 29 397 4 494 10 298 4 736 6 597 16 301 2 266 10 238 16 373 2 798 6 15 10 331 2 18 16 702 12 224 4 749 6 411 8 
379 4 171 6 
482 2 
57 2 462 2 659 4 203 2 155 2 469 2 428 2 470 2 319 2 763 4 68 2 10 2 11 2 372 2 271 2 17 4 332 2 276 2 165 2 582 2 24 2 485 2 780 2 285 2 788 2 138 2 693 2 346 2 736 4 301 2 697 2 180 2 304 2 545 2 46 2 306 2 550 2 749 4 149 2 195 2 101 2 552 2 553 2 554 4 
777 4 752 6 169 4 75 6 561 4 35 2 612 6 706 6 760 2 645 18 510 48 261 2 83 2 157 16 711 4 534 4 734 16 115 54 494 16 397 2 736 4 597 32 401 2 238 32 797 8 266 6 798 4 15 16 216 4 452 4 546 6 721 6 18 32 805 6 477 2 702 22 245 2 749 4 247 4 
332 2 586 2 448 2 
459 22 11 2 364 2 133 2 183 2 334 2 647 2 491 2 630 2 318 10 86 2 723 2 69 2 279 2 
777 2 383 2 528 2 427 2 645 2 510 4 157 2 734 2 115 6 494 2 397 2 347 2 141 2 737 2 597 2 238 2 266 4 15 2 269 2 18 2 574 2 746 2 702 2 
597 8 169 4 75 6 238 8 216 4 15 4 706 6 205 2 18 8 510 12 702 4 157 4 224 2 734 4 115 16 494 4 414 2 
703 4 751 2 54 2 657 2 556 2 584 4 417 2 226 2 130 2 586 2 388 4 204 4 390 4 389 4 643 2 256 2 288 4 289 2 666 62 762 2 428 2 84 10 320 10 295 4 448 6 237 4 765 14 699 4 145 2 547 2 407 2 332 8 806 4 410 2 808 2 163 2 551 2 520 2 552 4 554 4 
651 2 55 2 705 2 315 2 614 2 4 2 443 2 649 2 482 2 650 2 
500 2 609 1 0 2 422 2 312 1 107 2 313 2 426 1 615 2 508 1 429 1 511 1 432 6 515 2 327 2 222 1 223 2 21 4 129 2 725 1 527 1 640 1 728 1 139 4 232 2 735 1 536 1 736 26 450 2 654 2 539 2 451 2 544 2 745 2 749 28 658 4 363 2 464 4 156 2 562 6 368 1 265 2 370 2 70 2 674 1 569 2 675 1 376 1 476 2 274 1 772 2 581 2 679 1 778 6 583 2 585 2 782 2 287 2 174 2 392 6 291 2 688 2 81 1 396 2 292 8 493 2 296 2 795 2 497 2 88 5 307 2 810 4 605 2 606 2 
749 2 196 2 
218 2 749 4 374 2 
367 2 
248 2 26 2 461 2 421 2 662 2 200 2 173 2 154 2 467 2 787 18 3 2 207 2 646 2 393 2 209 2 158 2 371 2 598 2 87 2 655 2 599 18 267 2 435 2 144 2 181 2 354 2 45 2 89 2 90 2 803 2 625 18 627 2 243 2 273 2 577 2 771 2 412 2 22 2 
71 2 64 2 344 2 41 1 
652 2 344 2 
626 2 332 2 344 2 7 2 277 2 166 2 298 2 
344 2 526 2 277 2 
344 2 164 2 277 2 
64 2 264 2 8 2 
344 2 277 2 
282 2 8 2 
344 2 784 2 
64 2 8 2 794 2 
64 2 330 2 398 2 
632 2 489 2 64 2 
64 2 498 2 718 2 
64 2 499 2 793 2 
8 2 530 2 
490 2 344 2 
221 2 398 2 
632 2 302 2 
498 2 103 2 
499 2 593 2 
8 2 9 2 
444 2 499 2 
498 2 579 2 
632 2 333 2 
398 2 240 2 
64 2 365 2 8 2 794 2 
64 2 308 2 365 2 8 2 794 2 
64 2 558 2 8 2 
64 2 669 2 8 2 
538 2 30 2 729 2 124 2 
459 6 212 2 635 2 27 2 696 2 118 2 404 2 202 2 440 2 343 2 111 4 548 2 317 2 50 2 710 4 733 2 618 2 299 2 
64 2 328 2 
626 2 620 2 332 2 172 2 
626 2 724 2 620 2 332 2 172 2 7 2 
626 2 332 2 344 2 191 2 277 2 298 2 
470 2 456 2 
159 2 626 2 332 2 298 2 
686 2 498 2 
499 2 774 2 
587 2 398 2 
632 2 446 2 
632 2 351 2 499 2 
632 2 499 2 386 2 
632 2 499 2 663 2 
632 2 499 2 184 2 
465 2 37 6 512 2 236 2 495 6 570 2 626 2 332 2 
339 2 8 2 
795 2 
501 2 0 2 704 2 105 2 422 6 423 2 107 2 313 2 315 1 110 2 4 1 5 2 508 2 117 2 432 2 622 4 437 2 21 4 523 2 336 2 129 2 525 2 527 2 131 2 341 4 139 4 232 2 731 2 38 2 736 26 738 2 40 4 740 2 654 2 544 2 47 2 749 26 658 4 464 4 661 1 252 2 152 2 664 1 761 2 665 8 156 2 562 6 265 2 370 2 160 2 70 2 569 2 476 2 571 2 572 2 380 2 581 6 778 4 583 2 585 2 782 2 588 2 79 2 590 2 174 2 392 2 688 2 790 2 292 4 493 2 297 2 399 2 497 2 305 2 406 2 307 6 605 2 606 2 
501 2 0 2 704 2 418 2 105 2 422 6 423 2 107 2 313 2 110 2 508 2 432 2 622 4 437 2 21 4 523 2 336 2 129 2 525 2 527 2 131 2 229 2 341 4 139 4 232 2 731 2 38 2 736 26 450 1 738 2 40 4 740 2 654 2 742 2 544 2 51 2 749 26 658 4 464 4 252 2 152 2 761 2 665 8 156 2 562 6 265 2 370 2 160 2 70 2 569 2 476 2 571 2 572 2 380 2 772 1 581 6 778 5 583 2 585 2 782 2 588 2 79 2 590 2 174 2 392 2 688 2 790 2 292 4 493 2 297 2 399 2 497 2 305 2 406 2 307 6 605 2 606 2 
235 2 
416 2 770 2 
690 2 809 2 559 2 
690 2 809 2 559 2 
502 2 0 2 105 4 422 2 107 2 313 2 201 4 109 2 613 2 506 2 208 2 430 2 116 2 324 2 13 2 214 4 120 2 722 4 335 2 437 4 21 4 521 4 25 12 129 2 438 4 638 4 227 2 642 12 231 2 139 4 232 2 736 16 450 2 738 2 654 2 43 2 544 2 147 2 749 24 360 2 56 4 658 4 464 4 559 6 665 4 156 2 468 2 562 6 259 2 670 2 265 2 370 2 160 2 566 2 70 2 569 2 676 2 476 2 576 4 380 4 772 2 478 2 481 2 278 2 483 4 581 2 776 2 778 6 583 4 76 2 585 2 782 2 78 2 284 6 79 6 589 2 591 2 80 4 174 2 592 16 789 4 685 4 688 2 394 4 292 2 690 2 293 2 493 2 297 4 403 2 497 2 405 2 303 2 182 2 406 4 307 2 188 2 189 6 809 4 94 4 97 2 605 2 606 2 98 2 
583 2 250 2 12 2 567 2 783 2 182 2 613 2 591 2 506 2 156 2 468 2 770 2 749 4 713 2 360 2 596 2 736 2 
502 2 0 2 105 4 422 2 107 2 313 2 201 4 109 2 613 2 506 2 208 2 430 2 321 2 116 4 324 2 13 2 214 4 120 2 722 4 335 2 437 4 521 4 21 4 25 12 129 2 438 4 638 4 227 2 642 12 139 4 232 2 736 16 450 2 738 2 654 2 544 2 453 2 147 2 749 24 360 2 56 4 658 4 362 2 464 4 559 6 665 4 156 2 562 6 670 2 265 2 370 2 160 2 70 2 569 2 676 2 476 2 576 4 380 4 772 2 478 2 481 2 278 2 483 4 581 2 776 2 778 6 583 2 76 2 384 2 585 2 782 2 78 2 284 6 79 6 589 2 591 2 80 4 174 2 592 16 789 4 685 4 688 2 394 4 292 4 690 2 792 2 293 4 493 2 297 4 403 2 496 2 497 2 405 2 303 2 406 4 307 2 188 2 189 6 809 4 94 4 97 2 605 2 606 2 98 2 
502 2 0 2 199 2 104 2 105 4 422 2 107 2 313 2 424 2 201 4 109 2 613 2 506 2 208 2 430 2 116 2 324 2 13 2 214 4 120 2 722 4 335 2 437 4 21 4 521 4 25 12 129 2 438 4 638 4 227 2 642 12 730 2 139 4 232 2 736 16 450 2 738 2 654 2 544 2 244 2 147 2 749 24 360 2 56 4 658 4 464 4 559 6 665 4 156 2 468 2 562 6 670 2 265 2 370 2 160 2 70 2 569 2 676 2 476 2 576 4 380 4 772 2 478 2 481 2 278 2 483 4 581 2 776 2 778 6 583 4 76 2 384 2 585 2 782 2 78 2 284 6 79 6 589 2 591 2 80 4 174 2 592 16 789 4 685 4 688 2 394 4 292 2 690 2 293 4 493 2 297 4 403 2 497 2 405 2 303 2 182 2 406 4 307 2 188 2 189 6 809 4 94 4 97 2 605 2 606 2 98 2 
503 2 420 2 423 2 422 6 313 2 425 2 108 6 706 4 507 2 509 2 510 4 114 2 115 6 432 2 433 2 14 1 325 2 215 2 622 4 15 2 216 2 18 2 19 2 21 4 129 2 31 2 32 1 340 2 139 2 731 2 232 2 734 2 140 2 537 2 736 20 142 2 450 2 738 2 238 2 654 2 542 1 353 2 544 2 239 2 748 4 749 26 457 2 246 2 753 2 658 2 464 4 557 2 756 2 62 2 366 2 257 2 665 2 761 2 156 2 562 6 157 2 263 2 472 2 764 2 265 2 370 2 70 2 474 2 569 2 375 2 476 2 270 2 678 2 578 2 772 2 480 4 581 8 680 2 74 2 778 4 583 2 782 2 786 2 79 2 391 2 174 2 392 2 688 2 395 2 292 2 294 2 493 2 494 2 595 2 597 2 300 2 799 2 497 2 307 6 186 2 93 2 605 2 194 2 
175 2 432 3 568 4 29 2 622 2 59 2 422 2 385 2 727 2 683 2 767 2 378 2 761 2 307 2 392 3 292 3 190 2 731 6 749 2 608 3 581 2 52 2 750 2 736 2 
175 2 432 2 568 4 29 2 622 2 59 2 422 2 385 2 727 2 683 2 767 2 378 2 761 2 307 2 392 2 292 2 190 2 731 6 749 2 608 2 581 2 52 2 750 2 736 2 
175 2 432 2 568 4 29 2 622 2 59 2 422 2 385 2 727 2 683 2 767 2 378 2 761 2 307 2 392 2 292 2 190 2 731 6 749 2 608 2 581 2 52 2 750 2 736 2 
752 4 382 4 754 2 636 2 385 2 529 2 134 2 153 2 761 2 510 4 292 3 564 2 445 4 791 2 157 2 734 2 67 2 115 6 494 2 736 4 349 6 597 2 716 4 432 3 796 2 238 2 798 2 15 2 18 2 48 4 356 2 807 2 95 2 749 10 192 2 125 3 775 4 581 2 23 3 126 3 
752 4 754 2 153 2 761 2 760 2 510 4 564 2 157 2 115 4 67 2 432 2 716 4 15 2 18 2 125 2 581 2 775 4 126 2 23 2 382 4 636 2 385 2 134 2 529 2 645 2 292 2 791 2 445 4 734 2 494 2 736 4 597 2 349 6 796 2 238 2 798 2 356 2 48 4 807 2 95 2 702 2 749 10 192 2 
752 4 754 2 153 2 761 2 760 2 510 4 564 2 157 2 115 4 67 2 432 2 716 4 15 2 18 2 125 2 581 2 775 4 126 2 23 2 382 4 636 2 385 2 134 2 529 2 645 2 292 2 791 2 445 4 734 2 494 2 736 4 597 2 349 6 796 2 238 2 798 2 356 2 48 4 807 2 95 2 702 2 749 10 192 2 
752 4 754 2 153 2 761 2 760 2 510 4 564 2 157 2 115 4 67 2 432 2 716 4 15 2 18 2 125 2 581 2 775 4 126 2 23 2 382 4 636 2 385 2 134 2 529 2 645 2 292 2 791 2 445 4 734 2 494 2 736 4 597 2 349 6 796 2 238 2 798 2 356 2 48 4 807 2 95 2 702 2 749 10 192 2 
752 4 754 2 153 2 761 2 760 4 510 4 564 2 157 2 115 4 67 2 432 2 716 4 15 2 18 2 125 2 581 2 775 4 126 2 23 2 382 4 636 2 385 2 134 2 529 2 645 4 292 2 791 2 445 4 734 2 494 2 736 4 597 2 349 6 796 2 238 2 798 2 356 2 48 4 807 2 95 2 702 4 749 10 192 2 
135 2 197 2 357 2 369 2 441 2 768 2 
656 2 135 2 463 2 119 2 413 2 38 2 39 2 
167 2 249 2 310 2 198 2 682 2 253 2 132 2 255 1 684 2 643 1 230 2 644 2 65 2 533 2 689 2 671 2 210 1 714 2 323 2 736 8 70 2 409 1 163 1 148 2 749 10 458 2 
680 2 74 2 752 4 487 2 31 2 561 2 34 2 285 2 788 2 706 4 645 2 760 2 510 12 157 6 734 6 115 16 494 6 736 6 597 6 797 2 238 6 798 2 216 2 15 6 546 4 18 6 702 4 749 6 99 2 381 2 
716 2 419 2 673 2 434 4 698 2 33 2 241 2 342 2 616 2 48 2 272 2 668 7 445 2 565 2 749 1 193 2 522 1 736 1 
716 2 419 4 673 2 434 4 698 2 33 2 241 4 342 2 616 4 48 2 272 2 668 6 445 2 565 2 193 2 
716 2 419 8 673 2 434 4 698 2 33 2 241 8 342 8 616 8 48 2 272 2 668 10 445 2 565 2 749 1 193 6 522 1 736 1 
716 2 419 2 673 2 434 2 698 2 33 2 241 2 616 2 48 2 272 2 668 2 445 2 565 2 
1 1 311 2 106 4 2 4 316 2 708 11 709 2 712 10 513 2 619 4 514 4 621 4 326 8 717 2 623 4 121 2 329 4 436 6 624 4 122 4 720 16 518 30 219 6 519 8 631 4 20 2 337 8 524 2 634 24 225 4 129 6 28 8 637 6 439 4 726 4 639 2 641 4 228 4 36 8 137 4 648 2 139 44 234 2 348 4 736 70 450 26 739 4 653 10 743 32 541 8 543 4 42 4 744 4 44 16 454 4 549 4 749 78 359 4 460 2 361 4 658 36 755 8 60 2 757 4 758 6 466 8 260 2 66 2 473 10 162 10 377 4 573 2 73 4 575 4 772 28 580 4 479 2 168 4 280 10 779 4 778 102 486 24 77 2 681 2 782 6 290 4 691 2 82 2 594 4 176 4 177 4 178 4 179 16 600 4 402 24 497 2 801 4 185 16 802 4 700 4 408 2 91 4 92 10 804 4 187 4 604 14 309 10 96 2 607 4 415 2 
658 14 610 2 311 2 60 2 757 4 758 2 316 2 63 2 708 2 260 2 712 6 715 10 473 6 513 2 161 2 326 6 623 2 329 4 624 2 122 4 573 2 518 6 219 4 769 2 631 2 772 12 479 2 633 2 280 2 634 8 129 2 778 40 77 2 170 2 637 2 782 2 726 4 639 2 139 14 492 2 233 2 736 26 450 12 739 2 653 6 540 2 600 2 601 2 744 2 497 2 185 14 802 2 700 4 408 2 747 2 749 28 607 4 359 4 415 2 
504 4 610 2 311 8 106 6 316 8 505 18 708 16 6 2 431 4 712 16 322 2 715 26 211 24 513 4 619 6 213 2 514 4 621 4 326 20 623 6 329 6 624 10 436 6 122 6 518 38 16 24 219 8 220 90 629 4 519 50 631 10 524 2 633 4 634 124 225 6 128 26 338 2 129 14 637 10 726 6 639 8 641 4 228 4 442 90 137 4 648 6 139 112 233 6 535 24 234 2 348 4 736 134 739 10 450 58 653 16 540 2 543 6 42 6 744 8 44 42 146 24 242 4 747 2 455 8 749 150 150 10 358 24 359 6 53 4 361 6 251 8 658 88 58 4 755 24 560 10 60 2 757 12 758 36 466 42 667 8 260 2 471 6 473 16 161 4 268 10 766 4 377 6 73 6 575 6 769 8 275 26 772 58 580 4 479 2 280 18 484 4 779 4 778 248 486 92 77 2 170 11 681 2 782 14 488 2 286 4 387 6 290 6 492 2 85 12 594 6 176 6 177 6 178 6 600 6 402 84 601 2 497 8 185 30 802 10 700 6 408 2 91 4 187 4 604 12 96 2 607 6 415 5 
555 2 251 2 658 16 660 4 311 2 560 2 60 2 314 2 316 2 707 2 258 2 260 2 431 2 712 2 617 4 473 2 162 2 268 2 217 2 475 2 329 2 516 4 719 2 16 2 573 2 72 2 677 2 123 4 772 4 479 2 773 2 20 2 127 2 634 2 129 2 778 36 77 2 281 2 782 2 781 2 639 2 648 1 532 2 345 2 691 2 139 16 692 2 732 2 694 2 736 36 449 2 350 2 450 4 653 2 352 2 744 1 800 2 497 2 185 27 700 2 602 2 603 2 92 2 146 2 309 2 701 4 49 2 749 36 150 2 607 2 358 2 100 2 151 2 415 2 
563 2 
