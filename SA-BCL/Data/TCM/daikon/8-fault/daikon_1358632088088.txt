#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V PASSED
utilMDE.TestUtilMDE:testInternObject()V PASSED
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V PASSED
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.NullPointerException 111 605 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.ArrayIndexOutOfBoundsException 102 17 394 679 497 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V ERROR java.lang.ArrayIndexOutOfBoundsException 770 334 
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException (344,498) (344,498) (344,498) 359 361 513 
daikon.test.VarInfoNameTest:testJML()V ERROR utilMDE.Assert$AssertionException (530,765) (530,765) 76 359 361 513 
daikon.test.VarInfoNameTest:testEscForall()V PASSED
daikon.test.VarInfoNameTest:testSubscript()V ERROR utilMDE.Assert$AssertionException (530,765) (530,765) 76 359 361 513 
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.QuantHelper:quant_element_conditions(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
utilMDE.FuzzyFloat:ne(DD)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:eltwiseNotEqual([I)Z
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.inv.Invariant:getConfidence()D
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.Quant:subsetOf([F[F)Z
daikon.VarInfoName.QuantHelper:quant_step_terminator(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
daikon.Debug:logOn()Z
daikon.VarInfoName.Elements:getLowerBound()Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:pairwiseGTE([I[I)Z
utilMDE.ArraysMDE:concat([I[I)[I
daikon.Quant:subsetOf([I[I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.VarInfoName:name_using(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfoAux:hashCode()I
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.PptTopLevel:name()Ljava.lang.String;
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.ProglangType:isScalar()Z
daikon.VarInfoName:applyDecrement()Ldaikon.VarInfoName;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.VarInfo:relate_var()V
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.QuantHelper:quant_increment(Ldaikon.VarInfoName;ILdaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.Quant:subsetOf([J[J)Z
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.ProglangType:baseIsScalar()Z
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
daikon.VarInfoName.QuantHelper:replace(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)[Ldaikon.VarInfoName;
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.Quant:eltwiseGT([I)Z
daikon.Quant:eltwiseGTE([I)Z
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
utilMDE.Intern:intern([J)[J
utilMDE.WeakHasherMap.WeakKey:hashCode()I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
jtb.JavaParser:jj_ntk()I
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.Quant:lexLT([I[I)Z
daikon.VarInfoName.Add:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.VarInfoName.Slice:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.ArraysMDE.LongArrayComparatorLengthFirst:compare([J[J)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.Quant:gt(II)Z
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
daikon.Quant:intersection([I[I)[I
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
utilMDE.MathMDE:gcd([I)I
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
utilMDE.ArraysMDE:fn_inverse([II)[I
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.ArraysMDE.IntArrayComparatorLexical:compare([I[I)I
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.InvMap:InvMap()V
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
utilMDE.MathMDE:modulus([I)[I
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE.DoubleArrayComparatorLexical:compare([D[D)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:ne(II)Z
utilMDE.Intern:internSubsequence([JII)[J
daikon.VarInfoName.Elements:getSubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName.ElementsFinder:inPre()Z
daikon.Quant:memberOf(F[D)Z
utilMDE.ArraysMDE:fn_is_permutation([I)Z
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.VarInfoName.Elements:getUpperBound()Ldaikon.VarInfoName;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.Quant:pairwiseEqual([I[I)Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.test.VarInfoNameDriver.QuantifySimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
jtb.JavaParserTokenManager:MoreLexicalActions()V
utilMDE.ArraysMDE:indexOf([II)I
daikon.VarInfoName.NodeFinder:inPre()Z
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.FuzzyFloat:eq(DD)Z
daikon.VarInfoName.NodeFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
daikon.Quant:sameLength([I[I)Z
daikon.VarInfoName.QuantHelper:quant_format_forall(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltsLT([II)Z
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
utilMDE.SimpleLog.LongVal:LongVal(J)V
utilMDE.ArraysMDE:fn_is_total([I)Z
daikon.inv.Invariant:logOn()Z
daikon.Quant:eltsEqualIndex([I)Z
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.Quant:lexGTE([I[I)Z
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
daikon.VarInfo:name()Ljava.lang.String;
daikon.Quant:eltsEqual([II)Z
daikon.PptSlice1:arity()I
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
utilMDE.TestUtilMDE:lsis_test(I)V
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
jtb.JavaCharStream:UpdateLineColumn(C)V
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
utilMDE.Intern:intern([Ljava.lang.Object;)[Ljava.lang.Object;
daikon.ProglangType:baseIsIntegral()Z
utilMDE.ArraysMDE.IntArrayComparatorLengthFirst:compare([I[I)I
daikon.VarInfoName:esc_name()Ljava.lang.String;
utilMDE.ArraysMDE:isSubset([D[D)Z
jtb.JavaCharStream:ReadByte()C
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.diff.Node:getUserRight()Ljava.lang.Object;
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.PptSlice0:initInvariantsSeen()V
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
daikon.Quant:eq(II)Z
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.Quant:lte(II)Z
daikon.VarInfoName.Replacer:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltsGT([II)Z
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
utilMDE.WeakHasherMap.EntrySet:size()I
utilMDE.MathMDE:pow(II)I
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.VarInfoName.NodeFinder:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Node:Node()V
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.Quant:lt(II)Z
utilMDE.FuzzyFloat:lt(DD)Z
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
utilMDE.Intern.ObjectArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper:quant_execution_condition(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.VarInfoName.Slice:getLowerBound()Ldaikon.VarInfoName;
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.MathMDE:bitwiseComplement(I)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
utilMDE.ArraysMDE:sum([[D)D
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.Quant:subsetOf([B[I)Z
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
utilMDE.OrderedPairIterator:hasNext()Z
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Ppt:Ppt()V
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.ArraysMDE:all_null([Ljava.lang.Object;)Z
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
daikon.Quant:memberOf(J[J)Z
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
utilMDE.UtilMDE:joinLines([Ljava.lang.Object;)Ljava.lang.String;
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
jtb.JavaCharStream:GetImage()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.ArraysMDE:sum([I)I
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
utilMDE.ArraysMDE:indexOf([ZZ)I
daikon.Quant:eltsNotEqualIndex([I)Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token; | RETURN | 66339 | return null
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.VarInfoName:isLiteralConstant()Z
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;ZZZZ)[Ljava.lang.String;
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
utilMDE.ArraysMDE:sorted([I)Z
jtb.JavaCharStream:getEndColumn()I
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.Quant:gte(II)Z
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.ArraysMDE:noDuplicates([Ljava.lang.String;)Z
daikon.Quant:setDiff([I[I)[I
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:gcd_differences([I)I
utilMDE.ArraysMDE:subarray([III)[I
daikon.Quant:eltsGtIndex([I)Z
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
jtb.JavaCharStream:getEndLine()I
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
daikon.test.TestQuant:assert_arrays_equals([I[I)V
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:eltwiseLTE([I)Z
jtb.JavaCharStream:readChar()C
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lexGT([I[I)Z
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Replacer:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName;
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
utilMDE.ArraysMDE:max([I)I
utilMDE.Intern:internSubsequence([III)[I
utilMDE.UtilMDE:join([Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.Quant:eltsLteIndex([I)Z
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.VarInfoName.QuantHelper.FreeVar:FreeVar(Ljava.lang.String;)V
daikon.Quant:memberOf(F[F)Z
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:lte(DD)Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quant:lexEqual([I[I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.QuantHelper.FreeVar:simplify_name_impl(Z)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.ArraysMDE:fn_identity(I)[I
daikon.Quant:memberOf(I[I)Z
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:repr()Ljava.lang.String;
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.ProglangType:dimensions()I
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
utilMDE.ArraysMDE:fn_compose([I[I)[I
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
utilMDE.OrderedPairIterator:setnext2()V
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.Quant:noDups([I)Z
daikon.VarInfoName.QuantHelper:quant_separator2(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.inv.Invariant:prob_and(DD)D
daikon.PptSlice2:arity()I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.Invariant:prob_or(DD)D
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
utilMDE.WeakHasherMap:size()I
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.Quant:eq(FF)Z
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
daikon.VarInfoName.Add:amount()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonZero:enabled()Z
jtb.JavaCharStream:FillBuff()V
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.Quant:eltsGTE([II)Z
utilMDE.ArraysMDE:min_max([I)[I
daikon.Quant:isReverse([I[I)Z
daikon.VarInfoName.Slice:getUpperBound()Ldaikon.VarInfoName;
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.VarInfoName.QuantHelper:quant_separator1(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.InvariantFormatTester:execute()Z
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.Quant:subsetOf([D[D)Z
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:subsetOf([F[D)Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.Quant:eltsGteIndex([I)Z
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
daikon.VarInfo:new_ppt()V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.VarInfoName.QuantHelper.FreeVar:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.FuzzyFloat:gte(DD)Z
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.VarInfoName:inPrestateContext(Ldaikon.VarInfoName;)Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:slice([III)[I
daikon.Quant:eltsNotEqual([II)Z
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaCharStream:getBeginColumn()I
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.ArraysMDE:subarray([JII)[J
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
daikon.inv.Invariant:justified()Z
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.diff.RootNode:RootNode()V
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
utilMDE.Fmt:i(I)Ljava.lang.Integer;
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.test.TestQuant:removeAdjacentDups([I)[I
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
daikon.ModBitTracker:ModBitTracker(I)V | CONSTANT | 2417 | 0 -> 1
utilMDE.ArraysMDE:noDuplicates([J)Z
utilMDE.Intern.ObjectArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
jtb.JavaCharStream:backup(I)V
utilMDE.ArraysMDE:fn_inverse_permutation([I)[I
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;
jtb.JavaCharStream:BeginToken()C
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:pairwiseDivides([I[I)Z
utilMDE.MathMDE:mod_positive(II)I
utilMDE.Options.OptionInfo:argument_required()Z
daikon.Quant:eq(JJ)Z
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit;
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
utilMDE.FuzzyFloat:gt(DD)Z
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.VarInfoName:name()Ljava.lang.String;
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.VarInfoName.Prestate:esc_name_impl()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:getBeginLine()I
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
utilMDE.MathMDE:gcd(II)I
daikon.VarInfoName.QuantHelper:format_simplify([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V | ASSIGN | 10199 | = null
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
utilMDE.WeakIdentityHashMap:indexFor(II)I
daikon.VarInfoName.NodeFinder:NodeFinder(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
utilMDE.ArraysMDE:noDuplicates([I)Z
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseGT([I[I)Z
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
utilMDE.LimitedSizeIntSet:size()I
daikon.VarInfoName.Add:name_impl()Ljava.lang.String;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE:negate(I)I
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.Quant:subsetOf([S[S)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
jtb.Token:newToken(I)Ljtb.Token;
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
daikon.inv.Invariants:Invariants()V
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
daikon.VarInfoName.NodeFinder:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ldaikon.VarInfoName;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
daikon.Quant:pairwiseLTE([I[I)Z
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.Invariant:prob_is_ge(DD)D
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.ProglangType:isPseudoArray()Z
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.MathMDE:sign(I)I
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE.1InternTest:test(Z)V
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.ProglangType:isArray()Z
utilMDE.Intern:intern([I)[I
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.PptSlice0:arity()I
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
utilMDE.Intern:intern([D)[D
utilMDE.Intern:numIntArrays()I
utilMDE.MathMDE:gcd(JJ)J
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String; | RETURN | 30667 | return null
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.MathMDE:missing_numbers([I)[I
utilMDE.LimitedSizeIntSet:add(I)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.Quant:memberOf(S[S)Z
daikon.Quant:eltwiseLT([I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
daikon.VarInfoName.QuantHelper:format_java_style(Ldaikon.VarInfoName.QuantHelper.QuantifyReturn;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.Quant:union([I[I)[I
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
daikon.Quant:eltsLtIndex([I)Z
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.ArraysMDE:min([I)I
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([D[F)Z
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.VarInfoName:hashCode()I
jtb.syntaxtree.NodeOptional:NodeOptional()V
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
utilMDE.OrderedPairIterator:setnext1()V
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.Quant:concat([I[I)[I
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.Quant:setEqual([I[I)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
utilMDE.Assert:assertTrue(Z)V
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.ProglangType:isIntegral()Z
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.Quant:eq(DD)Z
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
daikon.Quant:eltsLTE([II)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.VarInfoName.QuantHelper:quant_var_initial_state(Ldaikon.VarInfoName;Ldaikon.VarInfoName;Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.inv.Invariant:format()Ljava.lang.String;
utilMDE.ArraysMDE:noDuplicates([D)Z
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.Quant:eltwiseEqual([I)Z
daikon.Quant:lexLTE([I[I)Z
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
utilMDE.ArraysMDE:sum([D)D
daikon.Quant:pairwiseSquare([I[I)Z
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
utilMDE.ArraysMDE:any_null([Ljava.lang.Object;)Z
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.Quant:lexNotEqual([I[I)Z
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
676 2 740 2 641 4 208 2 725 2 530 2 699 2 765 2 502 2 
752 6 255 6 774 2 99 2 169 2 453 2 454 6 392 2 93 2 297 2 211 2 
761 6 325 2 101 4 144 2 530 2 765 2 271 2 469 6 632 6 304 2 797 6 674 2 536 4 
771 8 776 10 364 4 148 2 435 10 485 4 549 2 107 6 108 29 10 16 157 10 229 16 370 4 585 10 558 8 527 2 706 6 294 10 530 6 765 6 163 2 590 8 352 8 793 2 24 2 401 2 796 26 712 12 769 4 358 16 
574 6 140 4 
442 2 
309 2 746 2 61 2 451 2 194 2 148 2 147 4 150 2 697 2 258 2 323 2 159 2 161 4 615 2 765 4 330 2 216 2 218 2 167 2 430 2 676 2 119 2 79 2 341 2 783 2 583 2 45 2 288 2 179 4 129 2 234 2 637 2 398 2 530 4 589 2 739 2 490 2 53 2 791 2 400 2 492 4 795 2 355 2 305 2 
220 6 573 2 776 16 280 2 362 8 435 16 122 4 107 4 108 54 10 32 259 2 229 32 157 6 584 6 701 6 370 2 262 2 585 16 702 4 265 6 528 2 706 4 294 16 447 4 530 4 738 4 765 4 562 4 590 18 214 4 352 6 24 2 354 2 796 48 137 6 712 22 473 6 717 4 358 32 
114 2 61 2 66 2 
77 2 90 2 526 2 479 2 183 22 134 2 419 2 458 2 595 2 273 2 731 2 607 2 258 2 11 10 
718 2 277 2 776 2 222 2 435 2 256 2 696 2 108 6 10 2 229 2 157 4 370 2 585 2 735 2 706 2 294 2 590 2 796 4 712 2 472 2 716 2 475 2 358 2 
702 4 585 4 265 6 776 4 294 4 738 4 435 4 485 2 137 6 796 12 108 16 712 4 10 8 306 2 229 8 659 2 358 8 
537 2 652 2 539 2 61 8 62 2 724 2 143 2 363 4 521 10 37 4 545 2 579 4 754 2 499 62 602 14 756 4 66 2 257 2 155 2 730 2 87 4 685 2 286 2 372 2 232 4 289 2 160 4 398 4 110 4 330 2 349 2 616 10 114 6 565 4 492 4 243 2 646 4 336 4 30 2 648 2 
193 2 749 2 391 2 603 2 175 2 442 2 557 2 236 2 403 2 275 2 
189 2 3 2 193 1 600 2 6 2 197 2 199 2 203 12 207 2 13 2 423 2 425 16 17 2 215 32 29 2 31 2 622 2 625 2 434 6 433 2 38 6 39 2 627 1 630 2 631 2 227 3 41 2 443 4 634 2 233 2 236 1 50 2 237 2 239 2 449 2 240 2 644 2 645 1 649 2 650 3 450 2 247 2 59 2 252 2 253 2 64 8 254 2 65 2 656 2 460 2 660 4 264 1 462 3 266 2 664 2 71 1 466 2 668 1 73 2 669 1 671 6 75 2 675 2 278 3 477 2 481 2 682 3 281 2 89 16 487 2 488 3 292 2 302 6 301 2 98 2 694 8 313 1 102 2 695 1 314 4 315 2 317 2 318 4 319 1 320 2 322 2 500 4 699 2 705 16 506 2 327 4 328 2 708 2 507 1 709 2 508 2 510 1 714 1 713 2 515 3 517 3 520 2 121 2 523 1 126 2 524 2 343 2 530 34 347 2 532 2 353 2 742 1 360 24 747 4 540 2 543 2 544 3 548 2 553 3 552 3 755 4 758 5 158 24 371 2 559 2 378 2 764 8 379 2 765 32 767 16 566 2 768 2 384 2 568 2 385 2 778 2 173 2 580 32 581 3 782 2 582 2 393 2 396 2 789 1 790 2 592 1 593 2 402 1 594 1 405 2 408 2 
678 2 530 2 
459 2 530 4 560 2 
468 2 
219 18 748 2 599 2 541 2 432 2 777 2 36 2 750 2 483 2 198 2 629 2 657 2 342 2 321 2 106 2 368 2 605 2 156 2 12 2 661 2 287 2 109 2 178 2 586 2 461 2 463 2 445 2 130 2 376 18 588 2 614 2 111 2 212 18 448 2 332 2 333 2 741 2 467 2 
242 2 186 2 415 1 94 2 
331 2 242 2 
61 2 373 2 572 2 242 2 364 2 431 2 141 2 
242 2 763 2 431 2 
242 2 44 2 431 2 
186 2 493 2 162 2 
242 2 431 2 
204 2 162 2 
534 2 242 2 
186 2 162 2 172 2 
186 2 345 2 5 2 
186 2 131 2 673 2 
186 2 244 2 639 2 
272 2 186 2 42 2 
162 2 785 2 
25 2 242 2 
729 2 345 2 
375 2 131 2 
104 2 244 2 
105 2 272 2 
162 2 196 2 
518 2 272 2 
365 2 244 2 
410 2 131 2 
736 2 345 2 
186 2 422 2 162 2 172 2 
186 2 422 2 798 2 162 2 172 2 
186 2 162 2 601 2 
792 2 186 2 162 2 
411 2 525 2 597 2 762 2 
61 2 373 2 43 2 759 2 
734 2 61 2 373 2 572 2 43 2 759 2 
61 2 373 2 242 2 364 2 356 2 431 2 
637 2 456 2 
61 2 373 2 364 2 533 2 
244 2 251 2 
491 2 272 2 
188 2 345 2 
775 2 131 2 
272 2 117 2 131 2 
272 2 131 2 786 2 
386 2 272 2 131 2 
200 2 272 2 131 2 
61 2 230 2 503 2 373 2 636 6 563 2 55 2 383 6 
201 2 162 2 
476 2 504 2 772 4 414 2 290 2 310 2 293 2 34 2 728 2 653 2 329 2 83 4 183 6 54 2 743 2 604 2 512 2 166 2 
670 2 186 2 
379 2 
412 2 189 2 694 2 102 2 314 4 315 2 317 2 316 2 6 2 318 2 197 2 500 2 699 2 203 8 205 2 703 2 326 2 506 2 327 2 17 2 611 2 215 6 708 2 709 2 713 2 622 2 520 2 434 4 38 2 39 2 628 2 436 4 443 4 634 2 343 2 233 2 446 2 530 26 50 2 449 2 240 2 353 2 742 2 649 2 59 6 747 4 249 2 455 2 252 2 149 2 660 4 371 2 664 2 378 4 765 26 71 2 466 2 767 6 671 2 768 2 382 2 471 4 75 2 384 2 78 2 482 2 174 2 580 4 782 2 582 2 591 2 302 6 593 2 405 2 
412 2 189 2 694 2 102 2 314 4 315 2 317 2 316 2 6 2 318 2 197 2 500 2 699 2 203 8 205 2 703 2 326 2 506 2 327 2 17 2 611 2 215 6 708 2 709 2 713 2 516 2 622 2 520 2 434 6 38 2 39 2 628 2 436 4 443 4 634 2 343 2 233 2 446 2 530 26 50 2 449 2 240 2 353 2 742 2 649 2 59 6 747 4 249 2 455 2 252 2 660 4 371 2 559 2 664 2 378 4 765 26 71 2 464 2 466 2 767 6 671 2 768 2 471 4 75 2 384 2 675 2 78 2 482 2 484 2 281 2 580 4 782 2 582 2 591 2 302 6 593 2 405 2 
554 2 
151 2 26 2 
115 2 640 2 707 2 
115 2 640 2 707 2 
412 2 596 2 99 4 100 4 312 4 102 2 195 2 314 4 317 2 318 4 500 4 606 2 203 4 699 2 205 6 324 2 14 2 327 4 17 2 707 6 20 2 211 4 215 2 427 2 708 2 709 2 27 4 28 2 713 2 115 2 32 2 622 2 116 2 624 4 221 2 726 2 520 2 434 6 223 4 39 4 439 2 228 2 441 2 443 4 634 2 343 2 233 2 635 2 638 2 530 24 640 4 449 2 56 6 57 2 649 2 59 2 747 4 63 4 452 2 453 4 454 12 252 2 751 2 752 12 255 16 153 4 757 2 556 2 660 4 371 2 559 2 267 2 664 2 765 16 561 2 465 2 767 2 564 4 672 6 75 2 384 2 675 2 570 2 169 4 78 4 478 2 388 2 171 2 577 2 580 2 782 4 582 2 176 2 489 2 291 2 93 4 297 4 591 2 690 2 302 6 405 2 407 2 96 2 495 2 
32 2 722 2 291 2 192 2 530 4 195 2 39 2 765 2 298 2 690 2 692 2 152 2 709 2 26 2 439 2 647 2 556 2 
412 2 596 2 190 2 99 4 100 4 312 4 102 2 314 4 317 2 318 4 500 4 606 2 203 4 699 2 205 6 324 2 327 4 17 2 707 6 20 2 211 4 215 2 427 2 708 2 709 2 27 4 713 2 115 2 32 2 622 2 116 2 624 4 221 4 726 2 520 2 626 2 434 6 223 4 39 2 439 2 228 2 441 2 443 4 634 2 343 2 233 2 635 2 638 2 530 24 640 4 449 2 56 6 57 2 649 2 59 2 747 4 63 4 452 2 453 4 454 12 252 2 751 2 752 12 255 16 153 4 757 2 660 4 371 2 559 2 267 2 664 2 270 2 765 16 561 2 767 2 564 4 672 6 75 2 384 2 675 2 570 2 169 4 78 4 478 2 388 2 171 2 780 2 577 2 580 4 782 4 582 2 176 2 489 4 291 2 587 2 93 4 297 4 591 2 690 2 185 2 302 6 405 2 96 2 495 2 
412 2 596 2 99 4 100 4 312 4 102 2 195 2 314 4 317 2 318 4 500 4 606 2 203 4 699 2 205 6 324 2 327 4 17 2 707 6 20 2 211 4 215 2 427 2 708 2 709 2 27 4 713 2 115 2 32 2 622 2 116 2 624 4 221 4 726 2 520 2 434 6 223 4 39 4 439 2 228 2 441 2 443 4 634 2 343 2 233 2 635 2 638 2 346 2 530 24 640 4 449 2 56 6 57 2 649 2 59 2 747 4 63 4 452 2 453 4 454 12 250 2 252 2 751 2 752 12 255 16 153 4 757 2 556 2 660 4 371 2 559 2 267 2 664 2 270 2 765 16 561 2 767 2 564 4 672 6 75 2 384 2 675 2 570 2 571 2 677 2 169 4 78 4 478 2 388 2 171 2 577 2 580 2 782 4 582 2 176 2 489 2 291 2 181 2 93 4 297 4 591 2 690 2 302 6 405 2 96 2 495 2 
747 2 497 2 102 2 103 2 314 2 317 2 546 2 420 2 608 2 660 2 69 2 559 2 424 2 15 2 268 2 16 2 17 2 765 8 213 2 708 2 74 2 709 2 713 2 168 2 675 2 679 2 575 2 434 4 582 2 394 2 443 2 343 2 233 2 686 2 49 2 530 12 296 1 449 2 302 4 97 1 649 2 
2 2 59 2 680 4 145 1 38 3 436 2 418 2 580 3 421 2 260 3 206 2 703 6 374 2 530 2 377 2 613 2 765 2 215 2 399 2 767 2 691 2 353 2 671 3 406 2 246 2 
2 2 59 2 680 4 38 2 436 2 418 2 580 2 421 2 260 2 206 2 703 6 374 2 530 2 377 2 613 2 765 2 215 2 399 2 767 2 691 2 353 2 671 2 406 2 246 2 
2 2 59 2 680 4 38 2 436 2 418 2 580 2 421 2 260 2 206 2 703 6 374 2 530 2 377 2 613 2 765 2 215 2 399 2 767 2 691 2 353 2 671 2 406 2 246 2 
409 6 142 3 191 3 248 4 417 3 107 2 108 6 10 2 700 2 705 2 374 2 19 2 765 4 215 2 112 2 381 2 429 2 514 4 776 2 38 3 389 2 681 2 435 2 437 4 580 3 226 4 125 2 229 2 89 2 585 2 294 2 530 10 788 2 182 2 352 4 353 2 300 2 693 4 796 4 358 2 
409 6 142 2 191 2 248 4 417 2 107 2 108 4 10 2 700 2 705 2 374 2 19 2 765 4 215 2 112 2 24 2 381 2 712 2 429 2 514 4 776 2 38 2 389 2 681 2 435 2 437 4 580 2 226 4 125 2 229 2 89 2 585 2 294 2 530 10 788 2 182 2 590 2 352 4 353 2 300 2 693 4 796 4 358 2 
409 6 142 2 191 2 248 4 417 2 107 2 108 4 10 2 700 2 705 2 374 2 19 2 765 4 215 2 112 2 24 2 381 2 712 2 429 2 514 4 776 2 38 2 389 2 681 2 435 2 437 4 580 2 226 4 125 2 229 2 89 2 585 2 294 2 530 10 788 2 182 2 590 2 352 4 353 2 300 2 693 4 796 4 358 2 
409 6 142 2 191 2 248 4 417 2 107 2 108 4 10 2 700 2 705 2 374 2 19 2 765 4 215 2 112 2 24 2 381 2 712 2 429 2 514 4 776 2 38 2 389 2 681 2 435 2 437 4 580 2 226 4 125 2 229 2 89 2 585 2 294 2 530 10 788 2 182 2 590 2 352 4 353 2 300 2 693 4 796 4 358 2 
409 6 142 2 191 2 248 4 417 2 107 2 108 4 10 2 700 2 705 2 374 2 19 2 765 4 215 2 112 2 24 4 381 2 712 4 429 2 514 4 776 2 38 2 389 2 681 2 435 2 437 4 580 2 226 4 125 2 229 2 89 2 585 2 294 2 530 10 788 2 182 2 590 4 352 4 353 2 300 2 693 4 796 4 358 2 
719 2 688 2 621 2 551 2 727 2 95 2 
663 2 621 2 283 2 249 2 124 2 146 2 357 2 
334 2 530 2 582 2 765 2 770 2 760 2 307 2 
276 2 220 4 33 2 776 6 362 2 435 6 107 2 108 15 10 6 229 6 45 2 702 2 263 2 585 6 234 2 294 6 787 2 447 2 530 6 209 2 765 6 590 4 352 4 24 4 535 2 404 2 137 4 796 12 712 4 358 6 
720 2 47 2 530 1 654 2 765 1 210 1 52 2 133 2 84 2 437 2 550 2 226 2 698 7 693 2 732 2 285 2 745 2 88 4 
47 2 720 4 654 4 52 2 133 2 84 4 437 2 550 2 226 2 698 6 693 2 732 2 745 2 285 2 88 4 
47 2 720 8 530 1 654 8 765 1 210 1 52 2 133 2 84 8 437 2 550 2 226 2 698 10 693 2 732 2 745 8 285 6 88 4 
47 2 720 2 654 2 52 2 133 2 84 2 437 2 550 2 226 2 698 2 693 2 732 2 88 2 
1 4 0 2 413 6 496 4 598 6 498 6 4 2 416 6 7 2 501 6 609 4 704 6 18 2 426 2 617 2 618 12 21 2 620 2 711 12 511 2 217 22 715 1 713 4 513 2 721 2 338 2 35 4 434 92 339 42 340 6 522 6 40 6 127 4 633 6 443 36 46 12 733 4 343 10 233 10 344 4 737 12 529 6 530 90 531 6 51 6 348 12 238 2 351 2 350 6 643 6 138 4 58 2 359 2 361 2 60 6 747 42 547 2 655 2 753 6 457 4 154 6 367 6 67 6 68 1 559 20 665 12 269 6 765 78 667 3 766 6 72 2 164 6 165 6 567 2 274 12 675 20 76 6 80 13 480 8 170 6 81 4 779 4 781 2 578 2 282 4 85 6 784 6 683 4 684 6 177 2 397 12 180 6 92 6 295 6 299 2 184 6 187 4 799 12 
359 2 58 2 308 2 538 2 361 2 747 18 311 6 542 2 416 2 7 2 366 2 367 2 9 2 202 2 369 2 555 2 609 32 704 2 505 2 559 2 610 2 70 2 665 2 765 42 666 4 766 2 380 2 72 2 618 2 23 2 22 2 619 2 710 2 470 2 509 4 274 2 428 2 335 2 715 2 713 2 474 2 675 2 513 2 569 2 76 2 519 2 773 2 623 2 723 2 279 2 118 2 387 2 120 4 480 6 434 38 82 2 576 2 339 2 781 2 438 2 123 2 486 2 86 4 443 18 444 2 231 2 343 2 91 2 233 2 235 2 48 2 530 42 132 2 238 2 351 2 350 2 689 2 642 2 643 2 241 2 303 2 136 2 
0 4 1 4 413 4 496 4 598 4 4 2 416 4 7 2 8 2 501 4 609 14 704 4 612 4 18 2 113 2 618 10 21 4 22 2 620 4 711 8 217 30 713 2 513 2 337 4 35 4 434 104 339 24 340 4 522 4 225 2 224 8 633 4 443 36 46 14 733 4 128 4 343 6 233 6 737 24 529 4 530 78 132 10 531 4 348 10 51 4 351 2 350 4 643 4 135 2 744 16 138 4 139 8 245 4 58 2 359 2 361 2 651 2 60 4 747 44 542 2 547 2 655 2 753 8 457 4 658 2 154 4 367 4 67 4 261 8 662 4 559 28 665 10 269 4 765 70 766 4 72 2 165 6 164 4 567 2 470 2 274 10 675 30 76 4 80 10 480 6 170 4 81 4 82 10 779 4 576 10 781 2 282 4 390 8 284 4 85 8 784 8 683 4 395 2 397 6 180 4 92 4 295 16 687 32 794 16 187 4 799 24 494 4 
609 4 359 2 58 2 76 2 361 2 343 2 233 2 747 4 559 4 610 2 530 12 434 10 765 12 781 2 351 2 72 2 22 2 619 2 715 2 713 2 443 4 675 4 513 2 
440 2 
