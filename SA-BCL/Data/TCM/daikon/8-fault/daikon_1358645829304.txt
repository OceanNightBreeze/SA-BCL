#tests: test_name, ' ', status(PASSED | FAILED | ERROR), ' ', [exception, { trace_mut_index | '(', { alternative_trace_mut_index, ',' }, ')' }]
utilMDE.TestUtilMDE:testLimitedSizeIntSet()V PASSED
utilMDE.TestUtilMDE:testOrderedPairIterator()V PASSED
utilMDE.TestUtilMDE:testWeakIdentityHashMap()V PASSED
utilMDE.TestUtilMDE:testSequenceAndIndices()V PASSED
utilMDE.TestUtilMDE:test_create_combinations()V PASSED
utilMDE.TestUtilMDE:test_unqualified_name()V PASSED
utilMDE.TestUtilMDE:testArraysMDE()V ERROR java.lang.ArrayIndexOutOfBoundsException 851 
utilMDE.TestUtilMDE:testInternObject()V FAILED junit.framework.AssertionFailedError 
utilMDE.TestUtilMDE:testTestUtilMDE()V PASSED
utilMDE.TestUtilMDE:testFuzzyFloat()V PASSED
utilMDE.TestUtilMDE:testHasher()V PASSED
utilMDE.TestUtilMDE:testIntern()V PASSED
utilMDE.TestUtilMDE:testMathMDE()V PASSED
utilMDE.TestUtilMDE:testOptions()V PASSED
daikon.test.inv.InvariantTester:testClassVarnameComparator()V PASSED
daikon.test.inv.InvariantTester:test_prob_is_ge()V FAILED junit.framework.AssertionFailedError 
daikon.test.inv.InvariantTester:test_prob_and()V PASSED
daikon.test.inv.InvariantTester:test_prob_or()V PASSED
daikon.test.TestAst:test_Ast_Ppt_Match()V ERROR java.lang.Error 
daikon.test.TestQuant:test_pairwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqualIndex()V PASSED
daikon.test.TestQuant:test_intersection()V PASSED
daikon.test.TestQuant:test_setEqual()V PASSED
daikon.test.TestQuant:test_subsetOf()V PASSED
daikon.test.TestQuant:test_isReverse()V PASSED
daikon.test.TestQuant:test_memberOf()V PASSED
daikon.test.TestQuant:test_eltsEqual()V PASSED
daikon.test.TestQuant:test_eltsNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseEqual()V PASSED
daikon.test.TestQuant:test_pairwiseLT()V PASSED
daikon.test.TestQuant:test_pairwiseLTE()V PASSED
daikon.test.TestQuant:test_pairwiseGT()V PASSED
daikon.test.TestQuant:test_pairwiseGTE()V PASSED
daikon.test.TestQuant:test_eltwiseEqual()V PASSED
daikon.test.TestQuant:test_eltwiseNotEqual()V PASSED
daikon.test.TestQuant:test_eltwiseLT()V PASSED
daikon.test.TestQuant:test_eltwiseLTE()V PASSED
daikon.test.TestQuant:test_eltwiseGT()V PASSED
daikon.test.TestQuant:test_eltwiseGTE()V PASSED
daikon.test.TestQuant:test_eltsEqualIndex()V PASSED
daikon.test.TestQuant:test_eltsGteIndex()V PASSED
daikon.test.TestQuant:test_eltsGtIndex()V PASSED
daikon.test.TestQuant:test_eltsLteIndex()V PASSED
daikon.test.TestQuant:test_eltsLtIndex()V PASSED
daikon.test.TestQuant:test_lexEqual()V PASSED
daikon.test.TestQuant:test_lexNotEqual()V PASSED
daikon.test.TestQuant:test_pairwiseDivides()V PASSED
daikon.test.TestQuant:test_pairwiseSquare()V PASSED
daikon.test.TestQuant:testCollect_field()V PASSED
daikon.test.TestQuant:test_concat()V PASSED
daikon.test.TestQuant:test_union()V PASSED
daikon.test.TestQuant:test_setDiff()V PASSED
daikon.test.TestQuant:test_noDups()V PASSED
daikon.test.TestQuant:test_slice()V PASSED
daikon.test.TestQuant:test_eltsGT()V PASSED
daikon.test.TestQuant:test_eltsGTE()V PASSED
daikon.test.TestQuant:test_eltsLT()V PASSED
daikon.test.TestQuant:test_eltsLTE()V PASSED
daikon.test.TestQuant:test_lexLT()V PASSED
daikon.test.TestQuant:test_lexLTE()V PASSED
daikon.test.TestQuant:test_lexGT()V PASSED
daikon.test.TestQuant:test_lexGTE()V PASSED
daikon.test.TestQuant:testCollect()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseSubset()V PASSED
daikon.test.TestQuant:test_subsetOf_different_types()V PASSED
daikon.test.TestQuant:test_pairwiseBitwiseComplement()V PASSED
daikon.test.config.ConfigurationTest:testGetInstance()V PASSED
daikon.test.diff.ConsequentCVFPairComparatorTester:testCompare()V PASSED
daikon.test.diff.ConsequentCVFSortComparatorTester:testCompare()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testFreq()V PASSED
daikon.test.diff.DetailedStatisticsVisitorTester:testShouldAddFrequency()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsFalse()V PASSED
daikon.test.diff.DiffTester:testConditionalPptsTrue()V PASSED
daikon.test.diff.DiffTester:testEmptyEmpty()V PASSED
daikon.test.diff.DiffTester:testEmptyPpts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Empty()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts1()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts2()V PASSED
daikon.test.diff.DiffTester:testPpts1Ppts3()V PASSED
daikon.test.diff.DiffTester:testInvs1Empty()V ERROR utilMDE.Assert$AssertionException (235,1312) (308,939) 1287 756 1097 576 409 1040 662 (549,981) 438 (43,240) (549,981) 411 (43,240) 682 1323 
daikon.test.diff.DiffTester:testInvs1Invs1()V ERROR utilMDE.Assert$AssertionException (235,1312) (308,939) 1287 756 1097 576 409 1040 662 (549,981) 438 (43,240) (549,981) 411 (43,240) 682 1323 
daikon.test.diff.DiffTester:testInvs1Invs2()V ERROR utilMDE.Assert$AssertionException (235,1312) (308,939) 1287 756 1097 576 409 1040 662 (549,981) 438 (43,240) (549,981) 411 (43,240) 682 1323 
daikon.test.diff.DiffTester:testInvs1Invs3()V ERROR utilMDE.Assert$AssertionException (235,1312) (308,939) 1287 756 1097 576 409 1040 662 (549,981) 438 (43,240) (549,981) 411 (43,240) 682 1323 
daikon.test.diff.DiffTester:testNullaryInvs()V PASSED
daikon.test.diff.DiffTester:testNonModulus()V PASSED
daikon.test.diff.InvMapTester:testABC()V PASSED
daikon.test.diff.InvMapTester:testCAB()V PASSED
daikon.test.diff.MinusVisitorTester:testMinus()V PASSED
daikon.test.diff.PrintDifferingInvariantsVisitorTester:testShouldPrint()V PASSED
daikon.test.diff.UnionVisitorTester:testXor()V PASSED
daikon.test.diff.XorVisitorTester:testXor()V PASSED
daikon.test.InvariantFormatTester:testFormats()V ERROR java.lang.NullPointerException 214 533 57 789 
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNon()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNullNull()V PASSED
daikon.test.inv.unary.scalar.OneOfScalarTester:testNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNonNonNon()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNonNullNonNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testNullNullNullNull()V PASSED
daikon.test.inv.unary.sequence.OneOfSequenceTester:testDifferentLengths()V PASSED
daikon.test.LinearTernaryCoreTest:test_set_tri_linear()V PASSED
daikon.test.LinearTernaryCoreTest:test_format()V PASSED
daikon.test.ModBitTrackerTest:testModBitTracker()V PASSED
daikon.test.ProglangTypeTest:test_parse_value()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_parts()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_1Darray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_nDarray_whole()V PASSED
daikon.test.VarComparabilityTest:test_VarComparabilityImplicit_scalar()V PASSED
daikon.test.VarInfoNameTest:testParse()V ERROR java.lang.NullPointerException 75 115 4 
daikon.test.VarInfoNameTest:testJML()V PASSED
daikon.test.VarInfoNameTest:testEscForall()V ERROR utilMDE.Assert$AssertionException (235,1312) 75 115 4 
daikon.test.VarInfoNameTest:testSubscript()V PASSED
daikon.test.TestAnnotate:testGetTabbedIndex()V PASSED

#uuts: uut_name, [ '|', mutator_class, '|', change_position_in_file_buffer, '|', change ]
daikon.inv.Implication:makeImplication(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)Ldaikon.inv.Implication;
daikon.inv.binary.twoScalar.IntGreaterEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterEqual;
daikon.inv.binary.twoString.StringEqual:add_modified(Ljava.lang.String;Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.Debug:logDetail()Z
daikon.test.VarInfoNameTest:run(Ljava.lang.String;)V
jtb.JavaParserTokenManager:getNextToken()Ljtb.Token;
daikon.Quant:subsetOf([J[J)Z
daikon.test.FormatTestCase:getSamples([Ldaikon.ProglangType;Ljava.io.BufferedReader;Ljava.util.List;ZLjava.lang.String;)V
daikon.VarInfoName.Field:java_family_name(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:enabled()Z
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;Ljava.util.Comparator;)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.PairwiseIntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Subscript:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.TestUtilMDE:lsis_test(I)V
jtb.JavaParser:ImportDeclaration()Ljtb.syntaxtree.ImportDeclaration;
daikon.diff.UnionVisitor:visit(Ldaikon.diff.InvNode;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa2_0(JJJJ)I
daikon.inv.Implication:Implication(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;ZLdaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
utilMDE.FuzzyFloat:FuzzyFloat(D)V
jtb.syntaxtree.NodeSequence:setParent(Ljtb.syntaxtree.Node;)V
daikon.diff.ConsequentCVFPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.VarComparability:parse(ILjava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparability;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:hasNext()Z
daikon.inv.unary.scalar.UpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.FormatTestCase:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.ParseException:ParseException(Ljava.lang.String;)V
daikon.diff.Diff:diffPptTopLevel(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.PptNode;
daikon.inv.unary.sequence.EltwiseIntLessThan:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName:simplify_name(Z)Ljava.lang.String;
daikon.diff.InvMap:addPpt(Ldaikon.PptTopLevel;)V
utilMDE.Assert.AssertionException:AssertionException(Ljava.lang.String;)V
daikon.VarInfoName.Prestate:repr_impl()Ljava.lang.String;
utilMDE.WeakHasherMap.Entry:Entry(LutilMDE.WeakHasherMap;Ljava.util.Map.Entry;Ljava.lang.Object;)V
daikon.inv.binary.twoSequence.SubSequence:enabled()Z
utilMDE.MathMDE:mod_positive(II)I
utilMDE.Intern.IntegerHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.EltLowerBound:format_esc()Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.sequenceScalar.SequenceScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfoName.FunctionOfN:elts_repr_commas()Ljava.lang.String;
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.diff.InvNode:getInv1()Ldaikon.inv.Invariant;
daikon.inv.binary.sequenceScalar.Member:format_simplify()Ljava.lang.String;
daikon.VarInfoName.FunctionOf:name_impl()Ljava.lang.String;
daikon.test.LinearTernaryCoreTest:one_test_set_tri_linear([[IJJJJ)V
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:PairwiseIntLessEqual(Ldaikon.PptSlice;)V
daikon.ProglangType:baseIsString()Z
daikon.Quant:eltwiseGT([I)Z
daikon.Quant:eltsNotEqualIndex([I)Z
daikon.Quant:pairwiseLT([I[I)Z
daikon.inv.unary.scalar.NonZero:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.Name:setParent(Ljtb.syntaxtree.Node;)V
daikon.inv.unary.scalar.Modulus:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.test.InvariantFormatTester:performTest(Ljava.io.LineNumberReader;Ljava.io.PrintStream;)Z
daikon.Quant:setEqual([I[I)Z
utilMDE.ArraysMDE:max([I)I
utilMDE.MathMDE:gcd([I)I
daikon.inv.unary.sequence.EltOneOf:EltOneOf(Ldaikon.PptSlice;)V
daikon.inv.Invariant:logDetail()Z
daikon.inv.unary.sequence.SingleScalarSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.VarInfo:esc_name()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameFormulaComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.Quant:subsetOf([D[F)Z
daikon.inv.unary.scalar.OneOfScalar:sort_rep()V
daikon.PptSlice0.ImplicationWrapper:format()Ljava.lang.String;
daikon.inv.OutputFormat:toString()Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:hasNext()Z
daikon.inv.binary.twoScalar.NumericInt:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quantify.Term:esc_name()Ljava.lang.String;
daikon.VarInfoName.QuantifierVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
daikon.VarInfoName.Slice:repr_impl()Ljava.lang.String;
daikon.test.VarInfoNameDriver:run_helper(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.unary.scalar.RangeInt.EqualOne:EqualOne(Ldaikon.PptSlice;)V
daikon.inv.binary.twoSequence.PairwiseIntLessThan:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltOneOf:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:relate_var()V
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_esc()Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator1(Ljava.util.Comparator;)V
daikon.VarInfoName.AbstractVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ljava.lang.Object;
daikon.Quant:collectint_field(Ljava.lang.Object;Ljava.lang.String;)I
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_esc()Ljava.lang.String;
daikon.inv.binary.sequenceScalar.Member:check_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.Quant:subsetOf([S[S)Z
utilMDE.Intern:intern([Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntGreaterThan:get_proto()Ldaikon.inv.binary.twoScalar.IntGreaterThan;
utilMDE.ArraysMDE:min_max([I)[I
daikon.Quant:pairwiseBitwiseSubset([I[I)Z
daikon.inv.binary.twoScalar.IntLessEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.NoDuplicates:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:FuzzyFloat()V
daikon.inv.unary.scalar.NonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Subscript:name_impl()Ljava.lang.String;
jtb.JavaCharStream:BeginToken()C
daikon.inv.unary.sequence.NoDuplicates:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfoName:applySubscript(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:add_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.Quant:eltsLT([II)Z
daikon.Quantify.ESCQuantification:ESCQuantification(Ljava.util.EnumSet;[Ldaikon.VarInfo;)V
utilMDE.ArraysMDE:indexOf([II)I
daikon.Quant:collectObject(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.Object;
daikon.inv.unary.scalar.LowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.SimpleNamesVisitor:visitSlice(Ldaikon.VarInfoName.Slice;)Ldaikon.VarInfoName.NoReturnValue;
utilMDE.Options:type_short_name(Ljava.lang.Class;)Ljava.lang.String;
daikon.Quant:collectString_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt([IZ)V
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quantify.Length:simplify_name()Ljava.lang.String;
utilMDE.Options:set_arg(LutilMDE.Options.OptionInfo;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.FormatTestCase:getVarInfos(Ljava.lang.Class;[Ldaikon.ProglangType;)[Ldaikon.VarInfo;
daikon.test.VarInfoNameDriver:run(Ljava.io.InputStream;Ljava.io.PrintStream;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quantify.FreeVar:name()Ljava.lang.String;
daikon.diff.MinusVisitor:getResult()Ldaikon.diff.InvMap;
daikon.VarInfo:get_array_var()Ldaikon.VarInfo;
utilMDE.MathMDE:gcd_differences([I)I
jtb.JavaCharStream:readChar()C
daikon.diff.DetailedStatisticsVisitor:shouldAddFrequency(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
utilMDE.UtilMDE:replaceString(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.diff.DetailedStatisticsVisitor:freq(II)D
daikon.inv.unary.string.SingleString:SingleString(Ldaikon.PptSlice;)V
utilMDE.LimitedSizeIntSet:LimitedSizeIntSet(I)V
daikon.inv.unary.scalar.LowerBound:LowerBound(Ldaikon.PptSlice;)V
daikon.test.VarInfoNameDriver.EscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;DZZ)V
daikon.inv.InvariantStatus:InvariantStatus(Ljava.lang.String;)V
daikon.VarInfo:jml_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:enabled()Z
utilMDE.ArraysMDE:sum([D)D
utilMDE.MathMDE.MissingNumbersIteratorLong:next()Ljava.lang.Long;
utilMDE.WeakIdentityHashMap:getTable()[LutilMDE.WeakIdentityHashMap.Entry;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_proto()Ldaikon.inv.Invariant;
daikon.suppress.NISuppressee:swap()Ldaikon.suppress.NISuppressee;
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;Z)Ldaikon.diff.RootNode;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.diff.DiffDummyInvariant:repr()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntEqual:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.EltOneOf:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonModulus:enabled()Z
daikon.inv.unary.sequence.EltUpperBound:format_ioa()Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.OneOfSequence:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.VarInfo:simplifyFixup(Ljava.lang.String;)Ljava.lang.String;
daikon.VarInfoName.Elements:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.inv.unary.scalar.UpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoSequence.TwoSequence:TwoSequence(Ldaikon.PptSlice;)V
daikon.VarInfoName.TypeOf:repr_impl()Ljava.lang.String;
daikon.test.ModBitTrackerTest:booleanToModBit(Z)I
daikon.inv.unary.UpperBoundCore:wouldChange(J)Z
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_daikon()Ljava.lang.String;
daikon.inv.unary.sequence.EltNonZero:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:eltwiseLT([I)Z
daikon.PptSlice:PptSlice(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;ZZZ)V
daikon.VarInfoName.QuantHelper:quantify([Ldaikon.VarInfoName;)Ldaikon.VarInfoName.QuantHelper.QuantifyReturn; | OPERATOR | 107346 | <= -> ==
daikon.VarInfo:VarInfo(Ldaikon.VarInfoName;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.Quant:pairwiseBitwiseComplement([I[I)Z
daikon.VarInfoAux:equals(Ljava.lang.Object;)Z
daikon.inv.unary.scalar.SingleScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.diff.PptNode:PptNode(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)V
daikon.test.VarInfoNameDriver.Elements:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.VarInfo:isPointer()Z
daikon.inv.unary.sequence.SingleSequence:SingleSequence(Ldaikon.PptSlice;)V
daikon.inv.binary.twoSequence.PairwiseIntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.OneOfSequence:runValue([JIZ)Ldaikon.inv.InvariantStatus;
daikon.Quantify.Constant:name()Ljava.lang.String;
daikon.VarInfoName:applySize()Ldaikon.VarInfoName;
jtb.syntaxtree.NodeToken:trimSpecials()V
daikon.inv.unary.string.OneOfString:runValue(Ljava.lang.String;IZ)Ldaikon.inv.InvariantStatus;
daikon.VarInfo:isDerived()Z
daikon.inv.unary.string.OneOfString:format_simplify()Ljava.lang.String;
utilMDE.TestUtilMDE.1InternTest:test(Z)V
daikon.inv.unary.sequence.NoDuplicates:enabled()Z
daikon.inv.unary.sequence.SingleScalarSequence:SingleScalarSequence(Ldaikon.PptSlice;)V
daikon.PptName:isEnterPoint()Z
daikon.test.VarInfoNameDriver.SimplifyName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.twoSequence.Reverse:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:memberOf(F[D)Z
daikon.PptTopLevel:PptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.EltNonZero:format_esc()Ljava.lang.String;
utilMDE.MathMDE:modulus_int(Ljava.util.Iterator;)[I
daikon.inv.unary.sequence.EltwiseIntLessThan:EltwiseIntLessThan(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.binary.twoSequence.SubSequence:format_ioa()Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)Ljava.lang.String;
daikon.ProglangType:elementType()Ldaikon.ProglangType;
daikon.VarInfoName.SimpleNamesVisitor:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.binary.sequenceScalar.Member:format_ioa()Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.Quantify.ESCQuantification:get_arr_vars_indexed(I)Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;Ljava.lang.Object;)I
utilMDE.UtilMDE:create_combinations(IILjava.util.List;)Ljava.util.List;
utilMDE.FuzzyFloat:set_rel_diff(D)V
daikon.VarInfoName:indexExplicit(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.Quantify.QuantFlags:include_index()Ljava.util.EnumSet;
daikon.inv.unary.scalar.OneOfScalar:subarray_rep()Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE:pow_fast(II)I
daikon.inv.unary.sequence.EltOneOf:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Slice:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.SeqIndexIntNonEqual:enabled()Z
daikon.Quant:eq(II)Z
daikon.inv.unary.sequence.EltLowerBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Add:amount()Ljava.lang.String;
utilMDE.FuzzyFloat:lte(DD)Z
jtb.syntaxtree.PackageDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.Intern.StringArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.OneOfScalar:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:old_var_names(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.NonZero:zero(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:memberOf(D[F)Z
daikon.inv.binary.twoScalar.IntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.string.OneOfString:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:eltsGteIndex([I)Z
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;)[Ljava.lang.String;
daikon.Quant:subsetOf([F[F)Z
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_daikon()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarrayEq([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.inv.ValueSet.ValueSetStringArray:ValueSetStringArray(I)V
daikon.VarInfoName.Replacer:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName;
daikon.VarInfoAux:hashCode()I
daikon.inv.binary.twoSequence.PairwiseIntEqual:PairwiseIntEqual(Ldaikon.PptSlice;)V
daikon.Quantify.IOAQuantification:getClosingExp()Ljava.lang.String;
daikon.inv.Implication:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.string.OneOfString:add_mod_elem(Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
utilMDE.Pair:Pair(Ljava.lang.Object;Ljava.lang.Object;)V
daikon.VarInfoName.Prestate:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
utilMDE.MathMDE:check_first_and_last_nonmodulus([ILutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.VarInfoName:applyElements()Ldaikon.VarInfoName;
utilMDE.Assert:assertTrue(ZLjava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt.Divides:Divides(Ldaikon.PptSlice;Z)V
daikon.test.diff.DiffDummyInvariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.Fmt:i(I)Ljava.lang.Integer;
jtb.syntaxtree.Name:Name(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeListOptional;)V
daikon.diff.DepthFirstVisitor:visit(Ldaikon.diff.RootNode;)V
daikon.Quantify.Term:simplify_name()Ljava.lang.String;
utilMDE.TestUtilMDE:compareOrderedPairIterator(LutilMDE.OrderedPairIterator;[[I)V
jtb.syntaxtree.NodeOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.OrderedPairIterator:returnboth()LutilMDE.Pair;
daikon.inv.unary.scalar.NonZero:is_pointer()Z
daikon.VarInfoName.Field:name_impl()Ljava.lang.String;
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.ProglangType:parse_value(Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.sequence.SeqIndexIntNonEqual:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:setDiff([I[I)[I
daikon.VarComparabilityNone:comparable(Ldaikon.VarComparabilityNone;Ldaikon.VarComparabilityNone;)Z
daikon.test.FormatTestCase:populateWithSamples(Ldaikon.inv.Invariant;Ljava.util.List;)V
daikon.inv.unary.sequence.SeqIndexIntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.EltLowerBound:format_ioa()Ljava.lang.String;
daikon.diff.InvMap:InvMap()V
daikon.inv.unary.string.OneOfString:add_modified(Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.EltUpperBound:format_daikon()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_ioa()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_ioa()Ljava.lang.String;
daikon.VarComparability:comparable(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)V
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;ZLjava.lang.Object;Ldaikon.VarInfoAux;)V
daikon.inv.unary.string.OneOfString:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.OneOfSequence:check_mod_elem([JI)Ldaikon.inv.InvariantStatus;
utilMDE.WeakHasherMap.EntrySet:size()I
daikon.inv.unary.stringsequence.EltOneOfString:sort_rep()V
daikon.VarInfoName.FunctionOfN:FunctionOfN(Ljava.lang.String;Ljava.util.List;)V
daikon.ProglangType:baseIsIntegral()Z
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quantify.SimplifyQuantification:get_quantification()Ljava.lang.String;
utilMDE.MathMDE:gcd(II)I
daikon.test.VarInfoNameTest:diff([Ljava.lang.String;[Ljava.lang.String;)V
daikon.inv.unary.string.SingleString:var()Ldaikon.VarInfo;
daikon.ValueTuple:ValueTuple([Ljava.lang.Object;[IZ)V
daikon.simplify.LemmaStack:noticeInt(J)V
utilMDE.WeakHasherMap:size()I
utilMDE.Stopwatch:Stopwatch(Z)V
daikon.test.diff.DiffTester:newPptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.VarInfo:isDerivedSubSequenceOf()Ldaikon.VarInfo;
daikon.inv.binary.twoScalar.LinearBinaryCore:find_bi_linear(JJJJ[D)Z
daikon.inv.unary.string.OneOfString:OneOfString(Ldaikon.PptSlice;)V
daikon.test.TestQuant:assert_arrays_equals([I[I)V
utilMDE.FuzzyFloat:indexOf([DD)I
daikon.Quantify.QuantifyReturn:QuantifyReturn(Ldaikon.VarInfo;)V
daikon.inv.unary.sequence.OneOfSequence:sort_rep()V
utilMDE.Options:Options(Ljava.lang.String;[Ljava.lang.Object;)V
daikon.VarInfoName.SizeOf:esc_name_impl()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt:enabled()Z
daikon.VarInfoName:applyPrestate()Ldaikon.VarInfoName;
daikon.inv.unary.sequence.NoDuplicates:format_simplify()Ljava.lang.String;
daikon.inv.binary.twoSequence.Reverse:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.FileIO.VarDefinition:VarDefinition(Ljava.lang.String;Ldaikon.VarInfo.VarKind;Ldaikon.ProglangType;)V
daikon.Quant:pairwiseGT([I[I)Z
daikon.inv.binary.sequenceScalar.Member:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltwiseIntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Fmt:spf(Ljava.lang.String;[Ljava.lang.Object;)Ljava.lang.String;
utilMDE.Intern.LongHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
jtb.syntaxtree.NodeSequence:addNode(Ljtb.syntaxtree.Node;)V
daikon.suppress.NISuppression:NISuppression([Ldaikon.suppress.NISuppressor;Ldaikon.suppress.NISuppressee;)V
daikon.inv.binary.BinaryInvariant:is_symmetric()Z
daikon.test.Common:makePptTopLevel(Ljava.lang.String;[Ldaikon.VarInfo;)Ldaikon.PptTopLevel;
daikon.inv.binary.sequenceScalar.SeqIntEqual:SeqIntEqual(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.PrintDifferingInvariantsVisitor:shouldPrint(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.OneOfSequence:OneOfSequence(Ldaikon.PptSlice;)V
daikon.inv.Invariant:prob_and(DD)D
daikon.VarInfoName.Simple:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.binary.sequenceScalar.Member:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:pairwiseGTE([I[I)Z
daikon.VarInfoName:equals(Ljava.lang.Object;)Z
daikon.test.VarComparabilityTest:comp(Ldaikon.VarComparability;Ldaikon.VarComparability;)Z
daikon.inv.unary.sequence.EltLowerBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.LowerBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:jj_scan_token(I)Z
daikon.inv.binary.twoScalar.LinearBinary:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:sum([I)I
daikon.VarInfoAux:parse(Ljava.lang.String;)Ldaikon.VarInfoAux;
jtb.JavaParserTokenManager:jjCheckNAdd(I)V
daikon.inv.binary.twoString.StringEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:format_daikon()Ljava.lang.String;
daikon.inv.binary.twoSequence.SubSequence:SubSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Node:Node(LutilMDE.Pair;)V
daikon.inv.unary.sequence.EltwiseIntLessThan:format_simplify()Ljava.lang.String;
daikon.test.VarInfoNameDriver.Field:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.sequenceScalar.SeqIntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.simplify.SimpUtil:assert_well_formed(Ljava.lang.String;)V
daikon.Quant:collectObject(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.Object;
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:enabled()Z
daikon.inv.binary.twoScalar.TwoScalar:valid_types([Ldaikon.VarInfo;)Z
daikon.Quantify.Length:Length(Ldaikon.VarInfo;I)V
jtb.JavaCharStream:FillBuff()V
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;Z)V
daikon.inv.Invariant.ClassVarnameComparator:compareClass(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.binary.twoScalar.NumericInt.Divides:get_proto(Z)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltwiseIntComparison:EltwiseIntComparison(Ldaikon.PptSlice;)V
daikon.PptSlice0:arity()I
daikon.inv.Invariant.ClassVarnameComparator:compareVariables(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.sequence.EltOneOf:enabled()Z
daikon.inv.binary.twoString.StringEqual:enabled()Z
daikon.diff.Diff:diffPptMap(Ldaikon.PptMap;Ldaikon.PptMap;)Ldaikon.diff.RootNode;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:add_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.PptTopLevel:views_iterator()Ljava.util.Iterator;
daikon.inv.unary.scalar.RangeInt.EqualZero:EqualZero(Ldaikon.PptSlice;)V
daikon.inv.unary.string.OneOfString:format_ioa()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet:iterator()Ljava.util.Iterator;
daikon.diff.InvNode:InvNode(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.syntaxtree.NodeOptional:NodeOptional()V
daikon.ValueTuple:size()I
daikon.inv.binary.twoSequence.SubSequence:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:applyAdd(I)Ldaikon.VarInfoName;
daikon.inv.unary.scalar.Positive:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:gte(II)Z
utilMDE.TestUtilMDE.1TestNonModulus:check_strict([I[I)V
daikon.diff.XorVisitor:shouldAddInv1(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.inv.Invariant:prob_or(DD)D
utilMDE.MathMDE:modulus_strict_long(Ljava.util.Iterator;Z)[J
daikon.ValueTuple:makeUninterned([Ljava.lang.Object;[I)Ldaikon.ValueTuple;
jtb.JavaParser:generateParseException()Ljtb.ParseException;
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_simplify()Ljava.lang.String;
daikon.VarInfoName.ElementsFinder:ElementsFinder(Ldaikon.VarInfoName;)V
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:SeqIntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt:test([IZ[I)V
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.VarInfoName.TypeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:IntGreaterEqual(Ldaikon.PptSlice;)V
daikon.Quant:subsetOf([I[I)Z
daikon.inv.unary.sequence.OneOfSequence:is_hashcode()Z
daikon.Quant:collectint(Ljava.lang.Object;[Ljava.lang.String;I)[I
daikon.inv.binary.twoScalar.IntNonEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntNonEqual;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern.DoubleArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z | CONDITION | 5354 | if (x) -> if (!x)
utilMDE.Intern:intern(Ljava.lang.Double;)Ljava.lang.Double;
daikon.diff.Diff:shouldAdd(Ldaikon.PptTopLevel;)Z
daikon.inv.unary.string.OneOfString:is_type()Z
daikon.Quant:concat([I[I)[I
daikon.inv.unary.sequence.EltLowerBound:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:memberOf(F[F)Z
utilMDE.MathMDE:nonmodulus_strict([I)[I
daikon.test.VarInfoNameDriver.Subscript:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.EltUpperBound:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:ne(II)Z
utilMDE.ArraysMDE:indexOf([I[I)I
daikon.inv.binary.twoSequence.PairwiseIntLessThan:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParser:PackageDeclaration()Ljtb.syntaxtree.PackageDeclaration;
daikon.Quant:eltsLteIndex([I)Z
daikon.inv.unary.sequence.EltOneOf:sort_rep()V
daikon.Quant:collectString(Ljava.lang.Object;Ljava.lang.String;)[Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:UpperBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.ProglangType:base()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:OneOfScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:add_mod_elem([JI)Ldaikon.inv.InvariantStatus;
jtb.JTBToolkit:makeNodeToken(Ljtb.Token;)Ljtb.syntaxtree.NodeToken;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:BitwiseComplement(Ldaikon.PptSlice;)V
daikon.inv.unary.LowerBoundCore:calc_avg_samples_per_val(JD)D
jtb.JavaCharStream:backup(I)V
daikon.inv.binary.twoSequence.Reverse:format_simplify_explicit()Ljava.lang.String;
daikon.inv.ValueSet:factory(Ldaikon.VarInfo;)Ldaikon.inv.ValueSet;
daikon.VarInfoName.Prestate:name_impl()Ljava.lang.String;
daikon.config.Configuration:addRecord(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.VarInfo:ioa_name()Ljava.lang.String;
daikon.inv.unary.UpperBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintAllVisitor:PrintAllVisitor(Ljava.io.PrintStream;ZZ)V
daikon.inv.Invariant:getConfidence()D
daikon.inv.binary.sequenceScalar.SeqIntEqual:add_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.diff.PptNode:accept(Ldaikon.diff.Visitor;)V
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Add:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.EltNonZero:format_daikon()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:getBeginColumn()I
daikon.inv.Invariant:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoName.Simple:name_impl()Ljava.lang.String;
daikon.Quantify.ESCQuantification:get_quantification()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern.DoubleHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.ProglangType:ProglangType(Ljava.lang.String;I)V
daikon.VarInfoName.SizeOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
jtb.JavaParserTokenManager:jjFillToken()Ljtb.Token;
daikon.inv.unary.sequence.EltNonZero:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:keyEquals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.Bound0_63:Bound0_63(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.EltUpperBound:format_esc()Ljava.lang.String;
daikon.test.FormatTestCase:getDiffString()Ljava.lang.String;
daikon.Quantify.Length:esc_name()Ljava.lang.String;
daikon.VarComparabilityNone:indexType(I)Ldaikon.VarComparability;
daikon.VarInfoName:intern()Ldaikon.VarInfoName;
daikon.Ppt:Ppt()V
daikon.inv.unary.scalar.OneOfScalar:isSameFormula(Ldaikon.inv.Invariant;)Z
daikon.inv.binary.twoSequence.TwoSequence:var1()Ldaikon.VarInfo;
daikon.Quant:eltsGtIndex([I)Z
daikon.diff.InvNode:accept(Ldaikon.diff.Visitor;)V
daikon.diff.InvMap:put(Ldaikon.PptTopLevel;Ljava.util.List;)V
daikon.test.InvariantFormatTester:isComment(Ljava.lang.String;)Z
daikon.inv.Invariants:Invariants()V
daikon.VarInfo:jml_name(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineType(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.inv.unary.scalar.OneOfScalar:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.EltUpperBound:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Elements:name_impl()Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:runValue([Ljava.lang.String;IZ)Ldaikon.inv.InvariantStatus;
utilMDE.Intern:intern([D)[D
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariant:prob_is_ge(DD)D | CONSTANT | 6853 | 1 -> -1
daikon.VarInfoAux:intern()Ldaikon.VarInfoAux;
daikon.VarInfoName.FunctionOfN:elts_repr()Ljava.util.List;
daikon.VarInfo:get_ioa_quantify(Ldaikon.VarInfo;)Ldaikon.Quantify.IOAQuantification;
daikon.Quant:isReverse([I[I)Z
daikon.Quant:intersection([I[I)[I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_1()I
daikon.inv.unary.sequence.EltwiseIntLessThan:format_ioa()Ljava.lang.String;
daikon.test.FormatTestCase.SingleOutputTestCase:getDiffString()Ljava.lang.String;
daikon.inv.unary.stringsequence.SingleStringSequence:var()Ldaikon.VarInfo;
daikon.ProglangType:baseIsFloat()Z
jtb.JavaCharStream:ReadByte()C
daikon.inv.binary.twoSequence.SubSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.stringsequence.EltOneOfString:add_modified([Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.ArraysMDE:indexOfEq([Ljava.lang.Object;Ljava.lang.Object;)I
jtb.ParseException:getMessage()Ljava.lang.String;
daikon.test.InvariantFormatTester:isWhitespace(Ljava.lang.String;)Z
daikon.inv.unary.sequence.SeqIndexIntNonEqual:check_modified([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjStopStringLiteralDfa_0(IJJ)I
daikon.ModBitTracker:num_vars()I
daikon.PptSlice0.ImplicationWrapper:ImplicationWrapper(Ldaikon.inv.Implication;)V
daikon.ValueTuple:isMissing(I)Z
daikon.Quant:memberOf(I[I)Z
utilMDE.Fmt:spf(Ljava.lang.String;Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptSlice0.ImplicationWrapper:hashCode()I
daikon.VarInfoName.AbstractVisitor:visitPrestate(Ldaikon.VarInfoName.Prestate;)Ljava.lang.Object;
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_simplify()Ljava.lang.String;
daikon.ProglangType:dimensions()I
daikon.inv.binary.twoScalar.IntLessThan:get_proto()Ldaikon.inv.binary.twoScalar.IntLessThan;
daikon.inv.unary.scalar.NonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.Node:add(Ljava.lang.Object;)V
daikon.VarInfoName.SimpleNamesVisitor:simples()Ljava.util.Set;
jtb.syntaxtree.ImportDeclaration:ImportDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeOptional;Ljtb.syntaxtree.NodeToken;)V
utilMDE.LimitedSizeIntSet:add(I)V
daikon.inv.unary.sequence.EltwiseIntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.Diff:convertToInvMap(Ldaikon.PptMap;)Ldaikon.diff.InvMap;
utilMDE.Options:parse([Ljava.lang.String;)[Ljava.lang.String;
daikon.test.TestQuant:removeAdjacentDups([I)[I
daikon.inv.unary.sequence.EltwiseIntLessThan:get_proto()Ldaikon.inv.Invariant;
daikon.Debug:logOn()Z
daikon.inv.unary.sequence.EltLowerBound:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.ConsequentPairComparator:ConsequentPairComparator(Ljava.util.Comparator;)V
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;Z)Ldaikon.diff.RootNode;
daikon.inv.binary.twoScalar.LinearBinary:get_proto()Ldaikon.inv.Invariant;
daikon.ProglangType:isArray()Z
daikon.test.VarInfoNameDriver.Function:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quant:gt(II)Z
daikon.inv.unary.scalar.Modulus:Modulus(Ldaikon.PptSlice;)V
daikon.VarInfoName.ElementsFinder:visitElements(Ldaikon.VarInfoName.Elements;)Ldaikon.VarInfoName.Elements;
daikon.Ppt:indexOf(Ljava.lang.String;)I
daikon.inv.binary.twoScalar.NumericInt:NumericInt(Ldaikon.PptSlice;Z)V
daikon.diff.RootNode:RootNode()V
daikon.inv.unary.sequence.SeqIndexIntNonEqual:SeqIndexIntNonEqual()V
daikon.Quantify.FreeVar:FreeVar(Ljava.lang.String;)V
utilMDE.MathMDE.MissingNumbersIteratorInt:next()Ljava.lang.Integer;
daikon.Quantify.SimplifyQuantification:get_arr_vars_indexed(I)Ljava.lang.String;
daikon.ProglangType:fileTypeToRepType()Ldaikon.ProglangType;
daikon.VarInfoName.FunctionOf:repr_impl()Ljava.lang.String;
utilMDE.Intern:internedLong(J)Ljava.lang.Long;
daikon.VarInfoName.SizeOf:get_term()Ldaikon.VarInfoName;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_esc()Ljava.lang.String;
daikon.PptMap:asCollection()Ljava.util.Collection;
utilMDE.OrderedPairIterator:setnext1()V
daikon.inv.unary.sequence.EltLowerBound:format_daikon()Ljava.lang.String;
daikon.diff.InvMap:get(Ldaikon.PptTopLevel;)Ljava.util.List;
utilMDE.WeakHasherMap.WeakKey:hashCode()I
utilMDE.MathMDE:pow(II)I
daikon.inv.unary.sequence.EltOneOf:format_esc()Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:calc_range()J
daikon.VarComparabilityImplicit:VarComparabilityImplicit(I[Ldaikon.VarComparabilityImplicit;I)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:calc_tri_linear([Ldaikon.inv.ternary.threeScalar.LinearTernaryCore.Point;)[D
daikon.Ppt:find_var_by_name(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName:hashCode()I
daikon.diff.InvMap:toString()Ljava.lang.String;
daikon.ValueTuple:isMissingFlow(I)Z
daikon.VarInfoName.FunctionOfN:name_impl()Ljava.lang.String;
utilMDE.WeakHasherMap.EntrySet.1:hasNext()Z
utilMDE.ArraysMDE:subarray([JII)[J
utilMDE.MathMDE.MissingNumbersIteratorInt:MissingNumbersIteratorInt(Ljava.util.Iterator;Z)V
daikon.test.FormatTestCase:passes()Z
daikon.PptTopLevel:init_vars([Ldaikon.VarInfo;)V
daikon.inv.binary.twoScalar.IntLessEqual:enabled()Z
daikon.VarInfo:get_lower_bound()Ldaikon.Quantify.Term;
daikon.inv.unary.scalar.NonModulus:NonModulus(Ldaikon.PptSlice;)V
daikon.inv.binary.sequenceScalar.SeqIntLessThan:SeqIntLessThan(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:gte(DD)Z
daikon.VarInfoName.Simple:repr_impl()Ljava.lang.String;
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:EqualMinusOne(Ldaikon.PptSlice;)V
daikon.PptTopLevel:cond_iterator()Ldaikon.PptTopLevel.CondIterator;
daikon.ProglangType:find(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.Quant:collectString(Ljava.lang.Object;[Ljava.lang.String;I)[Ljava.lang.String;
daikon.Quant:eltwiseLTE([I)Z
daikon.inv.unary.stringsequence.EltOneOfString:format_esc()Ljava.lang.String;
daikon.diff.InvMap:pptSortedIterator(Ljava.util.Comparator;)Ljava.util.Iterator;
utilMDE.TestUtilMDE.1TestNonModulus:check([I[IZ)V
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.InvNode;)V
utilMDE.ArraysMDE:element_range([I)I
daikon.inv.unary.scalar.SingleScalar:var()Ldaikon.VarInfo;
daikon.Quant:subsetOf([B[I)Z
daikon.VarInfoName.Simple:esc_name_impl()Ljava.lang.String;
daikon.ValueTuple:tuplemodHasModified(I)Z
daikon.Ppt.NameComparator:swap(Ljava.lang.String;CC)Ljava.lang.String;
daikon.test.ModBitTrackerTest:randomModBoolean(II)Z
utilMDE.TestUtilMDE:int_array_iterator([I)Ljava.util.Iterator;
daikon.inv.binary.twoScalar.NumericInt:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.diff.Node:getUserLeft()Ljava.lang.Object;
daikon.test.VarInfoNameDriver.Add:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.PptSlice2:PptSlice2(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
utilMDE.Intern.SequenceAndIndicesHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.ValueSet.ValueSetScalarArray:ValueSetScalarArray(I)V
daikon.inv.binary.twoSequence.SeqSeqIntEqual:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.PptTopLevel:viewsAsCollection()Ljava.util.Collection;
utilMDE.MathMDE:nonmodulus_strict_int_internal(Ljava.util.Iterator;)[I
utilMDE.ArraysMDE:sum([[D)D
daikon.diff.UnionVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.VarInfoName.Elements:Elements(Ldaikon.VarInfoName;)V
daikon.inv.unary.scalar.OneOfScalar:format_simplify()Ljava.lang.String;
jtb.JavaCharStream:getBeginLine()I
daikon.inv.binary.twoScalar.IntLessThan:IntLessThan(Ldaikon.PptSlice;)V
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:enabled()Z
daikon.test.FormatTestCase:instantiate(Ljava.io.LineNumberReader;Z)Ldaikon.test.FormatTestCase;
daikon.inv.unary.scalar.LowerBound:computeConfidence()D
daikon.test.ProglangTypeTest:comparrcomp(Ljava.lang.Object;[Ljava.lang.Object;)Z
daikon.inv.binary.twoString.StringEqual:get_proto()Ldaikon.inv.binary.twoString.StringEqual;
daikon.ProglangType:isFloat()Z
daikon.Quantify.Term:name_with_offset(Ljava.lang.String;I)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfo:dbc_name()Ljava.lang.String;
daikon.inv.unary.sequence.NoDuplicates:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.NonZero:NonZero(Ldaikon.PptSlice;)V
utilMDE.ArraysMDE:indexOf([JJ)I
daikon.VarInfo:is_typeof()Z
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_esc()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_simplify()Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:format_simplify()Ljava.lang.String;
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.sequenceScalar.Member:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.Modulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:eltsGT([II)Z
daikon.VarInfoName.SizeOf:SizeOf(Ldaikon.VarInfoName;)V
jtb.JavaCharStream:getEndColumn()I
utilMDE.WeakIdentityHashMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.Invariant:logOn()Z
daikon.inv.binary.twoSequence.Reverse:format_simplify()Ljava.lang.String;
daikon.inv.unary.string.OneOfString:enabled()Z
daikon.inv.unary.stringsequence.EltOneOfString:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.EltLowerBound:enabled()Z
daikon.diff.Diff:diffInvMap(Ldaikon.diff.InvMap;Ldaikon.diff.InvMap;)Ldaikon.diff.RootNode;
daikon.inv.unary.sequence.EltwiseIntLessThan:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.stringsequence.EltOneOfString:add_mod_elem(Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.SubSequence:format_simplify()Ljava.lang.String;
daikon.diff.ConsequentPairComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.OrderedPairIterator:return1()LutilMDE.Pair;
daikon.inv.unary.sequence.EltLowerBound:format_simplify()Ljava.lang.String;
daikon.inv.binary.twoSequence.SeqSeqIntEqual:SeqSeqIntEqual(Ldaikon.PptSlice;Z)V
daikon.Quant:eq(DD)Z
daikon.VarInfoName.Subscript:Subscript(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;)V
daikon.Quantify.Constant:Constant(I)V
daikon.inv.binary.twoSequence.SubSequence:format_daikon()Ljava.lang.String;
utilMDE.Intern.SequenceAndIndices:equals(LutilMDE.Intern.SequenceAndIndices;)Z
daikon.test.FormatTestCase:getFormat(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.XorVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.ArraysMDE:sum([[I)I
daikon.VarInfoName:applyFunctionOfN(Ljava.lang.String;Ljava.util.List;)Ldaikon.VarInfoName;
daikon.inv.unary.scalar.UpperBound:enabled()Z
daikon.inv.Invariant:format_unimplemented(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntLessEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntLessEqual;
daikon.inv.unary.string.OneOfString:format_esc()Ljava.lang.String;
daikon.inv.Implication:predicate()Ldaikon.inv.Invariant;
utilMDE.TestUtilMDE:assert_arrays_equals([I[I)V
daikon.PptTopLevel:name()Ljava.lang.String;
utilMDE.Intern:numIntArrays()I
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_daikon()Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_simplify()Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_ioa()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.suppress.NISuppression:NISuppression(Ldaikon.suppress.NISuppressor;Ldaikon.suppress.NISuppressee;)V
jtb.syntaxtree.NodeListOptional:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.UtilMDE.NullableStringComparator:compare(Ljava.lang.String;Ljava.lang.String;)I
daikon.inv.binary.twoSequence.PairwiseIntEqual:enabled()Z
utilMDE.MathMDE:gcd(JJ)J
daikon.VarInfoName.Replacer:Replacer(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
daikon.VarInfoName.Simple:Simple(Ljava.lang.String;)V
daikon.inv.Invariant:format()Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_daikon()Ljava.lang.String;
daikon.Quant:collectObject_field(Ljava.lang.Object;Ljava.lang.String;)Ljava.lang.Object;
daikon.inv.unary.sequence.EltUpperBound:enabled()Z
daikon.inv.binary.twoSequence.SubSequence:get_proto()Ldaikon.inv.Invariant;
daikon.diff.Node:children()Ljava.util.Iterator;
daikon.inv.binary.twoSequence.Reverse:format_daikon()Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:format_daikon()Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:isWorthPrinting()Z
daikon.inv.binary.sequenceScalar.SeqIntEqual:check_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.Quant:lt(II)Z
daikon.inv.binary.sequenceScalar.SeqIntEqual:enabled()Z
daikon.inv.binary.twoScalar.IntEqual:enabled()Z
daikon.config.Configuration:apply(Ljava.lang.String;)V
daikon.VarComparabilityImplicit:alwaysComparable()Z
daikon.inv.unary.scalar.UpperBound:UpperBound(Ldaikon.PptSlice;)V
daikon.inv.binary.twoScalar.IntLessThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:memberOf(S[S)Z
daikon.Quant:eltsLtIndex([I)Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:PairwiseIntGreaterEqual(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:lt(DD)Z
daikon.VarInfoName.QuantifierVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.diff.PrintAllVisitor:printInvariant(Ldaikon.inv.Invariant;)V
daikon.test.FormatTestCase.SingleOutputTestCase:createTestOutput(Ldaikon.inv.Invariant;)Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_esc()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:enabled()Z
daikon.test.FormatTestCase:instantiateClass(Ljava.lang.Class;Ldaikon.PptSlice;[Ljava.lang.Class;[Ljava.lang.Object;)Ldaikon.inv.Invariant;
daikon.Quantify.SimplifyQuantification:get_index(I)Ljava.lang.String;
daikon.inv.Invariant.InvariantComparatorForPrinting:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.TestUtilMDE:int_iterator_array(Ljava.util.Iterator;)[I
daikon.VarInfoName.Slice:Slice(Ldaikon.VarInfoName.Elements;Ldaikon.VarInfoName;Ldaikon.VarInfoName;)V
utilMDE.MathMDE:check_first_and_last_nonmodulus([JLutilMDE.UtilMDE.RemoveFirstAndLastIterator;)Z
daikon.inv.OutputFormat:isJavaFamily()Z
daikon.Quant:eltwiseNotEqual([I)Z
daikon.inv.ternary.threeScalar.LinearTernaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:escapeNonASCII(Ljava.lang.String;)Ljava.lang.String;
utilMDE.MathMDE:missing_numbers([I)[I
daikon.config.Configuration:getInstance()Ldaikon.config.Configuration;
daikon.inv.binary.sequenceScalar.Member:enabled()Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:enabled()Z
daikon.diff.RootNode:accept(Ldaikon.diff.Visitor;)V
utilMDE.OrderedPairIterator:next()LutilMDE.Pair;
daikon.diff.Diff:setInvPairComparator(Ljava.util.Comparator;)V
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_esc()Ljava.lang.String;
jtb.syntaxtree.NodeListOptional:NodeListOptional()V
daikon.inv.unary.sequence.EltOneOf:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:computeConfidence()D
daikon.VarInfoName.QuantHelper:format_java_style([Ldaikon.VarInfoName;ZZLdaikon.inv.OutputFormat;)[Ljava.lang.String;
daikon.test.diff.DiffDummyInvariant:DiffDummyInvariant(Ldaikon.PptSlice;Ljava.lang.String;D)V
daikon.VarInfoName.Elements:repr_impl()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_simplify()Ljava.lang.String;
daikon.inv.unary.sequence.NoDuplicates:check_modified([JI)Ldaikon.inv.InvariantStatus;
jtb.JavaCharStream:getEndLine()I
jtb.JavaParser:jj_consume_token(I)Ljtb.Token;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;III)V
daikon.VarInfo:get_upper_bound()Ldaikon.Quantify.Term;
daikon.inv.binary.twoScalar.IntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.UtilMDE:join(Ljava.util.List;Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:is_boolean()Z
daikon.VarInfoName:name()Ljava.lang.String;
daikon.VarInfo:apply_subscript(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.Positive:Positive(Ldaikon.PptSlice;)V
utilMDE.FuzzyFloat:ne(DD)Z
daikon.VarInfo:get_base_array()Ldaikon.VarInfo;
daikon.VarInfo:has_typeof()Z
utilMDE.ArraysMDE:concat([I[I)[I
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.LowerBoundCore:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.string.OneOfString:format_daikon()Ljava.lang.String;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa6_0(JJJJ)I
daikon.Quant:lexEqual([I[I)Z
daikon.VarInfoName.Elements:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.binary.twoSequence.SubSequence:format_simplify_explicit()Ljava.lang.String;
daikon.inv.binary.twoString.TwoString:TwoString(Ldaikon.PptSlice;)V
daikon.VarInfo:simplifyNameAndBounds()[Ljava.lang.String;
daikon.diff.ConsequentCVFSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.MathMDE:mod_positive(JJ)J
utilMDE.MathMDE:modulus([I)[I
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_ioa()Ljava.lang.String;
utilMDE.SimpleLog.LongVal:LongVal(J)V
daikon.inv.unary.sequence.EltNonZero:format_ioa()Ljava.lang.String;
daikon.inv.ValueSet:ValueSet(I)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:PairwiseIntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.binary.sequenceScalar.SequenceScalar:SequenceScalar(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.NonZero:enabled()Z
utilMDE.Intern.StringArrayHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjStopAtPos(II)I
daikon.VarComparabilityImplicit:elementType()Ldaikon.VarComparability;
daikon.inv.unary.scalar.RangeInt.EqualOne:get_proto()Ldaikon.inv.Invariant;
jtb.syntaxtree.NodeToken:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.WeakHasherMap:entrySet()Ljava.util.Set;
daikon.inv.binary.twoScalar.TwoScalar:var2()Ldaikon.VarInfo;
daikon.inv.binary.sequenceScalar.Member:Member(Ldaikon.PptSlice;)V
utilMDE.MathMDE:bitwiseComplement(I)I
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice0:PptSlice0(Ldaikon.PptTopLevel;)V
daikon.VarInfoName:applyTypeOf()Ldaikon.VarInfoName;
daikon.test.VarInfoNameDriver.Slice:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.diff.UnionVisitor:getResult()Ldaikon.diff.InvMap;
utilMDE.MathMDE:sign(I)I
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_daikon()Ljava.lang.String;
daikon.test.FormatTestCase:FormatTestCase(Ljava.util.List;Ldaikon.inv.Invariant;)V
daikon.PptSlice0:hasImplication(Ldaikon.inv.Implication;)Z
daikon.VarInfoName.Elements:name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.test.Common:makeIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.binary.twoScalar.IntGreaterThan:IntGreaterThan(Ldaikon.PptSlice;)V
daikon.VarInfoName.Simple:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.Quant:eltsNotEqual([II)Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarInfoAux:VarInfoAux(Ljava.util.Map;)V
daikon.ModBitTracker:num_sets()I
utilMDE.OrderedPairIterator:return2()LutilMDE.Pair;
daikon.inv.unary.LowerBoundCore:computeProbability()D
daikon.diff.PptNode:getPpt2()Ldaikon.PptTopLevel;
utilMDE.Intern:internSubsequence([JII)[J
daikon.inv.unary.sequence.EltwiseIntLessThan:enabled()Z
daikon.PptSlice1:addInvariant(Ldaikon.inv.Invariant;)V
daikon.VarInfoName.FunctionOf:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.PptSlice1:arity()I
utilMDE.ArraysMDE:noDuplicates([I)Z
utilMDE.TestUtilMDE.1TestModulus:check(Ljava.util.Iterator;[I)V
daikon.inv.unary.LowerBoundCore:LowerBoundCore(Ldaikon.inv.Invariant;)V
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_daikon()Ljava.lang.String;
daikon.VarInfo:name()Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoString.TwoString:var1()Ldaikon.VarInfo;
utilMDE.WeakIdentityHashMap:get(Ljava.lang.Object;)Ljava.lang.Object;
daikon.suppress.NISuppression:NISuppression(Ldaikon.suppress.NISuppressor;Ldaikon.suppress.NISuppressor;Ldaikon.suppress.NISuppressee;)V
daikon.ModBitTracker:split(I)I
jtb.JavaParser:JavaParser(Ljava.io.InputStream;)V
daikon.VarInfoName.QuantifierVisitor:QuantifierVisitor(Ldaikon.VarInfoName;)V
daikon.suppress.NISuppressee:NISuppressee(Ljava.lang.Class;I)V
utilMDE.SimpleLog:SimpleLog(Z)V
daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.stringsequence.EltOneOfString:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:TokenLexicalActions(Ljtb.Token;)V
daikon.inv.unary.sequence.EltOneOf:is_hashcode()Z
daikon.inv.unary.scalar.LowerBound:get_proto()Ldaikon.inv.Invariant;
utilMDE.Intern.DoubleArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.sequenceScalar.Member:format_daikon()Ljava.lang.String;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.diff.PrintAllVisitor:bufPrint(Ljava.lang.String;)V
daikon.inv.unary.scalar.OneOfScalar:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.InvariantFormatTester:execute()Z
daikon.ProglangType:isPseudoArray()Z
daikon.inv.unary.scalar.OneOfScalar:format_esc()Ljava.lang.String;
utilMDE.ArraysMDE:indexOf([ZZ)I
utilMDE.Intern.SequenceAndIndicesHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:GreaterEqualZero(Ldaikon.PptSlice;)V
daikon.VarInfoName.QuantHelper:format_esc([Ldaikon.VarInfoName;Z)[Ljava.lang.String;
utilMDE.FuzzyFloat:indexOf([D[D)I
daikon.VarInfoName.FunctionOfN:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
jtb.JavaParser:jj_3_16()Z
daikon.test.VarInfoNameDriver.Prestate:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.EltLowerBound:EltLowerBound(Ldaikon.PptSlice;)V
utilMDE.WeakHasherMap:processQueue()V
daikon.inv.binary.twoScalar.IntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntLessThan:enabled()Z
daikon.inv.binary.twoScalar.TwoScalar:TwoScalar(Ldaikon.PptSlice;)V
daikon.test.diff.DiffDummyInvariant:isInteresting()Z
daikon.inv.Invariant:log(Ljava.lang.String;[Ljava.lang.Object;)Z
utilMDE.MathMDE:nonmodulus_strict_long(Ljava.util.Iterator;)[J
daikon.VarInfo:VarInfo(Ldaikon.FileIO.VarDefinition;)V
daikon.inv.unary.LowerBoundCore:wouldChange(J)Z
daikon.inv.binary.twoScalar.NumericInt.Divides:get_format_str(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.MathMDE:nonmodulus_strict_int(Ljava.util.Iterator;)[I
utilMDE.Options.OptionInfo:OptionInfo(LutilMDE.Options;Ljava.lang.reflect.Field;LutilMDE.Option;Ljava.lang.Object;)V
daikon.VarInfoName.Prestate:Prestate(Ldaikon.VarInfoName;)V
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;Ljava.lang.String;)Z
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:lte(II)Z
utilMDE.WeakHasherMap.WeakKey:equals(Ljava.lang.Object;)Z
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_ioa()Ljava.lang.String;
jtb.JavaParser:CompilationUnit()Ljtb.syntaxtree.CompilationUnit; | STATEMENT | 5303 | stmt -> ;
daikon.Quant:eq(JJ)Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:check_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.TestUtilMDE.1TestModulus:check([I[I)V
daikon.test.VarInfoNameDriver.Parse:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.Quantify.IOAQuantification:IOAQuantification(Ldaikon.VarInfo;Ldaikon.VarInfo;)V
daikon.VarInfoName:jml_name(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.stringsequence.EltOneOfString:enabled()Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:SeqIndexIntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.binary.twoSequence.TwoSequence:var2()Ldaikon.VarInfo;
daikon.VarInfoName:applyFunction(Ljava.lang.String;)Ldaikon.VarInfoName;
daikon.Quantify.QuantFlags:adjacent()Ljava.util.EnumSet;
daikon.VarInfoName.Simple:simplify_name_impl(Z)Ljava.lang.String;
daikon.ProglangType:isIntegral()Z
utilMDE.Intern:internSubsequence([III)[I
daikon.Quant:eltwiseEqual([I)Z
utilMDE.ArraysMDE:toString([I)Ljava.lang.String;
daikon.Quantify.IOAQuantification:getFreeVarName(I)Ljava.lang.String;
daikon.inv.Invariant:simplify_format_string(Ljava.lang.String;)Ljava.lang.String;
daikon.PptTopLevel.ViewsIteratorIterator:hasNext()Z
daikon.inv.binary.twoSequence.SubSequence:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfo:simplify_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.ProglangType:intern(Ljava.lang.String;I)Ldaikon.ProglangType;
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;I)Ldaikon.VarComparability;
utilMDE.ArraysMDE:indexOf([Ljava.lang.Object;[Ljava.lang.Object;)I
daikon.Quantify.SimplifyQuantification:SimplifyQuantification(Ljava.util.EnumSet;[Ldaikon.VarInfo;)V
daikon.VarInfo:esc_quantify([Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.Quant:pairwiseNotEqual([I[I)Z
daikon.VarInfoName.Simple:isLiteralConstant()Z
daikon.diff.Diff:setAllInvComparators(Ljava.util.Comparator;)V
daikon.inv.unary.stringsequence.EltOneOfString:format_ioa()Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.ArraysMDE:sorted([I)Z | CONSTANT | 53880 | 0 -> -1
daikon.test.VarInfoNameDriver.Size:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.sequence.EltOneOf:format_simplify()Ljava.lang.String;
daikon.diff.Diff:setInvSortComparator2(Ljava.util.Comparator;)V
daikon.inv.unary.sequence.SeqIndexIntNonEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:format_simplify()Ljava.lang.String;
daikon.diff.InvMap:pptIterator()Ljava.util.Iterator;
daikon.VarComparabilityNone:elementType()Ldaikon.VarComparability;
utilMDE.Intern:isInterned(Ljava.lang.Object;)Z
daikon.inv.unary.sequence.EltwiseIntLessThan:check_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.OrderedPairIterator:hasNext()Z
daikon.inv.binary.sequenceScalar.Member:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compareImplications(Ldaikon.inv.Implication;Ldaikon.inv.Implication;)I
daikon.Quantify.IOAQuantification:getMembershipRestriction(I)Ljava.lang.String;
daikon.test.VarInfoNameDriver.FunctionOfN:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.unary.string.OneOfString:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinary:enabled()Z
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:get_proto()Ldaikon.inv.Invariant;
daikon.suppress.NISuppressor:NISuppressor(IILjava.lang.Class;)V
daikon.VarInfoName.ElementsFinder:elems()Ldaikon.VarInfoName.Elements;
daikon.inv.unary.stringsequence.EltOneOfString:is_type()Z
daikon.inv.unary.scalar.NonZero:isSameFormula(Ldaikon.inv.Invariant;)Z
jtb.JavaCharStream:GetImage()Ljava.lang.String;
jtb.JavaCharStream:UpdateLineColumn(C)V
utilMDE.WeakIdentityHashMap:remove(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.AbstractVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ljava.lang.Object;
utilMDE.UtilMDE:escapeNonASCII(C)Ljava.lang.String;
daikon.inv.binary.twoString.StringEqual:check_modified(Ljava.lang.String;Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.VarInfo:domainTypeIOA()Ljava.lang.String;
daikon.ProglangType:isScalar()Z
daikon.inv.binary.twoScalar.LinearBinaryCore:maxsep_point([J[J)[I
daikon.inv.unary.sequence.EltNonZero:is_pointer()Z
daikon.config.Configuration:apply(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;)V
daikon.inv.Invariant:instantiate(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.test.ProglangTypeTest:longarrcomp(Ljava.lang.Object;[J)Z
daikon.inv.unary.LowerBoundCore:calc_modulus()J
daikon.Quant:subsetOf(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.UnaryInvariant:UnaryInvariant(Ldaikon.PptSlice;)V
utilMDE.WeakIdentityHashMap:hasher(Ljava.lang.Object;)I
daikon.inv.unary.sequence.NoDuplicates:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.Integer;)Ljava.lang.Integer;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getLast()Ljava.lang.Object;
daikon.inv.binary.twoSequence.Reverse:enabled()Z
daikon.inv.unary.scalar.OneOfScalar:is_boolean()Z
daikon.Quant:slice([III)[I
daikon.VarInfoName:simplify_name()Ljava.lang.String;
daikon.Quant:memberOf(J[J)Z
daikon.diff.XorVisitor:visit(Ldaikon.diff.InvNode;)V
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.Invariant:Invariant(Ldaikon.PptSlice;)V
daikon.diff.InvMap:add(Ldaikon.PptTopLevel;Ldaikon.inv.Invariant;)V
daikon.VarInfoName.Simple:simplify_name_impl(Ljava.lang.String;Z)Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:enabled()Z
utilMDE.ArraysMDE:isSubarray([Ljava.lang.Object;[Ljava.lang.Object;I)Z
daikon.PptTopLevel.ViewsIteratorIterator:next()Ljava.util.Iterator;
daikon.inv.unary.sequence.OneOfSequence:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.LowerBoundCore:prob_is_ge(DD)D
jtb.JavaParserTokenManager:SkipLexicalActions(Ljtb.Token;)V
utilMDE.WeakIdentityHashMap:indexFor(II)I
utilMDE.ArraysMDE:indexOf([J[J)I
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:enabled()Z
daikon.inv.binary.twoScalar.IntEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.VarComparabilityImplicit:comparable(Ldaikon.VarComparabilityImplicit;Ldaikon.VarComparabilityImplicit;)Z
daikon.test.diff.DiffDummyInvariant:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.diff.DetailedStatisticsVisitor:determineRelationship(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:getFirst()Ljava.lang.Object;
daikon.Quant:eltsEqualIndex([I)Z
utilMDE.WeakIdentityHashMap:expungeStaleEntries()V
daikon.Quant:eq(FF)Z
daikon.inv.unary.scalar.LowerBound:enabled()Z
daikon.inv.unary.sequence.EltNonZero:EltNonZero(Ldaikon.PptSlice;)V
daikon.Quant:lexGT([I[I)Z
daikon.VarComparabilityImplicit:parse(Ljava.lang.String;Ldaikon.ProglangType;)Ldaikon.VarComparabilityImplicit;
daikon.inv.binary.twoSequence.PairwiseIntEqual:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.test.diff.DiffTester:newIntVarInfo(Ljava.lang.String;)Ldaikon.VarInfo;
daikon.VarInfoName.Field:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:ConsequentSortComparator(Ljava.util.Comparator;)V
daikon.VarInfoName.Add:esc_name_impl()Ljava.lang.String;
daikon.ProglangType:isString()Z
daikon.VarInfoName:equals(Ldaikon.VarInfoName;)Z
daikon.PptTopLevel:getInvariants()Ljava.util.List;
daikon.ProglangType:baseIsScalar()Z
daikon.inv.unary.scalar.OneOfScalar:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.unary.scalar.RangeInt.GreaterEqualZero:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:get_all_simple_names()Ljava.util.List;
daikon.Quant:eltwiseGTE([I)Z
daikon.inv.Invariant:prob_and(DDD)D
daikon.inv.unary.sequence.EltOneOf:format_ioa()Ljava.lang.String;
daikon.inv.binary.twoSequence.SubSequence:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.Quantify:quantify([Ldaikon.VarInfo;)[Ldaikon.Quantify.QuantifyReturn;
utilMDE.WeakIdentityHashMap:WeakIdentityHashMap()V
daikon.inv.unary.sequence.EltwiseIntLessThan:format_daikon()Ljava.lang.String;
utilMDE.MathMDE:modulus_strict_int(Ljava.util.Iterator;Z)[I
daikon.inv.ValueSet.ValueSetScalar:ValueSetScalar(I)V
daikon.inv.unary.scalar.SingleScalar:SingleScalar(Ldaikon.PptSlice;)V
daikon.Quantify.FreeVar:simplify_name()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:PairwiseIntLessThan(Ldaikon.PptSlice;)V
utilMDE.MathMDE:nonmodulus_nonstrict([I)[I
daikon.inv.ternary.threeScalar.LinearTernaryCore:LinearTernaryCore(Ldaikon.inv.Invariant;)V
daikon.Quant:lexLT([I[I)Z
daikon.test.LinearTernaryCoreTest:one_test_format(DDDDLjava.lang.String;)V
daikon.inv.binary.twoSequence.Reverse:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
utilMDE.WeakHasherMap:put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.Intern.LongArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
utilMDE.UtilMDE:sortList(Ljava.util.List;Ljava.util.Comparator;)Ljava.util.List;
jtb.JavaParser:jj_ntk()I
daikon.inv.unary.scalar.NonModulus:updateResults()V
daikon.inv.unary.scalar.LowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.Quant:isIntegralType(Ljava.lang.Class;)Z
daikon.inv.unary.scalar.UpperBound:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.SizeOf:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:size()I
utilMDE.Intern:intern(Ljava.lang.Object;)Ljava.lang.Object;
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_daikon()Ljava.lang.String;
jtb.JavaParser:jj_2_16(I)Z
utilMDE.ArraysMDE.ComparableArrayComparatorLexical:compare([Ljava.lang.Comparable;[Ljava.lang.Comparable;)I
utilMDE.UtilMDE:unescapeNonJava(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.EltwiseIntLessThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.LimitedSizeIntSet:toString()Ljava.lang.String;
utilMDE.WeakHasherMap:get(Ljava.lang.Object;)Ljava.lang.Object;
utilMDE.WeakIdentityHashMap.Entry:Entry(Ljava.lang.Object;Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;ILutilMDE.WeakIdentityHashMap.Entry;)V
daikon.inv.binary.sequenceScalar.SequenceScalar:sclvar()Ldaikon.VarInfo;
daikon.test.FormatTestCase:getTypes(Ljava.lang.String;)[Ldaikon.ProglangType;
daikon.inv.unary.sequence.EltNonZero:format_simplify()Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.inv.unary.LowerBoundCore:prob_or(DD)D
utilMDE.ArraysMDE:min([I)I
daikon.inv.binary.twoSequence.PairwiseIntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.diff.PrintAllVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.inv.binary.twoScalar.LinearBinary:instantiate_ok([Ldaikon.VarInfo;)Z
jtb.syntaxtree.PackageDeclaration:PackageDeclaration(Ljtb.syntaxtree.NodeToken;Ljtb.syntaxtree.Name;Ljtb.syntaxtree.NodeToken;)V
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_ioa()Ljava.lang.String;
daikon.inv.binary.twoScalar.LinearBinaryCore:add_modified(JJI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.LinearBinary:add_modified(JJI)Ldaikon.inv.InvariantStatus;
daikon.PptName:isCombinedExitPoint()Z
jtb.JavaParserTokenManager:jjStartNfa_0(IJJ)I
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:add_modified([J[JI)Ldaikon.inv.InvariantStatus;
jtb.JavaParserTokenManager:jjMoveNfa_1(II)I
utilMDE.UtilMDE.RemoveFirstAndLastIterator:RemoveFirstAndLastIterator(Ljava.util.Iterator;)V
daikon.PptMap:add(Ldaikon.PptTopLevel;)V
utilMDE.MathMDE:nonmodulus_strict_long_internal(Ljava.util.Iterator;)[J
daikon.inv.binary.twoScalar.LinearBinaryCore:formatTerm(DLjava.lang.String;Z)Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:enabled()Z
utilMDE.ArraysMDE.LongArrayComparatorLexical:compare([J[J)I
daikon.test.FormatTestCase:getGoalOutput(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.WeakHasherMap.EntrySet.1:next()Ljava.util.Map.Entry;
daikon.inv.binary.twoSequence.Reverse:format_ioa()Ljava.lang.String;
daikon.VarInfoAux:getDefault()Ldaikon.VarInfoAux;
daikon.test.FormatTestCase.SingleOutputTestCase:performTest(Ldaikon.inv.Invariant;)Z
daikon.inv.unary.sequence.EltOneOf:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.IntArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.test.LinearTernaryCoreTest:set_cache(Ldaikon.inv.ternary.threeScalar.LinearTernaryCore;IJJJ)V
jtb.syntaxtree.ImportDeclaration:setParent(Ljtb.syntaxtree.Node;)V
utilMDE.TestUtilMDE.1TestNonModulus:check_nonstrict([I[I)V
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.binary.twoSequence.Reverse:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.Invariant:isSameInvariant(Ldaikon.inv.Invariant;)Z
utilMDE.MathMDE:negate(I)I
daikon.VarInfoName.QuantifierVisitor:unquants()Ljava.util.Set;
daikon.diff.MinusVisitor:shouldAdd(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName.Add:name_impl()Ljava.lang.String;
daikon.inv.unary.sequence.NoDuplicates:NoDuplicates(Ldaikon.PptSlice;)V
daikon.diff.Node:getUserRight()Ljava.lang.Object;
daikon.Quant:pairwiseDivides([I[I)Z
daikon.suppress.NISuppressor:swap()Ldaikon.suppress.NISuppressor;
daikon.inv.unary.sequence.SeqIndexIntNonEqual:SeqIndexIntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.string.SingleString:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.Positive:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName:repr()Ljava.lang.String;
daikon.inv.Invariant.ClassVarnameComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
utilMDE.FuzzyFloat:isSubset([D[D)Z
daikon.inv.unary.sequence.EltwiseIntLessThan:format_esc()Ljava.lang.String;
daikon.Quantify.IOAQuantification:IOAQuantification([Ldaikon.VarInfo;)V
daikon.inv.unary.scalar.Modulus:add_modified(JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.sequenceScalar.SequenceScalar:scl_index()I
daikon.inv.unary.scalar.OneOfScalar:is_hashcode()Z
daikon.diff.Node:Node()V
daikon.VarInfo:name_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quantify.SimplifyQuantification:get_closer()Ljava.lang.String;
daikon.suppress.NISuppressor:toString()Ljava.lang.String;
daikon.inv.binary.twoString.TwoString:valid_types([Ldaikon.VarInfo;)Z
daikon.ProglangType:isPointerFileRep()Z
daikon.test.VarInfoNameDriver.JMLName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.Invariant:format_too_few_samples(Ldaikon.inv.OutputFormat;Ljava.lang.String;)Ljava.lang.String;
daikon.diff.PrintAllVisitor:printConfidence(Ldaikon.inv.Invariant;)V
daikon.diff.PptNode:getPpt1()Ldaikon.PptTopLevel;
daikon.inv.unary.sequence.EltUpperBound:format_simplify()Ljava.lang.String;
daikon.VarInfoName.Prestate:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.ProglangType:myParseLong(Ljava.lang.String;)J
utilMDE.Intern.LongArrayHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.unary.string.OneOfString:get_proto()Ldaikon.inv.Invariant;
daikon.Quant:pairwiseEqual([I[I)Z
utilMDE.WeakHasherMap:WeakKeyCreate(Ljava.lang.Object;Ljava.lang.ref.ReferenceQueue;)LutilMDE.WeakHasherMap.WeakKey;
daikon.inv.unary.string.OneOfString:sort_rep()V
daikon.inv.Invariant:justified()Z
daikon.ProglangType:elementIsIntegral()Z
daikon.VarInfoName.Subscript:java_family_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
jtb.JavaCharStream:JavaCharStream(Ljava.io.Reader;III)V
daikon.VarInfoName.Field:repr_impl()Ljava.lang.String;
daikon.inv.unary.stringsequence.SingleStringSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.test.ModBitTrackerTest:oneModBitTrackerTest(IID)V
daikon.inv.binary.sequenceScalar.SeqIntEqual:format_daikon()Ljava.lang.String; | RETURN | 4050 | return null
daikon.inv.binary.twoString.TwoString:var2()Ldaikon.VarInfo;
utilMDE.TestUtilMDE:assert_arrays_equals([D[D)V
daikon.PptTopLevel.CondIterator:next()Ldaikon.PptConditional;
daikon.inv.unary.scalar.Positive:enabled()Z
utilMDE.Intern:intern([I)[I
daikon.inv.unary.sequence.SeqIndexIntNonEqual:add_modified([JI)Ldaikon.inv.InvariantStatus;
utilMDE.Intern.IntArrayHasher:equals(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.Quant:subsetOf([D[D)Z
daikon.inv.binary.twoSequence.Reverse:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.sequence.NoDuplicates:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:getClass(Ljava.lang.String;)Ljava.lang.Class;
daikon.inv.unary.sequence.EltLowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.PptSlice0:initInvariantsSeen()V
daikon.inv.binary.twoSequence.PairwiseIntLessEqual:format_simplify()Ljava.lang.String;
daikon.inv.unary.scalar.OneOfScalar:format_daikon()Ljava.lang.String;
daikon.VarInfo:simplify_name()Ljava.lang.String;
daikon.Quant:eltsGTE([II)Z
utilMDE.FuzzyFloat:eq(DD)Z
daikon.Quantify.IOAQuantification:IOAQuantification(Ldaikon.VarInfo;)V
daikon.inv.binary.sequenceScalar.SequenceScalar:seq_first()Z
daikon.Quant:lexNotEqual([I[I)Z
utilMDE.Intern.SequenceAndIndices:SequenceAndIndices(Ljava.lang.Object;II)V
daikon.inv.unary.sequence.EltLowerBound:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.scalar.OneOfScalar:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.FormatTestCase:createSlice([Ldaikon.VarInfo;Ldaikon.PptTopLevel;)Ldaikon.PptSlice;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_simplify()Ljava.lang.String;
daikon.inv.unary.sequence.NoDuplicates:format_ioa()Ljava.lang.String;
daikon.Debug:log(Ljava.lang.Class;Ldaikon.Ppt;[Ldaikon.VarInfo;Ljava.lang.String;)Z
utilMDE.Intern.IntegerHasher:hashCode(Ljava.lang.Object;)I
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa0_0()I
daikon.test.TestQuant.Foo2:set_xstatic(Ljava.lang.Object;)V
jtb.Token:newToken(I)Ljtb.Token;
utilMDE.UtilMDE.RemoveFirstAndLastIterator:next()Ljava.lang.Object;
daikon.VarInfoName.SimpleNamesVisitor:SimpleNamesVisitor(Ldaikon.VarInfoName;)V
utilMDE.Intern:internedLong(Ljava.lang.String;)Ljava.lang.Long;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa1_0(JJ)I
daikon.inv.binary.twoScalar.IntLessEqual:IntLessEqual(Ldaikon.PptSlice;)V
daikon.Quantify.IOAQuantification:getFreeVar(I)Ldaikon.Quantify.Term;
daikon.suppress.NISuppressee:NISuppressee(Ljava.lang.Class;Z)V
daikon.inv.unary.LowerBoundCore:computeConfidence()D
jtb.JavaParserTokenManager:JavaParserTokenManager(Ljtb.JavaCharStream;)V
daikon.config.Configuration:apply(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
daikon.test.FormatTestCase:parseGoal(Ljava.lang.String;)Ljava.lang.String;
daikon.diff.ConsequentSortComparator:compare(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)I
daikon.diff.XorVisitor:shouldAddInv2(Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)Z
daikon.VarInfoName:esc_name()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntEqual:IntEqual(Ldaikon.PptSlice;)V
daikon.PptSlice1:num_samples()I
daikon.VarInfo:esc_quantify(Z[Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.VarInfoName.TypeOf:TypeOf(Ldaikon.VarInfoName;)V
daikon.inv.unary.sequence.OneOfSequence:add_modified([JI)Ldaikon.inv.InvariantStatus;
daikon.ValueTuple:tuplemodHasMissingNonsensical(I)Z
daikon.inv.binary.twoScalar.LinearBinaryCore:maxsep_indices()[I
daikon.VarComparabilityImplicit:indexType(I)Ldaikon.VarComparability;
utilMDE.OrderedPairIterator:setnext2()V
daikon.VarInfoName.PostPreConverter:PostPreConverter()V
jtb.syntaxtree.NodeListOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.inv.binary.twoScalar.IntNonEqual:IntNonEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.EltNonZero:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.IntEqual:get_proto()Ldaikon.inv.binary.twoScalar.IntEqual;
daikon.inv.binary.sequenceScalar.SeqIntEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quant:subsetOf([F[D)Z
utilMDE.Intern:intern([J)[J
daikon.inv.binary.twoScalar.LinearBinaryCore:LinearBinaryCore(Ldaikon.inv.Invariant;)V
jtb.JavaParser:Name()Ljtb.syntaxtree.Name;
daikon.test.ModBitTrackerTest:checkModBitTracker(Ldaikon.ModBitTracker;[Ljava.util.BitSet;)V
daikon.Quant:pairwiseSquare([I[I)Z
daikon.Quant:eltsEqual([II)Z
daikon.inv.binary.twoSequence.Reverse:Reverse(Ldaikon.PptSlice;)V
daikon.Quantify.IOAQuantification:getQuantifierExp()Ljava.lang.String;
utilMDE.Intern.DoubleHasher:hashCode(Ljava.lang.Object;)I
daikon.VarInfoName.TypeOf:name_impl()Ljava.lang.String;
daikon.VarInfo:isIOASet()Z
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa5_0(JJJJ)I
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_esc()Ljava.lang.String;
daikon.inv.binary.twoScalar.IntGreaterThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.sequence.OneOfSequence:enabled()Z
daikon.test.FormatTestCase.SingleOutputTestCase:SingleOutputTestCase(Ljava.lang.reflect.Method;[Ljava.lang.Object;Ljava.lang.String;ILjava.lang.String;)V
daikon.PptTopLevel:num_samples(Ldaikon.VarInfo;)I
daikon.inv.unary.stringsequence.EltOneOfString:check_mod_elem(Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoScalar.LinearBinary:LinearBinary(Ldaikon.PptSlice;)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:check_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.EltNonZero:enabled()Z
daikon.inv.binary.sequenceScalar.SeqIntEqual:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:isIOAArray()Z
daikon.VarInfoName.Add:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.unary.sequence.EltOneOf:add_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.ModBitTracker:add(Ldaikon.ValueTuple;I)V
utilMDE.TestUtilMDE:lsis_add_elts(ILutilMDE.LimitedSizeIntSet;)V
daikon.inv.ternary.threeScalar.LinearTernaryCore:format_using(Ldaikon.inv.OutputFormat;Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;DDDD)Ljava.lang.String;
daikon.Quantify.ESCQuantification:bld_quant(Ldaikon.VarInfo;Ldaikon.Quantify.Term;)Ljava.lang.String;
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:SeqIndexIntGreaterThan()V
daikon.inv.binary.twoScalar.LinearBinaryCore:set_bi_linear(JJJJ)Ldaikon.inv.InvariantStatus;
daikon.ModBitTracker:num_samples()I
daikon.VarInfo:java_name()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:enabled()Z
daikon.VarInfoName.Elements:esc_name_impl(Ljava.lang.String;)Ljava.lang.String;
daikon.tools.jtb.AnnotateVisitor:getTabbedIndex(ILjava.lang.String;)I
daikon.inv.ValueSet.ValueSetString:ValueSetString(I)V
daikon.inv.unary.stringsequence.EltOneOfString:subarray_rep()Ljava.lang.String;
daikon.inv.unary.string.OneOfString:check_mod_elem(Ljava.lang.String;I)Ldaikon.inv.InvariantStatus;
daikon.Quantify.QuantFlags:distinct()Ljava.util.EnumSet;
daikon.VarInfo:esc_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.sequence.EltUpperBound:EltUpperBound(Ldaikon.PptSlice;)V
daikon.VarInfoName:parse(Ljava.lang.String;)Ldaikon.VarInfoName; | RETURN | 4209 | return null
daikon.VarInfoName.Subscript:esc_name_impl()Ljava.lang.String;
daikon.ProglangType:parse(Ljava.lang.String;)Ldaikon.ProglangType;
jtb.JavaCharStream:JavaCharStream(Ljava.io.InputStream;II)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:enabled()Z
utilMDE.Intern:intern(Ljava.lang.Long;)Ljava.lang.Long;
daikon.inv.binary.twoString.StringEqual:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.Quantify.IOAQuantification:getVarIndexedString(I)Ljava.lang.String;
jtb.JavaParserTokenManager:MoreLexicalActions()V
daikon.diff.XorVisitor:visit(Ldaikon.diff.PptNode;)V
daikon.Quant:eltsLTE([II)Z
daikon.inv.unary.stringsequence.SingleStringSequence:SingleStringSequence(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.EqualMinusOne:get_proto()Ldaikon.inv.Invariant;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoScalar.LinearBinaryCore:format_simplify(Ljava.lang.String;Ljava.lang.String;DDD)Ljava.lang.String;
daikon.inv.Implication:consequent()Ldaikon.inv.Invariant;
daikon.VarInfoName.SimpleNamesVisitor:visitSimple(Ldaikon.VarInfoName.Simple;)Ldaikon.VarInfoName.NoReturnValue;
daikon.inv.OutputFormat:get(Ljava.lang.String;)Ldaikon.inv.OutputFormat;
daikon.inv.binary.sequenceScalar.Member:format_esc()Ljava.lang.String;
utilMDE.ArraysMDE:isSubarray([I[II)Z
daikon.Quantify:get_flags(Z)Ljava.util.EnumSet;
daikon.VarInfo:get_ioa_quantify(Ldaikon.VarInfo;Ldaikon.VarInfo;)Ldaikon.Quantify.IOAQuantification;
utilMDE.Intern.LongHasher:hashCode(Ljava.lang.Object;)I
daikon.inv.binary.twoScalar.IntNonEqual:enabled()Z
daikon.VarInfoName:applySlice(Ldaikon.VarInfoName;Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
jtb.JavaParserTokenManager:jjStartNfaWithStates_0(III)I
utilMDE.Intern.SequenceAndIndices:hashCode()I
daikon.VarInfoName.Subscript:repr_impl()Ljava.lang.String;
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_daikon()Ljava.lang.String;
daikon.Quant:collectint(Ljava.lang.Object;Ljava.lang.String;)[I
daikon.VarInfoName.SizeOf:simplify_name_impl(Z)Ljava.lang.String;
utilMDE.FuzzyFloat.DoubleArrayComparatorLexical:compare([D[D)I
jtb.syntaxtree.NodeSequence:NodeSequence(I)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:check_modified([J[JI)Ldaikon.inv.InvariantStatus;
daikon.test.ModBitTrackerTest:makeModBitTracker([Ljava.util.BitSet;)Ldaikon.ModBitTracker;
daikon.inv.unary.sequence.EltOneOf:subarray_rep()Ljava.lang.String;
daikon.inv.Invariant:simplify_format_long(J)Ljava.lang.String;
daikon.VarInfoName.Subscript:simplify_name_impl(Z)Ljava.lang.String;
daikon.inv.binary.sequenceScalar.SeqIntEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Field:Field(Ldaikon.VarInfoName;Ljava.lang.String;)V
utilMDE.ArraysMDE:subarray([III)[I
daikon.inv.binary.sequenceScalar.SeqIntLessThan:get_proto()Ldaikon.inv.Invariant;
daikon.ValueTuple:isMissingNonsensical(I)Z
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.PptTopLevel.CondIterator:hasNext()Z
daikon.inv.unary.sequence.EltNonZero:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.Joiner:Joiner(Ldaikon.PptSlice;Ldaikon.inv.Invariant;Ldaikon.inv.Invariant;)V
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa3_0(JJJJ)I
daikon.Quant:pairwiseLTE([I[I)Z
daikon.Quant:sameLength([I[I)Z
daikon.inv.unary.scalar.UpperBound:instantiate_ok([Ldaikon.VarInfo;)Z
utilMDE.Intern:internedInteger(Ljava.lang.String;)Ljava.lang.Integer;
jtb.JavaParserTokenManager:jjMoveNfa_0(II)I
daikon.inv.binary.twoScalar.IntLessThan:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfoName.Replacer:replace(Ldaikon.VarInfoName;)Ldaikon.VarInfoName;
daikon.VarInfoName:toString()Ljava.lang.String;
daikon.VarInfoName.FunctionOfN:repr_impl()Ljava.lang.String;
daikon.test.FormatTestCase:getVarInfo(Ldaikon.ProglangType;I)Ldaikon.VarInfo;
daikon.inv.binary.sequenceScalar.SequenceScalar:seq_index()I
daikon.PptSlice1:PptSlice1(Ldaikon.PptTopLevel;[Ldaikon.VarInfo;)V
daikon.PptTopLevel.ViewsIteratorIterator:ViewsIteratorIterator(Ldaikon.PptTopLevel;)V
daikon.suppress.NISuppressionSet:swap()Ldaikon.suppress.NISuppressionSet;
daikon.VarInfoAux:getFlag(Ljava.lang.String;)Z
daikon.inv.binary.twoScalar.TwoScalar:var1()Ldaikon.VarInfo;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.Quant:lexLTE([I[I)Z
utilMDE.WeakIdentityHashMap:maskNull(Ljava.lang.Object;)Ljava.lang.Object;
daikon.diff.MinusVisitor:visit(Ldaikon.diff.PptNode;)V
utilMDE.ArraysMDE:isSubarray([J[JI)Z
daikon.inv.unary.scalar.RangeInt:RangeInt(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.RangeInt.Bound0_63:get_proto()Ldaikon.inv.Invariant;
utilMDE.FuzzyFloat:isElemMatch([D[D)Z
daikon.VarInfo:is_direct_non_slice_array()Z
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_simplify()Ljava.lang.String;
utilMDE.TestUtilMDE.1TestModulus:check_iterator([I[I)V
daikon.inv.unary.sequence.SingleScalarSequence:var()Ldaikon.VarInfo;
daikon.inv.unary.stringsequence.EltOneOfString:EltOneOfString(Ldaikon.PptSlice;)V
daikon.test.ModBitTrackerTest:makeBitSets(IID)[Ljava.util.BitSet;
daikon.inv.unary.scalar.OneOfScalar:check_mod_elem(JI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName.Add:Add(Ldaikon.VarInfoName;I)V
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.ternary.threeScalar.LinearTernaryCore.Point:Point(JJJ)V
utilMDE.MathMDE.MissingNumbersIteratorLong:hasNext()Z
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.Positive:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.VarInfo:simplify_name(Ljava.lang.String;)Ljava.lang.String;
utilMDE.UtilMDE:create_combinations(III)Ljava.util.ArrayList;
daikon.VarInfoName.FunctionOf:java_family_name_impl(Ldaikon.inv.OutputFormat;Ldaikon.VarInfo;)Ljava.lang.String;
daikon.VarInfo:simplify_quantify(Ljava.util.EnumSet;[Ldaikon.VarInfo;)[Ljava.lang.String;
daikon.VarInfoName.Slice:accept(Ldaikon.VarInfoName.Visitor;)Ljava.lang.Object;
daikon.Quant:union([I[I)[I
daikon.diff.InvNode:getInv2()Ldaikon.inv.Invariant;
utilMDE.MathMDE.MissingNumbersIteratorLong:MissingNumbersIteratorLong(Ljava.util.Iterator;Z)V
daikon.test.VarComparabilityTest:parsei(Ljava.lang.String;)Ldaikon.VarComparability;
utilMDE.WeakHasherMap.WeakKey:WeakKey(LutilMDE.WeakHasherMap;Ljava.lang.Object;)V
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.test.VarInfoNameDriver.TypeOf:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.suppress.NISuppressionSet:NISuppressionSet([Ldaikon.suppress.NISuppression;)V
jtb.syntaxtree.NodeOptional:addNode(Ljtb.syntaxtree.Node;)V
daikon.ValueTuple:tuplemodHasMissingFlow(I)Z
daikon.VarInfoName.ElementsFinder:inPre()Z
jtb.syntaxtree.NodeToken:addSpecial(Ljtb.syntaxtree.NodeToken;)V
daikon.VarInfoName.SizeOf:name_impl()Ljava.lang.String;
daikon.VarInfoAux:equals(Ldaikon.VarInfoAux;)Z
daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual:check_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.diff.PrintDifferingInvariantsVisitor:PrintDifferingInvariantsVisitor(Ljava.io.PrintStream;ZZZ)V
utilMDE.OrderedPairIterator:OrderedPairIterator(Ljava.util.Iterator;Ljava.util.Iterator;)V
daikon.VarInfoName.FunctionOf:FunctionOf(Ljava.lang.String;Ldaikon.VarInfoName;)V
daikon.inv.binary.sequenceScalar.Member:add_modified([JJI)Ldaikon.inv.InvariantStatus;
daikon.VarInfoName:applyField(Ljava.lang.String;)Ldaikon.VarInfoName;
utilMDE.Intern:internStrings([Ljava.lang.String;)V
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_esc()Ljava.lang.String;
utilMDE.WeakIdentityHashMap:eq(Ljava.lang.Object;Ljava.lang.Object;)Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.unary.scalar.NonModulus:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.OneOfScalar:runValue(JIZ)Ldaikon.inv.InvariantStatus;
daikon.inv.binary.sequenceScalar.SeqIntGreaterThan:SeqIntGreaterThan(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.OneOfSequence:get_proto()Ldaikon.inv.Invariant;
daikon.VarInfo:get_base_array_hashcode()Ldaikon.VarInfo;
daikon.PptSlice2:arity()I
daikon.inv.unary.scalar.NonZero:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.unary.LowerBoundCore:prob_and(DD)D
daikon.inv.unary.scalar.LowerBound:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoSequence.TwoSequence:valid_types([Ldaikon.VarInfo;)Z
daikon.inv.unary.sequence.EltOneOf:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.WeakHasherMap:keyHashCode(Ljava.lang.Object;)I
daikon.Ppt.NameComparator:compare(Ldaikon.PptTopLevel;Ldaikon.PptTopLevel;)I
utilMDE.Options:parse_option(Ljava.lang.String;)[Ljava.lang.String;
daikon.ModBitTracker:get(I)Ljava.util.BitSet;
daikon.VarInfoName.SizeOf:repr_impl()Ljava.lang.String;
daikon.test.InvariantFormatTester:getNextRealLine(Ljava.io.BufferedReader;)Ljava.lang.String;
daikon.inv.unary.scalar.UpperBound:get_proto()Ldaikon.inv.Invariant;
jtb.JavaParserTokenManager:jjMoveStringLiteralDfa4_0(JJJJ)I
daikon.Quant:lexGTE([I[I)Z
daikon.inv.binary.twoSequence.PairwiseIntEqual:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.VarInfoName.Add:jml_name_impl(Ldaikon.VarInfo;)Ljava.lang.String;
daikon.Quant:noDups([I)Z
utilMDE.Options.OptionInfo:argument_required()Z
daikon.inv.binary.twoScalar.TwoScalar:get_swap()Z
daikon.inv.unary.sequence.SeqIndexIntGreaterThan:format_ioa()Ljava.lang.String;
daikon.config.Configuration:apply(Ljava.lang.reflect.Field;Ljava.lang.String;)V
daikon.inv.binary.twoString.StringEqual:StringEqual(Ldaikon.PptSlice;)V
daikon.inv.unary.sequence.SeqIndexIntNonEqual:format_ioa()Ljava.lang.String;
daikon.test.FormatTestCase:getArity(Ljava.lang.Class;)I
utilMDE.FuzzyFloat:gt(DD)Z
daikon.VarInfo:new_ppt()V
utilMDE.Assert:assertTrue(Z)V
daikon.test.FormatTestCase:getAddModified(Ljava.lang.Class;)Ljava.lang.reflect.Method;
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_ioa()Ljava.lang.String;
daikon.suppress.NISuppressor:NISuppressor(ILjava.lang.Class;)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_daikon()Ljava.lang.String;
daikon.VarInfo:isPrestate()Z
daikon.inv.binary.BinaryInvariant:BinaryInvariant(Ldaikon.PptSlice;)V
daikon.inv.unary.scalar.OneOfScalar:format_ioa()Ljava.lang.String;
daikon.Quantify.QuantFlags:element_wise()Ljava.util.EnumSet;
daikon.ModBitTracker:ModBitTracker(I)V
daikon.inv.binary.twoSequence.PairwiseIntGreaterThan:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.test.diff.DiffTester:printTree(Ldaikon.diff.RootNode;)Ljava.lang.String;
daikon.test.VarInfoNameDriver.QuantifyEscName:handle(Ljava.util.Map;[Ljava.lang.String;Ljava.io.PrintStream;)V
daikon.inv.binary.sequenceScalar.SequenceScalar:seqvar()Ldaikon.VarInfo;
daikon.PptName:PptName(Ljava.lang.String;)V
daikon.inv.binary.twoScalar.NumericInt.Divides:instantiate_dyn(Ldaikon.PptSlice;)Ldaikon.inv.Invariant;
daikon.inv.binary.twoString.StringEqual:instantiate_ok([Ldaikon.VarInfo;)Z
daikon.inv.binary.twoSequence.PairwiseIntEqual:get_proto()Ldaikon.inv.Invariant;
daikon.inv.unary.scalar.NonModulus:get_proto()Ldaikon.inv.Invariant;
utilMDE.UtilMDE:unqualified_name(Ljava.lang.String;)Ljava.lang.String;
daikon.inv.unary.scalar.Modulus:format_using(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
utilMDE.Intern:intern(Ljava.lang.String;)Ljava.lang.String;
daikon.Quantify.Term:ioa_name()Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual:format_java_family(Ldaikon.inv.OutputFormat;)Ljava.lang.String;
daikon.inv.binary.twoSequence.PairwiseIntLessThan:format_esc()Ljava.lang.String;
daikon.VarInfo:VarInfo(Ljava.lang.String;Ldaikon.ProglangType;Ldaikon.ProglangType;Ldaikon.VarComparability;Ldaikon.VarInfoAux;)V
jtb.syntaxtree.NodeToken:NodeToken(Ljava.lang.String;IIIII)V

#matrix (1 line per test, in order of tests): { mut_index, ' ', mut_call_count, ' ' }
14 2 971 2 127 2 486 2 235 2 835 2 1149 2 1312 2 964 4 
608 2 861 2 1272 2 755 2 683 2 244 2 516 6 10 2 231 6 242 2 1112 6 
943 2 1231 6 1278 4 235 2 875 2 920 6 910 6 1312 2 136 6 973 2 890 4 596 2 770 2 
1191 8 793 2 1004 10 1121 6 833 2 235 6 758 2 427 8 859 4 262 10 1008 16 562 8 817 12 1205 4 519 29 801 10 1062 6 1079 4 1045 8 972 16 1048 10 1259 16 1312 6 955 10 956 2 1184 2 615 2 531 2 1064 4 1291 26 
1251 6 197 4 
1331 2 
843 2 318 2 792 2 134 2 905 2 979 2 84 2 91 4 104 2 625 2 568 2 835 2 386 2 196 2 1184 2 59 2 223 2 851 2 550 2 618 2 465 2 
1004 6 375 4 1121 4 235 4 1170 4 376 4 427 18 262 16 1008 28 38 2 965 2 1129 6 817 22 519 49 801 16 1062 4 1045 6 1333 8 972 28 1048 16 1259 28 1312 4 955 16 783 8 956 2 1086 6 892 4 299 2 728 6 1187 6 422 4 1064 2 88 4 448 4 212 2 1291 44 
557 2 625 2 670 2 
705 10 285 2 1310 2 1026 2 1236 2 796 2 1196 2 19 2 210 2 539 2 198 2 1075 22 1059 2 660 2 
1004 4 733 2 177 2 35 2 427 2 262 2 1008 2 627 2 817 2 267 2 519 6 801 2 1062 2 972 2 1048 2 1259 2 955 2 278 2 530 2 349 2 1064 2 999 2 1291 4 
972 8 1048 4 1170 4 859 2 1259 8 262 4 955 4 1008 8 1086 6 817 4 892 4 1216 2 1187 6 1092 2 519 16 801 4 1291 12 
233 4 893 4 792 2 110 2 557 6 508 10 811 2 918 4 91 4 1090 4 625 8 1007 2 37 14 736 2 60 2 1011 2 945 4 120 4 357 2 670 2 991 4 203 2 950 2 520 2 764 2 382 2 822 2 70 62 567 4 742 2 186 2 1239 2 273 10 678 2 720 2 366 2 23 4 548 4 550 4 532 4 
1331 2 1293 2 812 2 113 2 776 2 288 2 108 2 722 2 489 2 1303 2 
1001 2 90 2 0 2 510 2 1 2 428 1 1070 2 264 2 1010 2 777 2 863 2 778 2 11 2 433 4 434 6 932 2 270 32 934 16 184 2 867 2 18 2 526 4 188 2 936 1 441 4 367 1 698 2 369 3 1165 2 869 1 534 2 535 2 373 2 111 2 794 1 622 3 624 2 290 2 116 2 1023 2 540 2 946 2 1024 6 947 6 1177 1 881 2 631 2 541 1 123 2 1025 4 802 2 803 2 1094 3 884 2 1180 2 885 2 804 24 1285 2 1099 2 127 2 889 6 724 2 298 4 1033 8 464 2 1188 2 638 2 639 2 133 2 1035 2 303 2 53 1 305 2 558 2 731 1 1039 2 734 8 738 2 561 2 137 2 312 2 901 32 1104 3 217 2 565 2 471 2 399 3 317 2 1306 2 68 2 1311 2 324 1 71 2 474 2 1312 32 745 2 651 2 403 2 476 2 1211 2 747 2 652 2 480 2 573 3 749 3 1115 3 748 2 655 2 1315 1 229 2 405 2 332 16 1218 2 76 1 336 4 1118 3 1318 24 832 16 982 2 235 34 1122 3 1321 2 581 2 666 2 79 2 238 2 1228 8 584 1 340 2 1326 2 158 4 913 2 492 2 341 4 161 2 1234 5 590 2 1235 1 497 2 1139 3 498 16 1337 2 247 1 767 12 504 3 679 2 347 1 
450 2 
939 2 235 4 308 2 
359 2 
54 4 773 2 1006 2 351 4 732 16 425 12 686 6 5 12 1197 6 967 4 1298 2 469 8 819 2 98 12 398 8 316 4 15 2 694 12 320 8 696 2 695 10 780 12 17 8 401 12 362 2 20 6 1212 2 1114 6 572 12 27 2 1264 4 1087 12 1053 2 1217 16 1168 2 1089 12 909 2 485 2 334 2 1267 2 873 10 983 2 874 38 1123 4 1173 2 239 4 988 8 798 4 1132 2 456 2 990 2 1093 8 121 38 712 2 633 4 243 2 461 38 1098 2 417 12 388 2 958 4 595 12 300 6 211 2 173 2 729 6 1338 8 1190 4 466 2 
1214 2 95 1 846 2 207 2 
51 2 207 2 
284 2 473 2 455 2 625 2 1205 2 207 2 490 2 
58 2 473 2 207 2 
473 2 370 2 207 2 
454 2 1214 2 385 2 
473 2 207 2 
1126 2 385 2 
207 2 751 2 
1214 2 1047 2 385 2 
1214 2 356 2 52 2 
1213 2 1214 2 500 2 
816 2 295 2 1214 2 
1214 2 649 2 311 2 
385 2 834 2 
674 2 207 2 
356 2 157 2 
545 2 500 2 
816 2 50 2 
938 2 649 2 
919 2 385 2 
219 2 649 2 
816 2 437 2 
389 2 500 2 
356 2 657 2 
713 2 1214 2 1047 2 385 2 
713 2 1078 2 1214 2 1047 2 385 2 
1214 2 1017 2 385 2 
1214 2 385 2 1125 2 
83 2 641 2 109 2 1088 2 
284 2 625 2 379 2 708 2 
284 2 625 2 1255 2 379 2 490 2 708 2 
284 2 473 2 625 2 1205 2 250 2 207 2 
1302 2 763 2 
896 2 284 2 625 2 1205 2 
816 2 593 2 
1074 2 649 2 
102 2 356 2 
1175 2 500 2 
952 2 649 2 500 2 
649 2 500 2 1230 2 
924 2 500 2 649 2 
1299 2 500 2 649 2 
284 2 625 2 1194 2 544 6 105 2 391 2 372 6 330 2 
92 2 385 2 
66 2 1065 2 611 4 1120 2 183 2 921 2 221 2 898 2 888 2 6 4 216 2 1075 6 87 2 656 2 820 2 552 2 961 2 381 2 
1214 2 162 2 
679 2 
1001 2 0 2 510 2 607 2 1070 2 264 2 1010 4 96 2 927 2 433 4 434 6 270 6 184 2 18 2 526 4 441 4 21 2 1165 2 534 2 872 4 540 2 946 2 1024 4 947 2 881 6 1025 2 1180 2 885 2 1286 2 127 2 889 2 724 2 1033 2 727 2 638 2 551 2 639 2 303 2 53 2 215 2 738 2 901 4 471 2 65 2 68 2 1311 2 1312 26 745 2 403 2 1211 2 476 2 481 2 229 2 336 2 832 6 235 26 1321 2 79 2 1224 2 1227 2 584 2 762 2 1326 2 340 2 158 4 673 2 492 2 341 2 161 2 495 2 164 4 1337 2 245 2 767 8 
1001 2 0 2 510 2 1070 2 264 2 1010 4 96 2 927 2 433 4 434 6 929 2 932 2 270 6 184 2 18 2 526 4 441 4 1165 2 534 2 872 4 624 2 540 2 946 2 1024 6 947 2 881 6 1025 2 1180 2 885 2 718 2 1286 2 127 2 889 2 724 2 1101 2 1033 2 727 2 638 2 551 2 639 2 303 2 53 2 215 2 738 2 312 2 901 4 471 2 65 2 68 2 1311 2 1312 26 745 2 403 2 1211 2 476 2 481 2 229 2 336 2 832 6 235 26 1321 2 79 2 1224 2 1227 2 584 2 762 2 1326 2 340 2 158 4 673 2 492 2 341 2 161 2 164 4 1337 2 245 2 767 8 
125 2 
122 2 647 2 
1292 8 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 6 1041 2 10 4 180 2 518 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 6 1312 6 441 2 1016 2 483 4 231 6 280 2 28 2 534 2 757 2 981 2 235 12 1321 2 626 10 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 244 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 8 303 2 
1292 8 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 6 1041 2 10 4 518 2 566 2 434 4 933 2 184 2 906 2 325 4 1209 4 439 2 1112 8 1312 6 441 2 1016 2 483 4 231 8 280 2 28 2 534 2 755 2 757 2 981 2 235 12 1321 2 626 10 488 2 408 2 377 2 1225 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 1060 2 542 2 496 2 244 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 8 303 2 
255 2 496 2 644 2 488 2 1112 2 344 2 408 2 547 2 861 2 515 2 505 4 1323 2 139 2 240 2 1032 4 516 2 10 2 682 2 
1292 4 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 4 1041 2 10 4 180 2 518 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 6 1312 6 441 2 1016 2 483 4 231 6 280 2 28 2 534 2 755 2 757 2 981 2 235 12 1321 2 626 6 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 4 303 2 
1292 4 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 6 1041 2 10 4 180 2 518 2 608 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 4 1312 6 441 2 1016 2 483 4 231 6 280 2 28 2 534 2 757 2 981 2 235 12 1321 2 626 6 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 4 303 2 
1292 8 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 6 1041 2 10 4 180 2 518 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 6 1312 6 441 2 1016 2 483 4 231 6 280 2 28 2 534 2 757 2 981 2 235 12 1321 2 626 6 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 244 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 4 303 2 
1292 8 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 8 1041 2 10 4 180 2 518 2 608 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 6 1312 6 441 2 1016 2 483 4 231 8 280 2 28 2 534 2 757 2 981 2 235 12 1321 2 626 10 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 244 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 8 303 2 
1292 8 255 2 683 2 644 4 559 2 738 2 861 4 515 2 139 2 516 6 1041 2 10 4 180 2 518 2 566 2 434 4 933 2 184 2 906 2 325 4 439 2 1112 6 1312 6 441 2 1016 2 483 4 231 6 280 2 28 2 534 2 757 2 981 2 235 12 1321 2 626 10 488 2 408 2 377 2 1225 2 987 2 838 2 1323 2 240 2 411 2 1326 2 340 2 43 2 158 2 496 2 244 2 344 2 165 4 547 2 957 2 346 2 505 4 1032 4 682 2 555 8 303 2 
1001 2 683 4 255 2 350 4 510 2 922 2 861 4 264 2 515 2 927 2 516 8 10 4 1256 2 518 2 180 2 433 4 608 4 359 2 434 6 522 2 270 8 932 2 933 2 184 2 438 2 439 2 782 2 106 2 526 4 441 4 1016 2 786 4 1165 2 280 2 28 2 534 2 450 2 33 2 377 2 946 2 540 2 947 2 1024 6 881 6 43 2 44 2 1025 2 1097 2 885 2 887 2 547 2 1287 2 1288 2 889 2 127 2 957 2 128 2 724 2 960 2 1033 2 1032 4 549 2 551 2 638 2 639 2 303 2 1292 2 644 4 308 2 1294 2 559 2 1040 2 738 2 312 2 901 2 139 2 1105 2 566 2 400 2 1311 2 906 2 325 8 1112 4 1312 20 403 2 908 2 483 6 231 12 576 2 662 2 978 2 756 2 336 2 981 2 832 6 235 32 1321 2 488 2 408 2 1224 2 79 2 760 2 1225 2 838 2 409 2 669 2 1323 2 240 2 411 2 762 2 340 2 1326 2 158 4 492 4 341 2 161 2 1137 2 765 2 496 2 164 4 344 2 1337 2 165 4 767 4 346 2 505 4 597 2 682 2 
1001 2 683 4 255 2 350 4 510 2 922 2 861 4 264 2 515 2 927 2 516 8 10 4 1256 2 518 2 180 2 433 4 359 2 434 6 522 2 270 8 932 2 933 2 184 2 438 2 439 2 782 2 106 2 526 4 441 4 1016 2 786 4 1165 2 280 2 28 2 534 2 450 2 33 2 377 2 946 2 540 2 947 2 1024 6 881 6 43 2 44 2 1025 4 1097 2 885 2 887 2 547 2 1287 2 1288 2 889 2 127 2 957 2 128 2 724 2 960 2 1033 2 1032 4 549 2 551 2 638 2 639 2 303 2 1292 6 644 4 308 2 1294 2 559 2 1040 2 738 2 312 2 901 2 139 2 1105 2 566 2 400 2 1311 2 906 2 325 8 1112 8 1312 20 403 2 908 2 483 6 231 12 576 2 662 2 978 2 756 2 336 4 981 2 832 6 235 32 1321 2 488 2 408 2 1224 2 79 2 760 2 1225 2 838 2 409 2 669 2 1323 2 240 2 411 2 762 2 340 2 1326 2 158 4 492 4 341 4 161 2 1137 2 765 2 496 2 244 4 164 4 344 2 1337 2 165 4 767 6 346 2 505 4 597 2 682 2 
1001 2 683 4 255 2 350 4 510 2 922 2 861 4 264 2 515 2 927 2 516 8 10 4 1256 2 518 2 180 2 433 4 359 2 434 6 522 2 270 8 932 2 933 2 184 2 438 2 439 2 782 2 106 2 526 4 441 4 1016 2 786 4 1165 2 280 2 28 2 534 2 450 2 33 2 626 4 377 2 946 2 540 2 947 2 1024 6 881 6 43 2 44 2 1025 4 1097 2 885 2 887 2 547 2 1287 2 1288 2 889 2 127 2 957 2 128 2 724 2 960 2 1033 2 1032 4 549 2 551 2 638 2 639 2 555 4 303 2 1292 6 644 4 308 2 1294 2 559 2 1040 2 738 2 312 2 901 2 139 2 1105 2 566 2 400 2 1311 2 906 2 325 8 1112 8 1312 20 403 2 908 2 483 6 231 12 576 2 662 2 978 2 756 2 336 4 981 2 832 6 235 32 1321 2 488 2 408 2 1224 2 79 2 760 2 1225 2 838 2 409 2 669 2 1323 2 240 2 411 2 762 2 340 2 1326 2 158 4 492 4 341 4 161 2 1137 2 765 2 496 2 244 4 164 4 344 2 165 4 1337 2 767 6 346 2 505 4 597 2 682 2 
1001 2 683 4 255 2 350 4 510 2 922 2 861 4 264 2 515 2 516 10 927 2 10 4 1256 2 518 2 180 2 433 4 608 2 359 2 434 6 522 2 270 12 932 2 933 2 184 2 438 2 439 2 782 2 106 2 526 4 441 4 1016 2 786 4 24 2 1165 2 280 2 28 2 534 2 450 2 620 2 33 2 626 4 377 2 946 2 540 2 947 4 1024 6 881 8 43 2 44 2 1025 4 1097 2 885 2 887 2 547 2 1287 2 1288 2 889 4 127 2 957 2 128 2 724 2 960 2 1033 2 1032 4 549 2 551 2 638 2 639 2 392 2 555 4 303 2 1292 6 644 4 308 2 1294 2 559 2 1040 2 738 2 312 2 1297 2 901 4 139 2 1105 2 566 2 400 2 1311 2 906 2 325 8 1112 10 1312 18 403 2 908 2 654 2 1215 2 483 6 231 16 576 2 662 2 755 2 978 2 756 2 336 4 981 2 832 8 235 30 1321 2 488 2 408 2 1224 2 79 2 1225 2 838 2 409 2 669 2 1323 2 240 2 411 2 762 2 340 2 1326 2 158 4 492 2 341 4 161 2 1137 2 765 2 496 2 244 4 164 6 344 2 165 4 1337 2 767 6 346 2 505 4 682 2 
1292 6 683 2 255 2 235 4 626 4 488 2 377 2 861 4 1225 2 838 2 515 2 139 2 516 6 10 4 518 2 180 2 566 2 933 2 496 2 244 2 906 2 325 2 439 2 1112 6 344 2 165 2 547 2 346 2 957 2 505 2 1032 2 483 2 231 4 28 2 555 4 
1001 2 683 2 255 2 510 2 861 4 264 2 515 2 516 6 927 2 10 4 518 2 180 2 433 4 434 6 932 2 270 8 933 2 184 2 439 2 526 4 1261 2 441 4 1165 2 280 2 28 2 534 2 537 3 626 2 377 2 540 2 946 2 1024 6 947 3 881 6 1280 2 884 2 885 2 547 2 127 2 889 3 957 2 724 2 1032 2 638 2 303 2 1292 6 738 2 312 2 901 3 139 2 566 2 1306 2 1311 2 906 2 325 2 1112 6 1312 24 144 2 403 2 483 2 405 2 231 4 832 6 235 28 1321 2 488 2 79 2 1224 2 760 2 1225 2 838 2 762 2 340 2 1326 2 158 4 492 4 1330 2 992 2 161 2 496 2 244 2 164 4 344 2 165 2 1337 2 346 2 505 2 679 2 597 2 
857 2 439 2 518 2 
857 2 439 2 518 2 
1001 2 255 4 683 4 684 2 350 2 510 2 857 2 688 2 861 4 264 2 927 2 516 12 10 4 1256 2 518 6 433 4 608 4 434 6 932 2 270 2 184 2 438 2 439 4 1013 2 526 4 527 2 441 4 1016 2 785 2 1165 2 28 2 534 2 32 2 626 6 377 2 540 2 946 2 118 2 1024 6 881 2 43 2 44 2 1025 4 124 2 547 2 127 2 724 2 130 2 1032 2 638 2 639 4 303 2 555 4 1292 6 644 4 559 4 738 2 312 2 901 2 902 2 1041 2 141 4 65 4 1311 2 325 4 1112 12 1312 16 1050 2 403 2 483 4 231 16 755 4 336 4 335 2 832 2 235 24 1321 2 237 2 79 2 1224 2 409 2 81 2 240 2 411 2 762 6 1326 2 340 2 158 4 915 4 492 4 159 2 1232 2 341 4 161 2 496 2 244 4 848 2 1337 2 165 2 767 4 505 2 597 2 854 2 682 2 
124 2 306 2 235 4 1271 2 917 2 1312 2 237 2 408 2 1050 2 805 2 688 2 443 2 409 2 647 2 597 2 340 2 492 2 
1001 2 255 4 683 4 602 2 684 2 350 2 510 2 857 2 688 2 861 4 264 2 690 2 927 2 516 12 10 4 1256 2 518 6 433 4 608 4 434 6 16 2 932 2 270 2 184 2 438 2 439 4 526 4 527 2 441 4 1016 4 1165 2 28 2 534 2 32 2 626 6 377 2 540 2 946 2 1024 6 881 2 43 2 44 2 1025 4 124 2 547 2 127 2 724 2 130 4 1032 2 638 2 639 4 303 2 555 4 1292 6 644 4 559 4 738 2 312 2 901 4 902 2 1041 2 141 4 65 4 741 2 1311 2 569 2 325 4 1112 12 1312 16 403 2 483 4 231 16 755 4 336 4 335 2 757 2 832 2 235 24 1321 2 237 2 79 2 1224 2 409 2 81 2 240 2 411 2 762 6 1326 2 340 2 158 4 915 4 492 2 159 2 341 4 161 2 496 2 244 4 848 2 165 2 1337 2 767 4 505 2 854 2 682 2 
1001 2 255 4 683 4 684 2 350 2 510 2 857 2 688 2 861 4 264 2 927 2 516 12 10 4 1256 2 518 6 433 4 358 2 608 4 434 6 932 2 270 2 184 2 438 2 439 4 526 4 527 2 441 4 1016 4 1165 2 617 2 28 2 534 2 32 2 626 6 377 2 1174 2 540 2 946 2 1024 6 881 2 43 2 44 2 1025 4 124 2 547 2 127 2 724 2 130 2 1032 2 638 2 639 4 303 2 555 4 1292 6 1102 2 644 4 559 4 899 2 738 2 312 2 901 2 902 2 1041 2 141 4 65 4 1311 2 325 4 1112 12 1312 16 1050 2 403 2 483 4 231 16 755 4 336 4 335 2 757 2 832 2 235 24 1321 2 237 2 79 2 1224 2 409 2 81 2 240 2 411 2 762 6 1326 2 340 2 158 4 915 4 492 4 159 2 341 4 161 2 496 2 244 4 848 2 1337 2 165 2 767 4 505 2 597 2 854 2 682 2 
685 2 687 2 3 16 1 2 2 2 7 2 9 2 11 2 12 2 692 2 693 2 698 2 697 66 23 2 24 2 700 8 25 2 26 2 702 32 703 2 29 2 704 3 30 2 36 2 706 66 707 22 709 2 39 2 40 2 41 8 710 4 711 4 45 2 715 2 716 3 48 3 717 2 719 6 49 8 721 2 723 2 725 3 724 8 726 13 728 6 727 2 53 3 55 2 731 1 734 14 56 2 735 3 57 2 737 2 738 2 61 3 62 16 63 12 64 68 67 10 69 14 71 2 72 64 743 2 744 2 749 2 752 2 753 2 77 8 78 2 759 2 79 2 80 2 762 2 765 4 766 2 85 2 767 252 86 2 768 4 769 2 88 4 89 2 771 1 90 2 775 11 93 2 94 2 96 2 778 2 779 2 99 2 101 2 103 32 781 8 782 2 106 2 784 2 787 2 788 2 789 2 790 4 791 2 111 2 112 34 114 2 116 2 117 158 119 66 800 3 801 6 123 2 802 2 804 15 126 3 806 2 807 2 127 8 808 2 809 2 128 2 131 1 132 198 133 2 810 2 135 4 814 2 815 8 817 10 138 1 140 2 818 2 821 2 142 2 143 2 144 2 824 4 145 2 146 2 826 2 827 2 828 68 830 2 148 18 832 26 150 2 151 22 836 42 837 4 154 2 839 4 840 16 155 2 156 2 841 22 158 6 844 34 845 30 163 2 849 2 164 12 167 18 169 2 168 24 850 4 171 66 853 2 174 2 855 2 856 2 175 264 176 2 858 4 860 2 178 2 179 24 862 2 864 20 866 4 182 8 184 2 867 2 185 2 187 3 868 7 188 2 189 2 191 22 869 12 193 2 194 2 871 6 195 32 876 2 878 16 879 2 880 32 200 4 881 14 882 2 201 2 202 2 204 2 883 10 206 2 885 2 208 2 889 46 891 2 893 2 895 10 894 2 213 2 214 2 215 2 900 2 901 99 217 2 218 2 904 2 222 2 224 2 226 2 227 3 228 32 230 2 235 139 236 3 911 2 238 13 912 2 241 34 913 2 916 2 245 2 247 14 248 2 249 2 251 4 252 2 253 2 254 2 256 2 257 2 258 2 260 2 259 2 918 2 922 2 923 3 261 4 262 6 263 2 265 2 926 2 268 14 931 2 270 114 932 2 934 48 935 2 272 34 271 2 275 24 937 66 277 18 279 1 940 2 941 2 281 4 942 66 282 2 283 3 944 2 286 66 290 2 292 2 946 2 947 16 948 34 293 2 949 3 294 2 955 6 954 2 956 2 296 2 297 2 298 30 959 4 960 2 299 4 301 8 302 1 304 3 303 2 305 2 962 2 310 2 965 2 312 2 966 2 314 2 315 2 969 2 970 2 317 2 319 2 322 4 321 2 972 12 323 3 324 1 326 2 974 30 975 2 976 2 328 2 331 2 329 8 332 14 333 66 980 2 337 4 982 2 338 2 985 2 984 2 986 2 339 3 989 2 340 2 991 2 342 2 993 2 994 2 995 2 343 2 997 2 345 2 998 2 348 2 1000 2 1003 2 1002 2 1008 12 1009 2 353 2 355 2 360 2 363 2 365 3 1015 3 367 1 369 2 1018 1 373 2 374 2 1019 2 1020 2 1021 2 378 12 1022 3 1023 2 1024 4 380 2 1027 2 1028 32 1029 2 384 2 1031 10 1030 30 387 2 1033 74 390 10 1034 34 1035 13 392 4 393 2 1036 4 1037 18 394 48 395 2 396 3 1042 2 1044 2 1045 6 1046 2 1048 6 1049 10 402 2 403 2 1051 12 406 62 1055 2 407 4 1057 2 410 2 1058 2 412 2 1061 2 414 2 415 2 416 2 418 2 420 32 421 2 1063 2 1066 2 1067 4 427 6 426 2 1068 2 1069 2 429 2 1073 108 1072 2 1071 2 431 32 430 2 1076 28 1077 60 432 4 433 2 434 8 1080 2 1081 2 436 68 1082 2 1083 2 1084 2 440 4 1085 2 441 6 442 306 444 2 445 2 447 2 449 2 451 2 1090 2 453 28 457 2 458 2 459 20 460 4 1094 2 1095 20 1096 2 462 2 463 2 1100 2 464 2 467 6 468 2 1104 2 1106 32 1110 2 474 15 475 2 479 22 478 2 1115 2 481 2 1116 2 482 2 1117 2 1118 3 1119 2 1121 4 1122 2 487 2 1127 3 1128 32 1131 14 1133 2 1134 2 1136 2 491 2 492 6 493 2 494 2 497 2 1138 2 1139 2 498 156 1140 2 1141 2 501 2 503 2 1142 2 504 3 1143 2 506 1 1144 7 1145 34 507 98 1147 2 509 34 510 2 1151 32 512 4 1152 1 1153 2 514 2 1156 2 1155 66 517 2 519 24 1159 2 1160 4 521 2 1161 2 1162 2 525 2 526 2 1163 132 1164 3 1165 2 1169 2 534 2 533 2 535 2 536 66 1170 4 537 2 538 1 1171 2 1172 28 540 2 1176 3 1177 1 543 22 1178 2 1179 2 546 2 1182 2 1183 2 1185 32 1186 4 1187 6 1188 2 551 46 558 2 1193 2 561 2 563 2 1198 2 1201 18 1200 2 564 2 1203 2 565 2 1206 5 1208 2 1210 2 571 2 1215 2 574 2 575 2 578 2 579 4 580 32 581 2 1222 2 582 66 1223 30 1224 2 583 2 1226 1 1227 4 1228 14 584 2 1229 2 585 2 586 22 587 2 589 2 588 2 1233 2 591 2 1237 4 1238 2 592 2 1240 102 1241 3 1243 2 1245 2 597 2 598 2 599 2 1247 24 1249 2 1248 2 600 2 601 2 1250 142 603 2 605 3 604 2 606 2 1253 34 609 2 610 1 1257 2 1259 12 613 66 1260 2 1261 2 614 4 1263 7 616 2 620 2 621 14 622 2 623 2 1269 2 1270 2 1274 2 1276 2 628 2 629 2 1277 2 630 2 631 2 632 6 1279 2 634 14 1280 2 1281 2 1282 3 635 2 636 4 1284 66 1285 2 1286 2 1288 2 1289 14 1290 2 638 2 639 18 1291 18 640 2 642 2 643 3 645 8 1296 2 1297 2 646 2 1300 2 648 2 1304 1 1305 2 1307 3 1309 2 1308 2 650 2 1311 2 1312 86 1313 2 651 2 1314 2 654 2 1315 1 658 2 659 3 1316 2 663 2 1317 142 664 2 1318 53 1319 2 665 2 1320 10 1321 2 666 2 667 2 668 4 1322 2 1325 30 1327 2 1326 2 1328 2 1329 10 673 78 672 2 1330 2 676 3 677 16 1332 4 1333 8 1334 94 1335 2 1336 2 680 2 681 2 
895 2 213 2 832 2 235 2 901 2 947 2 396 2 881 2 67 2 270 2 435 2 1281 2 885 2 995 2 164 2 935 2 1312 2 1031 4 889 2 418 2 444 2 1243 2 551 6 703 2 
895 2 213 2 832 2 235 2 901 2 947 2 396 2 881 2 67 2 270 2 435 2 1281 2 885 2 995 2 164 2 935 2 1312 2 1031 4 889 2 418 2 444 2 1243 2 551 6 703 2 
895 2 213 2 832 2 235 2 901 2 947 2 396 2 881 2 67 2 270 2 435 2 1281 2 885 2 995 2 164 2 935 2 1312 2 1031 4 889 2 418 2 444 2 1243 2 551 6 703 2 
1121 2 307 3 235 10 287 2 262 2 1008 2 179 3 901 3 266 2 841 4 63 2 397 2 519 5 801 2 1135 2 1108 2 543 4 270 2 1045 4 934 2 972 2 1048 2 885 2 1283 2 498 2 1240 6 1259 2 1312 4 955 2 168 3 889 3 191 4 418 2 479 4 170 2 907 2 371 4 147 2 1291 4 790 2 
307 2 427 2 262 2 1008 2 179 2 817 2 901 2 266 2 63 2 519 4 397 2 1108 2 270 2 934 2 1045 4 972 2 1048 2 1259 2 1312 4 191 4 907 2 479 4 371 4 790 2 147 2 1121 2 235 10 287 2 841 4 1135 2 801 2 543 4 885 2 1283 2 498 2 1240 6 955 2 956 2 168 2 889 2 418 2 170 2 1291 4 
307 2 427 2 262 2 1008 2 179 2 817 2 901 2 266 2 63 2 519 4 397 2 1108 2 270 2 934 2 1045 4 972 2 1048 2 1259 2 1312 4 191 4 907 2 479 4 371 4 790 2 147 2 1121 2 235 10 287 2 841 4 1135 2 801 2 543 4 885 2 1283 2 498 2 1240 6 955 2 956 2 168 2 889 2 418 2 170 2 1291 4 
307 2 427 2 262 2 1008 2 179 2 817 2 901 2 266 2 63 2 519 4 397 2 1108 2 270 2 934 2 1045 4 972 2 1048 2 1259 2 1312 4 191 4 907 2 479 4 371 4 790 2 147 2 1121 2 235 10 287 2 841 4 1135 2 801 2 543 4 885 2 1283 2 498 2 1240 6 955 2 956 2 168 2 889 2 418 2 170 2 1291 4 
307 2 427 4 262 2 1008 2 179 2 817 4 901 2 266 2 63 2 519 4 397 2 1108 2 270 2 934 2 1045 4 972 2 1048 2 1259 2 1312 4 191 4 907 2 479 4 371 4 790 2 147 2 1121 2 235 10 287 2 841 4 1135 2 801 2 543 4 885 2 1283 2 498 2 1240 6 955 2 956 4 168 2 889 2 418 2 170 2 1291 4 
1005 2 47 2 1246 2 636 2 524 2 951 2 
675 2 190 2 953 2 994 2 1150 2 673 2 951 2 
556 2 754 2 1265 1 772 2 352 2 1148 2 235 10 1321 2 1056 2 1294 2 1124 2 153 2 1199 2 1154 2 470 2 203 1 520 1 1109 1 472 2 1207 2 361 2 1312 8 1242 2 276 2 528 2 554 1 
1121 2 235 6 1170 2 427 2 262 6 1008 6 512 2 1276 2 817 3 968 2 969 2 519 16 801 6 1044 2 1333 2 1045 4 972 6 1048 6 886 2 996 2 1259 6 1312 6 955 6 956 2 248 2 728 4 1187 4 88 2 577 2 1291 12 
543 2 523 7 1111 2 235 1 1258 2 1312 1 261 2 925 4 313 2 479 2 22 2 653 2 841 2 842 2 1167 2 730 2 423 1 914 2 
543 2 523 6 1111 2 1258 2 261 4 925 4 313 2 479 2 22 2 653 4 841 2 842 2 730 2 1167 2 914 4 
543 2 523 10 1111 6 235 1 1258 2 1312 1 261 8 925 4 313 2 479 2 22 2 653 8 841 2 842 2 730 8 1167 2 423 1 914 8 
313 2 925 2 543 2 523 2 22 2 479 2 653 2 841 2 1258 2 842 2 261 2 1167 2 914 2 
1103 2 897 2 4 2 312 2 903 1 433 2 181 2 932 2 1312 8 823 2 526 2 1113 1 1165 2 701 2 75 2 31 2 831 1 235 8 115 2 540 2 1024 4 847 1 129 2 419 1 637 1 638 2 553 1 
1192 2 424 2 1038 2 309 4 1295 2 560 2 813 2 4 2 963 2 511 2 312 1 739 2 1252 2 8 2 354 2 1204 2 1301 2 1107 2 865 2 1043 2 97 2 433 20 691 2 269 2 13 2 928 2 932 1 100 2 274 2 612 2 1312 44 570 2 364 4 1014 2 823 2 526 20 746 4 1262 2 225 2 327 2 368 2 699 4 825 6 404 2 529 2 1165 2 446 2 701 38 870 4 1052 2 1054 2 619 2 977 2 75 2 829 2 1266 2 1219 2 149 6 1220 2 1268 2 234 2 34 2 452 4 235 46 1221 2 152 2 115 2 1273 2 291 2 1275 2 797 2 761 2 1130 2 42 4 540 2 1024 43 799 2 413 2 46 2 383 2 499 2 209 6 166 2 246 2 502 4 594 2 1244 2 852 2 419 2 172 2 637 2 638 2 
774 2 4 2 813 2 312 4 689 2 740 2 1254 4 691 2 433 8 1012 2 932 4 220 2 570 2 1312 26 364 2 107 2 823 2 526 10 746 2 73 2 225 2 477 4 192 2 404 2 1165 2 750 6 701 14 870 2 74 2 232 4 484 2 661 2 75 2 1266 2 1219 2 149 6 33 2 234 2 34 2 235 28 795 2 115 2 291 2 1091 2 877 6 540 2 1324 2 1024 20 799 2 671 2 82 2 160 2 205 2 1181 4 166 2 502 2 637 2 1189 2 638 2 
1146 2 1192 2 1103 10 897 2 1295 4 4 2 1195 2 513 4 312 10 1202 2 354 4 1157 2 903 2 97 2 691 2 433 14 930 2 181 2 100 2 932 10 274 2 612 2 570 2 1312 26 364 6 823 2 526 14 746 2 225 2 1165 2 701 14 1166 2 870 6 75 2 31 10 1266 2 1219 2 831 2 149 8 1220 2 234 2 235 28 115 2 289 2 199 4 540 2 1024 38 413 4 714 2 383 2 847 6 209 6 166 2 502 6 594 4 1244 4 129 2 419 2 172 4 637 2 638 2 553 2 
1158 2 
